																/* VALORANT V9.03*/
																/* QQ 1787174068  */
																/* QQ 2278616922*/
// ScriptStruct  NetCore.FastArraySerializerItem
// Struct Size::0x000C
struct FFastArraySerializerItem
{
    int32_t                                       ReplicationID;                                                // 0x0000(0x0004)
    int32_t                                       ReplicationKey;                                               // 0x0004(0x0004)
    int32_t                                       MostRecentArrayReplicationKey;                                // 0x0008(0x0004)
};


// ScriptStruct  CoreUObject.Default
// Struct Size::0x0000
struct FDefault
{
};


// ScriptStruct  GameplayAbilities.ActiveGameplayEffect
// Struct Size::0x0378
struct FActiveGameplayEffect : public FFastArraySerializerItem
{
    char                                          pa_000C[0x000C]                                               // 0x000C(0x000C)
    FGameplayEffectSpec                           Spec;                                                         // 0x0018(0x0298)
    FPredictionKey                                PredictionKey;                                                // 0x02B0(0x0018)
    float                                         StartServerWorldTime;                                         // 0x02C8(0x0004)
    float                                         CachedStartServerWorldTime;                                   // 0x02CC(0x0004)
    float                                         StartWorldTime;                                               // 0x02D0(0x0004)
    float                                         AdditionalDuration;                                           // 0x02D4(0x0004)
    float                                         ShowingAdditionalDuration;                                    // 0x02D8(0x0004)
    float                                         CachedAdditionalDuration;                                     // 0x02DC(0x0004)
    bool                                          bIsInhibited;                                                 // 0x02E0(0x0001)
    char                                          pa_02E1[0x0097]                                               // 0x02E1(0x0097)
};


// ScriptStruct  GameplayAbilities.PredictionKey
// Struct Size::0x0018
struct FPredictionKey
{
    UPackageMap*                                  PredictiveConnection;                                         // 0x0000(0x0008)
    int16_t                                       Current;                                                      // 0x0008(0x0002)
    int16_t                                       Base;                                                         // 0x000A(0x0002)
    bool                                          bIsStale;                                                     // 0x000C(0x0001)
    bool                                          bIsServerInitiated;                                           // 0x000D(0x0001)
    char                                          pa_000E[0x000A]                                               // 0x000E(0x000A)
};


// ScriptStruct  CoreUObject.ARFilter
// Struct Size::0x0150
struct FARFilter
{
    TArray<FName>                                 PackageNames;                                                 // 0x0000(0x0010)
    TArray<FName>                                 PackagePaths;                                                 // 0x0010(0x0010)
    TArray<FSoftObjectPath>                       SoftObjectPaths;                                              // 0x0020(0x0010)
    TArray<FName>                                 ClassNames;                                                   // 0x0030(0x0010)
    TArray<FTopLevelAssetPath>                    ClassPaths;                                                   // 0x0040(0x0010)
    char                                          pa_0050[0x0050]                                               // 0x0050(0x0050)
    TSet<FName>                                   RecursiveClassesExclusionSet;                                 // 0x00A0(0x0050)
    TSet<FTopLevelAssetPath>                      RecursiveClassPathsExclusionSet;                              // 0x00F0(0x0050)
    bool                                          bRecursivePaths;                                              // 0x0140(0x0001)
    bool                                          bRecursiveClasses;                                            // 0x0141(0x0001)
    bool                                          bIncludeOnlyOnDiskAssets;                                     // 0x0142(0x0001)
    char                                          pa_0143[0x000D]                                               // 0x0143(0x000D)
};


// ScriptStruct  CoreUObject.TopLevelAssetPath
// Struct Size::0x0010
struct FTopLevelAssetPath
{
    FName                                         PackageName;                                                  // 0x0000(0x0008)
    FName                                         AssetName;                                                    // 0x0008(0x0008)
};


// ScriptStruct  CoreUObject.SoftObjectPath
// Struct Size::0x0020
struct FSoftObjectPath
{
    FTopLevelAssetPath                            AssetPath;                                                    // 0x0000(0x0010)
    FString                                       SubPathString;                                                // 0x0010(0x0010)
};


// ScriptStruct  CoreUObject.AssetBundleData
// Struct Size::0x0010
struct FAssetBundleData
{
    TArray<FAssetBundleEntry>                     Bundles;                                                      // 0x0000(0x0010)
};


// ScriptStruct  CoreUObject.AssetBundleEntry
// Struct Size::0x0018
struct FAssetBundleEntry
{
    FName                                         BundleName;                                                   // 0x0000(0x0008)
    TArray<FTopLevelAssetPath>                    AssetPaths;                                                   // 0x0008(0x0010)
};


// ScriptStruct  CoreUObject.AssetData
// Struct Size::0x0068
struct FAssetData
{
    FName                                         PackageName;                                                  // 0x0000(0x0008)
    FName                                         PackagePath;                                                  // 0x0008(0x0008)
    FName                                         AssetName;                                                    // 0x0010(0x0008)
    FName                                         AssetClass;                                                   // 0x0018(0x0008)
    FTopLevelAssetPath                            AssetClassPath;                                               // 0x0020(0x0010)
    char                                          pa_0030[0x0038]                                               // 0x0030(0x0038)
};


// ScriptStruct  CoreUObject.AutomationEvent
// Struct Size::0x0038
struct FAutomationEvent
{
    enum class EAutomationEventType               Type;                                                         // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    FString                                       Message;                                                      // 0x0008(0x0010)
    FString                                       Context;                                                      // 0x0018(0x0010)
    FGuid                                         Artifact;                                                     // 0x0028(0x0010)
};


// ScriptStruct  CoreUObject.Guid
// Struct Size::0x0010
struct FGuid
{
    int32_t                                       A;                                                            // 0x0000(0x0004)
    int32_t                                       B;                                                            // 0x0004(0x0004)
    int32_t                                       C;                                                            // 0x0008(0x0004)
    int32_t                                       D;                                                            // 0x000C(0x0004)
};


// ScriptStruct  CoreUObject.AutomationExecutionEntry
// Struct Size::0x0058
struct FAutomationExecutionEntry
{
    FAutomationEvent                              Event;                                                        // 0x0000(0x0038)
    FString                                       Filename;                                                     // 0x0038(0x0010)
    int32_t                                       LineNumber;                                                   // 0x0048(0x0004)
    char                                          pa_004C[0x0004]                                               // 0x004C(0x0004)
    FDateTime                                     Timestamp;                                                    // 0x0050(0x0008)
};


// ScriptStruct  CoreUObject.DateTime
// Struct Size::0x0008
struct FDateTime
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
};


// ScriptStruct  CoreUObject.Box
// Struct Size::0x0038
struct FBox
{
    FVector                                       Min;                                                          // 0x0000(0x0018)
    FVector                                       Max;                                                          // 0x0018(0x0018)
    char                                          IsValid;                                                      // 0x0030(0x0001)
    char                                          pa_0031[0x0007]                                               // 0x0031(0x0007)
};


// ScriptStruct  CoreUObject.Vector
// Struct Size::0x0018
struct FVector
{
    double                                        X;                                                            // 0x0000(0x0008)
    double                                        Y;                                                            // 0x0008(0x0008)
    double                                        Z;                                                            // 0x0010(0x0008)
};


// ScriptStruct  CoreUObject.Box2D
// Struct Size::0x0028
struct FBox2D
{
    FVector2D                                     Min;                                                          // 0x0000(0x0010)
    FVector2D                                     Max;                                                          // 0x0010(0x0010)
    char                                          bIsValid;                                                     // 0x0020(0x0001)
    char                                          pa_0021[0x0007]                                               // 0x0021(0x0007)
};


// ScriptStruct  CoreUObject.Vector2D
// Struct Size::0x0010
struct FVector2D
{
    double                                        X;                                                            // 0x0000(0x0008)
    double                                        Y;                                                            // 0x0008(0x0008)
};


// ScriptStruct  CoreUObject.Box2f
// Struct Size::0x0014
struct FBox2f
{
    FVector2f                                     Min;                                                          // 0x0000(0x0008)
    FVector2f                                     Max;                                                          // 0x0008(0x0008)
    char                                          bIsValid;                                                     // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
};


// ScriptStruct  CoreUObject.Vector2f
// Struct Size::0x0008
struct FVector2f
{
    float                                         X;                                                            // 0x0000(0x0004)
    float                                         Y;                                                            // 0x0004(0x0004)
};


// ScriptStruct  CoreUObject.Box3d
// Struct Size::0x0038
struct FBox3d
{
    FVector3d                                     Min;                                                          // 0x0000(0x0018)
    FVector3d                                     Max;                                                          // 0x0018(0x0018)
    char                                          IsValid;                                                      // 0x0030(0x0001)
    char                                          pa_0031[0x0007]                                               // 0x0031(0x0007)
};


// ScriptStruct  CoreUObject.Vector3d
// Struct Size::0x0018
struct FVector3d
{
    double                                        X;                                                            // 0x0000(0x0008)
    double                                        Y;                                                            // 0x0008(0x0008)
    double                                        Z;                                                            // 0x0010(0x0008)
};


// ScriptStruct  CoreUObject.Box3f
// Struct Size::0x001C
struct FBox3f
{
    FVector3f                                     Min;                                                          // 0x0000(0x000C)
    FVector3f                                     Max;                                                          // 0x000C(0x000C)
    char                                          IsValid;                                                      // 0x0018(0x0001)
    char                                          pa_0019[0x0003]                                               // 0x0019(0x0003)
};


// ScriptStruct  CoreUObject.Vector3f
// Struct Size::0x000C
struct FVector3f
{
    float                                         X;                                                            // 0x0000(0x0004)
    float                                         Y;                                                            // 0x0004(0x0004)
    float                                         Z;                                                            // 0x0008(0x0004)
};


// ScriptStruct  CoreUObject.BoxSphereBounds
// Struct Size::0x0038
struct FBoxSphereBounds
{
    FVector                                       Origin;                                                       // 0x0000(0x0018)
    FVector                                       BoxExtent;                                                    // 0x0018(0x0018)
    double                                        SphereRadius;                                                 // 0x0030(0x0008)
};


// ScriptStruct  CoreUObject.BoxSphereBounds3d
// Struct Size::0x0038
struct FBoxSphereBounds3d
{
    FVector3d                                     Origin;                                                       // 0x0000(0x0018)
    FVector3d                                     BoxExtent;                                                    // 0x0018(0x0018)
    double                                        SphereRadius;                                                 // 0x0030(0x0008)
};


// ScriptStruct  CoreUObject.BoxSphereBounds3f
// Struct Size::0x001C
struct FBoxSphereBounds3f
{
    FVector3f                                     Origin;                                                       // 0x0000(0x000C)
    FVector3f                                     BoxExtent;                                                    // 0x000C(0x000C)
    float                                         SphereRadius;                                                 // 0x0018(0x0004)
};


// ScriptStruct  CoreUObject.Color
// Struct Size::0x0004
struct FColor
{
    char                                          B;                                                            // 0x0000(0x0001)
    char                                          G;                                                            // 0x0001(0x0001)
    char                                          R;                                                            // 0x0002(0x0001)
    char                                          A;                                                            // 0x0003(0x0001)
};


// ScriptStruct  CoreUObject.DirectoryPath
// Struct Size::0x0010
struct FDirectoryPath
{
    FString                                       Path;                                                         // 0x0000(0x0010)
};


// ScriptStruct  CoreUObject.DoubleRange
// Struct Size::0x0020
struct FDoubleRange
{
    FDoubleRangeBound                             LowerBound;                                                   // 0x0000(0x0010)
    FDoubleRangeBound                             UpperBound;                                                   // 0x0010(0x0010)
};


// ScriptStruct  CoreUObject.DoubleRangeBound
// Struct Size::0x0010
struct FDoubleRangeBound
{
    enum class ERangeBoundTypes                   Type;                                                         // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    double                                        Value;                                                        // 0x0008(0x0008)
};


// ScriptStruct  CoreUObject.FallbackStruct
// Struct Size::0x0001
struct FFallbackStruct
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  CoreUObject.FilePath
// Struct Size::0x0010
struct FFilePath
{
    FString                                       FilePath;                                                     // 0x0000(0x0010)
};


// ScriptStruct  CoreUObject.FloatInterval
// Struct Size::0x0008
struct FFloatInterval
{
    float                                         Min;                                                          // 0x0000(0x0004)
    float                                         Max;                                                          // 0x0004(0x0004)
};


// ScriptStruct  CoreUObject.FloatRange
// Struct Size::0x0010
struct FFloatRange
{
    FFloatRangeBound                              LowerBound;                                                   // 0x0000(0x0008)
    FFloatRangeBound                              UpperBound;                                                   // 0x0008(0x0008)
};


// ScriptStruct  CoreUObject.FloatRangeBound
// Struct Size::0x0008
struct FFloatRangeBound
{
    enum class ERangeBoundTypes                   Type;                                                         // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         Value;                                                        // 0x0004(0x0004)
};


// ScriptStruct  CoreUObject.FrameNumber
// Struct Size::0x0004
struct FFrameNumber
{
    int32_t                                       Value;                                                        // 0x0000(0x0004)
};


// ScriptStruct  CoreUObject.FrameNumberRange
// Struct Size::0x0010
struct FFrameNumberRange
{
    FFrameNumberRangeBound                        LowerBound;                                                   // 0x0000(0x0008)
    FFrameNumberRangeBound                        UpperBound;                                                   // 0x0008(0x0008)
};


// ScriptStruct  CoreUObject.FrameNumberRangeBound
// Struct Size::0x0008
struct FFrameNumberRangeBound
{
    enum class ERangeBoundTypes                   Type;                                                         // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FFrameNumber                                  Value;                                                        // 0x0004(0x0004)
};


// ScriptStruct  CoreUObject.FrameRate
// Struct Size::0x0008
struct FFrameRate
{
    int32_t                                       Numerator;                                                    // 0x0000(0x0004)
    int32_t                                       Denominator;                                                  // 0x0004(0x0004)
};


// ScriptStruct  CoreUObject.FrameTime
// Struct Size::0x0008
struct FFrameTime
{
    FFrameNumber                                  FrameNumber;                                                  // 0x0000(0x0004)
    float                                         SubFrame;                                                     // 0x0004(0x0004)
};


// ScriptStruct  CoreUObject.InputDeviceId
// Struct Size::0x0004
struct FInputDeviceId
{
    int32_t                                       InternalId;                                                   // 0x0000(0x0004)
};


// ScriptStruct  CoreUObject.Int32Interval
// Struct Size::0x0008
struct FInt32Interval
{
    int32_t                                       Min;                                                          // 0x0000(0x0004)
    int32_t                                       Max;                                                          // 0x0004(0x0004)
};


// ScriptStruct  CoreUObject.Int32Point
// Struct Size::0x0008
struct FInt32Point
{
    int32_t                                       X;                                                            // 0x0000(0x0004)
    int32_t                                       Y;                                                            // 0x0004(0x0004)
};


// ScriptStruct  CoreUObject.Int32Range
// Struct Size::0x0010
struct FInt32Range
{
    FInt32RangeBound                              LowerBound;                                                   // 0x0000(0x0008)
    FInt32RangeBound                              UpperBound;                                                   // 0x0008(0x0008)
};


// ScriptStruct  CoreUObject.Int32RangeBound
// Struct Size::0x0008
struct FInt32RangeBound
{
    enum class ERangeBoundTypes                   Type;                                                         // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    int32_t                                       Value;                                                        // 0x0004(0x0004)
};


// ScriptStruct  CoreUObject.Int32Vector
// Struct Size::0x000C
struct FInt32Vector
{
    int32_t                                       X;                                                            // 0x0000(0x0004)
    int32_t                                       Y;                                                            // 0x0004(0x0004)
    int32_t                                       Z;                                                            // 0x0008(0x0004)
};


// ScriptStruct  CoreUObject.Int32Vector2
// Struct Size::0x0008
struct FInt32Vector2
{
    int32_t                                       X;                                                            // 0x0000(0x0004)
    int32_t                                       Y;                                                            // 0x0004(0x0004)
};


// ScriptStruct  CoreUObject.Int32Vector4
// Struct Size::0x0010
struct FInt32Vector4
{
    int32_t                                       X;                                                            // 0x0000(0x0004)
    int32_t                                       Y;                                                            // 0x0004(0x0004)
    int32_t                                       Z;                                                            // 0x0008(0x0004)
    int32_t                                       W;                                                            // 0x000C(0x0004)
};


// ScriptStruct  CoreUObject.Int64Point
// Struct Size::0x0010
struct FInt64Point
{
    int64_t                                       X;                                                            // 0x0000(0x0008)
    int64_t                                       Y;                                                            // 0x0008(0x0008)
};


// ScriptStruct  CoreUObject.Int64Vector
// Struct Size::0x0018
struct FInt64Vector
{
    int64_t                                       X;                                                            // 0x0000(0x0008)
    int64_t                                       Y;                                                            // 0x0008(0x0008)
    int64_t                                       Z;                                                            // 0x0010(0x0008)
};


// ScriptStruct  CoreUObject.Int64Vector2
// Struct Size::0x0010
struct FInt64Vector2
{
    int64_t                                       X;                                                            // 0x0000(0x0008)
    int64_t                                       Y;                                                            // 0x0008(0x0008)
};


// ScriptStruct  CoreUObject.Int64Vector4
// Struct Size::0x0020
struct FInt64Vector4
{
    int64_t                                       X;                                                            // 0x0000(0x0008)
    int64_t                                       Y;                                                            // 0x0008(0x0008)
    int64_t                                       Z;                                                            // 0x0010(0x0008)
    int64_t                                       W;                                                            // 0x0018(0x0008)
};


// ScriptStruct  CoreUObject.InterpCurveFloat
// Struct Size::0x0018
struct FInterpCurveFloat
{
    TArray<FInterpCurvePointFloat>                Points;                                                       // 0x0000(0x0010)
    bool                                          bIsLooped;                                                    // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
    float                                         LoopKeyOffset;                                                // 0x0014(0x0004)
};


// ScriptStruct  CoreUObject.InterpCurvePointFloat
// Struct Size::0x0014
struct FInterpCurvePointFloat
{
    float                                         InVal;                                                        // 0x0000(0x0004)
    float                                         OutVal;                                                       // 0x0004(0x0004)
    float                                         ArriveTangent;                                                // 0x0008(0x0004)
    float                                         LeaveTangent;                                                 // 0x000C(0x0004)
    enum class EInterpCurveMode                   InterpMode;                                                   // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
};


// ScriptStruct  CoreUObject.InterpCurveLinearColor
// Struct Size::0x0018
struct FInterpCurveLinearColor
{
    TArray<FInterpCurvePointLinearColor>          Points;                                                       // 0x0000(0x0010)
    bool                                          bIsLooped;                                                    // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
    float                                         LoopKeyOffset;                                                // 0x0014(0x0004)
};


// ScriptStruct  CoreUObject.InterpCurvePointLinearColor
// Struct Size::0x0038
struct FInterpCurvePointLinearColor
{
    float                                         InVal;                                                        // 0x0000(0x0004)
    FLinearColor                                  OutVal;                                                       // 0x0004(0x0010)
    FLinearColor                                  ArriveTangent;                                                // 0x0014(0x0010)
    FLinearColor                                  LeaveTangent;                                                 // 0x0024(0x0010)
    enum class EInterpCurveMode                   InterpMode;                                                   // 0x0034(0x0001)
    char                                          pa_0035[0x0003]                                               // 0x0035(0x0003)
};


// ScriptStruct  CoreUObject.LinearColor
// Struct Size::0x0010
struct FLinearColor
{
    float                                         R;                                                            // 0x0000(0x0004)
    float                                         G;                                                            // 0x0004(0x0004)
    float                                         B;                                                            // 0x0008(0x0004)
    float                                         A;                                                            // 0x000C(0x0004)
};


// ScriptStruct  CoreUObject.InterpCurvePointQuat
// Struct Size::0x0080
struct FInterpCurvePointQuat
{
    float                                         InVal;                                                        // 0x0000(0x0004)
    char                                          pa_0004[0x000C]                                               // 0x0004(0x000C)
    FQuat                                         OutVal;                                                       // 0x0010(0x0020)
    FQuat                                         ArriveTangent;                                                // 0x0030(0x0020)
    FQuat                                         LeaveTangent;                                                 // 0x0050(0x0020)
    enum class EInterpCurveMode                   InterpMode;                                                   // 0x0070(0x0001)
    char                                          pa_0071[0x000F]                                               // 0x0071(0x000F)
};


// ScriptStruct  CoreUObject.Quat
// Struct Size::0x0020
struct FQuat
{
    double                                        X;                                                            // 0x0000(0x0008)
    double                                        Y;                                                            // 0x0008(0x0008)
    double                                        Z;                                                            // 0x0010(0x0008)
    double                                        W;                                                            // 0x0018(0x0008)
};


// ScriptStruct  CoreUObject.InterpCurvePointTwoVectors
// Struct Size::0x00A0
struct FInterpCurvePointTwoVectors
{
    float                                         InVal;                                                        // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FTwoVectors                                   OutVal;                                                       // 0x0008(0x0030)
    FTwoVectors                                   ArriveTangent;                                                // 0x0038(0x0030)
    FTwoVectors                                   LeaveTangent;                                                 // 0x0068(0x0030)
    enum class EInterpCurveMode                   InterpMode;                                                   // 0x0098(0x0001)
    char                                          pa_0099[0x0007]                                               // 0x0099(0x0007)
};


// ScriptStruct  CoreUObject.TwoVectors
// Struct Size::0x0030
struct FTwoVectors
{
    FVector                                       v1;                                                           // 0x0000(0x0018)
    FVector                                       v2;                                                           // 0x0018(0x0018)
};


// ScriptStruct  CoreUObject.InterpCurvePointVector
// Struct Size::0x0058
struct FInterpCurvePointVector
{
    float                                         InVal;                                                        // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FVector                                       OutVal;                                                       // 0x0008(0x0018)
    FVector                                       ArriveTangent;                                                // 0x0020(0x0018)
    FVector                                       LeaveTangent;                                                 // 0x0038(0x0018)
    enum class EInterpCurveMode                   InterpMode;                                                   // 0x0050(0x0001)
    char                                          pa_0051[0x0007]                                               // 0x0051(0x0007)
};


// ScriptStruct  CoreUObject.InterpCurvePointVector2D
// Struct Size::0x0040
struct FInterpCurvePointVector2D
{
    float                                         InVal;                                                        // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FVector2D                                     OutVal;                                                       // 0x0008(0x0010)
    FVector2D                                     ArriveTangent;                                                // 0x0018(0x0010)
    FVector2D                                     LeaveTangent;                                                 // 0x0028(0x0010)
    enum class EInterpCurveMode                   InterpMode;                                                   // 0x0038(0x0001)
    char                                          pa_0039[0x0007]                                               // 0x0039(0x0007)
};


// ScriptStruct  CoreUObject.InterpCurveQuat
// Struct Size::0x0018
struct FInterpCurveQuat
{
    TArray<FInterpCurvePointQuat>                 Points;                                                       // 0x0000(0x0010)
    bool                                          bIsLooped;                                                    // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
    float                                         LoopKeyOffset;                                                // 0x0014(0x0004)
};


// ScriptStruct  CoreUObject.InterpCurveTwoVectors
// Struct Size::0x0018
struct FInterpCurveTwoVectors
{
    TArray<FInterpCurvePointTwoVectors>           Points;                                                       // 0x0000(0x0010)
    bool                                          bIsLooped;                                                    // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
    float                                         LoopKeyOffset;                                                // 0x0014(0x0004)
};


// ScriptStruct  CoreUObject.InterpCurveVector
// Struct Size::0x0018
struct FInterpCurveVector
{
    TArray<FInterpCurvePointVector>               Points;                                                       // 0x0000(0x0010)
    bool                                          bIsLooped;                                                    // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
    float                                         LoopKeyOffset;                                                // 0x0014(0x0004)
};


// ScriptStruct  CoreUObject.InterpCurveVector2D
// Struct Size::0x0018
struct FInterpCurveVector2D
{
    TArray<FInterpCurvePointVector2D>             Points;                                                       // 0x0000(0x0010)
    bool                                          bIsLooped;                                                    // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
    float                                         LoopKeyOffset;                                                // 0x0014(0x0004)
};


// ScriptStruct  CoreUObject.IntPoint
// Struct Size::0x0008
struct FIntPoint
{
    int32_t                                       X;                                                            // 0x0000(0x0004)
    int32_t                                       Y;                                                            // 0x0004(0x0004)
};


// ScriptStruct  CoreUObject.IntVector
// Struct Size::0x000C
struct FIntVector
{
    int32_t                                       X;                                                            // 0x0000(0x0004)
    int32_t                                       Y;                                                            // 0x0004(0x0004)
    int32_t                                       Z;                                                            // 0x0008(0x0004)
};


// ScriptStruct  CoreUObject.IntVector2
// Struct Size::0x0008
struct FIntVector2
{
    int32_t                                       X;                                                            // 0x0000(0x0004)
    int32_t                                       Y;                                                            // 0x0004(0x0004)
};


// ScriptStruct  CoreUObject.IntVector4
// Struct Size::0x0010
struct FIntVector4
{
    int32_t                                       X;                                                            // 0x0000(0x0004)
    int32_t                                       Y;                                                            // 0x0004(0x0004)
    int32_t                                       Z;                                                            // 0x0008(0x0004)
    int32_t                                       W;                                                            // 0x000C(0x0004)
};


// ScriptStruct  CoreUObject.Matrix
// Struct Size::0x0080
struct FMatrix
{
    FPlane                                        XPlane;                                                       // 0x0000(0x0020)
    FPlane                                        YPlane;                                                       // 0x0020(0x0020)
    FPlane                                        ZPlane;                                                       // 0x0040(0x0020)
    FPlane                                        WPlane;                                                       // 0x0060(0x0020)
};


// ScriptStruct  CoreUObject.Plane
// Struct Size::0x0020
struct FPlane : public FVector
{
    double                                        W;                                                            // 0x0018(0x0008)
};


// ScriptStruct  CoreUObject.Matrix44d
// Struct Size::0x0080
struct FMatrix44d
{
    FPlane4d                                      XPlane;                                                       // 0x0000(0x0020)
    FPlane4d                                      YPlane;                                                       // 0x0020(0x0020)
    FPlane4d                                      ZPlane;                                                       // 0x0040(0x0020)
    FPlane4d                                      WPlane;                                                       // 0x0060(0x0020)
};


// ScriptStruct  CoreUObject.Plane4d
// Struct Size::0x0020
struct FPlane4d : public FVector3d
{
    double                                        W;                                                            // 0x0018(0x0008)
};


// ScriptStruct  CoreUObject.Matrix44f
// Struct Size::0x0040
struct FMatrix44f
{
    FPlane4f                                      XPlane;                                                       // 0x0000(0x0010)
    FPlane4f                                      YPlane;                                                       // 0x0010(0x0010)
    FPlane4f                                      ZPlane;                                                       // 0x0020(0x0010)
    FPlane4f                                      WPlane;                                                       // 0x0030(0x0010)
};


// ScriptStruct  CoreUObject.Plane4f
// Struct Size::0x0010
struct FPlane4f : public FVector3f
{
    float                                         W;                                                            // 0x000C(0x0004)
};


// ScriptStruct  CoreUObject.OrientedBox
// Struct Size::0x0078
struct FOrientedBox
{
    FVector                                       Center;                                                       // 0x0000(0x0018)
    FVector                                       AxisX;                                                        // 0x0018(0x0018)
    FVector                                       AxisY;                                                        // 0x0030(0x0018)
    FVector                                       AxisZ;                                                        // 0x0048(0x0018)
    double                                        ExtentX;                                                      // 0x0060(0x0008)
    double                                        ExtentY;                                                      // 0x0068(0x0008)
    double                                        ExtentZ;                                                      // 0x0070(0x0008)
};


// ScriptStruct  CoreUObject.PackedNormal
// Struct Size::0x0004
struct FPackedNormal
{
    char                                          X;                                                            // 0x0000(0x0001)
    char                                          Y;                                                            // 0x0001(0x0001)
    char                                          Z;                                                            // 0x0002(0x0001)
    char                                          W;                                                            // 0x0003(0x0001)
};


// ScriptStruct  CoreUObject.PackedRGB10A2N
// Struct Size::0x0004
struct FPackedRGB10A2N
{
    int32_t                                       Packed;                                                       // 0x0000(0x0004)
};


// ScriptStruct  CoreUObject.PackedRGBA16N
// Struct Size::0x0008
struct FPackedRGBA16N
{
    int32_t                                       XY;                                                           // 0x0000(0x0004)
    int32_t                                       ZW;                                                           // 0x0004(0x0004)
};


// ScriptStruct  CoreUObject.PlatformInputDeviceState
// Struct Size::0x0008
struct FPlatformInputDeviceState
{
    FPlatformUserId                               OwningPlatformUser;                                           // 0x0000(0x0004)
    enum class EInputDeviceConnectionState        ConnectionState;                                              // 0x0004(0x0001)
    char                                          pa_0005[0x0003]                                               // 0x0005(0x0003)
};


// ScriptStruct  CoreUObject.PlatformUserId
// Struct Size::0x0004
struct FPlatformUserId
{
    int32_t                                       InternalId;                                                   // 0x0000(0x0004)
};


// ScriptStruct  CoreUObject.PolyglotTextData
// Struct Size::0x00B8
struct FPolyglotTextData
{
    enum class ELocalizedTextSourceCategory       Category;                                                     // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    FString                                       NativeCulture;                                                // 0x0008(0x0010)
    FString                                       Namespace;                                                    // 0x0018(0x0010)
    FString                                       Key;                                                          // 0x0028(0x0010)
    FString                                       NativeString;                                                 // 0x0038(0x0010)
    TMap<FString,FString>                         LocalizedStrings;                                             // 0x0048(0x0050)
    bool                                          bIsMinimalPatch;                                              // 0x0098(0x0001)
    char                                          pa_0099[0x0007]                                               // 0x0099(0x0007)
    FText                                         CachedText;                                                   // 0x00A0(0x0018)
};


// ScriptStruct  CoreUObject.PrimaryAssetId
// Struct Size::0x0010
struct FPrimaryAssetId
{
    FPrimaryAssetType                             PrimaryAssetType;                                             // 0x0000(0x0008)
    FName                                         PrimaryAssetName;                                             // 0x0008(0x0008)
};


// ScriptStruct  CoreUObject.PrimaryAssetType
// Struct Size::0x0008
struct FPrimaryAssetType
{
    FName                                         Name;                                                         // 0x0000(0x0008)
};


// ScriptStruct  CoreUObject.QualifiedFrameTime
// Struct Size::0x0010
struct FQualifiedFrameTime
{
    FFrameTime                                    Time;                                                         // 0x0000(0x0008)
    FFrameRate                                    Rate;                                                         // 0x0008(0x0008)
};


// ScriptStruct  CoreUObject.Quat4d
// Struct Size::0x0020
struct FQuat4d
{
    double                                        X;                                                            // 0x0000(0x0008)
    double                                        Y;                                                            // 0x0008(0x0008)
    double                                        Z;                                                            // 0x0010(0x0008)
    double                                        W;                                                            // 0x0018(0x0008)
};


// ScriptStruct  CoreUObject.Quat4f
// Struct Size::0x0010
struct FQuat4f
{
    float                                         X;                                                            // 0x0000(0x0004)
    float                                         Y;                                                            // 0x0004(0x0004)
    float                                         Z;                                                            // 0x0008(0x0004)
    float                                         W;                                                            // 0x000C(0x0004)
};


// ScriptStruct  CoreUObject.RandomStream
// Struct Size::0x0008
struct FRandomStream
{
    int32_t                                       InitialSeed;                                                  // 0x0000(0x0004)
    int32_t                                       Seed;                                                         // 0x0004(0x0004)
};


// ScriptStruct  CoreUObject.Rotator
// Struct Size::0x0018
struct FRotator
{
    double                                        Pitch;                                                        // 0x0000(0x0008)
    double                                        Yaw;                                                          // 0x0008(0x0008)
    double                                        Roll;                                                         // 0x0010(0x0008)
};


// ScriptStruct  CoreUObject.Rotator3d
// Struct Size::0x0018
struct FRotator3d
{
    double                                        Pitch;                                                        // 0x0000(0x0008)
    double                                        Yaw;                                                          // 0x0008(0x0008)
    double                                        Roll;                                                         // 0x0010(0x0008)
};


// ScriptStruct  CoreUObject.Rotator3f
// Struct Size::0x000C
struct FRotator3f
{
    float                                         Pitch;                                                        // 0x0000(0x0004)
    float                                         Yaw;                                                          // 0x0004(0x0004)
    float                                         Roll;                                                         // 0x0008(0x0004)
};


// ScriptStruct  CoreUObject.SoftClassPath
// Struct Size::0x0020
struct FSoftClassPath : public FSoftObjectPath
{
};


// ScriptStruct  CoreUObject.TemplateString
// Struct Size::0x0010
struct FTemplateString
{
    FString                                       Template;                                                     // 0x0000(0x0010)
};


// ScriptStruct  CoreUObject.TestUninitializedScriptStructMembersTest
// Struct Size::0x0018
struct FTestUninitializedScriptStructMembersTest
{
    UObject*                                      UninitializedObjectReference;                                 // 0x0000(0x0008)
    UObject*                                      InitializedObjectReference;                                   // 0x0008(0x0008)
    float                                         UnusedValue;                                                  // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  CoreUObject.Timecode
// Struct Size::0x0014
struct FTimecode
{
    int32_t                                       Hours;                                                        // 0x0000(0x0004)
    int32_t                                       Minutes;                                                      // 0x0004(0x0004)
    int32_t                                       Seconds;                                                      // 0x0008(0x0004)
    int32_t                                       Frames;                                                       // 0x000C(0x0004)
    bool                                          bDropFrameFormat;                                             // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
};


// ScriptStruct  CoreUObject.Timespan
// Struct Size::0x0008
struct FTimespan
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
};


// ScriptStruct  CoreUObject.Transform
// Struct Size::0x0060
struct FTransform
{
    FQuat                                         Rotation;                                                     // 0x0000(0x0020)
    FVector                                       Translation;                                                  // 0x0020(0x0018)
    char                                          pa_0038[0x0008]                                               // 0x0038(0x0008)
    FVector                                       Scale3D;                                                      // 0x0040(0x0018)
    char                                          pa_0058[0x0008]                                               // 0x0058(0x0008)
};


// ScriptStruct  CoreUObject.Transform3d
// Struct Size::0x0060
struct FTransform3d
{
    FQuat4d                                       Rotation;                                                     // 0x0000(0x0020)
    FVector3d                                     Translation;                                                  // 0x0020(0x0018)
    char                                          pa_0038[0x0008]                                               // 0x0038(0x0008)
    FVector3d                                     Scale3D;                                                      // 0x0040(0x0018)
    char                                          pa_0058[0x0008]                                               // 0x0058(0x0008)
};


// ScriptStruct  CoreUObject.Transform3f
// Struct Size::0x0030
struct FTransform3f
{
    FQuat4f                                       Rotation;                                                     // 0x0000(0x0010)
    FVector3f                                     Translation;                                                  // 0x0010(0x000C)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    FVector3f                                     Scale3D;                                                      // 0x0020(0x000C)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
};


// ScriptStruct  CoreUObject.Uint32Point
// Struct Size::0x0008
struct FUint32Point
{
    int32_t                                       X;                                                            // 0x0000(0x0004)
    int32_t                                       Y;                                                            // 0x0004(0x0004)
};


// ScriptStruct  CoreUObject.Uint32Vector
// Struct Size::0x000C
struct FUint32Vector
{
    uint32_t                                      X;                                                            // 0x0000(0x0004)
    uint32_t                                      Y;                                                            // 0x0004(0x0004)
    uint32_t                                      Z;                                                            // 0x0008(0x0004)
};


// ScriptStruct  CoreUObject.Uint32Vector2
// Struct Size::0x0008
struct FUint32Vector2
{
    uint32_t                                      X;                                                            // 0x0000(0x0004)
    uint32_t                                      Y;                                                            // 0x0004(0x0004)
};


// ScriptStruct  CoreUObject.Uint32Vector4
// Struct Size::0x0010
struct FUint32Vector4
{
    uint32_t                                      X;                                                            // 0x0000(0x0004)
    uint32_t                                      Y;                                                            // 0x0004(0x0004)
    uint32_t                                      Z;                                                            // 0x0008(0x0004)
    uint32_t                                      W;                                                            // 0x000C(0x0004)
};


// ScriptStruct  CoreUObject.Uint64Point
// Struct Size::0x0010
struct FUint64Point
{
    int64_t                                       X;                                                            // 0x0000(0x0008)
    int64_t                                       Y;                                                            // 0x0008(0x0008)
};


// ScriptStruct  CoreUObject.Uint64Vector
// Struct Size::0x0018
struct FUint64Vector
{
    uint64_t                                      X;                                                            // 0x0000(0x0008)
    uint64_t                                      Y;                                                            // 0x0008(0x0008)
    uint64_t                                      Z;                                                            // 0x0010(0x0008)
};


// ScriptStruct  CoreUObject.Uint64Vector2
// Struct Size::0x0010
struct FUint64Vector2
{
    uint64_t                                      X;                                                            // 0x0000(0x0008)
    uint64_t                                      Y;                                                            // 0x0008(0x0008)
};


// ScriptStruct  CoreUObject.Uint64Vector4
// Struct Size::0x0020
struct FUint64Vector4
{
    uint64_t                                      X;                                                            // 0x0000(0x0008)
    uint64_t                                      Y;                                                            // 0x0008(0x0008)
    uint64_t                                      Z;                                                            // 0x0010(0x0008)
    uint64_t                                      W;                                                            // 0x0018(0x0008)
};


// ScriptStruct  CoreUObject.UintPoint
// Struct Size::0x0008
struct FUintPoint
{
    int32_t                                       X;                                                            // 0x0000(0x0004)
    int32_t                                       Y;                                                            // 0x0004(0x0004)
};


// ScriptStruct  CoreUObject.UintVector
// Struct Size::0x000C
struct FUintVector
{
    uint32_t                                      X;                                                            // 0x0000(0x0004)
    uint32_t                                      Y;                                                            // 0x0004(0x0004)
    uint32_t                                      Z;                                                            // 0x0008(0x0004)
};


// ScriptStruct  CoreUObject.UintVector2
// Struct Size::0x0008
struct FUintVector2
{
    uint32_t                                      X;                                                            // 0x0000(0x0004)
    uint32_t                                      Y;                                                            // 0x0004(0x0004)
};


// ScriptStruct  CoreUObject.UintVector4
// Struct Size::0x0010
struct FUintVector4
{
    uint32_t                                      X;                                                            // 0x0000(0x0004)
    uint32_t                                      Y;                                                            // 0x0004(0x0004)
    uint32_t                                      Z;                                                            // 0x0008(0x0004)
    uint32_t                                      W;                                                            // 0x000C(0x0004)
};


// ScriptStruct  CoreUObject.Vector4
// Struct Size::0x0020
struct FVector4
{
    double                                        X;                                                            // 0x0000(0x0008)
    double                                        Y;                                                            // 0x0008(0x0008)
    double                                        Z;                                                            // 0x0010(0x0008)
    double                                        W;                                                            // 0x0018(0x0008)
};


// ScriptStruct  CoreUObject.Vector4d
// Struct Size::0x0020
struct FVector4d
{
    double                                        X;                                                            // 0x0000(0x0008)
    double                                        Y;                                                            // 0x0008(0x0008)
    double                                        Z;                                                            // 0x0010(0x0008)
    double                                        W;                                                            // 0x0018(0x0008)
};


// ScriptStruct  CoreUObject.Vector4f
// Struct Size::0x0010
struct FVector4f
{
    float                                         X;                                                            // 0x0000(0x0004)
    float                                         Y;                                                            // 0x0004(0x0004)
    float                                         Z;                                                            // 0x0008(0x0004)
    float                                         W;                                                            // 0x000C(0x0004)
};


// ScriptStruct  GameplayAbilities.GameplayEffectSpec
// Struct Size::0x0298
struct FGameplayEffectSpec
{
    UGameplayEffect*                              Def;                                                          // 0x0000(0x0008)
    TArray<FGameplayEffectModifiedAttribute>      ModifiedAttributes;                                           // 0x0008(0x0010)
    FGameplayEffectAttributeCaptureSpecContainer  CapturedRelevantAttributes;                                   // 0x0018(0x0028)
    char                                          pa_0040[0x0010]                                               // 0x0040(0x0010)
    float                                         Duration;                                                     // 0x0050(0x0004)
    float                                         Period;                                                       // 0x0054(0x0004)
    float                                         ChanceToApplyToTarget;                                        // 0x0058(0x0004)
    char                                          pa_005C[0x0004]                                               // 0x005C(0x0004)
    FTagContainerAggregator                       CapturedSourceTags;                                           // 0x0060(0x0088)
    FTagContainerAggregator                       CapturedTargetTags;                                           // 0x00E8(0x0088)
    FGameplayTagContainer                         DynamicGrantedTags;                                           // 0x0170(0x0020)
    FGameplayTagContainer                         DynamicAssetTags;                                             // 0x0190(0x0020)
    TArray<FModifierSpec>                         Modifiers;                                                    // 0x01B0(0x0010)
    int32_t                                       StackCount;                                                   // 0x01C0(0x0004)
    char                                          bCompletedSourceAttributeCapture;                             // 0x01C4(0x0001)
    char                                          bCompletedTargetAttributeCapture;                             // 0x01C4(0x0001)
    char                                          bDurationLocked;                                              // 0x01C4(0x0001)
    char                                          pa_01C5[0x0003]                                               // 0x01C5(0x0003)
    TArray<FGameplayAbilitySpecDef>               GrantedAbilitySpecs;                                          // 0x01C8(0x0010)
    char                                          pa_01D8[0x00A0]                                               // 0x01D8(0x00A0)
    FGameplayEffectContextHandle                  EffectContext;                                                // 0x0278(0x0018)
    float                                         Level;                                                        // 0x0290(0x0004)
    char                                          pa_0294[0x0004]                                               // 0x0294(0x0004)
};


// ScriptStruct  GameplayAbilities.GameplayEffectContextHandle
// Struct Size::0x0018
struct FGameplayEffectContextHandle
{
    char                                          pa_0000[0x0018]                                               // 0x0000(0x0018)
};


// ScriptStruct  GameplayAbilities.GameplayAbilitySpecDef
// Struct Size::0x0098
struct FGameplayAbilitySpecDef
{
    UGameplayAbility*                             Ability;                                                      // 0x0000(0x0008)
    FScalableFloat                                LevelScalableFloat;                                           // 0x0008(0x0028)
    int32_t                                       InputID;                                                      // 0x0030(0x0004)
    enum class EGameplayEffectGrantedAbilityRemovePolicyRemovalPolicy;                                          // 0x0034(0x0001)
    char                                          pa_0035[0x0003]                                               // 0x0035(0x0003)
    TWeakObjectPtr<UObject>                       SourceObject;                                                 // 0x0038(0x0008)
    char                                          pa_0040[0x0050]                                               // 0x0040(0x0050)
    FGameplayAbilitySpecHandle                    AssignedHandle;                                               // 0x0090(0x0004)
    char                                          pa_0094[0x0004]                                               // 0x0094(0x0004)
};


// ScriptStruct  GameplayAbilities.GameplayAbilitySpecHandle
// Struct Size::0x0004
struct FGameplayAbilitySpecHandle
{
    int32_t                                       Handle;                                                       // 0x0000(0x0004)
};


// ScriptStruct  GameplayAbilities.ScalableFloat
// Struct Size::0x0028
struct FScalableFloat
{
    float                                         Value;                                                        // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FCurveTableRowHandle                          Curve;                                                        // 0x0008(0x0010)
    FDataRegistryType                             RegistryType;                                                 // 0x0018(0x0008)
    char                                          pa_0020[0x0008]                                               // 0x0020(0x0008)
};


// ScriptStruct  DataRegistry.DataRegistryLookup
// Struct Size::0x0020
struct FDataRegistryLookup
{
    char                                          pa_0000[0x0020]                                               // 0x0000(0x0020)
};


// ScriptStruct  DataRegistry.DataRegistryId
// Struct Size::0x0010
struct FDataRegistryId
{
    FDataRegistryType                             RegistryType;                                                 // 0x0000(0x0008)
    FName                                         ItemName;                                                     // 0x0008(0x0008)
};


// ScriptStruct  DataRegistry.DataRegistryType
// Struct Size::0x0008
struct FDataRegistryType
{
    FName                                         Name;                                                         // 0x0000(0x0008)
};


// ScriptStruct  Engine.MaterialInput
// Struct Size::0x0028
struct FMaterialInput
{
    UMaterialExpression*                          Expression;                                                   // 0x0000(0x0008)
    int32_t                                       OutputIndex;                                                  // 0x0008(0x0004)
    FName                                         InputName;                                                    // 0x000C(0x0008)
    int32_t                                       mask;                                                         // 0x0014(0x0004)
    int32_t                                       MaskR;                                                        // 0x0018(0x0004)
    int32_t                                       MaskG;                                                        // 0x001C(0x0004)
    int32_t                                       MaskB;                                                        // 0x0020(0x0004)
    int32_t                                       MaskA;                                                        // 0x0024(0x0004)
};


// ScriptStruct  Engine.ColorMaterialInput
// Struct Size::0x0030
struct FColorMaterialInput : public FMaterialInput
{
    char                                          UseConstant;                                                  // 0x0028(0x0001)
    char                                          pa_0029[0x0003]                                               // 0x0029(0x0003)
    FColor                                        Constant;                                                     // 0x002C(0x0004)
};


// ScriptStruct  Engine.DistributionLookupTable
// Struct Size::0x0020
struct FDistributionLookupTable
{
    float                                         TimeScale;                                                    // 0x0000(0x0004)
    float                                         TimeBias;                                                     // 0x0004(0x0004)
    TArray<float>                                 Values;                                                       // 0x0008(0x0010)
    char                                          Op;                                                           // 0x0018(0x0001)
    char                                          EntryCount;                                                   // 0x0019(0x0001)
    char                                          EntryStride;                                                  // 0x001A(0x0001)
    char                                          SubEntryStride;                                               // 0x001B(0x0001)
    char                                          LockFlag;                                                     // 0x001C(0x0001)
    char                                          pa_001D[0x0003]                                               // 0x001D(0x0003)
};


// ScriptStruct  Engine.ExpressionInput
// Struct Size::0x0028
struct FExpressionInput
{
    UMaterialExpression*                          Expression;                                                   // 0x0000(0x0008)
    int32_t                                       OutputIndex;                                                  // 0x0008(0x0004)
    FName                                         InputName;                                                    // 0x000C(0x0008)
    int32_t                                       mask;                                                         // 0x0014(0x0004)
    int32_t                                       MaskR;                                                        // 0x0018(0x0004)
    int32_t                                       MaskG;                                                        // 0x001C(0x0004)
    int32_t                                       MaskB;                                                        // 0x0020(0x0004)
    int32_t                                       MaskA;                                                        // 0x0024(0x0004)
};


// ScriptStruct  Engine.ExpressionOutput
// Struct Size::0x001C
struct FExpressionOutput
{
    FName                                         OutputName;                                                   // 0x0000(0x0008)
    int32_t                                       mask;                                                         // 0x0008(0x0004)
    int32_t                                       MaskR;                                                        // 0x000C(0x0004)
    int32_t                                       MaskG;                                                        // 0x0010(0x0004)
    int32_t                                       MaskB;                                                        // 0x0014(0x0004)
    int32_t                                       MaskA;                                                        // 0x0018(0x0004)
};


// ScriptStruct  Engine.FloatDistribution
// Struct Size::0x0020
struct FFloatDistribution
{
    FDistributionLookupTable                      Table;                                                        // 0x0000(0x0020)
};


// ScriptStruct  Engine.FloatRK4SpringInterpolator
// Struct Size::0x0008
struct FFloatRK4SpringInterpolator
{
    float                                         StiffnessConstant;                                            // 0x0000(0x0004)
    float                                         DampeningRatio;                                               // 0x0004(0x0004)
};


// ScriptStruct  Engine.FormatArgumentData
// Struct Size::0x0050
struct FFormatArgumentData
{
    FString                                       ArgumentName;                                                 // 0x0000(0x0010)
    enum class EFormatArgumentType                ArgumentValueType;                                            // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
    FText                                         ArgumentValue;                                                // 0x0018(0x0018)
    int64_t                                       ArgumentValueInt;                                             // 0x0030(0x0008)
    float                                         ArgumentValueFloat;                                           // 0x0038(0x0004)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
    double                                        ArgumentValueDouble;                                          // 0x0040(0x0008)
    enum class ETextGender                        ArgumentValueGender;                                          // 0x0048(0x0001)
    char                                          pa_0049[0x0007]                                               // 0x0049(0x0007)
};


// ScriptStruct  Engine.MaterialAttributesInput
// Struct Size::0x0030
struct FMaterialAttributesInput : public FExpressionInput
{
    int32_t                                       PropertyConnectedBitmask;                                     // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
};


// ScriptStruct  Engine.RawDistribution
// Struct Size::0x0020
struct FRawDistribution
{
    FDistributionLookupTable                      Table;                                                        // 0x0000(0x0020)
};


// ScriptStruct  Engine.ScalarMaterialInput
// Struct Size::0x0030
struct FScalarMaterialInput : public FMaterialInput
{
    char                                          UseConstant;                                                  // 0x0028(0x0001)
    char                                          pa_0029[0x0003]                                               // 0x0029(0x0003)
    float                                         Constant;                                                     // 0x002C(0x0004)
};


// ScriptStruct  Engine.ShadingModelMaterialInput
// Struct Size::0x0028
struct FShadingModelMaterialInput : public FMaterialInput
{
};


// ScriptStruct  Engine.StrataMaterialInput
// Struct Size::0x0028
struct FStrataMaterialInput : public FMaterialInput
{
};


// ScriptStruct  Engine.Vector2MaterialInput
// Struct Size::0x0038
struct FVector2MaterialInput : public FMaterialInput
{
    char                                          UseConstant;                                                  // 0x0028(0x0001)
    char                                          pa_0029[0x0003]                                               // 0x0029(0x0003)
    float                                         ConstantX;                                                    // 0x002C(0x0004)
    float                                         ConstantY;                                                    // 0x0030(0x0004)
    char                                          pa_0034[0x0004]                                               // 0x0034(0x0004)
};


// ScriptStruct  Engine.Vector4Distribution
// Struct Size::0x0020
struct FVector4Distribution
{
    FDistributionLookupTable                      Table;                                                        // 0x0000(0x0020)
};


// ScriptStruct  Engine.VectorDistribution
// Struct Size::0x0020
struct FVectorDistribution
{
    FDistributionLookupTable                      Table;                                                        // 0x0000(0x0020)
};


// ScriptStruct  Engine.VectorMaterialInput
// Struct Size::0x0038
struct FVectorMaterialInput : public FMaterialInput
{
    char                                          UseConstant;                                                  // 0x0028(0x0001)
    char                                          pa_0029[0x0003]                                               // 0x0029(0x0003)
    FVector3f                                     Constant;                                                     // 0x002C(0x000C)
};


// ScriptStruct  Engine.VectorRK4SpringInterpolator
// Struct Size::0x0008
struct FVectorRK4SpringInterpolator
{
    float                                         StiffnessConstant;                                            // 0x0000(0x0004)
    float                                         DampeningRatio;                                               // 0x0004(0x0004)
};


// ScriptStruct  Engine.AnimDataModelNotifPayload
// Struct Size::0x0010
struct FAnimDataModelNotifPayload
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
};


// ScriptStruct  InputCore.Key
// Struct Size::0x0018
struct FKey
{
    FName                                         KeyName;                                                      // 0x0000(0x0008)
    char                                          pa_0008[0x0010]                                               // 0x0008(0x0010)
};


// ScriptStruct  Engine.HitResult
// Struct Size::0x00E8
struct FHitResult
{
    int32_t                                       FaceIndex;                                                    // 0x0000(0x0004)
    float                                         Time;                                                         // 0x0004(0x0004)
    float                                         Distance;                                                     // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FVector                                       Location;                                                     // 0x0010(0x0018)
    FVector                                       ImpactPoint;                                                  // 0x0028(0x0018)
    FVector                                       Normal;                                                       // 0x0040(0x0018)
    FVector                                       ImpactNormal;                                                 // 0x0058(0x0018)
    FVector                                       TraceStart;                                                   // 0x0070(0x0018)
    FVector                                       TraceEnd;                                                     // 0x0088(0x0018)
    float                                         PenetrationDepth;                                             // 0x00A0(0x0004)
    int32_t                                       MyItem;                                                       // 0x00A4(0x0004)
    int32_t                                       Item;                                                         // 0x00A8(0x0004)
    char                                          ElementIndex;                                                 // 0x00AC(0x0001)
    char                                          bBlockingHit;                                                 // 0x00AD(0x0001)
    char                                          bStartPenetrating;                                            // 0x00AD(0x0001)
    char                                          pa_00AE[0x0002]                                               // 0x00AE(0x0002)
    TWeakObjectPtr<UPhysicalMaterial>             PhysMaterial;                                                 // 0x00B0(0x0008)
    FActorInstanceHandle                          HitObjectHandle;                                              // 0x00B8(0x0018)
    TWeakObjectPtr<UPrimitiveComponent>           Component;                                                    // 0x00D0(0x0008)
    FName                                         BoneName;                                                     // 0x00D8(0x0008)
    FName                                         MyBoneName;                                                   // 0x00E0(0x0008)
};


// ScriptStruct  Engine.ActorInstanceHandle
// Struct Size::0x0018
struct FActorInstanceHandle
{
    TWeakObjectPtr<AActor>                        Actor;                                                        // 0x0000(0x0008)
    char                                          pa_0008[0x0010]                                               // 0x0008(0x0010)
};


// ScriptStruct  Engine.Vector
// Struct Size::0x0018
struct FVector : public FVector
{
};


// ScriptStruct  Engine.Vector
// Struct Size::0x0018
struct FVector : public FVector
{
};


// ScriptStruct  Engine.SubtitleCue
// Struct Size::0x0020
struct FSubtitleCue
{
    FText                                         Text;                                                         // 0x0000(0x0018)
    float                                         Time;                                                         // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  Engine.PlatformInterfaceDelegateResult
// Struct Size::0x0038
struct FPlatformInterfaceDelegateResult
{
    bool                                          bSuccessful;                                                  // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    FPlatformInterfaceData                        Data;                                                         // 0x0008(0x0030)
};


// ScriptStruct  Engine.PlatformInterfaceData
// Struct Size::0x0030
struct FPlatformInterfaceData
{
    FName                                         DataName;                                                     // 0x0000(0x0008)
    enum class EPlatformInterfaceDataType         Type;                                                         // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
    int32_t                                       IntValue;                                                     // 0x000C(0x0004)
    float                                         FloatValue;                                                   // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FString                                       StringValue;                                                  // 0x0018(0x0010)
    UObject*                                      ObjectValue;                                                  // 0x0028(0x0008)
};


// ScriptStruct  Engine.BranchingPointNotifyPayload
// Struct Size::0x0020
struct FBranchingPointNotifyPayload
{
    char                                          pa_0000[0x0020]                                               // 0x0000(0x0020)
};


// ScriptStruct  Engine.TickFunction
// Struct Size::0x0028
struct FTickFunction
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    enum class ETickingGroup                      TickGroup;                                                    // 0x0008(0x0001)
    enum class ETickingGroup                      EndTickGroup;                                                 // 0x0009(0x0001)
    char                                          bTickEvenWhenPaused;                                          // 0x000A(0x0001)
    char                                          bCanEverTick;                                                 // 0x000A(0x0001)
    char                                          bStartWithTickEnabled;                                        // 0x000A(0x0001)
    char                                          bAllowTickOnDedicatedServer;                                  // 0x000A(0x0001)
    char                                          pa_000B[0x0001]                                               // 0x000B(0x0001)
    float                                         TickInterval;                                                 // 0x000C(0x0004)
    char                                          pa_0010[0x0018]                                               // 0x0010(0x0018)
};


// ScriptStruct  Engine.ActorComponentTickFunction
// Struct Size::0x0030
struct FActorComponentTickFunction : public FTickFunction
{
    char                                          pa_0028[0x0008]                                               // 0x0028(0x0008)
};


// ScriptStruct  Engine.InterpControlPoint
// Struct Size::0x0028
struct FInterpControlPoint
{
    FVector                                       PositionControlPoint;                                         // 0x0000(0x0018)
    bool                                          bPositionIsRelative;                                          // 0x0018(0x0001)
    char                                          pa_0019[0x000F]                                               // 0x0019(0x000F)
};


// ScriptStruct  Engine.DebugFloatHistory
// Struct Size::0x0020
struct FDebugFloatHistory
{
    TArray<float>                                 Samples;                                                      // 0x0000(0x0010)
    int32_t                                       MaxSamples;                                                   // 0x0010(0x0004)
    float                                         MinValue;                                                     // 0x0014(0x0004)
    float                                         MaxValue;                                                     // 0x0018(0x0004)
    bool                                          bAutoAdjustMinMax;                                            // 0x001C(0x0001)
    char                                          pa_001D[0x0003]                                               // 0x001D(0x0003)
};


// ScriptStruct  Engine.LatentActionInfo
// Struct Size::0x0018
struct FLatentActionInfo
{
    int32_t                                       Linkage;                                                      // 0x0000(0x0004)
    int32_t                                       UUID;                                                         // 0x0004(0x0004)
    FName                                         ExecutionFunction;                                            // 0x0008(0x0008)
    UObject*                                      CallbackTarget;                                               // 0x0010(0x0008)
};


// ScriptStruct  Engine.TimerHandle
// Struct Size::0x0008
struct FTimerHandle
{
    uint64_t                                      Handle;                                                       // 0x0000(0x0008)
};


// ScriptStruct  Engine.CollisionProfileName
// Struct Size::0x0008
struct FCollisionProfileName
{
    FName                                         Name;                                                         // 0x0000(0x0008)
};


// ScriptStruct  Engine.GenericStruct
// Struct Size::0x0004
struct FGenericStruct
{
    int32_t                                       Data;                                                         // 0x0000(0x0004)
};


// ScriptStruct  Engine.UserActivity
// Struct Size::0x0018
struct FUserActivity
{
    FString                                       ActionName;                                                   // 0x0000(0x0010)
    char                                          pa_0010[0x0008]                                               // 0x0010(0x0008)
};


// ScriptStruct  Engine.CurveTableRowHandle
// Struct Size::0x0010
struct FCurveTableRowHandle
{
    UCurveTable*                                  CurveTable;                                                   // 0x0000(0x0008)
    FName                                         RowName;                                                      // 0x0008(0x0008)
};


// ScriptStruct  GameplayAbilities.ModifierSpec
// Struct Size::0x0004
struct FModifierSpec
{
    float                                         EvaluatedMagnitude;                                           // 0x0000(0x0004)
};


// ScriptStruct  GameplayTags.GameplayTagContainer
// Struct Size::0x0020
struct FGameplayTagContainer
{
    TArray<FGameplayTag>                          GameplayTags;                                                 // 0x0000(0x0010)
    TArray<FGameplayTag>                          ParentTags;                                                   // 0x0010(0x0010)
};


// ScriptStruct  GameplayTags.GameplayTag
// Struct Size::0x0008
struct FGameplayTag
{
    FName                                         TagName;                                                      // 0x0000(0x0008)
};


// ScriptStruct  GameplayAbilities.TagContainerAggregator
// Struct Size::0x0088
struct FTagContainerAggregator
{
    FGameplayTagContainer                         CapturedActorTags;                                            // 0x0000(0x0020)
    FGameplayTagContainer                         CapturedSpecTags;                                             // 0x0020(0x0020)
    FGameplayTagContainer                         ScopedTags;                                                   // 0x0040(0x0020)
    char                                          pa_0060[0x0028]                                               // 0x0060(0x0028)
};


// ScriptStruct  GameplayAbilities.GameplayEffectAttributeCaptureSpecContainer
// Struct Size::0x0028
struct FGameplayEffectAttributeCaptureSpecContainer
{
    TArray<FGameplayEffectAttributeCaptureSpec>   SourceAttributes;                                             // 0x0000(0x0010)
    TArray<FGameplayEffectAttributeCaptureSpec>   TargetAttributes;                                             // 0x0010(0x0010)
    bool                                          bHasNonSnapshottedAttributes;                                 // 0x0020(0x0001)
    char                                          pa_0021[0x0007]                                               // 0x0021(0x0007)
};


// ScriptStruct  GameplayAbilities.GameplayEffectAttributeCaptureSpec
// Struct Size::0x0050
struct FGameplayEffectAttributeCaptureSpec
{
    FGameplayEffectAttributeCaptureDefinition     BackingDefinition;                                            // 0x0000(0x0040)
    char                                          pa_0040[0x0010]                                               // 0x0040(0x0010)
};


// ScriptStruct  GameplayAbilities.GameplayEffectAttributeCaptureDefinition
// Struct Size::0x0040
struct FGameplayEffectAttributeCaptureDefinition
{
    FGameplayAttribute                            AttributeToCapture;                                           // 0x0000(0x0038)
    enum class EGameplayEffectAttributeCaptureSourceAttributeSource;                                            // 0x0038(0x0001)
    bool                                          bSnapshot;                                                    // 0x0039(0x0001)
    char                                          pa_003A[0x0006]                                               // 0x003A(0x0006)
};


// ScriptStruct  GameplayAbilities.GameplayAttribute
// Struct Size::0x0038
struct FGameplayAttribute
{
    FString                                       AttributeName;                                                // 0x0000(0x0010)
    Attribute                                     Attribute;                                                    // 0x0010(0x0020)
    UStruct*                                      AttributeOwner;                                               // 0x0030(0x0008)
};


// ScriptStruct  GameplayAbilities.GameplayEffectModifiedAttribute
// Struct Size::0x0040
struct FGameplayEffectModifiedAttribute
{
    FGameplayAttribute                            Attribute;                                                    // 0x0000(0x0038)
    float                                         TotalMagnitude;                                               // 0x0038(0x0004)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
};


// ScriptStruct  GameplayAbilities.ActiveGameplayEffectHandle
// Struct Size::0x0008
struct FActiveGameplayEffectHandle
{
    int32_t                                       Handle;                                                       // 0x0000(0x0004)
    bool                                          bPassedFiltersAndWasExecuted;                                 // 0x0004(0x0001)
    char                                          pa_0005[0x0003]                                               // 0x0005(0x0003)
};


// ScriptStruct  GameplayAbilities.GameplayEffectSpecHandle
// Struct Size::0x0010
struct FGameplayEffectSpecHandle
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
};


// ScriptStruct  GameplayAbilities.GameplayCueParameters
// Struct Size::0x00E0
struct FGameplayCueParameters
{
    float                                         NormalizedMagnitude;                                          // 0x0000(0x0004)
    float                                         RawMagnitude;                                                 // 0x0004(0x0004)
    FGameplayEffectContextHandle                  EffectContext;                                                // 0x0008(0x0018)
    FGameplayTag                                  MatchedTagName;                                               // 0x0020(0x0008)
    FGameplayTag                                  OriginalTag;                                                  // 0x0028(0x0008)
    FGameplayTagContainer                         AggregatedSourceTags;                                         // 0x0030(0x0020)
    FGameplayTagContainer                         AggregatedTargetTags;                                         // 0x0050(0x0020)
    FVector                                       Location;                                                     // 0x0070(0x0018)
    FVector                                       Normal;                                                       // 0x0088(0x0018)
    TWeakObjectPtr<AActor>                        Instigator;                                                   // 0x00A0(0x0008)
    TWeakObjectPtr<AActor>                        EffectCauser;                                                 // 0x00A8(0x0008)
    TWeakObjectPtr<UObject>                       SourceObject;                                                 // 0x00B0(0x0008)
    TWeakObjectPtr<UPhysicalMaterial>             PhysicalMaterial;                                             // 0x00B8(0x0008)
    TWeakObjectPtr<UGameplayEffect>               Def;                                                          // 0x00C0(0x0008)
    int32_t                                       GameplayEffectLevel;                                          // 0x00C8(0x0004)
    int32_t                                       AbilityLevel;                                                 // 0x00CC(0x0004)
    TWeakObjectPtr<USceneComponent>               TargetAttachComponent;                                        // 0x00D0(0x0008)
    bool                                          bReplicateLocationWhenUsingMinimalRepProxy;                   // 0x00D8(0x0001)
    char                                          pa_00D9[0x0007]                                               // 0x00D9(0x0007)
};


// ScriptStruct  Engine.Vector
// Struct Size::0x0018
struct FVector : public FVector
{
};


// ScriptStruct  GameplayAbilities.GameplayEffectRemovalInfo
// Struct Size::0x0020
struct FGameplayEffectRemovalInfo
{
    bool                                          bPrematureRemoval;                                            // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    int32_t                                       StackCount;                                                   // 0x0004(0x0004)
    FGameplayEffectContextHandle                  EffectContext;                                                // 0x0008(0x0018)
};


// ScriptStruct  GameplayAbilities.GameplayEventData
// Struct Size::0x00B0
struct FGameplayEventData
{
    FGameplayTag                                  EventTag;                                                     // 0x0000(0x0008)
    AActor*                                       Instigator;                                                   // 0x0008(0x0008)
    AActor*                                       Target;                                                       // 0x0010(0x0008)
    UObject*                                      OptionalObject;                                               // 0x0018(0x0008)
    UObject*                                      OptionalObject2;                                              // 0x0020(0x0008)
    FGameplayEffectContextHandle                  ContextHandle;                                                // 0x0028(0x0018)
    FGameplayTagContainer                         InstigatorTags;                                               // 0x0040(0x0020)
    FGameplayTagContainer                         TargetTags;                                                   // 0x0060(0x0020)
    float                                         EventMagnitude;                                               // 0x0080(0x0004)
    char                                          pa_0084[0x0004]                                               // 0x0084(0x0004)
    FGameplayAbilityTargetDataHandle              TargetData;                                                   // 0x0088(0x0028)
};


// ScriptStruct  GameplayAbilities.GameplayAbilityTargetDataHandle
// Struct Size::0x0028
struct FGameplayAbilityTargetDataHandle
{
    char                                          pa_0000[0x0028]                                               // 0x0000(0x0028)
};


// ScriptStruct  GameplayAbilities.GameplayTagRequirements
// Struct Size::0x0040
struct FGameplayTagRequirements
{
    FGameplayTagContainer                         RequireTags;                                                  // 0x0000(0x0020)
    FGameplayTagContainer                         IgnoreTags;                                                   // 0x0020(0x0020)
};


// ScriptStruct  GameplayAbilities.GameplayTargetDataFilterHandle
// Struct Size::0x0010
struct FGameplayTargetDataFilterHandle
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
};


// ScriptStruct  GameplayTasks.GameplayResourceSet
// Struct Size::0x0002
struct FGameplayResourceSet
{
    char                                          pa_0000[0x0002]                                               // 0x0000(0x0002)
};


// ScriptStruct  GameplayAbilities.GameplayAbilityActivationInfo
// Struct Size::0x0020
struct FGameplayAbilityActivationInfo
{
    enum class EGameplayAbilityActivationMode     ActivationMode;                                               // 0x0000(0x0001)
    char                                          bCanBeEndedByOtherInstance;                                   // 0x0001(0x0001)
    char                                          pa_0002[0x0006]                                               // 0x0002(0x0006)
    FPredictionKey                                PredictionKeyWhenActivated;                                   // 0x0008(0x0018)
};


// ScriptStruct  GameplayTags.GameplayTagQuery
// Struct Size::0x0048
struct FGameplayTagQuery
{
    int32_t                                       TokenStreamVersion;                                           // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    TArray<FGameplayTag>                          TagDictionary;                                                // 0x0008(0x0010)
    TArray<char>                                  QueryTokenStream;                                             // 0x0018(0x0010)
    FString                                       UserDescription;                                              // 0x0028(0x0010)
    FString                                       AutoDescription;                                              // 0x0038(0x0010)
};


// ScriptStruct  GameplayAbilities.GameplayEffectQuery
// Struct Size::0x0150
struct FGameplayEffectQuery
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
    FDelegate                                     CustomMatchDelegate;                                          // 0x0010(0x0010)
    FGameplayTagQuery                             OwningTagQuery;                                               // 0x0020(0x0048)
    FGameplayTagQuery                             EffectTagQuery;                                               // 0x0068(0x0048)
    FGameplayTagQuery                             SourceTagQuery;                                               // 0x00B0(0x0048)
    FGameplayAttribute                            ModifyingAttribute;                                           // 0x00F8(0x0038)
    UObject*                                      EffectSource;                                                 // 0x0130(0x0008)
    UGameplayEffect*                              EffectDefinition;                                             // 0x0138(0x0008)
    char                                          pa_0140[0x0010]                                               // 0x0140(0x0010)
};


// ScriptStruct  GameplayAbilities.GameplayEffectSpecForRPC
// Struct Size::0x0078
struct FGameplayEffectSpecForRPC
{
    UGameplayEffect*                              Def;                                                          // 0x0000(0x0008)
    TArray<FGameplayEffectModifiedAttribute>      ModifiedAttributes;                                           // 0x0008(0x0010)
    FGameplayEffectContextHandle                  EffectContext;                                                // 0x0018(0x0018)
    FGameplayTagContainer                         AggregatedSourceTags;                                         // 0x0030(0x0020)
    FGameplayTagContainer                         AggregatedTargetTags;                                         // 0x0050(0x0020)
    float                                         Level;                                                        // 0x0070(0x0004)
    float                                         AbilityLevel;                                                 // 0x0074(0x0004)
};


// ScriptStruct  GameplayAbilities.ServerAbilityRPCBatch
// Struct Size::0x0050
struct FServerAbilityRPCBatch
{
    FGameplayAbilitySpecHandle                    AbilitySpecHandle;                                            // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FPredictionKey                                PredictionKey;                                                // 0x0008(0x0018)
    FGameplayAbilityTargetDataHandle              TargetData;                                                   // 0x0020(0x0028)
    bool                                          InputPressed;                                                 // 0x0048(0x0001)
    bool                                          Ended;                                                        // 0x0049(0x0001)
    bool                                          Started;                                                      // 0x004A(0x0001)
    char                                          pa_004B[0x0005]                                               // 0x004B(0x0005)
};


// ScriptStruct  Engine.Vector
// Struct Size::0x0018
struct FVector : public FVector
{
};


// ScriptStruct  NetCore.FastArraySerializer
// Struct Size::0x0108
struct FFastArraySerializer
{
    char                                          pa_0000[0x0054]                                               // 0x0000(0x0054)
    int32_t                                       ArrayReplicationKey;                                          // 0x0054(0x0004)
    char                                          pa_0058[0x00A8]                                               // 0x0058(0x00A8)
    enum class EFastArraySerializerDeltaFlags     DeltaFlags;                                                   // 0x0100(0x0001)
    char                                          pa_0101[0x0007]                                               // 0x0101(0x0007)
};


// ScriptStruct  GameplayAbilities.ReplicatedPredictionKeyMap
// Struct Size::0x0118
struct FReplicatedPredictionKeyMap : public FFastArraySerializer
{
    TArray<FReplicatedPredictionKeyItem>          PredictionKeys;                                               // 0x0108(0x0010)
};


// ScriptStruct  GameplayAbilities.ReplicatedPredictionKeyItem
// Struct Size::0x0028
struct FReplicatedPredictionKeyItem : public FFastArraySerializerItem
{
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FPredictionKey                                PredictionKey;                                                // 0x0010(0x0018)
};


// ScriptStruct  GameplayAbilities.MinimalReplicationTagCountMap
// Struct Size::0x0060
struct FMinimalReplicationTagCountMap
{
    char                                          pa_0000[0x0050]                                               // 0x0000(0x0050)
    UAbilitySystemComponent*                      Owner;                                                        // 0x0050(0x0008)
    char                                          pa_0058[0x0008]                                               // 0x0058(0x0008)
};


// ScriptStruct  GameplayAbilities.ActiveGameplayCueContainer
// Struct Size::0x0128
struct FActiveGameplayCueContainer : public FFastArraySerializer
{
    TArray<FActiveGameplayCue>                    GameplayCues;                                                 // 0x0108(0x0010)
    char                                          pa_0118[0x0008]                                               // 0x0118(0x0008)
    UAbilitySystemComponent*                      Owner;                                                        // 0x0120(0x0008)
};


// ScriptStruct  GameplayAbilities.ActiveGameplayCue
// Struct Size::0x0118
struct FActiveGameplayCue : public FFastArraySerializerItem
{
    FGameplayTag                                  GameplayCueTag;                                               // 0x000C(0x0008)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FPredictionKey                                PredictionKey;                                                // 0x0018(0x0018)
    FGameplayCueParameters                        Parameters;                                                   // 0x0030(0x00E0)
    bool                                          bPredictivelyRemoved;                                         // 0x0110(0x0001)
    char                                          pa_0111[0x0007]                                               // 0x0111(0x0007)
};


// ScriptStruct  GameplayAbilities.ActiveGameplayEffectsContainer
// Struct Size::0x05B8
struct FActiveGameplayEffectsContainer : public FFastArraySerializer
{
    char                                          pa_0108[0x0028]                                               // 0x0108(0x0028)
    TArray<FActiveGameplayEffect>                 GameplayEffects;                                              // 0x0130(0x0010)
    char                                          pa_0140[0x0450]                                               // 0x0140(0x0450)
    TArray<UGameplayEffect*>                      ApplicationImmunityQueryEffects;                              // 0x0590(0x0010)
    char                                          pa_05A0[0x0018]                                               // 0x05A0(0x0018)
};


// ScriptStruct  GameplayAbilities.GameplayAbilityLocalAnimMontage
// Struct Size::0x0038
struct FGameplayAbilityLocalAnimMontage
{
    UAnimMontage*                                 AnimMontage;                                                  // 0x0000(0x0008)
    char                                          PlayInstanceId;                                               // 0x0008(0x0001)
    char                                          pa_0009[0x0007]                                               // 0x0009(0x0007)
    FPredictionKey                                PredictionKey;                                                // 0x0010(0x0018)
    UGameplayAbility*                             AnimatingAbility;                                             // 0x0028(0x0008)
    char                                          pa_0030[0x0008]                                               // 0x0030(0x0008)
};


// ScriptStruct  GameplayAbilities.GameplayAbilityRepAnimMontage
// Struct Size::0x0038
struct FGameplayAbilityRepAnimMontage
{
    UAnimMontage*                                 AnimMontage;                                                  // 0x0000(0x0008)
    float                                         PlayRate;                                                     // 0x0008(0x0004)
    float                                         position;                                                     // 0x000C(0x0004)
    float                                         BlendTime;                                                    // 0x0010(0x0004)
    char                                          NextSectionID;                                                // 0x0014(0x0001)
    char                                          PlayInstanceId;                                               // 0x0015(0x0001)
    char                                          bRepPosition;                                                 // 0x0016(0x0001)
    char                                          IsStopped;                                                    // 0x0016(0x0001)
    char                                          SkipPositionCorrection;                                       // 0x0016(0x0001)
    char                                          bSkipPlayRate;                                                // 0x0016(0x0001)
    char                                          pa_0017[0x0001]                                               // 0x0017(0x0001)
    FPredictionKey                                PredictionKey;                                                // 0x0018(0x0018)
    char                                          SectionIdToPlay;                                              // 0x0030(0x0001)
    char                                          pa_0031[0x0007]                                               // 0x0031(0x0007)
};


// ScriptStruct  GameplayAbilities.GameplayAbilitySpecContainer
// Struct Size::0x0120
struct FGameplayAbilitySpecContainer : public FFastArraySerializer
{
    TArray<FGameplayAbilitySpec>                  Items;                                                        // 0x0108(0x0010)
    UAbilitySystemComponent*                      Owner;                                                        // 0x0118(0x0008)
};


// ScriptStruct  GameplayAbilities.GameplayAbilitySpec
// Struct Size::0x00F8
struct FGameplayAbilitySpec : public FFastArraySerializerItem
{
    FGameplayAbilitySpecHandle                    Handle;                                                       // 0x000C(0x0004)
    UGameplayAbility*                             Ability;                                                      // 0x0010(0x0008)
    int32_t                                       Level;                                                        // 0x0018(0x0004)
    int32_t                                       InputID;                                                      // 0x001C(0x0004)
    TWeakObjectPtr<UObject>                       SourceObject;                                                 // 0x0020(0x0008)
    char                                          ActiveCount;                                                  // 0x0028(0x0001)
    char                                          InputPressed;                                                 // 0x0029(0x0001)
    char                                          RemoveAfterActivation;                                        // 0x0029(0x0001)
    char                                          PendingRemove;                                                // 0x0029(0x0001)
    char                                          bActivateOnce;                                                // 0x0029(0x0001)
    char                                          pa_002A[0x0006]                                               // 0x002A(0x0006)
    FGameplayAbilityActivationInfo                ActivationInfo;                                               // 0x0030(0x0020)
    FGameplayTagContainer                         DynamicAbilityTags;                                           // 0x0050(0x0020)
    TArray<UGameplayAbility*>                     NonReplicatedInstances;                                       // 0x0070(0x0010)
    TArray<UGameplayAbility*>                     ReplicatedInstances;                                          // 0x0080(0x0010)
    FActiveGameplayEffectHandle                   GameplayEffectHandle;                                         // 0x0090(0x0008)
    char                                          pa_0098[0x0060]                                               // 0x0098(0x0060)
};


// ScriptStruct  GameplayAbilities.AttributeDefaults
// Struct Size::0x0010
struct FAttributeDefaults
{
    UAttributeSet*                                Attributes;                                                   // 0x0000(0x0008)
    UDataTable*                                   DefaultStartingTable;                                         // 0x0008(0x0008)
};


// ScriptStruct  Niagara.NiagaraSimCacheCreateParameters
// Struct Size::0x0038
struct FNiagaraSimCacheCreateParameters
{
    enum class ENiagaraSimCacheAttributeCaptureModeAttributeCaptureMode;                                        // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    char                                          bAllowRebasing;                                               // 0x0004(0x0001)
    char                                          bAllowDataInterfaceCaching;                                   // 0x0004(0x0001)
    char                                          pa_0005[0x0003]                                               // 0x0005(0x0003)
    TArray<FName>                                 RebaseIncludeAttributes;                                      // 0x0008(0x0010)
    TArray<FName>                                 RebaseExcludeAttributes;                                      // 0x0018(0x0010)
    TArray<FName>                                 ExplicitCaptureAttributes;                                    // 0x0028(0x0010)
};


// ScriptStruct  EnhancedInput.InputActionValue
// Struct Size::0x0020
struct FInputActionValue
{
    char                                          pa_0000[0x0020]                                               // 0x0000(0x0020)
};


// ScriptStruct  Water.SphericalPontoon
// Struct Size::0x02D0
struct FSphericalPontoon
{
    FName                                         CenterSocket;                                                 // 0x0000(0x0008)
    FVector                                       RelativeLocation;                                             // 0x0008(0x0018)
    float                                         Radius;                                                       // 0x0020(0x0004)
    bool                                          bFXEnabled;                                                   // 0x0024(0x0001)
    char                                          pa_0025[0x0003]                                               // 0x0025(0x0003)
    FVector                                       LocalForce;                                                   // 0x0028(0x0018)
    FVector                                       CenterLocation;                                               // 0x0040(0x0018)
    char                                          pa_0058[0x0008]                                               // 0x0058(0x0008)
    FQuat                                         SocketRotation;                                               // 0x0060(0x0020)
    FVector                                       Offset;                                                       // 0x0080(0x0018)
    char                                          pa_0098[0x0004]                                               // 0x0098(0x0004)
    float                                         WaterHeight;                                                  // 0x009C(0x0004)
    float                                         WaterDepth;                                                   // 0x00A0(0x0004)
    float                                         ImmersionDepth;                                               // 0x00A4(0x0004)
    FVector                                       WaterPlaneLocation;                                           // 0x00A8(0x0018)
    FVector                                       WaterPlaneNormal;                                             // 0x00C0(0x0018)
    FVector                                       WaterSurfacePosition;                                         // 0x00D8(0x0018)
    FVector                                       WaterVelocity;                                                // 0x00F0(0x0018)
    int32_t                                       WaterBodyIndex;                                               // 0x0108(0x0004)
    bool                                          bIsInWater;                                                   // 0x010C(0x0001)
    char                                          pa_010D[0x01AB]                                               // 0x010D(0x01AB)
    UWaterBodyComponent*                          CurrentWaterBodyComponent;                                    // 0x02B8(0x0008)
    char                                          pa_02C0[0x0010]                                               // 0x02C0(0x0010)
};


// ScriptStruct  SlateCore.Geometry
// Struct Size::0x0040
struct FGeometry
{
    char                                          pa_0000[0x0040]                                               // 0x0000(0x0040)
};


// ScriptStruct  SlateCore.SlateBrush
// Struct Size::0x00D0
struct FSlateBrush
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
    char                                          bIsDynamicallyLoaded;                                         // 0x0010(0x0001)
    char                                          bHasUObject;                                                  // 0x0010(0x0001)
    enum class ESlateBrushDrawType                DrawAs;                                                       // 0x0011(0x0001)
    enum class ESlateBrushTileType                Tiling;                                                       // 0x0012(0x0001)
    enum class ESlateBrushMirrorType              Mirroring;                                                    // 0x0013(0x0001)
    enum class ESlateBrushImageType               ImageType;                                                    // 0x0014(0x0001)
    char                                          pa_0015[0x0003]                                               // 0x0015(0x0003)
    FVector2D                                     ImageSize;                                                    // 0x0018(0x0010)
    FMargin                                       Margin;                                                       // 0x0028(0x0010)
    FSlateColor                                   TintColor;                                                    // 0x0038(0x0014)
    char                                          pa_004C[0x0004]                                               // 0x004C(0x0004)
    FSlateBrushOutlineSettings                    OutlineSettings;                                              // 0x0050(0x0040)
    UObject*                                      ResourceObject;                                               // 0x0090(0x0008)
    FName                                         ResourceName;                                                 // 0x0098(0x0008)
    FBox2f                                        UVRegion;                                                     // 0x00A0(0x0014)
    char                                          pa_00B4[0x001C]                                               // 0x00B4(0x001C)
};


// ScriptStruct  SlateCore.SlateBrushOutlineSettings
// Struct Size::0x0040
struct FSlateBrushOutlineSettings
{
    FVector4                                      CornerRadii;                                                  // 0x0000(0x0020)
    FSlateColor                                   Color;                                                        // 0x0020(0x0014)
    float                                         Width;                                                        // 0x0034(0x0004)
    enum class ESlateBrushRoundingType            RoundingType;                                                 // 0x0038(0x0001)
    bool                                          bUseBrushTransparency;                                        // 0x0039(0x0001)
    char                                          pa_003A[0x0006]                                               // 0x003A(0x0006)
};


// ScriptStruct  SlateCore.SlateColor
// Struct Size::0x0014
struct FSlateColor
{
    FLinearColor                                  SpecifiedColor;                                               // 0x0000(0x0010)
    enum class ESlateColorStylingMode             ColorUseRule;                                                 // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
};


// ScriptStruct  SlateCore.Margin
// Struct Size::0x0010
struct FMargin
{
    float                                         Left;                                                         // 0x0000(0x0004)
    float                                         Top;                                                          // 0x0004(0x0004)
    float                                         Right;                                                        // 0x0008(0x0004)
    float                                         Bottom;                                                       // 0x000C(0x0004)
};


// ScriptStruct  UMG.FieldNotificationId
// Struct Size::0x0008
struct FFieldNotificationId
{
    FName                                         FieldName;                                                    // 0x0000(0x0008)
};


// ScriptStruct  UMG.EventReply
// Struct Size::0x00B8
struct FEventReply
{
    char                                          pa_0000[0x00B8]                                               // 0x0000(0x00B8)
};


// ScriptStruct  SlateCore.InputEvent
// Struct Size::0x0020
struct FInputEvent
{
    char                                          pa_0000[0x0020]                                               // 0x0000(0x0020)
};


// ScriptStruct  SlateCore.PointerEvent
// Struct Size::0x0098
struct FPointerEvent : public FInputEvent
{
    char                                          pa_0020[0x0078]                                               // 0x0020(0x0078)
};


// ScriptStruct  UMG.WidgetTransform
// Struct Size::0x0038
struct FWidgetTransform
{
    FVector2D                                     Translation;                                                  // 0x0000(0x0010)
    FVector2D                                     Scale;                                                        // 0x0010(0x0010)
    FVector2D                                     Shear;                                                        // 0x0020(0x0010)
    float                                         Angle;                                                        // 0x0030(0x0004)
    char                                          pa_0034[0x0004]                                               // 0x0034(0x0004)
};


// ScriptStruct  SlateCore.SlateWidgetStyle
// Struct Size::0x0008
struct FSlateWidgetStyle
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
};


// ScriptStruct  SlateCore.TableRowStyle
// Struct Size::0x0D50
struct FTableRowStyle : public FSlateWidgetStyle
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FSlateBrush                                   SelectorFocusedBrush;                                         // 0x0010(0x00D0)
    FSlateBrush                                   ActiveHoveredBrush;                                           // 0x00E0(0x00D0)
    FSlateBrush                                   ActiveBrush;                                                  // 0x01B0(0x00D0)
    FSlateBrush                                   InactiveHoveredBrush;                                         // 0x0280(0x00D0)
    FSlateBrush                                   InactiveBrush;                                                // 0x0350(0x00D0)
    bool                                          bUseParentRowBrush;                                           // 0x0420(0x0001)
    char                                          pa_0421[0x000F]                                               // 0x0421(0x000F)
    FSlateBrush                                   ParentRowBackgroundBrush;                                     // 0x0430(0x00D0)
    FSlateBrush                                   ParentRowBackgroundHoveredBrush;                              // 0x0500(0x00D0)
    FSlateBrush                                   EvenRowBackgroundHoveredBrush;                                // 0x05D0(0x00D0)
    FSlateBrush                                   EvenRowBackgroundBrush;                                       // 0x06A0(0x00D0)
    FSlateBrush                                   OddRowBackgroundHoveredBrush;                                 // 0x0770(0x00D0)
    FSlateBrush                                   OddRowBackgroundBrush;                                        // 0x0840(0x00D0)
    FSlateColor                                   TextColor;                                                    // 0x0910(0x0014)
    FSlateColor                                   SelectedTextColor;                                            // 0x0924(0x0014)
    char                                          pa_0938[0x0008]                                               // 0x0938(0x0008)
    FSlateBrush                                   DropIndicator;                                                // 0x0940(0x00D0)
    FSlateBrush                                   DropIndicator;                                                // 0x0A10(0x00D0)
    FSlateBrush                                   DropIndicator;                                                // 0x0AE0(0x00D0)
    FSlateBrush                                   ActiveHighlightedBrush;                                       // 0x0BB0(0x00D0)
    FSlateBrush                                   InactiveHighlightedBrush;                                     // 0x0C80(0x00D0)
};


// ScriptStruct  SlateCore.ComboBoxStyle
// Struct Size::0x0660
struct FComboBoxStyle : public FSlateWidgetStyle
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FComboButtonStyle                             ComboButtonStyle;                                             // 0x0010(0x0600)
    FSlateSound                                   PressedSlateSound;                                            // 0x0610(0x0018)
    FSlateSound                                   SelectionChangeSlateSound;                                    // 0x0628(0x0018)
    FMargin                                       ContentPadding;                                               // 0x0640(0x0010)
    FMargin                                       MenuRowPadding;                                               // 0x0650(0x0010)
};


// ScriptStruct  SlateCore.SlateSound
// Struct Size::0x0018
struct FSlateSound
{
    UObject*                                      ResourceObject;                                               // 0x0000(0x0008)
    char                                          pa_0008[0x0010]                                               // 0x0008(0x0010)
};


// ScriptStruct  SlateCore.ComboButtonStyle
// Struct Size::0x0600
struct FComboButtonStyle : public FSlateWidgetStyle
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FButtonStyle                                  ButtonStyle;                                                  // 0x0010(0x03F0)
    FSlateBrush                                   DownArrowImage;                                               // 0x0400(0x00D0)
    FVector2D                                     ShadowOffset;                                                 // 0x04D0(0x0010)
    FLinearColor                                  ShadowColorAndOpacity;                                        // 0x04E0(0x0010)
    FSlateBrush                                   MenuBorderBrush;                                              // 0x04F0(0x00D0)
    FMargin                                       MenuBorderPadding;                                            // 0x05C0(0x0010)
    FMargin                                       ContentPadding;                                               // 0x05D0(0x0010)
    FMargin                                       DownArrowPadding;                                             // 0x05E0(0x0010)
    enum class EVerticalAlignment                 DownArrowAlign;                                               // 0x05F0(0x0001)
    char                                          pa_05F1[0x000F]                                               // 0x05F1(0x000F)
};


// ScriptStruct  SlateCore.ButtonStyle
// Struct Size::0x03F0
struct FButtonStyle : public FSlateWidgetStyle
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FSlateBrush                                   Normal;                                                       // 0x0010(0x00D0)
    FSlateBrush                                   Hovered;                                                      // 0x00E0(0x00D0)
    FSlateBrush                                   Pressed;                                                      // 0x01B0(0x00D0)
    FSlateBrush                                   Disabled;                                                     // 0x0280(0x00D0)
    FSlateColor                                   NormalForeground;                                             // 0x0350(0x0014)
    FSlateColor                                   HoveredForeground;                                            // 0x0364(0x0014)
    FSlateColor                                   PressedForeground;                                            // 0x0378(0x0014)
    FSlateColor                                   DisabledForeground;                                           // 0x038C(0x0014)
    FMargin                                       NormalPadding;                                                // 0x03A0(0x0010)
    FMargin                                       PressedPadding;                                               // 0x03B0(0x0010)
    FSlateSound                                   PressedSlateSound;                                            // 0x03C0(0x0018)
    FSlateSound                                   HoveredSlateSound;                                            // 0x03D8(0x0018)
};


// ScriptStruct  SlateCore.SlateFontInfo
// Struct Size::0x0058
struct FSlateFontInfo
{
    UObject*                                      FontObject;                                                   // 0x0000(0x0008)
    UObject*                                      FontMaterial;                                                 // 0x0008(0x0008)
    FFontOutlineSettings                          OutlineSettings;                                              // 0x0010(0x0020)
    char                                          pa_0030[0x0010]                                               // 0x0030(0x0010)
    FName                                         TypefaceFontName;                                             // 0x0040(0x0008)
    int32_t                                       Size;                                                         // 0x0048(0x0004)
    int32_t                                       LetterSpacing;                                                // 0x004C(0x0004)
    float                                         SkewAmount;                                                   // 0x0050(0x0004)
    char                                          pa_0054[0x0004]                                               // 0x0054(0x0004)
};


// ScriptStruct  SlateCore.FontOutlineSettings
// Struct Size::0x0020
struct FFontOutlineSettings
{
    int32_t                                       OutlineSize;                                                  // 0x0000(0x0004)
    bool                                          bSeparateFillAlpha;                                           // 0x0004(0x0001)
    bool                                          bApplyOutlineToDropShadows;                                   // 0x0005(0x0001)
    char                                          pa_0006[0x0002]                                               // 0x0006(0x0002)
    UObject*                                      OutlineMaterial;                                              // 0x0008(0x0008)
    FLinearColor                                  OutlineColor;                                                 // 0x0010(0x0010)
};


// ScriptStruct  UMG.ShapedTextOptions
// Struct Size::0x0003
struct FShapedTextOptions
{
    char                                          bOverride;                                                    // 0x0000(0x0001)
    char                                          bOverride;                                                    // 0x0000(0x0001)
    enum class ETextShapingMethod                 TextShapingMethod;                                            // 0x0001(0x0001)
    enum class ETextFlowDirection                 TextFlowDirection;                                            // 0x0002(0x0001)
};


// ScriptStruct  Slate.VirtualKeyboardOptions
// Struct Size::0x0001
struct FVirtualKeyboardOptions
{
    bool                                          bEnableAutocorrect;                                           // 0x0000(0x0001)
};


// ScriptStruct  SlateCore.EditableTextStyle
// Struct Size::0x02F0
struct FEditableTextStyle : public FSlateWidgetStyle
{
    FSlateFontInfo                                Font;                                                         // 0x0008(0x0058)
    FSlateColor                                   ColorAndOpacity;                                              // 0x0060(0x0014)
    char                                          pa_0074[0x000C]                                               // 0x0074(0x000C)
    FSlateBrush                                   BackgroundImageSelected;                                      // 0x0080(0x00D0)
    FSlateBrush                                   BackgroundImageComposing;                                     // 0x0150(0x00D0)
    FSlateBrush                                   CaretImage;                                                   // 0x0220(0x00D0)
};


// ScriptStruct  SlateCore.EditableTextBoxStyle
// Struct Size::0x0E80
struct FEditableTextBoxStyle : public FSlateWidgetStyle
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FSlateBrush                                   BackgroundImageNormal;                                        // 0x0010(0x00D0)
    FSlateBrush                                   BackgroundImageHovered;                                       // 0x00E0(0x00D0)
    FSlateBrush                                   BackgroundImageFocused;                                       // 0x01B0(0x00D0)
    FSlateBrush                                   BackgroundImageReadOnly;                                      // 0x0280(0x00D0)
    FMargin                                       Padding;                                                      // 0x0350(0x0010)
    FTextBlockStyle                               TextStyle;                                                    // 0x0360(0x0340)
    FSlateColor                                   ForegroundColor;                                              // 0x06A0(0x0014)
    FSlateColor                                   BackgroundColor;                                              // 0x06B4(0x0014)
    FSlateColor                                   ReadOnlyForegroundColor;                                      // 0x06C8(0x0014)
    FSlateColor                                   FocusedForegroundColor;                                       // 0x06DC(0x0014)
    FMargin                                       HScrollBarPadding;                                            // 0x06F0(0x0010)
    FMargin                                       VScrollBarPadding;                                            // 0x0700(0x0010)
    FScrollBarStyle                               ScrollBarStyle;                                               // 0x0710(0x0770)
};


// ScriptStruct  SlateCore.ScrollBarStyle
// Struct Size::0x0770
struct FScrollBarStyle : public FSlateWidgetStyle
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FSlateBrush                                   HorizontalBackgroundImage;                                    // 0x0010(0x00D0)
    FSlateBrush                                   VerticalBackgroundImage;                                      // 0x00E0(0x00D0)
    FSlateBrush                                   VerticalTopSlotImage;                                         // 0x01B0(0x00D0)
    FSlateBrush                                   HorizontalTopSlotImage;                                       // 0x0280(0x00D0)
    FSlateBrush                                   VerticalBottomSlotImage;                                      // 0x0350(0x00D0)
    FSlateBrush                                   HorizontalBottomSlotImage;                                    // 0x0420(0x00D0)
    FSlateBrush                                   NormalThumbImage;                                             // 0x04F0(0x00D0)
    FSlateBrush                                   HoveredThumbImage;                                            // 0x05C0(0x00D0)
    FSlateBrush                                   DraggedThumbImage;                                            // 0x0690(0x00D0)
    float                                         Thickness;                                                    // 0x0760(0x0004)
    char                                          pa_0764[0x000C]                                               // 0x0764(0x000C)
};


// ScriptStruct  SlateCore.TextBlockStyle
// Struct Size::0x0340
struct FTextBlockStyle : public FSlateWidgetStyle
{
    FSlateFontInfo                                Font;                                                         // 0x0008(0x0058)
    FSlateColor                                   ColorAndOpacity;                                              // 0x0060(0x0014)
    char                                          pa_0074[0x0004]                                               // 0x0074(0x0004)
    FVector2D                                     ShadowOffset;                                                 // 0x0078(0x0010)
    FLinearColor                                  ShadowColorAndOpacity;                                        // 0x0088(0x0010)
    FSlateColor                                   SelectedBackgroundColor;                                      // 0x0098(0x0014)
    FSlateColor                                   HighlightColor;                                               // 0x00AC(0x0014)
    FSlateBrush                                   HighlightShape;                                               // 0x00C0(0x00D0)
    FSlateBrush                                   StrikeBrush;                                                  // 0x0190(0x00D0)
    FSlateBrush                                   UnderlineBrush;                                               // 0x0260(0x00D0)
    enum class ETextTransformPolicy               TransformPolicy;                                              // 0x0330(0x0001)
    enum class ETextOverflowPolicy                OverflowPolicy;                                               // 0x0331(0x0001)
    char                                          pa_0332[0x000E]                                               // 0x0332(0x000E)
};


// ScriptStruct  Slate.InputChord
// Struct Size::0x0020
struct FInputChord
{
    FKey                                          Key;                                                          // 0x0000(0x0018)
    char                                          bShift;                                                       // 0x0018(0x0001)
    char                                          bCtrl;                                                        // 0x0018(0x0001)
    char                                          bAlt;                                                         // 0x0018(0x0001)
    char                                          bCmd;                                                         // 0x0018(0x0001)
    char                                          pa_0019[0x0007]                                               // 0x0019(0x0007)
};


// ScriptStruct  SlateCore.SpinBoxStyle
// Struct Size::0x0600
struct FSpinBoxStyle : public FSlateWidgetStyle
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FSlateBrush                                   BackgroundBrush;                                              // 0x0010(0x00D0)
    FSlateBrush                                   ActiveBackgroundBrush;                                        // 0x00E0(0x00D0)
    FSlateBrush                                   HoveredBackgroundBrush;                                       // 0x01B0(0x00D0)
    FSlateBrush                                   ActiveFillBrush;                                              // 0x0280(0x00D0)
    FSlateBrush                                   HoveredFillBrush;                                             // 0x0350(0x00D0)
    FSlateBrush                                   InactiveFillBrush;                                            // 0x0420(0x00D0)
    FSlateBrush                                   ArrowsImage;                                                  // 0x04F0(0x00D0)
    FSlateColor                                   ForegroundColor;                                              // 0x05C0(0x0014)
    FMargin                                       TextPadding;                                                  // 0x05D4(0x0010)
    FMargin                                       InsetPadding;                                                 // 0x05E4(0x0010)
    char                                          pa_05F4[0x000C]                                               // 0x05F4(0x000C)
};


// ScriptStruct  UMG.PaintContext
// Struct Size::0x0030
struct FPaintContext
{
    char                                          pa_0000[0x0030]                                               // 0x0000(0x0030)
};


// ScriptStruct  SlateCore.CharacterEvent
// Struct Size::0x0028
struct FCharacterEvent : public FInputEvent
{
    char                                          pa_0020[0x0008]                                               // 0x0020(0x0008)
};


// ScriptStruct  SlateCore.KeyEvent
// Struct Size::0x0040
struct FKeyEvent : public FInputEvent
{
    char                                          pa_0020[0x0020]                                               // 0x0020(0x0020)
};


// ScriptStruct  SlateCore.NavigationEvent
// Struct Size::0x0028
struct FNavigationEvent : public FInputEvent
{
    char                                          pa_0020[0x0008]                                               // 0x0020(0x0008)
};


// ScriptStruct  SlateCore.AnalogInputEvent
// Struct Size::0x0048
struct FAnalogInputEvent : public FKeyEvent
{
    char                                          pa_0040[0x0008]                                               // 0x0040(0x0008)
};


// ScriptStruct  Engine.DataTableRowHandle
// Struct Size::0x0010
struct FDataTableRowHandle
{
    UDataTable*                                   DataTable;                                                    // 0x0000(0x0008)
    FName                                         RowName;                                                      // 0x0008(0x0008)
};


// ScriptStruct  CommonUI.CommonNumberFormattingOptions
// Struct Size::0x0014
struct FCommonNumberFormattingOptions
{
    enum class ERoundingMode                      RoundingMode;                                                 // 0x0000(0x0001)
    bool                                          UseGrouping;                                                  // 0x0001(0x0001)
    char                                          pa_0002[0x0002]                                               // 0x0002(0x0002)
    int32_t                                       MinimumIntegralDigits;                                        // 0x0004(0x0004)
    int32_t                                       MaximumIntegralDigits;                                        // 0x0008(0x0004)
    int32_t                                       MinimumFractionalDigits;                                      // 0x000C(0x0004)
    int32_t                                       MaximumFractionalDigits;                                      // 0x0010(0x0004)
};


// ScriptStruct  Slate.Anchors
// Struct Size::0x0020
struct FAnchors
{
    FVector2D                                     Minimum;                                                      // 0x0000(0x0010)
    FVector2D                                     Maximum;                                                      // 0x0010(0x0010)
};


// ScriptStruct  SlateCore.FocusEvent
// Struct Size::0x0008
struct FFocusEvent
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
};


// ScriptStruct  SlateCore.MotionEvent
// Struct Size::0x0080
struct FMotionEvent : public FInputEvent
{
    char                                          pa_0020[0x0060]                                               // 0x0020(0x0060)
};


// ScriptStruct  UMG.AnimationEventBinding
// Struct Size::0x0028
struct FAnimationEventBinding
{
    UWidgetAnimation*                             Animation;                                                    // 0x0000(0x0008)
    FDelegate                                     Delegate;                                                     // 0x0008(0x0010)
    enum class EWidgetAnimationEvent              AnimationEvent;                                               // 0x0018(0x0001)
    char                                          pa_0019[0x0003]                                               // 0x0019(0x0003)
    FName                                         UserTag;                                                      // 0x001C(0x0008)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
};


// ScriptStruct  UMG.NamedSlotBinding
// Struct Size::0x0010
struct FNamedSlotBinding
{
    FName                                         Name;                                                         // 0x0000(0x0008)
    UWidget*                                      Content;                                                      // 0x0008(0x0008)
};


// ScriptStruct  CommonUI.CommonRegisteredTabInfo
// Struct Size::0x0018
struct FCommonRegisteredTabInfo
{
    int32_t                                       TabIndex;                                                     // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    UCommonButtonBase*                            TabButton;                                                    // 0x0008(0x0008)
    UWidget*                                      ContentInstance;                                              // 0x0010(0x0008)
};


// ScriptStruct  CommonUser.OnlineResultInformation
// Struct Size::0x0030
struct FOnlineResultInformation
{
    bool                                          bWasSuccessful;                                               // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    FString                                       ErrorId;                                                      // 0x0008(0x0010)
    FText                                         ErrorText;                                                    // 0x0018(0x0018)
};


// ScriptStruct  OnlineSubsystemUtils.BlueprintSessionResult
// Struct Size::0x0120
struct FBlueprintSessionResult
{
    char                                          pa_0000[0x0120]                                               // 0x0000(0x0120)
};


// ScriptStruct  OnlineSubsystemUtils.OnlineProxyStoreOffer
// Struct Size::0x0110
struct FOnlineProxyStoreOffer
{
    FString                                       OfferId;                                                      // 0x0000(0x0010)
    FText                                         Title;                                                        // 0x0010(0x0018)
    FText                                         Description;                                                  // 0x0028(0x0018)
    FText                                         LongDescription;                                              // 0x0040(0x0018)
    FText                                         RegularPriceText;                                             // 0x0058(0x0018)
    int32_t                                       RegularPrice;                                                 // 0x0070(0x0004)
    char                                          pa_0074[0x0004]                                               // 0x0074(0x0004)
    FText                                         PriceText;                                                    // 0x0078(0x0018)
    int32_t                                       NumericPrice;                                                 // 0x0090(0x0004)
    char                                          pa_0094[0x0004]                                               // 0x0094(0x0004)
    FString                                       CurrencyCode;                                                 // 0x0098(0x0010)
    FDateTime                                     ReleaseDate;                                                  // 0x00A8(0x0008)
    FDateTime                                     ExpirationDate;                                               // 0x00B0(0x0008)
    enum class EOnlineProxyStoreOfferDiscountType DiscountType;                                                 // 0x00B8(0x0001)
    char                                          pa_00B9[0x0007]                                               // 0x00B9(0x0007)
    TMap<FString,FString>                         DynamicFields;                                                // 0x00C0(0x0050)
};


// ScriptStruct  OnlineSubsystemUtils.InAppPurchaseRestoreInfo2
// Struct Size::0x0030
struct FInAppPurchaseRestoreInfo2
{
    FString                                       ItemName;                                                     // 0x0000(0x0010)
    FString                                       ItemId;                                                       // 0x0010(0x0010)
    FString                                       ValidationInfo;                                               // 0x0020(0x0010)
};


// ScriptStruct  OnlineSubsystemUtils.InAppPurchaseReceiptInfo2
// Struct Size::0x0030
struct FInAppPurchaseReceiptInfo2
{
    FString                                       ItemName;                                                     // 0x0000(0x0010)
    FString                                       ItemId;                                                       // 0x0010(0x0010)
    FString                                       ValidationInfo;                                               // 0x0020(0x0010)
};


// ScriptStruct  UIExtension.UIExtensionRequest
// Struct Size::0x0038
struct FUIExtensionRequest
{
    FUIExtensionHandle                            ExtensionHandle;                                              // 0x0000(0x0018)
    FGameplayTag                                  ExtensionPointTag;                                            // 0x0018(0x0008)
    int32_t                                       Priority;                                                     // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
    UObject*                                      Data;                                                         // 0x0028(0x0008)
    UObject*                                      ContextObject;                                                // 0x0030(0x0008)
};


// ScriptStruct  UIExtension.UIExtensionHandle
// Struct Size::0x0018
struct FUIExtensionHandle
{
    char                                          pa_0000[0x0018]                                               // 0x0000(0x0018)
};


// ScriptStruct  UMG.RadialBoxSettings
// Struct Size::0x0010
struct FRadialBoxSettings
{
    float                                         StartingAngle;                                                // 0x0000(0x0004)
    bool                                          bDistributeItemsEvenly;                                       // 0x0004(0x0001)
    char                                          pa_0005[0x0003]                                               // 0x0005(0x0003)
    float                                         AngleBetweenItems;                                            // 0x0008(0x0004)
    float                                         SectorCentralAngle;                                           // 0x000C(0x0004)
};


// ScriptStruct  UMG.UserWidgetPool
// Struct Size::0x0088
struct FUserWidgetPool
{
    TArray<UUserWidget*>                          ActiveWidgets;                                                // 0x0000(0x0010)
    TArray<UUserWidget*>                          InactiveWidgets;                                              // 0x0010(0x0010)
    char                                          pa_0020[0x0068]                                               // 0x0020(0x0068)
};


// ScriptStruct  UMG.SlateChildSize
// Struct Size::0x0008
struct FSlateChildSize
{
    float                                         Value;                                                        // 0x0000(0x0004)
    enum class ESlateSizeRule                     SizeRule;                                                     // 0x0004(0x0001)
    char                                          pa_0005[0x0003]                                               // 0x0005(0x0003)
};


// ScriptStruct  AudioWidgets.MeterChannelInfo
// Struct Size::0x000C
struct FMeterChannelInfo
{
    float                                         MeterValue;                                                   // 0x0000(0x0004)
    float                                         PeakValue;                                                    // 0x0004(0x0004)
    float                                         ClippingValue;                                                // 0x0008(0x0004)
};


// ScriptStruct  AudioWidgets.AudioMeterStyle
// Struct Size::0x04D0
struct FAudioMeterStyle : public FSlateWidgetStyle
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FSlateBrush                                   MeterValueImage;                                              // 0x0010(0x00D0)
    FSlateBrush                                   BackgroundImage;                                              // 0x00E0(0x00D0)
    FSlateBrush                                   MeterBackgroundImage;                                         // 0x01B0(0x00D0)
    FSlateBrush                                   MeterValueBackgroundImage;                                    // 0x0280(0x00D0)
    FSlateBrush                                   MeterPeakImage;                                               // 0x0350(0x00D0)
    FVector2D                                     MeterSize;                                                    // 0x0420(0x0010)
    FVector2D                                     MeterPadding;                                                 // 0x0430(0x0010)
    float                                         MeterValuePadding;                                            // 0x0440(0x0004)
    float                                         PeakValueWidth;                                               // 0x0444(0x0004)
    FVector2D                                     ValueRangeDb;                                                 // 0x0448(0x0010)
    bool                                          bShowScale;                                                   // 0x0458(0x0001)
    bool                                          bScaleSide;                                                   // 0x0459(0x0001)
    char                                          pa_045A[0x0002]                                               // 0x045A(0x0002)
    float                                         ScaleHashOffset;                                              // 0x045C(0x0004)
    float                                         ScaleHashWidth;                                               // 0x0460(0x0004)
    float                                         ScaleHashHeight;                                              // 0x0464(0x0004)
    int32_t                                       DecibelsPerHash;                                              // 0x0468(0x0004)
    char                                          pa_046C[0x0004]                                               // 0x046C(0x0004)
    FSlateFontInfo                                Font;                                                         // 0x0470(0x0058)
    char                                          pa_04C8[0x0008]                                               // 0x04C8(0x0008)
};


// ScriptStruct  AudioSynesthesia.LoudnessResults
// Struct Size::0x0010
struct FLoudnessResults
{
    float                                         Loudness;                                                     // 0x0000(0x0004)
    float                                         NormalizedLoudness;                                           // 0x0004(0x0004)
    float                                         PerceptualEnergy;                                             // 0x0008(0x0004)
    float                                         TimeSeconds;                                                  // 0x000C(0x0004)
};


// ScriptStruct  AudioSynesthesia.MeterResults
// Struct Size::0x0014
struct FMeterResults
{
    float                                         TimeSeconds;                                                  // 0x0000(0x0004)
    float                                         MeterValue;                                                   // 0x0004(0x0004)
    float                                         PeakValue;                                                    // 0x0008(0x0004)
    int32_t                                       NumSamplesClipping;                                           // 0x000C(0x0004)
    float                                         ClippingValue;                                                // 0x0010(0x0004)
};


// ScriptStruct  AudioSynesthesia.SynesthesiaSpectrumResults
// Struct Size::0x0018
struct FSynesthesiaSpectrumResults
{
    float                                         TimeSeconds;                                                  // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    TArray<float>                                 SpectrumValues;                                               // 0x0008(0x0010)
};


// ScriptStruct  MovieRenderPipelineCore.MoviePipelineOutputData
// Struct Size::0x0028
struct FMoviePipelineOutputData
{
    UMoviePipeline*                               Pipeline;                                                     // 0x0000(0x0008)
    UMoviePipelineExecutorJob*                    Job;                                                          // 0x0008(0x0008)
    bool                                          bSuccess;                                                     // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
    TArray<FMoviePipelineShotOutputData>          ShotData;                                                     // 0x0018(0x0010)
};


// ScriptStruct  MovieRenderPipelineCore.MoviePipelineShotOutputData
// Struct Size::0x0058
struct FMoviePipelineShotOutputData
{
    TWeakObjectPtr<UMoviePipelineExecutorShot>    Shot;                                                         // 0x0000(0x0008)
    TMap<FMoviePipelinePassIdentifier,FMoviePipelineRenderPassOutputData>RenderPassData;                        // 0x0008(0x0050)
};


// ScriptStruct  MovieRenderPipelineCore.MoviePipelinePassIdentifier
// Struct Size::0x0020
struct FMoviePipelinePassIdentifier
{
    FString                                       Name;                                                         // 0x0000(0x0010)
    FString                                       CameraName;                                                   // 0x0010(0x0010)
};


// ScriptStruct  MovieRenderPipelineCore.MoviePipelineRenderPassOutputData
// Struct Size::0x0010
struct FMoviePipelineRenderPassOutputData
{
    TArray<FString>                               FilePaths;                                                    // 0x0000(0x0010)
};


// ScriptStruct  ControlRig.RigBaseElement
// Struct Size::0x00F0
struct FRigBaseElement
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    FRigElementKey                                Key;                                                          // 0x0008(0x000C)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FString                                       NameString;                                                   // 0x0018(0x0010)
    int32_t                                       Index;                                                        // 0x0028(0x0004)
    int32_t                                       SubIndex;                                                     // 0x002C(0x0004)
    bool                                          bSelected;                                                    // 0x0030(0x0001)
    char                                          pa_0031[0x0003]                                               // 0x0031(0x0003)
    int32_t                                       CreatedAtInstructionIndex;                                    // 0x0034(0x0004)
    char                                          pa_0038[0x00B8]                                               // 0x0038(0x00B8)
};


// ScriptStruct  ControlRig.RigElementKey
// Struct Size::0x000C
struct FRigElementKey
{
    enum class ERigElementType                    Type;                                                         // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FName                                         Name;                                                         // 0x0004(0x0008)
};


// ScriptStruct  ControlRig.RigTransformElement
// Struct Size::0x02F0
struct FRigTransformElement : public FRigBaseElement
{
    FRigCurrentAndInitialTransform                Pose;                                                         // 0x00F0(0x01C0)
    char                                          pa_02B0[0x0040]                                               // 0x02B0(0x0040)
};


// ScriptStruct  ControlRig.RigCurrentAndInitialTransform
// Struct Size::0x01C0
struct FRigCurrentAndInitialTransform
{
    FRigLocalAndGlobalTransform                   Current;                                                      // 0x0000(0x00E0)
    FRigLocalAndGlobalTransform                   Initial;                                                      // 0x00E0(0x00E0)
};


// ScriptStruct  ControlRig.RigLocalAndGlobalTransform
// Struct Size::0x00E0
struct FRigLocalAndGlobalTransform
{
    FRigComputedTransform                         Local;                                                        // 0x0000(0x0070)
    FRigComputedTransform                         Global;                                                       // 0x0070(0x0070)
};


// ScriptStruct  ControlRig.RigComputedTransform
// Struct Size::0x0070
struct FRigComputedTransform
{
    FTransform                                    Transform;                                                    // 0x0000(0x0060)
    char                                          pa_0060[0x0010]                                               // 0x0060(0x0010)
};


// ScriptStruct  ControlRig.RigMultiParentElement
// Struct Size::0x03F0
struct FRigMultiParentElement : public FRigTransformElement
{
    char                                          pa_02F0[0x0100]                                               // 0x02F0(0x0100)
};


// ScriptStruct  ControlRig.RigControlElement
// Struct Size::0x0A30
struct FRigControlElement : public FRigMultiParentElement
{
    FRigControlSettings                           Settings;                                                     // 0x03F0(0x0280)
    FRigCurrentAndInitialTransform                Offset;                                                       // 0x0670(0x01C0)
    FRigCurrentAndInitialTransform                Shape;                                                        // 0x0830(0x01C0)
    FRigPreferredEulerAngles                      PreferredEulerAngles;                                         // 0x09F0(0x0038)
    char                                          pa_0A28[0x0008]                                               // 0x0A28(0x0008)
};


// ScriptStruct  ControlRig.RigPreferredEulerAngles
// Struct Size::0x0038
struct FRigPreferredEulerAngles
{
    enum class EEulerRotationOrder                RotationOrder;                                                // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    FVector                                       Current;                                                      // 0x0008(0x0018)
    FVector                                       Initial;                                                      // 0x0020(0x0018)
};


// ScriptStruct  ControlRig.RigControlSettings
// Struct Size::0x0280
struct FRigControlSettings
{
    enum class ERigControlAnimationType           AnimationType;                                                // 0x0000(0x0001)
    enum class ERigControlType                    ControlType;                                                  // 0x0001(0x0001)
    char                                          pa_0002[0x0002]                                               // 0x0002(0x0002)
    FName                                         DisplayName;                                                  // 0x0004(0x0008)
    enum class ERigControlAxis                    PrimaryAxis;                                                  // 0x000C(0x0001)
    bool                                          bIsCurve;                                                     // 0x000D(0x0001)
    char                                          pa_000E[0x0002]                                               // 0x000E(0x0002)
    TArray<FRigControlLimitEnabled>               LimitEnabled;                                                 // 0x0010(0x0010)
    bool                                          bDrawLimits;                                                  // 0x0020(0x0001)
    char                                          pa_0021[0x000F]                                               // 0x0021(0x000F)
    FRigControlValue                              MinimumValue;                                                 // 0x0030(0x00F0)
    FRigControlValue                              MaximumValue;                                                 // 0x0120(0x00F0)
    bool                                          bShapeVisible;                                                // 0x0210(0x0001)
    enum class ERigControlVisibility              ShapeVisibility;                                              // 0x0211(0x0001)
    char                                          pa_0212[0x0002]                                               // 0x0212(0x0002)
    FName                                         ShapeName;                                                    // 0x0214(0x0008)
    FLinearColor                                  ShapeColor;                                                   // 0x021C(0x0010)
    bool                                          bIsTransientControl;                                          // 0x022C(0x0001)
    char                                          pa_022D[0x0003]                                               // 0x022D(0x0003)
    UEnum*                                        ControlEnum;                                                  // 0x0230(0x0008)
    FRigControlElementCustomization               Customization;                                                // 0x0238(0x0020)
    TArray<FRigElementKey>                        DrivenControls;                                               // 0x0258(0x0010)
    char                                          pa_0268[0x0010]                                               // 0x0268(0x0010)
    bool                                          bGroupWithParentControl;                                      // 0x0278(0x0001)
    bool                                          bAnimatable;                                                  // 0x0279(0x0001)
    bool                                          bShapeEnabled;                                                // 0x027A(0x0001)
    char                                          pa_027B[0x0005]                                               // 0x027B(0x0005)
};


// ScriptStruct  ControlRig.RigControlElementCustomization
// Struct Size::0x0020
struct FRigControlElementCustomization
{
    TArray<FRigElementKey>                        AvailableSpaces;                                              // 0x0000(0x0010)
    TArray<FRigElementKey>                        RemovedSpaces;                                                // 0x0010(0x0010)
};


// ScriptStruct  ControlRig.RigControlValue
// Struct Size::0x00F0
struct FRigControlValue
{
    FRigControlValueStorage                       FloatStorage;                                                 // 0x0000(0x0084)
    char                                          pa_0084[0x000C]                                               // 0x0084(0x000C)
    FTransform                                    Storage;                                                      // 0x0090(0x0060)
};


// ScriptStruct  ControlRig.RigControlValueStorage
// Struct Size::0x0084
struct FRigControlValueStorage
{
    float                                         Float00;                                                      // 0x0000(0x0004)
    float                                         Float01;                                                      // 0x0004(0x0004)
    float                                         Float02;                                                      // 0x0008(0x0004)
    float                                         Float03;                                                      // 0x000C(0x0004)
    float                                         Float10;                                                      // 0x0010(0x0004)
    float                                         Float11;                                                      // 0x0014(0x0004)
    float                                         Float12;                                                      // 0x0018(0x0004)
    float                                         Float13;                                                      // 0x001C(0x0004)
    float                                         Float20;                                                      // 0x0020(0x0004)
    float                                         Float21;                                                      // 0x0024(0x0004)
    float                                         Float22;                                                      // 0x0028(0x0004)
    float                                         Float23;                                                      // 0x002C(0x0004)
    float                                         Float30;                                                      // 0x0030(0x0004)
    float                                         Float31;                                                      // 0x0034(0x0004)
    float                                         Float32;                                                      // 0x0038(0x0004)
    float                                         Float33;                                                      // 0x003C(0x0004)
    float                                         Float00;                                                      // 0x0040(0x0004)
    float                                         Float01;                                                      // 0x0044(0x0004)
    float                                         Float02;                                                      // 0x0048(0x0004)
    float                                         Float03;                                                      // 0x004C(0x0004)
    float                                         Float10;                                                      // 0x0050(0x0004)
    float                                         Float11;                                                      // 0x0054(0x0004)
    float                                         Float12;                                                      // 0x0058(0x0004)
    float                                         Float13;                                                      // 0x005C(0x0004)
    float                                         Float20;                                                      // 0x0060(0x0004)
    float                                         Float21;                                                      // 0x0064(0x0004)
    float                                         Float22;                                                      // 0x0068(0x0004)
    float                                         Float23;                                                      // 0x006C(0x0004)
    float                                         Float30;                                                      // 0x0070(0x0004)
    float                                         Float31;                                                      // 0x0074(0x0004)
    float                                         Float32;                                                      // 0x0078(0x0004)
    float                                         Float33;                                                      // 0x007C(0x0004)
    bool                                          bValid;                                                       // 0x0080(0x0001)
    char                                          pa_0081[0x0003]                                               // 0x0081(0x0003)
};


// ScriptStruct  ControlRig.RigControlLimitEnabled
// Struct Size::0x0002
struct FRigControlLimitEnabled
{
    bool                                          bMinimum;                                                     // 0x0000(0x0001)
    bool                                          bMaximum;                                                     // 0x0001(0x0001)
};


// ScriptStruct  ControlRig.RigInfluenceMapPerEvent
// Struct Size::0x0060
struct FRigInfluenceMapPerEvent
{
    TArray<FRigInfluenceMap>                      Maps;                                                         // 0x0000(0x0010)
    TMap<FName,int32_t>                           EventToIndex;                                                 // 0x0010(0x0050)
};


// ScriptStruct  ControlRig.RigInfluenceMap
// Struct Size::0x0068
struct FRigInfluenceMap
{
    FName                                         EventName;                                                    // 0x0000(0x0008)
    TArray<FRigInfluenceEntry>                    Entries;                                                      // 0x0008(0x0010)
    TMap<FRigElementKey,int32_t>                  KeyToIndex;                                                   // 0x0018(0x0050)
};


// ScriptStruct  ControlRig.RigInfluenceEntry
// Struct Size::0x0020
struct FRigInfluenceEntry
{
    FRigElementKey                                Source;                                                       // 0x0000(0x000C)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    TArray<FRigElementKey>                        AffectedList;                                                 // 0x0010(0x0010)
};


// ScriptStruct  ControlRig.ControlRigDrawContainer
// Struct Size::0x0018
struct FControlRigDrawContainer
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    TArray<FControlRigDrawInstruction>            Instructions;                                                 // 0x0008(0x0010)
};


// ScriptStruct  ControlRig.ControlRigDrawInstruction
// Struct Size::0x00D0
struct FControlRigDrawInstruction
{
    FName                                         Name;                                                         // 0x0000(0x0008)
    enum class EControlRigDrawSettings            PrimitiveType;                                                // 0x0008(0x0001)
    char                                          pa_0009[0x0007]                                               // 0x0009(0x0007)
    TArray<FVector>                               Positions;                                                    // 0x0010(0x0010)
    FLinearColor                                  Color;                                                        // 0x0020(0x0010)
    float                                         Thickness;                                                    // 0x0030(0x0004)
    char                                          pa_0034[0x000C]                                               // 0x0034(0x000C)
    FTransform                                    Transform;                                                    // 0x0040(0x0060)
    char                                          pa_00A0[0x0030]                                               // 0x00A0(0x0030)
};


// ScriptStruct  PropertyPath.CachedPropertyPath
// Struct Size::0x0028
struct FCachedPropertyPath
{
    TArray<FPropertyPathSegment>                  Segments;                                                     // 0x0000(0x0010)
    char                                          pa_0010[0x0008]                                               // 0x0010(0x0008)
    UFunction*                                    CachedFunction;                                               // 0x0018(0x0008)
    char                                          pa_0020[0x0008]                                               // 0x0020(0x0008)
};


// ScriptStruct  PropertyPath.PropertyPathSegment
// Struct Size::0x0028
struct FPropertyPathSegment
{
    FName                                         Name;                                                         // 0x0000(0x0008)
    int32_t                                       ArrayIndex;                                                   // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    UStruct*                                      Struct;                                                       // 0x0010(0x0008)
    char                                          pa_0018[0x0010]                                               // 0x0018(0x0010)
};


// ScriptStruct  RigVM.RigVMRuntimeSettings
// Struct Size::0x0018
struct FRigVMRuntimeSettings
{
    int32_t                                       MaximumArraySize;                                             // 0x0000(0x0004)
    char                                          pa_0004[0x0014]                                               // 0x0004(0x0014)
};


// ScriptStruct  ControlRig.RigHierarchySettings
// Struct Size::0x0004
struct FRigHierarchySettings
{
    int32_t                                       ProceduralElementLimit;                                       // 0x0000(0x0004)
};


// ScriptStruct  AppleImageUtils.AppleImageUtilsImageConversionResult
// Struct Size::0x0020
struct FAppleImageUtilsImageConversionResult
{
    FString                                       Error;                                                        // 0x0000(0x0010)
    TArray<char>                                  ImageData;                                                    // 0x0010(0x0010)
};


// ScriptStruct  AkAudio.AKWaapiJsonObject
// Struct Size::0x0010
struct FAKWaapiJsonObject
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
};


// ScriptStruct  AkAudio.AkWaapiSubscriptionId
// Struct Size::0x0008
struct FAkWaapiSubscriptionId
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
};


// ScriptStruct  LocationServicesBPLibrary.LocationServicesData
// Struct Size::0x0018
struct FLocationServicesData
{
    float                                         Timestamp;                                                    // 0x0000(0x0004)
    float                                         Longitude;                                                    // 0x0004(0x0004)
    float                                         Latitude;                                                     // 0x0008(0x0004)
    float                                         HorizontalAccuracy;                                           // 0x000C(0x0004)
    float                                         VerticalAccuracy;                                             // 0x0010(0x0004)
    float                                         Altitude;                                                     // 0x0014(0x0004)
};


// ScriptStruct  LyraGame.InteractionOption
// Struct Size::0x0088
struct FInteractionOption
{
    TScriptInterface<IInteractableTarget>         InteractableTarget;                                           // 0x0000(0x0010)
    FText                                         Text;                                                         // 0x0010(0x0018)
    FText                                         SubText;                                                      // 0x0028(0x0018)
    UGameplayAbility*                             InteractionAbilityToGrant;                                    // 0x0040(0x0008)
    UAbilitySystemComponent*                      TargetAbilitySystem;                                          // 0x0048(0x0008)
    FGameplayAbilitySpecHandle                    TargetInteractionAbilityHandle;                               // 0x0050(0x0004)
    char                                          pa_0054[0x0004]                                               // 0x0054(0x0004)
    TSoftClassPtr<UObject>                        InteractionWidgetClass;                                       // 0x0058(0x0030)
};


// ScriptStruct  LyraGame.TgfDamagePartMonitorConfig
// Struct Size::0x0108
struct FTgfDamagePartMonitorConfig
{
    FGameplayTag                                  ConfigAssetTag;                                               // 0x0000(0x0008)
    FGameplayTagContainer                         SourceRequiredTags;                                           // 0x0008(0x0020)
    FGameplayTagContainer                         TargetRequiredTags;                                           // 0x0028(0x0020)
    FGameplayTagQuery                             SourceTagQuery;                                               // 0x0048(0x0048)
    FGameplayTagQuery                             TargetTagQuery;                                               // 0x0090(0x0048)
    TArray<ULyraGameplayAbility*>                 ActivateGameplayAbilityList;                                  // 0x00D8(0x0010)
    int32_t                                       NeedDamageTimes;                                              // 0x00E8(0x0004)
    float                                         NeedDamageValue;                                              // 0x00EC(0x0004)
    int32_t                                       NeedTriggerTimes;                                             // 0x00F0(0x0004)
    bool                                          IgnoreAutoTrigger;                                            // 0x00F4(0x0001)
    char                                          pa_00F5[0x0003]                                               // 0x00F5(0x0003)
    int32_t                                       CurDamageTimes;                                               // 0x00F8(0x0004)
    float                                         CurDamageValue;                                               // 0x00FC(0x0004)
    int32_t                                       CurTriggerTimes;                                              // 0x0100(0x0004)
    char                                          pa_0104[0x0004]                                               // 0x0104(0x0004)
};


// ScriptStruct  LyraGame.LyraTabDescriptor
// Struct Size::0x0110
struct FLyraTabDescriptor
{
    FName                                         TabId;                                                        // 0x0000(0x0008)
    FText                                         TabText;                                                      // 0x0008(0x0018)
    FSlateBrush                                   IconBrush;                                                    // 0x0020(0x00D0)
    bool                                          bHidden;                                                      // 0x00F0(0x0001)
    bool                                          bIsLock;                                                      // 0x00F1(0x0001)
    char                                          pa_00F2[0x0006]                                               // 0x00F2(0x0006)
    UCommonButtonBase*                            TabButtonType;                                                // 0x00F8(0x0008)
    UCommonUserWidget*                            TabContentType;                                               // 0x0100(0x0008)
    UWidget*                                      CreatedTabContentWidget;                                      // 0x0108(0x0008)
};


// ScriptStruct  ChaosSolverEngine.ChaosPhysicsCollisionInfo
// Struct Size::0x00C0
struct FChaosPhysicsCollisionInfo
{
    UPrimitiveComponent*                          Component;                                                    // 0x0000(0x0008)
    UPrimitiveComponent*                          OtherComponent;                                               // 0x0008(0x0008)
    FVector                                       Location;                                                     // 0x0010(0x0018)
    FVector                                       Normal;                                                       // 0x0028(0x0018)
    FVector                                       AccumulatedImpulse;                                           // 0x0040(0x0018)
    FVector                                       Velocity;                                                     // 0x0058(0x0018)
    FVector                                       OtherVelocity;                                                // 0x0070(0x0018)
    FVector                                       AngularVelocity;                                              // 0x0088(0x0018)
    FVector                                       OtherAngularVelocity;                                         // 0x00A0(0x0018)
    float                                         Mass;                                                         // 0x00B8(0x0004)
    float                                         OtherMass;                                                    // 0x00BC(0x0004)
};


// ScriptStruct  ChaosSolverEngine.ChaosBreakEvent
// Struct Size::0x0058
struct FChaosBreakEvent
{
    UPrimitiveComponent*                          Component;                                                    // 0x0000(0x0008)
    FVector                                       Location;                                                     // 0x0008(0x0018)
    FVector                                       Velocity;                                                     // 0x0020(0x0018)
    FVector                                       AngularVelocity;                                              // 0x0038(0x0018)
    float                                         Mass;                                                         // 0x0050(0x0004)
    int32_t                                       Index;                                                        // 0x0054(0x0004)
};


// ScriptStruct  GeometryCollectionEngine.ChaosBreakingEventData
// Struct Size::0x0038
struct FChaosBreakingEventData
{
    FVector                                       Location;                                                     // 0x0000(0x0018)
    FVector                                       Velocity;                                                     // 0x0018(0x0018)
    float                                         Mass;                                                         // 0x0030(0x0004)
    char                                          pa_0034[0x0004]                                               // 0x0034(0x0004)
};


// ScriptStruct  GeometryCollectionEngine.ChaosCollisionEventData
// Struct Size::0x0080
struct FChaosCollisionEventData
{
    FVector                                       Location;                                                     // 0x0000(0x0018)
    FVector                                       Normal;                                                       // 0x0018(0x0018)
    FVector                                       Velocity1;                                                    // 0x0030(0x0018)
    FVector                                       Velocity2;                                                    // 0x0048(0x0018)
    float                                         Mass1;                                                        // 0x0060(0x0004)
    float                                         Mass2;                                                        // 0x0064(0x0004)
    FVector                                       Impulse;                                                      // 0x0068(0x0018)
};


// ScriptStruct  ChaosSolverEngine.ChaosCrumblingEvent
// Struct Size::0x00C0
struct FChaosCrumblingEvent
{
    UPrimitiveComponent*                          Component;                                                    // 0x0000(0x0008)
    FVector                                       Location;                                                     // 0x0008(0x0018)
    FQuat                                         Orientation;                                                  // 0x0020(0x0020)
    FVector                                       LinearVelocity;                                               // 0x0040(0x0018)
    FVector                                       AngularVelocity;                                              // 0x0058(0x0018)
    float                                         Mass;                                                         // 0x0070(0x0004)
    char                                          pa_0074[0x0004]                                               // 0x0074(0x0004)
    FBox                                          LocalBounds;                                                  // 0x0078(0x0038)
    TArray<int32_t>                               Children;                                                     // 0x00B0(0x0010)
};


// ScriptStruct  ChaosSolverEngine.ChaosRemovalEvent
// Struct Size::0x0028
struct FChaosRemovalEvent
{
    UPrimitiveComponent*                          Component;                                                    // 0x0000(0x0008)
    FVector                                       Location;                                                     // 0x0008(0x0018)
    float                                         Mass;                                                         // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
};


// ScriptStruct  GeometryCollectionEngine.ChaosRemovalEventData
// Struct Size::0x0020
struct FChaosRemovalEventData
{
    FVector                                       Location;                                                     // 0x0000(0x0018)
    float                                         Mass;                                                         // 0x0018(0x0004)
    int32_t                                       ParticleIndex;                                                // 0x001C(0x0004)
};


// ScriptStruct  GeometryCollectionEngine.ChaosTrailingEventData
// Struct Size::0x0050
struct FChaosTrailingEventData
{
    FVector                                       Location;                                                     // 0x0000(0x0018)
    FVector                                       Velocity;                                                     // 0x0018(0x0018)
    FVector                                       AngularVelocity;                                              // 0x0030(0x0018)
    float                                         Mass;                                                         // 0x0048(0x0004)
    int32_t                                       ParticleIndex;                                                // 0x004C(0x0004)
};


// ScriptStruct  Engine.BodyInstanceAsyncPhysicsTickHandle
// Struct Size::0x0008
struct FBodyInstanceAsyncPhysicsTickHandle
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
};


// ScriptStruct  Engine.WalkableSlopeOverride
// Struct Size::0x0010
struct FWalkableSlopeOverride
{
    enum class EWalkableSlopeBehavior             WalkableSlopeBehavior;                                        // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         WalkableSlopeAngle;                                           // 0x0004(0x0004)
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
};


// ScriptStruct  PhysicsCore.BodyInstanceCore
// Struct Size::0x0018
struct FBodyInstanceCore
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
    char                                          bSimulatePhysics;                                             // 0x0010(0x0001)
    char                                          bOverrideMass;                                                // 0x0010(0x0001)
    char                                          bEnableGravity;                                               // 0x0010(0x0001)
    char                                          bAutoWeld;                                                    // 0x0010(0x0001)
    char                                          bStartAwake;                                                  // 0x0010(0x0001)
    char                                          bGenerateWakeEvents;                                          // 0x0010(0x0001)
    char                                          bUpdateMassWhenScaleChanges;                                  // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
};


// ScriptStruct  Engine.BodyInstance
// Struct Size::0x0190
struct FBodyInstance : public FBodyInstanceCore
{
    char                                          pa_0018[0x0006]                                               // 0x0018(0x0006)
    enum class ECollisionChannel                  ObjectType;                                                   // 0x001E(0x0001)
    char                                          pa_001F[0x0001]                                               // 0x001F(0x0001)
    enum class ECollisionEnabled                  CollisionEnabled;                                             // 0x0020(0x0001)
    char                                          pa_0021[0x0038]                                               // 0x0021(0x0038)
    enum class ESleepFamily                       SleepFamily;                                                  // 0x0059(0x0001)
    enum class EDOFMode                           DOFMode;                                                      // 0x005A(0x0001)
    char                                          bUseCCD;                                                      // 0x005B(0x0001)
    char                                          bIgnoreAnalyticCollisions;                                    // 0x005B(0x0001)
    char                                          bNotifyRigidBodyCollision;                                    // 0x005B(0x0001)
    char                                          bSmoothEdgeCollisions;                                        // 0x005B(0x0001)
    char                                          bLockTranslation;                                             // 0x005B(0x0001)
    char                                          bLockRotation;                                                // 0x005B(0x0001)
    char                                          bLockXTranslation;                                            // 0x005B(0x0001)
    char                                          bLockYTranslation;                                            // 0x005C(0x0001)
    char                                          bLockZTranslation;                                            // 0x005C(0x0001)
    char                                          bLockXRotation;                                               // 0x005C(0x0001)
    char                                          bLockYRotation;                                               // 0x005C(0x0001)
    char                                          bLockZRotation;                                               // 0x005C(0x0001)
    char                                          bOverrideMaxAngularVelocity;                                  // 0x005C(0x0001)
    char                                          bOverrideMaxDepenetrationVelocity;                            // 0x005D(0x0001)
    char                                          bOverrideWalkableSlopeOnInstance;                             // 0x005D(0x0001)
    char                                          bInterpolateWhenSubStepping;                                  // 0x005D(0x0001)
    char                                          bInertiaConditioning;                                         // 0x005D(0x0001)
    char                                          pa_005E[0x001A]                                               // 0x005E(0x001A)
    FName                                         CollisionProfileName;                                         // 0x0078(0x0008)
    char                                          PositionSolverIterationCount;                                 // 0x0080(0x0001)
    char                                          VelocitySolverIterationCount;                                 // 0x0081(0x0001)
    char                                          pa_0082[0x0006]                                               // 0x0082(0x0006)
    FCollisionResponse                            CollisionResponses;                                           // 0x0088(0x0030)
    float                                         MaxDepenetrationVelocity;                                     // 0x00B8(0x0004)
    float                                         MassInKgOverride;                                             // 0x00BC(0x0004)
    char                                          pa_00C0[0x0008]                                               // 0x00C0(0x0008)
    float                                         LinearDamping;                                                // 0x00C8(0x0004)
    float                                         AngularDamping;                                               // 0x00CC(0x0004)
    FVector                                       CustomDOFPlaneNormal;                                         // 0x00D0(0x0018)
    FVector                                       COMNudge;                                                     // 0x00E8(0x0018)
    float                                         MassScale;                                                    // 0x0100(0x0004)
    char                                          pa_0104[0x0004]                                               // 0x0104(0x0004)
    FVector                                       InertiaTensorScale;                                           // 0x0108(0x0018)
    char                                          pa_0120[0x0010]                                               // 0x0120(0x0010)
    FWalkableSlopeOverride                        WalkableSlopeOverride;                                        // 0x0130(0x0010)
    UPhysicalMaterial*                            PhysMaterialOverride;                                         // 0x0140(0x0008)
    float                                         MaxAngularVelocity;                                           // 0x0148(0x0004)
    float                                         CustomSleepThresholdMultiplier;                               // 0x014C(0x0004)
    float                                         StabilizationThresholdMultiplier;                             // 0x0150(0x0004)
    float                                         PhysicsBlendWeight;                                           // 0x0154(0x0004)
    char                                          pa_0158[0x0038]                                               // 0x0158(0x0038)
};


// ScriptStruct  Engine.CollisionResponse
// Struct Size::0x0030
struct FCollisionResponse
{
    FCollisionResponseContainer                   ResponseToChannels;                                           // 0x0000(0x0020)
    TArray<FResponseChannel>                      ResponseArray;                                                // 0x0020(0x0010)
};


// ScriptStruct  Engine.ResponseChannel
// Struct Size::0x000C
struct FResponseChannel
{
    FName                                         Channel;                                                      // 0x0000(0x0008)
    enum class ECollisionResponse                 Response;                                                     // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
};


// ScriptStruct  Engine.CollisionResponseContainer
// Struct Size::0x0020
struct FCollisionResponseContainer
{
    enum class ECollisionResponse                 WorldStatic;                                                  // 0x0000(0x0001)
    enum class ECollisionResponse                 WorldDynamic;                                                 // 0x0001(0x0001)
    enum class ECollisionResponse                 Pawn;                                                         // 0x0002(0x0001)
    enum class ECollisionResponse                 Visibility;                                                   // 0x0003(0x0001)
    enum class ECollisionResponse                 Camera;                                                       // 0x0004(0x0001)
    enum class ECollisionResponse                 PhysicsBody;                                                  // 0x0005(0x0001)
    enum class ECollisionResponse                 Vehicle;                                                      // 0x0006(0x0001)
    enum class ECollisionResponse                 Destructible;                                                 // 0x0007(0x0001)
    enum class ECollisionResponse                 EngineTraceChannel1;                                          // 0x0008(0x0001)
    enum class ECollisionResponse                 EngineTraceChannel2;                                          // 0x0009(0x0001)
    enum class ECollisionResponse                 EngineTraceChannel3;                                          // 0x000A(0x0001)
    enum class ECollisionResponse                 EngineTraceChannel4;                                          // 0x000B(0x0001)
    enum class ECollisionResponse                 EngineTraceChannel5;                                          // 0x000C(0x0001)
    enum class ECollisionResponse                 EngineTraceChannel6;                                          // 0x000D(0x0001)
    enum class ECollisionResponse                 GameTraceChannel1;                                            // 0x000E(0x0001)
    enum class ECollisionResponse                 GameTraceChannel2;                                            // 0x000F(0x0001)
    enum class ECollisionResponse                 GameTraceChannel3;                                            // 0x0010(0x0001)
    enum class ECollisionResponse                 GameTraceChannel4;                                            // 0x0011(0x0001)
    enum class ECollisionResponse                 GameTraceChannel5;                                            // 0x0012(0x0001)
    enum class ECollisionResponse                 GameTraceChannel6;                                            // 0x0013(0x0001)
    enum class ECollisionResponse                 GameTraceChannel7;                                            // 0x0014(0x0001)
    enum class ECollisionResponse                 GameTraceChannel8;                                            // 0x0015(0x0001)
    enum class ECollisionResponse                 GameTraceChannel9;                                            // 0x0016(0x0001)
    enum class ECollisionResponse                 GameTraceChannel10;                                           // 0x0017(0x0001)
    enum class ECollisionResponse                 GameTraceChannel11;                                           // 0x0018(0x0001)
    enum class ECollisionResponse                 GameTraceChannel12;                                           // 0x0019(0x0001)
    enum class ECollisionResponse                 GameTraceChannel13;                                           // 0x001A(0x0001)
    enum class ECollisionResponse                 GameTraceChannel14;                                           // 0x001B(0x0001)
    enum class ECollisionResponse                 GameTraceChannel15;                                           // 0x001C(0x0001)
    enum class ECollisionResponse                 GameTraceChannel16;                                           // 0x001D(0x0001)
    enum class ECollisionResponse                 GameTraceChannel17;                                           // 0x001E(0x0001)
    enum class ECollisionResponse                 GameTraceChannel18;                                           // 0x001F(0x0001)
};


// ScriptStruct  Engine.CustomPrimitiveData
// Struct Size::0x0010
struct FCustomPrimitiveData
{
    TArray<float>                                 Data;                                                         // 0x0000(0x0010)
};


// ScriptStruct  Engine.LightingChannels
// Struct Size::0x0001
struct FLightingChannels
{
    char                                          bChannel0;                                                    // 0x0000(0x0001)
    char                                          bChannel1;                                                    // 0x0000(0x0001)
    char                                          bChannel2;                                                    // 0x0000(0x0001)
};


// ScriptStruct  GeometryCollectionEngine.GeometryCollectionRepData
// Struct Size::0x0028
struct FGeometryCollectionRepData
{
    char                                          pa_0000[0x0028]                                               // 0x0000(0x0028)
};


// ScriptStruct  GeometryCollectionEngine.GeomComponentCacheParameters
// Struct Size::0x0050
struct FGeomComponentCacheParameters
{
    enum class EGeometryCollectionCacheType       CacheMode;                                                    // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    UGeometryCollectionCache*                     TargetCache;                                                  // 0x0008(0x0008)
    float                                         ReverseCacheBeginTime;                                        // 0x0010(0x0004)
    bool                                          SaveCollisionData;                                            // 0x0014(0x0001)
    bool                                          DoGenerateCollisionData;                                      // 0x0015(0x0001)
    char                                          pa_0016[0x0002]                                               // 0x0016(0x0002)
    int32_t                                       CollisionDataSizeMax;                                         // 0x0018(0x0004)
    bool                                          DoCollisionDataSpatialHash;                                   // 0x001C(0x0001)
    char                                          pa_001D[0x0003]                                               // 0x001D(0x0003)
    float                                         CollisionDataSpatialHashRadius;                               // 0x0020(0x0004)
    int32_t                                       MaxCollisionPerCell;                                          // 0x0024(0x0004)
    bool                                          SaveBreakingData;                                             // 0x0028(0x0001)
    bool                                          DoGenerateBreakingData;                                       // 0x0029(0x0001)
    char                                          pa_002A[0x0002]                                               // 0x002A(0x0002)
    int32_t                                       BreakingDataSizeMax;                                          // 0x002C(0x0004)
    bool                                          DoBreakingDataSpatialHash;                                    // 0x0030(0x0001)
    char                                          pa_0031[0x0003]                                               // 0x0031(0x0003)
    float                                         BreakingDataSpatialHashRadius;                                // 0x0034(0x0004)
    int32_t                                       MaxBreakingPerCell;                                           // 0x0038(0x0004)
    bool                                          SaveTrailingData;                                             // 0x003C(0x0001)
    bool                                          DoGenerateTrailingData;                                       // 0x003D(0x0001)
    char                                          pa_003E[0x0002]                                               // 0x003E(0x0002)
    int32_t                                       TrailingDataSizeMax;                                          // 0x0040(0x0004)
    float                                         TrailingMinSpeedThreshold;                                    // 0x0044(0x0004)
    float                                         TrailingMinVolumeThreshold;                                   // 0x0048(0x0004)
    char                                          pa_004C[0x0004]                                               // 0x004C(0x0004)
};


// ScriptStruct  GeometryCollectionEngine.GeometryCollectionDamagePropagationData
// Struct Size::0x000C
struct FGeometryCollectionDamagePropagationData
{
    bool                                          bEnabled;                                                     // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         BreakDamagePropagationFactor;                                 // 0x0004(0x0004)
    float                                         ShockDamagePropagationFactor;                                 // 0x0008(0x0004)
};


// ScriptStruct  TypedElementFramework.ScriptTypedElementHandle
// Struct Size::0x0008
struct FScriptTypedElementHandle
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
};


// ScriptStruct  TypedElementRuntime.TypedElementSelectionOptions
// Struct Size::0x0005
struct FTypedElementSelectionOptions
{
    bool                                          bAllowHidden;                                                 // 0x0000(0x0001)
    bool                                          bAllowGroups;                                                 // 0x0001(0x0001)
    bool                                          bAllowLegacyNotifications;                                    // 0x0002(0x0001)
    bool                                          bWarnIfLocked;                                                // 0x0003(0x0001)
    enum class ETypedElementChildInclusionMethod  ChildElementInclusionMethod;                                  // 0x0004(0x0001)
};


// ScriptStruct  TypedElementRuntime.TypedElementSelectionSetState
// Struct Size::0x0018
struct FTypedElementSelectionSetState
{
    TWeakObjectPtr<UTypedElementSelectionSet>     CreatedFromSelectionSet;                                      // 0x0000(0x0008)
    char                                          pa_0008[0x0010]                                               // 0x0008(0x0010)
};


// ScriptStruct  TypedElementRuntime.TypedElementIsSelectedOptions
// Struct Size::0x0001
struct FTypedElementIsSelectedOptions
{
    bool                                          bAllowIndirect;                                               // 0x0000(0x0001)
};


// ScriptStruct  AudioMixer.AudioOutputDeviceInfo
// Struct Size::0x0048
struct FAudioOutputDeviceInfo
{
    FString                                       Name;                                                         // 0x0000(0x0010)
    FString                                       DeviceID;                                                     // 0x0010(0x0010)
    int32_t                                       NumChannels;                                                  // 0x0020(0x0004)
    int32_t                                       SampleRate;                                                   // 0x0024(0x0004)
    enum class EAudioMixerStreamDataFormatType    Format;                                                       // 0x0028(0x0001)
    char                                          pa_0029[0x0007]                                               // 0x0029(0x0007)
    TArray<enum class EAudioMixerChannelType>     OutputChannelArray;                                           // 0x0030(0x0010)
    char                                          bIsSystemDefault;                                             // 0x0040(0x0001)
    char                                          bIsCurrentDevice;                                             // 0x0040(0x0001)
    char                                          pa_0041[0x0007]                                               // 0x0041(0x0007)
};


// ScriptStruct  AudioMixer.SwapAudioOutputResult
// Struct Size::0x0028
struct FSwapAudioOutputResult
{
    FString                                       CurrentDeviceId;                                              // 0x0000(0x0010)
    FString                                       RequestedDeviceId;                                            // 0x0010(0x0010)
    enum class ESwapAudioOutputDeviceResultState  Result;                                                       // 0x0020(0x0001)
    char                                          pa_0021[0x0007]                                               // 0x0021(0x0007)
};


// ScriptStruct  CoreOnline.JoinabilitySettings
// Struct Size::0x0014
struct FJoinabilitySettings
{
    FName                                         SessionName;                                                  // 0x0000(0x0008)
    bool                                          bPublicSearchable;                                            // 0x0008(0x0001)
    bool                                          bAllowInvites;                                                // 0x0009(0x0001)
    bool                                          bJoinViaPresence;                                             // 0x000A(0x0001)
    bool                                          bJoinViaPresenceFriendsOnly;                                  // 0x000B(0x0001)
    int32_t                                       MaxPlayers;                                                   // 0x000C(0x0004)
    int32_t                                       MaxPartySize;                                                 // 0x0010(0x0004)
};


// ScriptStruct  CoreOnline.UniqueNetIdWrapper
// Struct Size::0x0001
struct FUniqueNetIdWrapper
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  AIModule.ActorPerceptionUpdateInfo
// Struct Size::0x0068
struct FActorPerceptionUpdateInfo
{
    int32_t                                       TargetId;                                                     // 0x0000(0x0004)
    TWeakObjectPtr<AActor>                        Target;                                                       // 0x0004(0x0008)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FAIStimulus                                   Stimulus;                                                     // 0x0010(0x0058)
};


// ScriptStruct  AIModule.AIStimulus
// Struct Size::0x0058
struct FAIStimulus
{
    float                                         Age;                                                          // 0x0000(0x0004)
    float                                         ExpirationAge;                                                // 0x0004(0x0004)
    float                                         Strength;                                                     // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FVector                                       StimulusLocation;                                             // 0x0010(0x0018)
    FVector                                       ReceiverLocation;                                             // 0x0028(0x0018)
    FName                                         Tag;                                                          // 0x0040(0x0008)
    char                                          pa_0048[0x000C]                                               // 0x0048(0x000C)
    char                                          bSuccessfullySensed;                                          // 0x0054(0x0001)
    char                                          pa_0055[0x0003]                                               // 0x0055(0x0003)
};


// ScriptStruct  AIModule.AIRequestID
// Struct Size::0x0004
struct FAIRequestID
{
    uint32_t                                      RequestID;                                                    // 0x0000(0x0004)
};


// ScriptStruct  IrisStub.NetSerializerConfig
// Struct Size::0x0001
struct FNetSerializerConfig
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  GameplayAbilities.GameplayAbilityRepAnimMontageNetSerializerConfig
// Struct Size::0x0001
struct FGameplayAbilityRepAnimMontageNetSerializerConfig : public FNetSerializerConfig
{
};


// ScriptStruct  GameplayAbilities.GameplayAbilityContextForEffect
// Struct Size::0x0058
struct FGameplayAbilityContextForEffect
{
    TSet<UAbilitySystemComponent*>                TriggeredASC;                                                 // 0x0000(0x0050)
    TWeakObjectPtr<UGameplayAbility>              Ability;                                                      // 0x0050(0x0008)
};


// ScriptStruct  GameplayAbilities.GameplayCuePendingExecute
// Struct Size::0x0198
struct FGameplayCuePendingExecute
{
    char                                          pa_0000[0x0018]                                               // 0x0000(0x0018)
    FPredictionKey                                PredictionKey;                                                // 0x0018(0x0018)
    enum class EGameplayCuePayloadType            PayloadType;                                                  // 0x0030(0x0001)
    char                                          pa_0031[0x0007]                                               // 0x0031(0x0007)
    UAbilitySystemComponent*                      OwningComponent;                                              // 0x0038(0x0008)
    FGameplayEffectSpecForRPC                     FromSpec;                                                     // 0x0040(0x0078)
    FGameplayCueParameters                        CueParameters;                                                // 0x00B8(0x00E0)
};


// ScriptStruct  GameplayAbilities.GameplayCueNotifyActorArray
// Struct Size::0x0010
struct FGameplayCueNotifyActorArray
{
    TArray<AGameplayCueNotify*>                   Actors;                                                       // 0x0000(0x0010)
};


// ScriptStruct  GameplayAbilities.PreallocationInfo
// Struct Size::0x0068
struct FPreallocationInfo
{
    TMap<UClass*,FGameplayCueNotifyActorArray>    PreallocatedInstances;                                        // 0x0000(0x0050)
    TArray<AGameplayCueNotify*>                   ClassesNeedingPreallocation;                                  // 0x0050(0x0010)
    char                                          pa_0060[0x0008]                                               // 0x0060(0x0008)
};


// ScriptStruct  IrisStub.PolymorphicStructNetSerializerConfig
// Struct Size::0x0001
struct FPolymorphicStructNetSerializerConfig : public FNetSerializerConfig
{
};


// ScriptStruct  GameplayAbilities.GameplayEffectContextHandleNetSerializerConfig
// Struct Size::0x0001
struct FGameplayEffectContextHandleNetSerializerConfig : public FPolymorphicStructNetSerializerConfig
{
};


// ScriptStruct  GameplayAbilities.GameplayEffectContextNetSerializerConfig
// Struct Size::0x0001
struct FGameplayEffectContextNetSerializerConfig : public FNetSerializerConfig
{
};


// ScriptStruct  GameplayAbilities.PredictionKeyNetSerializerConfig
// Struct Size::0x0001
struct FPredictionKeyNetSerializerConfig : public FNetSerializerConfig
{
};


// ScriptStruct  GameplayAbilities.AbilityTriggerData
// Struct Size::0x000C
struct FAbilityTriggerData
{
    FGameplayTag                                  TriggerTag;                                                   // 0x0000(0x0008)
    enum class EGameplayAbilityTriggerSource      TriggerSource;                                                // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
};


// ScriptStruct  GameplayAbilities.GameplayAbilityBindInfo
// Struct Size::0x0010
struct FGameplayAbilityBindInfo
{
    enum class EGameplayAbilityInputBinds         Command;                                                      // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    UGameplayAbility*                             GameplayAbilityClass;                                         // 0x0008(0x0008)
};


// ScriptStruct  GameplayAbilities.GameplayTargetDataFilter
// Struct Size::0x0020
struct FGameplayTargetDataFilter
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    AActor*                                       SelfActor;                                                    // 0x0008(0x0008)
    AActor*                                       RequiredActorClass;                                           // 0x0010(0x0008)
    enum class ETargetDataFilterSelf              SelfFilter;                                                   // 0x0018(0x0001)
    bool                                          bReverseFilter;                                               // 0x0019(0x0001)
    char                                          pa_001A[0x0006]                                               // 0x001A(0x0006)
};


// ScriptStruct  GameplayAbilities.WorldReticleParameters
// Struct Size::0x0018
struct FWorldReticleParameters
{
    FVector                                       AOEScale;                                                     // 0x0000(0x0018)
};


// ScriptStruct  GameplayAbilities.NetSerializeScriptStructCache
// Struct Size::0x0010
struct FNetSerializeScriptStructCache
{
    TArray<UScriptStruct*>                        ScriptStructs;                                                // 0x0000(0x0010)
};


// ScriptStruct  GameplayAbilities.GameplayAttributeData
// Struct Size::0x0010
struct FGameplayAttributeData
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    float                                         BaseValue;                                                    // 0x0008(0x0004)
    float                                         CurrentValue;                                                 // 0x000C(0x0004)
};


// ScriptStruct  Engine.TableRowBase
// Struct Size::0x0008
struct FTableRowBase
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
};


// ScriptStruct  GameplayAbilities.AttributeMetaData
// Struct Size::0x0030
struct FAttributeMetaData : public FTableRowBase
{
    float                                         BaseValue;                                                    // 0x0008(0x0004)
    float                                         MinValue;                                                     // 0x000C(0x0004)
    float                                         MaxValue;                                                     // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FString                                       DerivedAttributeInfo;                                         // 0x0018(0x0010)
    bool                                          bCanStack;                                                    // 0x0028(0x0001)
    char                                          pa_0029[0x0007]                                               // 0x0029(0x0007)
};


// ScriptStruct  GameplayAbilities.GameplayAbilityTargetData
// Struct Size::0x0008
struct FGameplayAbilityTargetData
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
};


// ScriptStruct  GameplayAbilities.GameplayAbilityTargetingLocationInfo
// Struct Size::0x00A0
struct FGameplayAbilityTargetingLocationInfo
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
    enum class EGameplayAbilityTargetingLocationTypeLocationType;                                               // 0x0010(0x0001)
    char                                          pa_0011[0x000F]                                               // 0x0011(0x000F)
    FTransform                                    LiteralTransform;                                             // 0x0020(0x0060)
    AActor*                                       SourceActor;                                                  // 0x0080(0x0008)
    UMeshComponent*                               SourceComponent;                                              // 0x0088(0x0008)
    UGameplayAbility*                             SourceAbility;                                                // 0x0090(0x0008)
    FName                                         SourceSocketName;                                             // 0x0098(0x0008)
};


// ScriptStruct  GameplayAbilities.GameplayAbilityTargetData
// Struct Size::0x0150
struct FGameplayAbilityTargetData : public FGameplayAbilityTargetData
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FGameplayAbilityTargetingLocationInfo         SourceLocation;                                               // 0x0010(0x00A0)
    FGameplayAbilityTargetingLocationInfo         TargetLocation;                                               // 0x00B0(0x00A0)
};


// ScriptStruct  GameplayAbilities.GameplayAbilityTargetData
// Struct Size::0x00C0
struct FGameplayAbilityTargetData : public FGameplayAbilityTargetData
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FGameplayAbilityTargetingLocationInfo         SourceLocation;                                               // 0x0010(0x00A0)
    TArray<TWeakObjectPtr<AActor>>                TargetActorArray;                                             // 0x00B0(0x0010)
};


// ScriptStruct  GameplayAbilities.GameplayAbilityTargetData
// Struct Size::0x00F8
struct FGameplayAbilityTargetData : public FGameplayAbilityTargetData
{
    FHitResult                                    HitResult;                                                    // 0x0008(0x00E8)
    bool                                          bHitReplaced;                                                 // 0x00F0(0x0001)
    char                                          pa_00F1[0x0007]                                               // 0x00F1(0x0007)
};


// ScriptStruct  GameplayAbilities.GameplayAbilityActorInfo
// Struct Size::0x0048
struct FGameplayAbilityActorInfo
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    TWeakObjectPtr<AActor>                        OwnerActor;                                                   // 0x0008(0x0008)
    TWeakObjectPtr<AActor>                        AvatarActor;                                                  // 0x0010(0x0008)
    TWeakObjectPtr<APlayerController>             PlayerController;                                             // 0x0018(0x0008)
    TWeakObjectPtr<UAbilitySystemComponent>       AbilitySystemComponent;                                       // 0x0020(0x0008)
    TWeakObjectPtr<USkeletalMeshComponent>        SkeletalMeshComponent;                                        // 0x0028(0x0008)
    TWeakObjectPtr<UAnimInstance>                 AnimInstance;                                                 // 0x0030(0x0008)
    TWeakObjectPtr<UMovementComponent>            MovementComponent;                                            // 0x0038(0x0008)
    FName                                         AffectedAnimInstanceTag;                                      // 0x0040(0x0008)
};


// ScriptStruct  GameplayAbilities.AbilityEndedData
// Struct Size::0x0010
struct FAbilityEndedData
{
    UGameplayAbility*                             AbilityThatEnded;                                             // 0x0000(0x0008)
    FGameplayAbilitySpecHandle                    AbilitySpecHandle;                                            // 0x0008(0x0004)
    bool                                          bReplicateEndAbility;                                         // 0x000C(0x0001)
    bool                                          bWasCancelled;                                                // 0x000D(0x0001)
    char                                          pa_000E[0x0002]                                               // 0x000E(0x0002)
};


// ScriptStruct  GameplayAbilities.AbilityTaskDebugMessage
// Struct Size::0x0018
struct FAbilityTaskDebugMessage
{
    UGameplayTask*                                FromTask;                                                     // 0x0000(0x0008)
    FString                                       Message;                                                      // 0x0008(0x0010)
};


// ScriptStruct  GameplayAbilities.GameplayAbilitySpecHandleAndPredictionKey
// Struct Size::0x0008
struct FGameplayAbilitySpecHandleAndPredictionKey
{
    FGameplayAbilitySpecHandle                    AbilityHandle;                                                // 0x0000(0x0004)
    int32_t                                       PredictionKeyAtCreation;                                      // 0x0004(0x0004)
};


// ScriptStruct  GameplayAbilities.GameplayCueTag
// Struct Size::0x0008
struct FGameplayCueTag
{
    FGameplayTag                                  GameplayCueTag;                                               // 0x0000(0x0008)
};


// ScriptStruct  GameplayAbilities.MinimalGameplayCueReplicationProxy
// Struct Size::0x0350
struct FMinimalGameplayCueReplicationProxy
{
    char                                          pa_0000[0x0340]                                               // 0x0000(0x0340)
    UAbilitySystemComponent*                      Owner;                                                        // 0x0340(0x0008)
    char                                          pa_0348[0x0008]                                               // 0x0348(0x0008)
};


// ScriptStruct  GameplayAbilities.GameplayCueObjectLibrary
// Struct Size::0x0050
struct FGameplayCueObjectLibrary
{
    TArray<FString>                               Paths;                                                        // 0x0000(0x0010)
    char                                          pa_0010[0x0020]                                               // 0x0010(0x0020)
    UObjectLibrary*                               ActorObjectLibrary;                                           // 0x0030(0x0008)
    UObjectLibrary*                               StaticObjectLibrary;                                          // 0x0038(0x0008)
    UGameplayCueSet*                              CueSet;                                                       // 0x0040(0x0008)
    char                                          pa_0048[0x0004]                                               // 0x0048(0x0004)
    bool                                          bShouldSyncScan;                                              // 0x004C(0x0001)
    bool                                          bShouldAsyncLoad;                                             // 0x004D(0x0001)
    bool                                          bShouldSyncLoad;                                              // 0x004E(0x0001)
    bool                                          bHasBeenInitialized;                                          // 0x004F(0x0001)
};


// ScriptStruct  GameplayAbilities.GameplayCueNotify
// Struct Size::0x00D0
struct FGameplayCueNotify
{
    enum class EGameplayCueNotify                 LocallyControlledSource;                                      // 0x0000(0x0001)
    enum class EGameplayCueNotify                 LocallyControlledPolicy;                                      // 0x0001(0x0001)
    char                                          pa_0002[0x0002]                                               // 0x0002(0x0002)
    float                                         ChanceToPlay;                                                 // 0x0004(0x0004)
    TArray<enum class EPhysicalSurface>           AllowedSurfaceTypes;                                          // 0x0008(0x0010)
    char                                          pa_0018[0x0008]                                               // 0x0018(0x0008)
    TArray<enum class EPhysicalSurface>           RejectedSurfaceTypes;                                         // 0x0020(0x0010)
    char                                          pa_0030[0x0008]                                               // 0x0030(0x0008)
    FGameplayTagQuery                             SourceAllowedTagQuery;                                        // 0x0038(0x0048)
    FGameplayTagQuery                             TargetAllowedTagQuery;                                        // 0x0080(0x0048)
    int32_t                                       RequiredHitValueLevel;                                        // 0x00C8(0x0004)
    int32_t                                       RequiredEffectLevel;                                          // 0x00CC(0x0004)
};


// ScriptStruct  GameplayAbilities.GameplayCueNotify
// Struct Size::0x0078
struct FGameplayCueNotify
{
    FName                                         SocketName;                                                   // 0x0000(0x0008)
    enum class EGameplayCueNotify                 AttachPolicy;                                                 // 0x0008(0x0001)
    enum class EAttachmentRule                    AttachmentRule;                                               // 0x0009(0x0001)
    char                                          pa_000A[0x0002]                                               // 0x000A(0x0002)
    char                                          bOverrideRotation;                                            // 0x000C(0x0001)
    char                                          bOverrideScale;                                               // 0x000C(0x0001)
    char                                          bAddLocationOffset;                                           // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
    FRotator                                      RotationOverride;                                             // 0x0010(0x0018)
    FVector                                       ScaleOverride;                                                // 0x0028(0x0018)
    FVector                                       LocationOffset;                                               // 0x0040(0x0018)
    FVector                                       AttachmentOffset;                                             // 0x0058(0x0018)
    bool                                          BlockAutoActivate;                                            // 0x0070(0x0001)
    char                                          pa_0071[0x0007]                                               // 0x0071(0x0007)
};


// ScriptStruct  GameplayAbilities.GameplayCueNotify
// Struct Size::0x0058
struct FGameplayCueNotify
{
    TArray<UFXSystemComponent*>                   FxSystemComponents;                                           // 0x0000(0x0010)
    TArray<UAudioComponent*>                      AudioComponents;                                              // 0x0010(0x0010)
    TArray<UCameraShakeBase*>                     CameraShakes;                                                 // 0x0020(0x0010)
    TArray<TScriptInterface<ICameraLensEffectInterface>>CameraLensEffects;                                      // 0x0030(0x0010)
    UForceFeedbackComponent*                      ForceFeedbackComponent;                                       // 0x0040(0x0008)
    APlayerController*                            ForceFeedbackTargetPC;                                        // 0x0048(0x0008)
    UDecalComponent*                              DecalComponent;                                               // 0x0050(0x0008)
};


// ScriptStruct  GameplayAbilities.GameplayCueNotify
// Struct Size::0x0158
struct FGameplayCueNotify
{
    FGameplayCueNotify                            SpawnConditionOverride;                                       // 0x0000(0x00D0)
    FGameplayCueNotify                            PlacementInfoOverride;                                        // 0x00D0(0x0078)
    UNiagaraSystem*                               NiagaraSystem;                                                // 0x0148(0x0008)
    char                                          bOverrideSpawnCondition;                                      // 0x0150(0x0001)
    char                                          bOverridePlacementInfo;                                       // 0x0150(0x0001)
    char                                          bCastShadow;                                                  // 0x0150(0x0001)
    char                                          pa_0151[0x0007]                                               // 0x0151(0x0007)
};


// ScriptStruct  GameplayAbilities.GameplayCueNotify
// Struct Size::0x0008
struct FGameplayCueNotify
{
    FName                                         StopTriggerName;                                              // 0x0000(0x0008)
};


// ScriptStruct  GameplayAbilities.GameplayCueNotify
// Struct Size::0x0170
struct FGameplayCueNotify
{
    FGameplayCueNotify                            SpawnConditionOverride;                                       // 0x0000(0x00D0)
    FGameplayCueNotify                            PlacementInfoOverride;                                        // 0x00D0(0x0078)
    USoundBase*                                   Sound;                                                        // 0x0148(0x0008)
    USoundBase*                                   SoundCue;                                                     // 0x0150(0x0008)
    float                                         LoopingFadeOutDuration;                                       // 0x0158(0x0004)
    float                                         LoopingFadeVolumeLevel;                                       // 0x015C(0x0004)
    FGameplayCueNotify                            SoundParameterInterfaceInfo;                                  // 0x0160(0x0008)
    char                                          bOverrideSpawnCondition;                                      // 0x0168(0x0001)
    char                                          bOverridePlacementInfo;                                       // 0x0168(0x0001)
    char                                          bUseSoundParameterInterface;                                  // 0x0168(0x0001)
    char                                          pa_0169[0x0007]                                               // 0x0169(0x0007)
};


// ScriptStruct  GameplayAbilities.GameplayCueNotify
// Struct Size::0x0168
struct FGameplayCueNotify
{
    FGameplayCueNotify                            SpawnConditionOverride;                                       // 0x0000(0x00D0)
    FGameplayCueNotify                            PlacementInfoOverride;                                        // 0x00D0(0x0078)
    UCameraShakeBase*                             CameraShake;                                                  // 0x0148(0x0008)
    float                                         ShakeScale;                                                   // 0x0150(0x0004)
    enum class EGameplayCueNotify                 PlaySpace;                                                    // 0x0154(0x0001)
    char                                          pa_0155[0x0003]                                               // 0x0155(0x0003)
    char                                          bOverrideSpawnCondition;                                      // 0x0158(0x0001)
    char                                          bOverridePlacementInfo;                                       // 0x0158(0x0001)
    char                                          bPlayInWorld;                                                 // 0x0158(0x0001)
    char                                          pa_0159[0x0003]                                               // 0x0159(0x0003)
    float                                         WorldInnerRadius;                                             // 0x015C(0x0004)
    float                                         WorldOuterRadius;                                             // 0x0160(0x0004)
    float                                         WorldFalloffExponent;                                         // 0x0164(0x0004)
};


// ScriptStruct  GameplayAbilities.GameplayCueNotify
// Struct Size::0x0160
struct FGameplayCueNotify
{
    FGameplayCueNotify                            SpawnConditionOverride;                                       // 0x0000(0x00D0)
    FGameplayCueNotify                            PlacementInfoOverride;                                        // 0x00D0(0x0078)
    AActor*                                       CameraLensEffect;                                             // 0x0148(0x0008)
    char                                          bOverrideSpawnCondition;                                      // 0x0150(0x0001)
    char                                          bOverridePlacementInfo;                                       // 0x0150(0x0001)
    char                                          bPlayInWorld;                                                 // 0x0150(0x0001)
    char                                          pa_0151[0x0003]                                               // 0x0151(0x0003)
    float                                         WorldInnerRadius;                                             // 0x0154(0x0004)
    float                                         WorldOuterRadius;                                             // 0x0158(0x0004)
    char                                          pa_015C[0x0004]                                               // 0x015C(0x0004)
};


// ScriptStruct  GameplayAbilities.GameplayCueNotify
// Struct Size::0x0168
struct FGameplayCueNotify
{
    FGameplayCueNotify                            SpawnConditionOverride;                                       // 0x0000(0x00D0)
    FGameplayCueNotify                            PlacementInfoOverride;                                        // 0x00D0(0x0078)
    UForceFeedbackEffect*                         ForceFeedbackEffect;                                          // 0x0148(0x0008)
    FName                                         ForceFeedbackTag;                                             // 0x0150(0x0008)
    char                                          bIsLooping;                                                   // 0x0158(0x0001)
    char                                          bOverrideSpawnCondition;                                      // 0x0158(0x0001)
    char                                          bOverridePlacementInfo;                                       // 0x0158(0x0001)
    char                                          bPlayInWorld;                                                 // 0x0158(0x0001)
    char                                          pa_0159[0x0003]                                               // 0x0159(0x0003)
    float                                         WorldIntensity;                                               // 0x015C(0x0004)
    UForceFeedbackAttenuation*                    WorldAttenuation;                                             // 0x0160(0x0008)
};


// ScriptStruct  GameplayAbilities.GameplayCueNotify
// Struct Size::0x0178
struct FGameplayCueNotify
{
    FGameplayCueNotify                            SpawnConditionOverride;                                       // 0x0000(0x00D0)
    FGameplayCueNotify                            PlacementInfoOverride;                                        // 0x00D0(0x0078)
    UMaterialInterface*                           DecalMaterial;                                                // 0x0148(0x0008)
    FVector                                       DecalSize;                                                    // 0x0150(0x0018)
    char                                          bOverrideSpawnCondition;                                      // 0x0168(0x0001)
    char                                          bOverridePlacementInfo;                                       // 0x0168(0x0001)
    char                                          bOverrideFadeOut;                                             // 0x0168(0x0001)
    char                                          pa_0169[0x0003]                                               // 0x0169(0x0003)
    float                                         FadeOutStartDelay;                                            // 0x016C(0x0004)
    float                                         FadeOutDuration;                                              // 0x0170(0x0004)
    char                                          pa_0174[0x0004]                                               // 0x0174(0x0004)
};


// ScriptStruct  GameplayAbilities.GameplayCueNotify
// Struct Size::0x05C8
struct FGameplayCueNotify
{
    TArray<FGameplayCueNotify>                    BurstParticles;                                               // 0x0000(0x0010)
    TArray<FGameplayCueNotify>                    BurstSounds;                                                  // 0x0010(0x0010)
    FGameplayCueNotify                            BurstCameraShake;                                             // 0x0020(0x0168)
    FGameplayCueNotify                            BurstCameraLensEffect;                                        // 0x0188(0x0160)
    FGameplayCueNotify                            BurstForceFeedback;                                           // 0x02E8(0x0168)
    FGameplayCueNotify                            BurstDecal;                                                   // 0x0450(0x0178)
};


// ScriptStruct  GameplayAbilities.GameplayCueNotify
// Struct Size::0x0450
struct FGameplayCueNotify
{
    TArray<FGameplayCueNotify>                    LoopingParticles;                                             // 0x0000(0x0010)
    TArray<FGameplayCueNotify>                    LoopingSounds;                                                // 0x0010(0x0010)
    FGameplayCueNotify                            LoopingCameraShake;                                           // 0x0020(0x0168)
    FGameplayCueNotify                            LoopingCameraLensEffect;                                      // 0x0188(0x0160)
    FGameplayCueNotify                            LoopingForceFeedback;                                         // 0x02E8(0x0168)
};


// ScriptStruct  GameplayAbilities.GameplayCueNotifyData
// Struct Size::0x0038
struct FGameplayCueNotifyData
{
    FGameplayTag                                  GameplayCueTag;                                               // 0x0000(0x0008)
    FSoftObjectPath                               GameplayCueNotifyObj;                                         // 0x0008(0x0020)
    UClass*                                       LoadedGameplayCueClass;                                       // 0x0028(0x0008)
    char                                          pa_0030[0x0008]                                               // 0x0030(0x0008)
};


// ScriptStruct  GameplayAbilities.GameplayCueTranslatorNodeIndex
// Struct Size::0x0004
struct FGameplayCueTranslatorNodeIndex
{
    int32_t                                       Index;                                                        // 0x0000(0x0004)
};


// ScriptStruct  GameplayAbilities.GameplayCueTranslationLink
// Struct Size::0x0018
struct FGameplayCueTranslationLink
{
    UGameplayCueTranslator*                       RulesCDO;                                                     // 0x0000(0x0008)
    char                                          pa_0008[0x0010]                                               // 0x0008(0x0010)
};


// ScriptStruct  GameplayAbilities.GameplayCueTranslatorNode
// Struct Size::0x0078
struct FGameplayCueTranslatorNode
{
    TArray<FGameplayCueTranslationLink>           Links;                                                        // 0x0000(0x0010)
    FGameplayCueTranslatorNodeIndex               CachedIndex;                                                  // 0x0010(0x0004)
    FGameplayTag                                  CachedGameplayTag;                                            // 0x0014(0x0008)
    FName                                         CachedGameplayTagName;                                        // 0x001C(0x0008)
    char                                          pa_0024[0x0054]                                               // 0x0024(0x0054)
};


// ScriptStruct  GameplayAbilities.GameplayCueTranslationManager
// Struct Size::0x0080
struct FGameplayCueTranslationManager
{
    TArray<FGameplayCueTranslatorNode>            TranslationLUT;                                               // 0x0000(0x0010)
    TMap<FName,FGameplayCueTranslatorNodeIndex>   TranslationNameToIndexMap;                                    // 0x0010(0x0050)
    UGameplayTagsManager*                         TagManager;                                                   // 0x0060(0x0008)
    char                                          pa_0068[0x0018]                                               // 0x0068(0x0018)
};


// ScriptStruct  GameplayAbilities.AttributeBasedFloat
// Struct Size::0x0110
struct FAttributeBasedFloat
{
    FScalableFloat                                Coefficient;                                                  // 0x0000(0x0028)
    FScalableFloat                                PreMultiplyAdditiveValue;                                     // 0x0028(0x0028)
    FScalableFloat                                PostMultiplyAdditiveValue;                                    // 0x0050(0x0028)
    FGameplayEffectAttributeCaptureDefinition     BackingAttribute;                                             // 0x0078(0x0040)
    FCurveTableRowHandle                          AttributeCurve;                                               // 0x00B8(0x0010)
    enum class EAttributeBasedFloatCalculationTypeAttributeCalculationType;                                     // 0x00C8(0x0001)
    enum class EGameplayModEvaluationChannel      FinalChannel;                                                 // 0x00C9(0x0001)
    char                                          pa_00CA[0x0006]                                               // 0x00CA(0x0006)
    FGameplayTagContainer                         SourceTagFilter;                                              // 0x00D0(0x0020)
    FGameplayTagContainer                         TargetTagFilter;                                              // 0x00F0(0x0020)
};


// ScriptStruct  GameplayAbilities.CustomCalculationBasedFloat
// Struct Size::0x0090
struct FCustomCalculationBasedFloat
{
    UGameplayModMagnitudeCalculation*             CalculationClassMagnitude;                                    // 0x0000(0x0008)
    FScalableFloat                                Coefficient;                                                  // 0x0008(0x0028)
    FScalableFloat                                PreMultiplyAdditiveValue;                                     // 0x0030(0x0028)
    FScalableFloat                                PostMultiplyAdditiveValue;                                    // 0x0058(0x0028)
    FCurveTableRowHandle                          FinalLookupCurve;                                             // 0x0080(0x0010)
};


// ScriptStruct  GameplayAbilities.SetByCallerFloat
// Struct Size::0x0010
struct FSetByCallerFloat
{
    FName                                         DataName;                                                     // 0x0000(0x0008)
    FGameplayTag                                  DataTag;                                                      // 0x0008(0x0008)
};


// ScriptStruct  GameplayAbilities.GameplayEffectModifierMagnitude
// Struct Size::0x01E0
struct FGameplayEffectModifierMagnitude
{
    enum class EGameplayEffectMagnitudeCalculationMagnitudeCalculationType;                                     // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    FScalableFloat                                ScalableFloatMagnitude;                                       // 0x0008(0x0028)
    FAttributeBasedFloat                          AttributeBasedMagnitude;                                      // 0x0030(0x0110)
    FCustomCalculationBasedFloat                  CustomMagnitude;                                              // 0x0140(0x0090)
    FSetByCallerFloat                             SetByCallerMagnitude;                                         // 0x01D0(0x0010)
};


// ScriptStruct  GameplayAbilities.GameplayEffectExecutionScopedModifierInfo
// Struct Size::0x02B8
struct FGameplayEffectExecutionScopedModifierInfo
{
    FGameplayEffectAttributeCaptureDefinition     CapturedAttribute;                                            // 0x0000(0x0040)
    FGameplayTag                                  TransientAggregatorIdentifier;                                // 0x0040(0x0008)
    enum class EGameplayEffectScopedModifierAggregatorTypeAggregatorType;                                       // 0x0048(0x0001)
    enum class EGameplayModOp                     ModifierOp;                                                   // 0x0049(0x0001)
    char                                          pa_004A[0x0006]                                               // 0x004A(0x0006)
    FGameplayEffectModifierMagnitude              ModifierMagnitude;                                            // 0x0050(0x01E0)
    FGameplayModEvaluationChannelSettings         EvaluationChannelSettings;                                    // 0x0230(0x0001)
    char                                          pa_0231[0x0007]                                               // 0x0231(0x0007)
    FGameplayTagRequirements                      SourceTags;                                                   // 0x0238(0x0040)
    FGameplayTagRequirements                      TargetTags;                                                   // 0x0278(0x0040)
};


// ScriptStruct  GameplayAbilities.GameplayModEvaluationChannelSettings
// Struct Size::0x0001
struct FGameplayModEvaluationChannelSettings
{
    enum class EGameplayModEvaluationChannel      Channel;                                                      // 0x0000(0x0001)
};


// ScriptStruct  GameplayAbilities.ConditionalGameplayEffect
// Struct Size::0x0028
struct FConditionalGameplayEffect
{
    UGameplayEffect*                              EffectClass;                                                  // 0x0000(0x0008)
    FGameplayTagContainer                         RequiredSourceTags;                                           // 0x0008(0x0020)
};


// ScriptStruct  GameplayAbilities.GameplayEffectExecutionDefinition
// Struct Size::0x0058
struct FGameplayEffectExecutionDefinition
{
    UGameplayEffectExecutionCalculation*          CalculationClass;                                             // 0x0000(0x0008)
    FGameplayTagContainer                         PassedInTags;                                                 // 0x0008(0x0020)
    TArray<FGameplayEffectExecutionScopedModifierInfo>CalculationModifiers;                                     // 0x0028(0x0010)
    TArray<UGameplayEffect*>                      ConditionalGameplayEffectClasses;                             // 0x0038(0x0010)
    TArray<FConditionalGameplayEffect>            ConditionalGameplayEffects;                                   // 0x0048(0x0010)
};


// ScriptStruct  GameplayAbilities.GameplayModifierInfo
// Struct Size::0x02D0
struct FGameplayModifierInfo
{
    FGameplayAttribute                            Attribute;                                                    // 0x0000(0x0038)
    enum class EGameplayModOp                     ModifierOp;                                                   // 0x0038(0x0001)
    char                                          pa_0039[0x0007]                                               // 0x0039(0x0007)
    FScalableFloat                                Magnitude;                                                    // 0x0040(0x0028)
    FGameplayEffectModifierMagnitude              ModifierMagnitude;                                            // 0x0068(0x01E0)
    FGameplayModEvaluationChannelSettings         EvaluationChannelSettings;                                    // 0x0248(0x0001)
    char                                          pa_0249[0x0007]                                               // 0x0249(0x0007)
    FGameplayTagRequirements                      SourceTags;                                                   // 0x0250(0x0040)
    FGameplayTagRequirements                      TargetTags;                                                   // 0x0290(0x0040)
};


// ScriptStruct  GameplayAbilities.GameplayEffectCue
// Struct Size::0x0068
struct FGameplayEffectCue
{
    FGameplayAttribute                            MagnitudeAttribute;                                           // 0x0000(0x0038)
    float                                         MinLevel;                                                     // 0x0038(0x0004)
    float                                         MaxLevel;                                                     // 0x003C(0x0004)
    FGameplayTagContainer                         GameplayCueTags;                                              // 0x0040(0x0020)
    bool                                          ForceSpawn;                                                   // 0x0060(0x0001)
    char                                          pa_0061[0x0007]                                               // 0x0061(0x0007)
};


// ScriptStruct  GameplayAbilities.InheritedTagContainer
// Struct Size::0x0060
struct FInheritedTagContainer
{
    FGameplayTagContainer                         CombinedTags;                                                 // 0x0000(0x0020)
    FGameplayTagContainer                         Added;                                                        // 0x0020(0x0020)
    FGameplayTagContainer                         Removed;                                                      // 0x0040(0x0020)
};


// ScriptStruct  GameplayAbilities.ActiveGameplayEffectQuery
// Struct Size::0x0088
struct FActiveGameplayEffectQuery
{
    char                                          pa_0000[0x0088]                                               // 0x0000(0x0088)
};


// ScriptStruct  GameplayAbilities.GameplayEffectCustomExecutionParameters
// Struct Size::0x00F8
struct FGameplayEffectCustomExecutionParameters
{
    char                                          pa_0000[0x00F8]                                               // 0x0000(0x00F8)
};


// ScriptStruct  GameplayAbilities.GameplayEffectCustomExecutionOutput
// Struct Size::0x0018
struct FGameplayEffectCustomExecutionOutput
{
    TArray<FGameplayModifierEvaluatedData>        OutputModifiers;                                              // 0x0000(0x0010)
    char                                          bTriggerConditionalGameplayEffects;                           // 0x0010(0x0001)
    char                                          bHandledStackCountManually;                                   // 0x0010(0x0001)
    char                                          bHandledGameplayCuesManually;                                 // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
};


// ScriptStruct  GameplayAbilities.GameplayModifierEvaluatedData
// Struct Size::0x0050
struct FGameplayModifierEvaluatedData
{
    FGameplayAttribute                            Attribute;                                                    // 0x0000(0x0038)
    enum class EGameplayModOp                     ModifierOp;                                                   // 0x0038(0x0001)
    char                                          pa_0039[0x0003]                                               // 0x0039(0x0003)
    float                                         Magnitude;                                                    // 0x003C(0x0004)
    FActiveGameplayEffectHandle                   Handle;                                                       // 0x0040(0x0008)
    bool                                          IsValid;                                                      // 0x0048(0x0001)
    char                                          pa_0049[0x0007]                                               // 0x0049(0x0007)
};


// ScriptStruct  GameplayAbilities.GameplayEffectContext
// Struct Size::0x0090
struct FGameplayEffectContext
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    TWeakObjectPtr<AActor>                        Instigator;                                                   // 0x0008(0x0008)
    TWeakObjectPtr<AActor>                        EffectCauser;                                                 // 0x0010(0x0008)
    TWeakObjectPtr<UGameplayAbility>              AbilityCDO;                                                   // 0x0018(0x0008)
    TWeakObjectPtr<UGameplayAbility>              AbilityInstanceNotReplicated;                                 // 0x0020(0x0008)
    char                                          pa_0028[0x0010]                                               // 0x0028(0x0010)
    int32_t                                       AbilityLevel;                                                 // 0x0038(0x0004)
    TWeakObjectPtr<UObject>                       SourceObject;                                                 // 0x003C(0x0008)
    TWeakObjectPtr<UAbilitySystemComponent>       InstigatorAbilitySystemComponent;                             // 0x0044(0x0008)
    char                                          pa_004C[0x0004]                                               // 0x004C(0x0004)
    TArray<TWeakObjectPtr<AActor>>                Actors;                                                       // 0x0050(0x0010)
    char                                          pa_0060[0x0010]                                               // 0x0060(0x0010)
    FVector                                       WorldOrigin;                                                  // 0x0070(0x0018)
    char                                          bHasWorldOrigin;                                              // 0x0088(0x0001)
    char                                          bReplicateSourceObject;                                       // 0x0088(0x0001)
    char                                          pa_0089[0x0007]                                               // 0x0089(0x0007)
};


// ScriptStruct  GameplayAbilities.GameplayTagBlueprintPropertyMapping
// Struct Size::0x0048
struct FGameplayTagBlueprintPropertyMapping
{
    FGameplayTag                                  TagToMap;                                                     // 0x0000(0x0008)
    PropertyToEdit                                PropertyToEdit;                                               // 0x0008(0x0020)
    FName                                         PropertyName;                                                 // 0x0028(0x0008)
    FGuid                                         PropertyGuid;                                                 // 0x0030(0x0010)
    char                                          pa_0040[0x0008]                                               // 0x0040(0x0008)
};


// ScriptStruct  GameplayAbilities.GameplayTagBlueprintPropertyMap
// Struct Size::0x0020
struct FGameplayTagBlueprintPropertyMap
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
    TArray<FGameplayTagBlueprintPropertyMapping>  PropertyMappings;                                             // 0x0010(0x0010)
};


// ScriptStruct  GameplayAbilities.GameplayTagReponsePair
// Struct Size::0x0028
struct FGameplayTagReponsePair
{
    FGameplayTag                                  Tag;                                                          // 0x0000(0x0008)
    UGameplayEffect*                              ResponseGameplayEffect;                                       // 0x0008(0x0008)
    TArray<UGameplayEffect*>                      ResponseGameplayEffects;                                      // 0x0010(0x0010)
    int32_t                                       SoftCountCap;                                                 // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
};


// ScriptStruct  GameplayAbilities.GameplayTagResponseTableEntry
// Struct Size::0x0050
struct FGameplayTagResponseTableEntry
{
    FGameplayTagReponsePair                       Positive;                                                     // 0x0000(0x0028)
    FGameplayTagReponsePair                       Negative;                                                     // 0x0028(0x0028)
};


// ScriptStruct  GameplayAbilities.MovieSceneGameplayCueKey
// Struct Size::0x0090
struct FMovieSceneGameplayCueKey
{
    FGameplayCueTag                               Cue;                                                          // 0x0000(0x0008)
    FVector                                       Location;                                                     // 0x0008(0x0018)
    FVector                                       Normal;                                                       // 0x0020(0x0018)
    FName                                         AttachSocketName;                                             // 0x0038(0x0008)
    float                                         NormalizedMagnitude;                                          // 0x0040(0x0004)
    FMovieSceneObjectBindingID                    Instigator;                                                   // 0x0044(0x0018)
    FMovieSceneObjectBindingID                    EffectCauser;                                                 // 0x005C(0x0018)
    char                                          pa_0074[0x0004]                                               // 0x0074(0x0004)
    UPhysicalMaterial*                            PhysicalMaterial;                                             // 0x0078(0x0008)
    int32_t                                       GameplayEffectLevel;                                          // 0x0080(0x0004)
    int32_t                                       AbilityLevel;                                                 // 0x0084(0x0004)
    bool                                          bAttachToBinding;                                             // 0x0088(0x0001)
    char                                          pa_0089[0x0007]                                               // 0x0089(0x0007)
};


// ScriptStruct  MovieScene.MovieSceneObjectBindingID
// Struct Size::0x0018
struct FMovieSceneObjectBindingID
{
    FGuid                                         Guid;                                                         // 0x0000(0x0010)
    int32_t                                       SequenceID;                                                   // 0x0010(0x0004)
    int32_t                                       ResolveParentIndex;                                           // 0x0014(0x0004)
};


// ScriptStruct  MovieScene.MovieSceneChannel
// Struct Size::0x0050
struct FMovieSceneChannel
{
    char                                          pa_0000[0x0050]                                               // 0x0000(0x0050)
};


// ScriptStruct  GameplayAbilities.MovieSceneGameplayCueChannel
// Struct Size::0x00F8
struct FMovieSceneGameplayCueChannel : public FMovieSceneChannel
{
    TArray<FFrameNumber>                          KeyTimes;                                                     // 0x0050(0x0010)
    TArray<FMovieSceneGameplayCueKey>             KeyValues;                                                    // 0x0060(0x0010)
    char                                          pa_0070[0x0088]                                               // 0x0070(0x0088)
};


// ScriptStruct  NiagaraCore.NiagaraCompileHash
// Struct Size::0x0010
struct FNiagaraCompileHash
{
    TArray<char>                                  DataHash;                                                     // 0x0000(0x0010)
};


// ScriptStruct  Niagara.NiagaraDataSetID
// Struct Size::0x000C
struct FNiagaraDataSetID
{
    FName                                         Name;                                                         // 0x0000(0x0008)
    enum class ENiagaraDataSetType                Type;                                                         // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
};


// ScriptStruct  Niagara.NiagaraDataSetProperties
// Struct Size::0x0020
struct FNiagaraDataSetProperties
{
    FNiagaraDataSetID                             ID;                                                           // 0x0000(0x000C)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    TArray<FNiagaraVariable>                      Variables;                                                    // 0x0010(0x0010)
};


// ScriptStruct  Niagara.NiagaraVariableBase
// Struct Size::0x000C
struct FNiagaraVariableBase
{
    FName                                         Name;                                                         // 0x0000(0x0008)
    FNiagaraTypeDefinitionHandle                  TypeDefHandle;                                                // 0x0008(0x0004)
};


// ScriptStruct  Niagara.NiagaraTypeDefinitionHandle
// Struct Size::0x0004
struct FNiagaraTypeDefinitionHandle
{
    int32_t                                       RegisteredTypeIndex;                                          // 0x0000(0x0004)
};


// ScriptStruct  Niagara.NiagaraVariable
// Struct Size::0x0020
struct FNiagaraVariable : public FNiagaraVariableBase
{
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    TArray<char>                                  VarData;                                                      // 0x0010(0x0010)
};


// ScriptStruct  Niagara.NiagaraScriptDataUsageInfo
// Struct Size::0x0001
struct FNiagaraScriptDataUsageInfo
{
    bool                                          bReadsAttributeData;                                          // 0x0000(0x0001)
};


// ScriptStruct  Niagara.NiagaraFunctionSignature
// Struct Size::0x0090
struct FNiagaraFunctionSignature
{
    FName                                         Name;                                                         // 0x0000(0x0008)
    TArray<FNiagaraVariable>                      Inputs;                                                       // 0x0008(0x0010)
    TArray<FNiagaraVariable>                      Outputs;                                                      // 0x0018(0x0010)
    FName                                         OwnerName;                                                    // 0x0028(0x0008)
    char                                          bRequiresContext;                                             // 0x0030(0x0001)
    char                                          bRequiresExecPin;                                             // 0x0030(0x0001)
    char                                          bMemberFunction;                                              // 0x0030(0x0001)
    char                                          bExperimental;                                                // 0x0030(0x0001)
    char                                          bSupportsCPU;                                                 // 0x0030(0x0001)
    char                                          bSupportsGPU;                                                 // 0x0030(0x0001)
    char                                          bWriteFunction;                                               // 0x0030(0x0001)
    char                                          bReadFunction;                                                // 0x0030(0x0001)
    char                                          bSoftDeprecatedFunction;                                      // 0x0031(0x0001)
    char                                          bIsCompileTagGenerator;                                       // 0x0031(0x0001)
    char                                          bHidden;                                                      // 0x0031(0x0001)
    char                                          pa_0032[0x0002]                                               // 0x0032(0x0002)
    int32_t                                       ModuleUsageBitmask;                                           // 0x0034(0x0004)
    int32_t                                       ContextStageIndex;                                            // 0x0038(0x0004)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
    TMap<FName,FName>                             FunctionSpecifiers;                                           // 0x0040(0x0050)
};


// ScriptStruct  Niagara.NiagaraScriptDataInterfaceInfo
// Struct Size::0x0038
struct FNiagaraScriptDataInterfaceInfo
{
    UNiagaraDataInterface*                        DataInterface;                                                // 0x0000(0x0008)
    FName                                         Name;                                                         // 0x0008(0x0008)
    int32_t                                       UserPtrIdx;                                                   // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FNiagaraTypeDefinition                        Type;                                                         // 0x0018(0x0010)
    FName                                         RegisteredParameterMapRead;                                   // 0x0028(0x0008)
    FName                                         RegisteredParameterMapWrite;                                  // 0x0030(0x0008)
};


// ScriptStruct  Niagara.NiagaraTypeDefinition
// Struct Size::0x0010
struct FNiagaraTypeDefinition
{
    UObject*                                      ClassStructOrEnum;                                            // 0x0000(0x0008)
    uint16_t                                      UnderlyingType;                                               // 0x0008(0x0002)
    char                                          Flags;                                                        // 0x000A(0x0001)
    char                                          pa_000B[0x0005]                                               // 0x000B(0x0005)
};


// ScriptStruct  Niagara.NiagaraScriptDataInterfaceCompileInfo
// Struct Size::0x0038
struct FNiagaraScriptDataInterfaceCompileInfo
{
    FName                                         Name;                                                         // 0x0000(0x0008)
    int32_t                                       UserPtrIdx;                                                   // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FNiagaraTypeDefinition                        Type;                                                         // 0x0010(0x0010)
    FName                                         RegisteredParameterMapRead;                                   // 0x0020(0x0008)
    FName                                         RegisteredParameterMapWrite;                                  // 0x0028(0x0008)
    bool                                          bIsPlaceholder;                                               // 0x0030(0x0001)
    char                                          pa_0031[0x0007]                                               // 0x0031(0x0007)
};


// ScriptStruct  Niagara.NiagaraStatScope
// Struct Size::0x0010
struct FNiagaraStatScope
{
    FName                                         FullName;                                                     // 0x0000(0x0008)
    FName                                         FriendlyName;                                                 // 0x0008(0x0008)
};


// ScriptStruct  Niagara.VMFunctionSpecifier
// Struct Size::0x0010
struct FVMFunctionSpecifier
{
    FName                                         Key;                                                          // 0x0000(0x0008)
    FName                                         Value;                                                        // 0x0008(0x0008)
};


// ScriptStruct  Niagara.VMExternalFunctionBindingInfo
// Struct Size::0x0038
struct FVMExternalFunctionBindingInfo
{
    FName                                         Name;                                                         // 0x0000(0x0008)
    FName                                         OwnerName;                                                    // 0x0008(0x0008)
    TArray<bool>                                  InputParamLocations;                                          // 0x0010(0x0010)
    int32_t                                       NumOutputs;                                                   // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
    TArray<FVMFunctionSpecifier>                  FunctionSpecifiers;                                           // 0x0028(0x0010)
};


// ScriptStruct  Niagara.NiagaraSystemUpdateContext
// Struct Size::0x0078
struct FNiagaraSystemUpdateContext
{
    TArray<UNiagaraComponent*>                    ComponentsToReset;                                            // 0x0000(0x0010)
    TArray<UNiagaraComponent*>                    ComponentsToReInit;                                           // 0x0010(0x0010)
    TArray<UNiagaraComponent*>                    ComponentsToNotifySimDestroy;                                 // 0x0020(0x0010)
    TArray<UNiagaraSystem*>                       SystemSimsToDestroy;                                          // 0x0030(0x0010)
    TArray<UNiagaraSystem*>                       SystemSimsToRecache;                                          // 0x0040(0x0010)
    char                                          pa_0050[0x0028]                                               // 0x0050(0x0028)
};


// ScriptStruct  Niagara.NiagaraVariableInfo
// Struct Size::0x0040
struct FNiagaraVariableInfo
{
    FNiagaraVariable                              Variable;                                                     // 0x0000(0x0020)
    FText                                         Definition;                                                   // 0x0020(0x0018)
    UNiagaraDataInterface*                        DataInterface;                                                // 0x0038(0x0008)
};


// ScriptStruct  Niagara.NiagaraVariableAttributeBinding
// Struct Size::0x0058
struct FNiagaraVariableAttributeBinding
{
    FNiagaraVariableBase                          ParamMapVariable;                                             // 0x0000(0x000C)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FNiagaraVariable                              DataSetVariable;                                              // 0x0010(0x0020)
    FNiagaraVariable                              RootVariable;                                                 // 0x0030(0x0020)
    enum class ENiagaraBindingSource              BindingSourceMode;                                            // 0x0050(0x0001)
    char                                          pa_0051[0x0003]                                               // 0x0051(0x0003)
    char                                          bBindingExistsOnSource;                                       // 0x0054(0x0001)
    char                                          bIsCachedParticleValue;                                       // 0x0054(0x0001)
    char                                          pa_0055[0x0003]                                               // 0x0055(0x0003)
};


// ScriptStruct  Niagara.NiagaraMaterialAttributeBinding
// Struct Size::0x002C
struct FNiagaraMaterialAttributeBinding
{
    FName                                         MaterialParameterName;                                        // 0x0000(0x0008)
    FNiagaraVariableBase                          NiagaraVariable;                                              // 0x0008(0x000C)
    FNiagaraVariableBase                          ResolvedNiagaraVariable;                                      // 0x0014(0x000C)
    FNiagaraVariableBase                          NiagaraChildVariable;                                         // 0x0020(0x000C)
};


// ScriptStruct  Niagara.NiagaraVariableDataInterfaceBinding
// Struct Size::0x0020
struct FNiagaraVariableDataInterfaceBinding
{
    FNiagaraVariable                              BoundVariable;                                                // 0x0000(0x0020)
};


// ScriptStruct  Niagara.NiagaraScriptVariableBinding
// Struct Size::0x0008
struct FNiagaraScriptVariableBinding
{
    FName                                         Name;                                                         // 0x0000(0x0008)
};


// ScriptStruct  Niagara.NiagaraUserParameterBinding
// Struct Size::0x0020
struct FNiagaraUserParameterBinding
{
    FNiagaraVariable                              Parameter;                                                    // 0x0000(0x0020)
};


// ScriptStruct  Niagara.NiagaraCompileDependency
// Struct Size::0x0050
struct FNiagaraCompileDependency
{
    FString                                       LinkerErrorMessage;                                           // 0x0000(0x0010)
    FGuid                                         NodeGuid;                                                     // 0x0010(0x0010)
    FGuid                                         PinGuid;                                                      // 0x0020(0x0010)
    TArray<FGuid>                                 StackGuids;                                                   // 0x0030(0x0010)
    FNiagaraVariableBase                          DependentVariable;                                            // 0x0040(0x000C)
    bool                                          bDependentVariableFromCustomIterationNamespace;               // 0x004C(0x0001)
    char                                          pa_004D[0x0003]                                               // 0x004D(0x0003)
};


// ScriptStruct  Niagara.NiagaraScalabilityState
// Struct Size::0x000C
struct FNiagaraScalabilityState
{
    float                                         Significance;                                                 // 0x0000(0x0004)
    float                                         LastVisibleTime;                                              // 0x0004(0x0004)
    char                                          pa_0008[0x0002]                                               // 0x0008(0x0002)
    char                                          bCulled;                                                      // 0x000A(0x0001)
    char                                          bPreviousCulled;                                              // 0x000A(0x0001)
    char                                          bCulledByDistance;                                            // 0x000A(0x0001)
    char                                          bCulledByInstanceCount;                                       // 0x000A(0x0001)
    char                                          bCulledByVisibility;                                          // 0x000A(0x0001)
    char                                          bCulledByGlobalBudget;                                        // 0x000A(0x0001)
    char                                          pa_000B[0x0001]                                               // 0x000B(0x0001)
};


// ScriptStruct  Niagara.NiagaraStackSection
// Struct Size::0x0038
struct FNiagaraStackSection
{
    FName                                         SectionIdentifier;                                            // 0x0000(0x0008)
    FText                                         SectionDisplayName;                                           // 0x0008(0x0018)
    TArray<FText>                                 Categories;                                                   // 0x0020(0x0010)
    bool                                          bEnabled;                                                     // 0x0030(0x0001)
    char                                          pa_0031[0x0007]                                               // 0x0031(0x0007)
};


// ScriptStruct  Niagara.NDIStaticMeshSectionFilter
// Struct Size::0x0010
struct FNDIStaticMeshSectionFilter
{
    TArray<int32_t>                               AllowedMaterialSlots;                                         // 0x0000(0x0010)
};


// ScriptStruct  Niagara.NiagaraUObjectPropertyReaderRemap
// Struct Size::0x0010
struct FNiagaraUObjectPropertyReaderRemap
{
    FName                                         GraphName;                                                    // 0x0000(0x0008)
    FName                                         RemapName;                                                    // 0x0008(0x0008)
};


// ScriptStruct  MovieScene.MovieSceneEvalTemplateBase
// Struct Size::0x0010
struct FMovieSceneEvalTemplateBase
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
};


// ScriptStruct  MovieScene.MovieSceneEvalTemplate
// Struct Size::0x0020
struct FMovieSceneEvalTemplate : public FMovieSceneEvalTemplateBase
{
    enum class EMovieSceneCompletionMode          CompletionMode;                                               // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
    TWeakObjectPtr<UMovieSceneSection>            SourceSectionPtr;                                             // 0x0014(0x0008)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  Niagara.MovieSceneNiagaraSystemTrackTemplate
// Struct Size::0x0020
struct FMovieSceneNiagaraSystemTrackTemplate : public FMovieSceneEvalTemplate
{
};


// ScriptStruct  MovieScene.MovieSceneTrackImplementation
// Struct Size::0x0010
struct FMovieSceneTrackImplementation : public FMovieSceneEvalTemplateBase
{
};


// ScriptStruct  Niagara.MovieSceneNiagaraSystemTrackImplementation
// Struct Size::0x0028
struct FMovieSceneNiagaraSystemTrackImplementation : public FMovieSceneTrackImplementation
{
    FFrameNumber                                  SpawnSectionStartFrame;                                       // 0x0010(0x0004)
    FFrameNumber                                  SpawnSectionEndFrame;                                         // 0x0014(0x0004)
    enum class ENiagaraSystemSpawnSectionStartBehaviorSpawnSectionStartBehavior;                                // 0x0018(0x0004)
    enum class ENiagaraSystemSpawnSectionEvaluateBehaviorSpawnSectionEvaluateBehavior;                          // 0x001C(0x0004)
    enum class ENiagaraSystemSpawnSectionEndBehaviorSpawnSectionEndBehavior;                                    // 0x0020(0x0004)
    enum class ENiagaraAgeUpdateMode              AgeUpdateMode;                                                // 0x0024(0x0001)
    bool                                          bAllowScalability;                                            // 0x0025(0x0001)
    char                                          pa_0026[0x0002]                                               // 0x0026(0x0002)
};


// ScriptStruct  Niagara.MovieSceneNiagaraParameterSectionTemplate
// Struct Size::0x0040
struct FMovieSceneNiagaraParameterSectionTemplate : public FMovieSceneEvalTemplate
{
    FNiagaraVariable                              Parameter;                                                    // 0x0020(0x0020)
};


// ScriptStruct  Niagara.MovieSceneNiagaraBoolParameterSectionTemplate
// Struct Size::0x0140
struct FMovieSceneNiagaraBoolParameterSectionTemplate : public FMovieSceneNiagaraParameterSectionTemplate
{
    FMovieSceneBoolChannel                        BoolChannel;                                                  // 0x0040(0x0100)
};


// ScriptStruct  MovieScene.MovieSceneBoolChannel
// Struct Size::0x0100
struct FMovieSceneBoolChannel : public FMovieSceneChannel
{
    TArray<FFrameNumber>                          Times;                                                        // 0x0050(0x0010)
    bool                                          DefaultValue;                                                 // 0x0060(0x0001)
    bool                                          bHasDefaultValue;                                             // 0x0061(0x0001)
    char                                          pa_0062[0x0006]                                               // 0x0062(0x0006)
    TArray<bool>                                  Values;                                                       // 0x0068(0x0010)
    char                                          pa_0078[0x0088]                                               // 0x0078(0x0088)
};


// ScriptStruct  Niagara.MovieSceneNiagaraColorParameterSectionTemplate
// Struct Size::0x0480
struct FMovieSceneNiagaraColorParameterSectionTemplate : public FMovieSceneNiagaraParameterSectionTemplate
{
    FMovieSceneFloatChannel                       RedChannel;                                                   // 0x0040(0x0110)
    FMovieSceneFloatChannel                       GreenChannel;                                                 // 0x0150(0x0110)
    FMovieSceneFloatChannel                       BlueChannel;                                                  // 0x0260(0x0110)
    FMovieSceneFloatChannel                       AlphaChannel;                                                 // 0x0370(0x0110)
};


// ScriptStruct  MovieScene.MovieSceneFloatChannel
// Struct Size::0x0110
struct FMovieSceneFloatChannel : public FMovieSceneChannel
{
    enum class ERichCurveExtrapolation            PreInfinityExtrap;                                            // 0x0050(0x0001)
    enum class ERichCurveExtrapolation            PostInfinityExtrap;                                           // 0x0051(0x0001)
    char                                          pa_0052[0x0006]                                               // 0x0052(0x0006)
    TArray<FFrameNumber>                          Times;                                                        // 0x0058(0x0010)
    TArray<FMovieSceneFloatValue>                 Values;                                                       // 0x0068(0x0010)
    float                                         DefaultValue;                                                 // 0x0078(0x0004)
    bool                                          bHasDefaultValue;                                             // 0x007C(0x0001)
    char                                          pa_007D[0x0003]                                               // 0x007D(0x0003)
    FMovieSceneKeyHandleMap                       KeyHandles;                                                   // 0x0080(0x0088)
    FFrameRate                                    TickResolution;                                               // 0x0108(0x0008)
};


// ScriptStruct  Engine.KeyHandleLookupTable
// Struct Size::0x0088
struct FKeyHandleLookupTable
{
    char                                          pa_0000[0x0088]                                               // 0x0000(0x0088)
};


// ScriptStruct  MovieScene.MovieSceneKeyHandleMap
// Struct Size::0x0088
struct FMovieSceneKeyHandleMap : public FKeyHandleLookupTable
{
};


// ScriptStruct  MovieScene.MovieSceneFloatValue
// Struct Size::0x001C
struct FMovieSceneFloatValue
{
    float                                         Value;                                                        // 0x0000(0x0004)
    FMovieSceneTangentData                        Tangent;                                                      // 0x0004(0x0014)
    enum class ERichCurveInterpMode               InterpMode;                                                   // 0x0018(0x0001)
    enum class ERichCurveTangentMode              TangentMode;                                                  // 0x0019(0x0001)
    char                                          PaddingByte;                                                  // 0x001A(0x0001)
    char                                          pa_001B[0x0001]                                               // 0x001B(0x0001)
};


// ScriptStruct  MovieScene.MovieSceneTangentData
// Struct Size::0x0014
struct FMovieSceneTangentData
{
    float                                         ArriveTangent;                                                // 0x0000(0x0004)
    float                                         LeaveTangent;                                                 // 0x0004(0x0004)
    float                                         ArriveTangentWeight;                                          // 0x0008(0x0004)
    float                                         LeaveTangentWeight;                                           // 0x000C(0x0004)
    enum class ERichCurveTangentWeightMode        TangentWeightMode;                                            // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
};


// ScriptStruct  Niagara.MovieSceneNiagaraFloatParameterSectionTemplate
// Struct Size::0x0150
struct FMovieSceneNiagaraFloatParameterSectionTemplate : public FMovieSceneNiagaraParameterSectionTemplate
{
    FMovieSceneFloatChannel                       FloatChannel;                                                 // 0x0040(0x0110)
};


// ScriptStruct  Niagara.MovieSceneNiagaraIntegerParameterSectionTemplate
// Struct Size::0x0140
struct FMovieSceneNiagaraIntegerParameterSectionTemplate : public FMovieSceneNiagaraParameterSectionTemplate
{
    FMovieSceneIntegerChannel                     IntegerChannel;                                               // 0x0040(0x0100)
};


// ScriptStruct  MovieScene.MovieSceneIntegerChannel
// Struct Size::0x0100
struct FMovieSceneIntegerChannel : public FMovieSceneChannel
{
    TArray<FFrameNumber>                          Times;                                                        // 0x0050(0x0010)
    int32_t                                       DefaultValue;                                                 // 0x0060(0x0004)
    bool                                          bHasDefaultValue;                                             // 0x0064(0x0001)
    char                                          pa_0065[0x0003]                                               // 0x0065(0x0003)
    TArray<int32_t>                               Values;                                                       // 0x0068(0x0010)
    char                                          pa_0078[0x0088]                                               // 0x0078(0x0088)
};


// ScriptStruct  Niagara.MovieSceneNiagaraVectorParameterSectionTemplate
// Struct Size::0x0488
struct FMovieSceneNiagaraVectorParameterSectionTemplate : public FMovieSceneNiagaraParameterSectionTemplate
{
    FMovieSceneFloatChannel                       VectorChannels;                                               // 0x0040(0x0110)
    char                                          pa_0150[0x0330]                                               // 0x0150(0x0330)
    int32_t                                       ChannelsUsed;                                                 // 0x0480(0x0004)
    char                                          pa_0484[0x0004]                                               // 0x0484(0x0004)
};


// ScriptStruct  Niagara.EmitterCompiledScriptPair
// Struct Size::0x0098
struct FEmitterCompiledScriptPair
{
    char                                          pa_0000[0x0098]                                               // 0x0000(0x0098)
};


// ScriptStruct  Niagara.NiagaraBakerTextureSource
// Struct Size::0x0018
struct FNiagaraBakerTextureSource
{
    FString                                       DisplayString;                                                // 0x0000(0x0010)
    FName                                         SourceName;                                                   // 0x0010(0x0008)
};


// ScriptStruct  Niagara.NiagaraBakerCameraSettings
// Struct Size::0x0050
struct FNiagaraBakerCameraSettings
{
    enum class ENiagaraBakerViewMode              ViewMode;                                                     // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FVector                                       ViewportLocation;                                             // 0x0008(0x0018)
    FRotator                                      ViewportRotation;                                             // 0x0020(0x0018)
    float                                         OrbitDistance;                                                // 0x0038(0x0004)
    float                                         FOV;                                                          // 0x003C(0x0004)
    float                                         OrthoWidth;                                                   // 0x0040(0x0004)
    bool                                          bUseAspectRatio;                                              // 0x0044(0x0001)
    char                                          pa_0045[0x0003]                                               // 0x0045(0x0003)
    float                                         AspectRatio;                                                  // 0x0048(0x0004)
    char                                          pa_004C[0x0004]                                               // 0x004C(0x0004)
};


// ScriptStruct  Niagara.NiagaraBakerTextureSettings
// Struct Size::0x0040
struct FNiagaraBakerTextureSettings
{
    FName                                         OutputName;                                                   // 0x0000(0x0008)
    FNiagaraBakerTextureSource                    SourceBinding;                                                // 0x0008(0x0018)
    char                                          bUseFrameSize;                                                // 0x0020(0x0001)
    char                                          pa_0021[0x0003]                                               // 0x0021(0x0003)
    FIntPoint                                     FrameSize;                                                    // 0x0024(0x0008)
    FIntPoint                                     TextureSize;                                                  // 0x002C(0x0008)
    char                                          pa_0034[0x0004]                                               // 0x0034(0x0004)
    UTexture2D*                                   GeneratedTexture;                                             // 0x0038(0x0008)
};


// ScriptStruct  Niagara.NCPoolElement
// Struct Size::0x0010
struct FNCPoolElement
{
    UNiagaraComponent*                            Component;                                                    // 0x0000(0x0008)
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
};


// ScriptStruct  Niagara.NCPool
// Struct Size::0x0010
struct FNCPool
{
    TArray<FNCPoolElement>                        FreeElements;                                                 // 0x0000(0x0010)
};


// ScriptStruct  Niagara.NiagaraComponentPropertyBinding
// Struct Size::0x00C8
struct FNiagaraComponentPropertyBinding
{
    FNiagaraVariableAttributeBinding              AttributeBinding;                                             // 0x0000(0x0058)
    FName                                         PropertyName;                                                 // 0x0058(0x0008)
    FNiagaraTypeDefinition                        PropertyType;                                                 // 0x0060(0x0010)
    FName                                         MetadataSetterName;                                           // 0x0070(0x0008)
    TMap<FString,FString>                         PropertySetterParameterDefaults;                              // 0x0078(0x0050)
};


// ScriptStruct  Niagara.NiagaraEmitterNameSettingsRef
// Struct Size::0x0018
struct FNiagaraEmitterNameSettingsRef
{
    FName                                         SystemName;                                                   // 0x0000(0x0008)
    FString                                       EmitterName;                                                  // 0x0008(0x0010)
};


// ScriptStruct  Niagara.NiagaraCulledComponentInfo
// Struct Size::0x0008
struct FNiagaraCulledComponentInfo
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
};


// ScriptStruct  Niagara.NiagaraDataInterfaceEmitterBinding
// Struct Size::0x000C
struct FNiagaraDataInterfaceEmitterBinding
{
    enum class ENiagaraDataInterfaceEmitterBindingModeBindingMode;                                              // 0x0000(0x0004)
    FName                                         EmitterName;                                                  // 0x0004(0x0008)
};


// ScriptStruct  Niagara.BasicParticleData
// Struct Size::0x0038
struct FBasicParticleData
{
    FVector                                       position;                                                     // 0x0000(0x0018)
    float                                         Size;                                                         // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    FVector                                       Velocity;                                                     // 0x0020(0x0018)
};


// ScriptStruct  Niagara.MeshTriCoordinate
// Struct Size::0x0010
struct FMeshTriCoordinate
{
    int32_t                                       Tri;                                                          // 0x0000(0x0004)
    FVector3f                                     BaryCoord;                                                    // 0x0004(0x000C)
};


// ScriptStruct  Niagara.NiagaraDataInterfaceSplineLUT
// Struct Size::0x0040
struct FNiagaraDataInterfaceSplineLUT
{
    TArray<FVector>                               Positions;                                                    // 0x0000(0x0010)
    TArray<FVector>                               Scales;                                                       // 0x0010(0x0010)
    TArray<FQuat>                                 Rotations;                                                    // 0x0020(0x0010)
    float                                         SplineLength;                                                 // 0x0030(0x0004)
    float                                         SplineDistanceStep;                                           // 0x0034(0x0004)
    float                                         InvSplineDistanceStep;                                        // 0x0038(0x0004)
    int32_t                                       MaxIndex;                                                     // 0x003C(0x0004)
};


// ScriptStruct  Niagara.NiagaraVariableLayoutInfo
// Struct Size::0x0070
struct FNiagaraVariableLayoutInfo
{
    uint32_t                                      FloatComponentStart;                                          // 0x0000(0x0004)
    uint32_t                                      Int32ComponentStart;                                          // 0x0004(0x0004)
    uint32_t                                      HalfComponentStart;                                           // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FNiagaraTypeLayoutInfo                        LayoutInfo;                                                   // 0x0010(0x0060)
};


// ScriptStruct  Niagara.NiagaraTypeLayoutInfo
// Struct Size::0x0060
struct FNiagaraTypeLayoutInfo
{
    TArray<uint32_t>                              FloatComponentByteOffsets;                                    // 0x0000(0x0010)
    TArray<uint32_t>                              FloatComponentRegisterOffsets;                                // 0x0010(0x0010)
    TArray<uint32_t>                              Int32ComponentByteOffsets;                                    // 0x0020(0x0010)
    TArray<uint32_t>                              Int32ComponentRegisterOffsets;                                // 0x0030(0x0010)
    TArray<uint32_t>                              HalfComponentByteOffsets;                                     // 0x0040(0x0010)
    TArray<uint32_t>                              HalfComponentRegisterOffsets;                                 // 0x0050(0x0010)
};


// ScriptStruct  Niagara.NiagaraDataSetCompiledData
// Struct Size::0x0040
struct FNiagaraDataSetCompiledData
{
    TArray<FNiagaraVariable>                      Variables;                                                    // 0x0000(0x0010)
    TArray<FNiagaraVariableLayoutInfo>            VariableLayouts;                                              // 0x0010(0x0010)
    FNiagaraDataSetID                             ID;                                                           // 0x0020(0x000C)
    uint32_t                                      TotalFloatComponents;                                         // 0x002C(0x0004)
    uint32_t                                      TotalInt32Components;                                         // 0x0030(0x0004)
    uint32_t                                      TotalHalfComponents;                                          // 0x0034(0x0004)
    char                                          bRequiresPersistentIDs;                                       // 0x0038(0x0001)
    char                                          pa_0039[0x0003]                                               // 0x0039(0x0003)
    enum class ENiagaraSimTarget                  SimTarget;                                                    // 0x003C(0x0001)
    char                                          pa_003D[0x0003]                                               // 0x003D(0x0003)
};


// ScriptStruct  Niagara.NiagaraOutlinerTimingData
// Struct Size::0x0008
struct FNiagaraOutlinerTimingData
{
    float                                         GameThread;                                                   // 0x0000(0x0004)
    float                                         RenderThread;                                                 // 0x0004(0x0004)
};


// ScriptStruct  Niagara.NiagaraOutlinerEmitterInstanceData
// Struct Size::0x0020
struct FNiagaraOutlinerEmitterInstanceData
{
    FString                                       EmitterName;                                                  // 0x0000(0x0010)
    enum class ENiagaraSimTarget                  SimTarget;                                                    // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
    enum class ENiagaraExecutionState             ExecState;                                                    // 0x0014(0x0004)
    int32_t                                       NumParticles;                                                 // 0x0018(0x0004)
    char                                          bRequiresPersistentIDs;                                       // 0x001C(0x0001)
    char                                          pa_001D[0x0003]                                               // 0x001D(0x0003)
};


// ScriptStruct  Niagara.NiagaraOutlinerSystemInstanceData
// Struct Size::0x0068
struct FNiagaraOutlinerSystemInstanceData
{
    FString                                       ComponentName;                                                // 0x0000(0x0010)
    FVector3f                                     LWCTile;                                                      // 0x0010(0x000C)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    TArray<FNiagaraOutlinerEmitterInstanceData>   Emitters;                                                     // 0x0020(0x0010)
    enum class ENiagaraExecutionState             ActualExecutionState;                                         // 0x0030(0x0004)
    enum class ENiagaraExecutionState             RequestedExecutionState;                                      // 0x0034(0x0004)
    FNiagaraScalabilityState                      ScalabilityState;                                             // 0x0038(0x000C)
    char                                          bPendingKill;                                                 // 0x0044(0x0001)
    char                                          bUsingCullProxy;                                              // 0x0044(0x0001)
    char                                          pa_0045[0x0003]                                               // 0x0045(0x0003)
    enum class ENCPoolMethod                      PoolMethod;                                                   // 0x0048(0x0001)
    char                                          pa_0049[0x0003]                                               // 0x0049(0x0003)
    FNiagaraOutlinerTimingData                    AverageTime;                                                  // 0x004C(0x0008)
    FNiagaraOutlinerTimingData                    MaxTime;                                                      // 0x0054(0x0008)
    enum class ETickingGroup                      TickGroup;                                                    // 0x005C(0x0001)
    enum class ENiagaraGpuComputeTickStage        GpuTickStage;                                                 // 0x005D(0x0001)
    char                                          pa_005E[0x0002]                                               // 0x005E(0x0002)
    char                                          bIsSolo;                                                      // 0x0060(0x0001)
    char                                          bRequiresDistanceFieldData;                                   // 0x0060(0x0001)
    char                                          bRequiresDepthBuffer;                                         // 0x0060(0x0001)
    char                                          bRequiresEarlyViewData;                                       // 0x0060(0x0001)
    char                                          bRequiresViewUniformBuffer;                                   // 0x0060(0x0001)
    char                                          bRequiresRayTracingScene;                                     // 0x0060(0x0001)
    char                                          pa_0061[0x0007]                                               // 0x0061(0x0007)
};


// ScriptStruct  Niagara.NiagaraOutlinerSystemData
// Struct Size::0x0030
struct FNiagaraOutlinerSystemData
{
    TArray<FNiagaraOutlinerSystemInstanceData>    SystemInstances;                                              // 0x0000(0x0010)
    FNiagaraOutlinerTimingData                    AveragePerFrameTime;                                          // 0x0010(0x0008)
    FNiagaraOutlinerTimingData                    MaxPerFrameTime;                                              // 0x0018(0x0008)
    FNiagaraOutlinerTimingData                    AveragePerInstanceTime;                                       // 0x0020(0x0008)
    FNiagaraOutlinerTimingData                    MaxPerInstanceTime;                                           // 0x0028(0x0008)
};


// ScriptStruct  Niagara.NiagaraOutlinerWorldData
// Struct Size::0x0068
struct FNiagaraOutlinerWorldData
{
    TMap<FString,FNiagaraOutlinerSystemData>      Systems;                                                      // 0x0000(0x0050)
    bool                                          bHasBegunPlay;                                                // 0x0050(0x0001)
    char                                          WorldType;                                                    // 0x0051(0x0001)
    char                                          NetMode;                                                      // 0x0052(0x0001)
    char                                          pa_0053[0x0001]                                               // 0x0053(0x0001)
    FNiagaraOutlinerTimingData                    AveragePerFrameTime;                                          // 0x0054(0x0008)
    FNiagaraOutlinerTimingData                    MaxPerFrameTime;                                              // 0x005C(0x0008)
    char                                          pa_0064[0x0004]                                               // 0x0064(0x0004)
};


// ScriptStruct  Niagara.NiagaraOutlinerData
// Struct Size::0x0050
struct FNiagaraOutlinerData
{
    TMap<FString,FNiagaraOutlinerWorldData>       WorldData;                                                    // 0x0000(0x0050)
};


// ScriptStruct  Niagara.NiagaraDebuggerRequestConnection
// Struct Size::0x0020
struct FNiagaraDebuggerRequestConnection
{
    FGuid                                         SessionId;                                                    // 0x0000(0x0010)
    FGuid                                         InstanceId;                                                   // 0x0010(0x0010)
};


// ScriptStruct  Niagara.NiagaraDebuggerAcceptConnection
// Struct Size::0x0020
struct FNiagaraDebuggerAcceptConnection
{
    FGuid                                         SessionId;                                                    // 0x0000(0x0010)
    FGuid                                         InstanceId;                                                   // 0x0010(0x0010)
};


// ScriptStruct  Niagara.NiagaraDebuggerConnectionClosed
// Struct Size::0x0020
struct FNiagaraDebuggerConnectionClosed
{
    FGuid                                         SessionId;                                                    // 0x0000(0x0010)
    FGuid                                         InstanceId;                                                   // 0x0010(0x0010)
};


// ScriptStruct  Niagara.NiagaraDebuggerExecuteConsoleCommand
// Struct Size::0x0018
struct FNiagaraDebuggerExecuteConsoleCommand
{
    FString                                       Command;                                                      // 0x0000(0x0010)
    bool                                          bRequiresWorld;                                               // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
};


// ScriptStruct  Niagara.NiagaraDebuggerOutlinerUpdate
// Struct Size::0x0050
struct FNiagaraDebuggerOutlinerUpdate
{
    FNiagaraOutlinerData                          OutlinerData;                                                 // 0x0000(0x0050)
};


// ScriptStruct  Niagara.NiagaraDebugHudTextOptions
// Struct Size::0x0018
struct FNiagaraDebugHudTextOptions
{
    enum class ENiagaraDebugHudFont               Font;                                                         // 0x0000(0x0004)
    enum class ENiagaraDebugHudHAlign             HorizontalAlignment;                                          // 0x0004(0x0001)
    enum class ENiagaraDebugHudVAlign             VerticalAlignment;                                            // 0x0005(0x0001)
    char                                          pa_0006[0x0002]                                               // 0x0006(0x0002)
    FVector2D                                     ScreenOffset;                                                 // 0x0008(0x0010)
};


// ScriptStruct  Niagara.NiagaraDebugHUDVariable
// Struct Size::0x0018
struct FNiagaraDebugHUDVariable
{
    bool                                          bEnabled;                                                     // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    FString                                       Name;                                                         // 0x0008(0x0010)
};


// ScriptStruct  Niagara.NiagaraDebugHUDSettingsData
// Struct Size::0x0230
struct FNiagaraDebugHUDSettingsData
{
    bool                                          bHudEnabled;                                                  // 0x0000(0x0001)
    bool                                          bHudRenderingEnabled;                                         // 0x0001(0x0001)
    bool                                          bValidateSystemSimulationDataBuffers;                         // 0x0002(0x0001)
    bool                                          bValidateParticleDataBuffers;                                 // 0x0003(0x0001)
    bool                                          bOverviewEnabled;                                             // 0x0004(0x0001)
    char                                          pa_0005[0x0003]                                               // 0x0005(0x0003)
    enum class ENiagaraDebugHUDOverviewMode       OverviewMode;                                                 // 0x0008(0x0004)
    enum class ENiagaraDebugHudFont               OverviewFont;                                                 // 0x000C(0x0004)
    FVector2D                                     OverviewLocation;                                             // 0x0010(0x0010)
    bool                                          bShowRegisteredComponents;                                    // 0x0020(0x0001)
    bool                                          bOverviewShowFilteredSystemOnly;                              // 0x0021(0x0001)
    char                                          pa_0022[0x0006]                                               // 0x0022(0x0006)
    FString                                       ActorFilter;                                                  // 0x0028(0x0010)
    bool                                          bComponentFilterEnabled;                                      // 0x0038(0x0001)
    char                                          pa_0039[0x0007]                                               // 0x0039(0x0007)
    FString                                       ComponentFilter;                                              // 0x0040(0x0010)
    bool                                          bSystemFilterEnabled;                                         // 0x0050(0x0001)
    char                                          pa_0051[0x0007]                                               // 0x0051(0x0007)
    FString                                       SystemFilter;                                                 // 0x0058(0x0010)
    bool                                          bEmitterFilterEnabled;                                        // 0x0068(0x0001)
    char                                          pa_0069[0x0007]                                               // 0x0069(0x0007)
    FString                                       EmitterFilter;                                                // 0x0070(0x0010)
    bool                                          bActorFilterEnabled;                                          // 0x0080(0x0001)
    char                                          pa_0081[0x0003]                                               // 0x0081(0x0003)
    enum class ENiagaraDebugHudVerbosity          SystemDebugVerbosity;                                         // 0x0084(0x0004)
    enum class ENiagaraDebugHudVerbosity          SystemEmitterVerbosity;                                       // 0x0088(0x0004)
    enum class ENiagaraDebugHudVerbosity          DataInterfaceVerbosity;                                       // 0x008C(0x0004)
    bool                                          bSystemShowBounds;                                            // 0x0090(0x0001)
    bool                                          bSystemShowActiveOnlyInWorld;                                 // 0x0091(0x0001)
    bool                                          bShowSystemVariables;                                         // 0x0092(0x0001)
    char                                          pa_0093[0x0005]                                               // 0x0093(0x0005)
    TArray<FNiagaraDebugHUDVariable>              SystemVariables;                                              // 0x0098(0x0010)
    FNiagaraDebugHudTextOptions                   SystemTextOptions;                                            // 0x00A8(0x0018)
    bool                                          bShowParticleVariables;                                       // 0x00C0(0x0001)
    bool                                          bEnableGpuParticleReadback;                                   // 0x00C1(0x0001)
    bool                                          bShowParticleIndex;                                           // 0x00C2(0x0001)
    char                                          pa_00C3[0x0005]                                               // 0x00C3(0x0005)
    TArray<FNiagaraDebugHUDVariable>              ParticlesVariables;                                           // 0x00C8(0x0010)
    FNiagaraDebugHudTextOptions                   ParticleTextOptions;                                          // 0x00D8(0x0018)
    bool                                          bShowParticlesVariablesWithSystem;                            // 0x00F0(0x0001)
    bool                                          bShowParticleVariablesVertical;                               // 0x00F1(0x0001)
    bool                                          bUseMaxParticlesToDisplay;                                    // 0x00F2(0x0001)
    bool                                          bUseParticleDisplayClip;                                      // 0x00F3(0x0001)
    char                                          pa_00F4[0x0004]                                               // 0x00F4(0x0004)
    FVector2D                                     ParticleDisplayClip;                                          // 0x00F8(0x0010)
    bool                                          bUseParticleDisplayCenterRadius;                              // 0x0108(0x0001)
    char                                          pa_0109[0x0003]                                               // 0x0109(0x0003)
    float                                         ParticleDisplayCenterRadius;                                  // 0x010C(0x0004)
    int32_t                                       MaxParticlesToDisplay;                                        // 0x0110(0x0004)
    int32_t                                       PerfReportFrames;                                             // 0x0114(0x0004)
    enum class ENiagaraDebugHUDPerfSampleMode     PerfSampleMode;                                               // 0x0118(0x0004)
    enum class ENiagaraDebugHUDPerfGraphMode      PerfGraphMode;                                                // 0x011C(0x0004)
    int32_t                                       PerfHistoryFrames;                                            // 0x0120(0x0004)
    float                                         PerfGraphTimeRange;                                           // 0x0124(0x0004)
    FVector2D                                     PerfGraphSize;                                                // 0x0128(0x0010)
    FLinearColor                                  PerfGraphAxisColor;                                           // 0x0138(0x0010)
    bool                                          bEnableSmoothing;                                             // 0x0148(0x0001)
    char                                          pa_0149[0x0003]                                               // 0x0149(0x0003)
    int32_t                                       SmoothingWidth;                                               // 0x014C(0x0004)
    FLinearColor                                  DefaultBackgroundColor;                                       // 0x0150(0x0010)
    FLinearColor                                  OverviewHeadingColor;                                         // 0x0160(0x0010)
    FLinearColor                                  OverviewDetailColor;                                          // 0x0170(0x0010)
    FLinearColor                                  OverviewDetailHighlightColor;                                 // 0x0180(0x0010)
    FLinearColor                                  InWorldErrorTextColor;                                        // 0x0190(0x0010)
    FLinearColor                                  InWorldTextColor;                                             // 0x01A0(0x0010)
    FLinearColor                                  MessageInfoTextColor;                                         // 0x01B0(0x0010)
    FLinearColor                                  MessageWarningTextColor;                                      // 0x01C0(0x0010)
    FLinearColor                                  MessageErrorTextColor;                                        // 0x01D0(0x0010)
    float                                         SystemColorTableOpacity;                                      // 0x01E0(0x0004)
    uint32_t                                      SystemColorSeed;                                              // 0x01E4(0x0004)
    FVector                                       SystemColorHSVMin;                                            // 0x01E8(0x0018)
    FVector                                       SystemColorHSVMax;                                            // 0x0200(0x0018)
    enum class ENiagaraDebugPlaybackMode          PlaybackMode;                                                 // 0x0218(0x0001)
    bool                                          bPlaybackRateEnabled;                                         // 0x0219(0x0001)
    char                                          pa_021A[0x0002]                                               // 0x021A(0x0002)
    float                                         PlaybackRate;                                                 // 0x021C(0x0004)
    bool                                          bLoopTimeEnabled;                                             // 0x0220(0x0001)
    char                                          pa_0221[0x0003]                                               // 0x0221(0x0003)
    float                                         LoopTime;                                                     // 0x0224(0x0004)
    bool                                          bShowGlobalBudgetInfo;                                        // 0x0228(0x0001)
    char                                          pa_0229[0x0007]                                               // 0x0229(0x0007)
};


// ScriptStruct  Niagara.NiagaraRequestSimpleClientInfoMessage
// Struct Size::0x0001
struct FNiagaraRequestSimpleClientInfoMessage
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  Niagara.NiagaraOutlinerCaptureSettings
// Struct Size::0x0010
struct FNiagaraOutlinerCaptureSettings
{
    bool                                          bTriggerCapture;                                              // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    uint32_t                                      CaptureDelayFrames;                                           // 0x0004(0x0004)
    bool                                          bGatherPerfData;                                              // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
    uint32_t                                      SimCacheCaptureFrames;                                        // 0x000C(0x0004)
};


// ScriptStruct  Niagara.NiagaraSimpleClientInfo
// Struct Size::0x0040
struct FNiagaraSimpleClientInfo
{
    TArray<FString>                               Systems;                                                      // 0x0000(0x0010)
    TArray<FString>                               Actors;                                                       // 0x0010(0x0010)
    TArray<FString>                               Components;                                                   // 0x0020(0x0010)
    TArray<FString>                               Emitters;                                                     // 0x0030(0x0010)
};


// ScriptStruct  Niagara.NiagaraSystemSimCacheCaptureRequest
// Struct Size::0x0010
struct FNiagaraSystemSimCacheCaptureRequest
{
    FName                                         ComponentName;                                                // 0x0000(0x0008)
    uint32_t                                      CaptureDelayFrames;                                           // 0x0008(0x0004)
    uint32_t                                      CaptureFrames;                                                // 0x000C(0x0004)
};


// ScriptStruct  Niagara.NiagaraSystemSimCacheCaptureReply
// Struct Size::0x0018
struct FNiagaraSystemSimCacheCaptureReply
{
    FName                                         ComponentName;                                                // 0x0000(0x0008)
    TArray<char>                                  SimCacheData;                                                 // 0x0008(0x0010)
};


// ScriptStruct  Niagara.NiagaraGraphViewSettings
// Struct Size::0x0018
struct FNiagaraGraphViewSettings
{
    FVector2D                                     Location;                                                     // 0x0000(0x0010)
    float                                         Zoom;                                                         // 0x0010(0x0004)
    bool                                          bIsValid;                                                     // 0x0014(0x0001)
    char                                          pa_0015[0x0003]                                               // 0x0015(0x0003)
};


// ScriptStruct  Niagara.NiagaraLinearRamp
// Struct Size::0x0010
struct FNiagaraLinearRamp
{
    float                                         StartX;                                                       // 0x0000(0x0004)
    float                                         StartY;                                                       // 0x0004(0x0004)
    float                                         EndX;                                                         // 0x0008(0x0004)
    float                                         EndY;                                                         // 0x000C(0x0004)
};


// ScriptStruct  Niagara.NiagaraGlobalBudgetScaling
// Struct Size::0x0038
struct FNiagaraGlobalBudgetScaling
{
    char                                          bCullByGlobalBudget;                                          // 0x0000(0x0001)
    char                                          bScaleMaxDistanceByGlobalBudgetUse;                           // 0x0000(0x0001)
    char                                          bScaleMaxInstanceCountByGlobalBudgetUse;                      // 0x0000(0x0001)
    char                                          bScaleSystemInstanceCountByGlobalBudgetUse;                   // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         MaxGlobalBudgetUsage;                                         // 0x0004(0x0004)
    FNiagaraLinearRamp                            MaxDistanceScaleByGlobalBudgetUse;                            // 0x0008(0x0010)
    FNiagaraLinearRamp                            MaxInstanceCountScaleByGlobalBudgetUse;                       // 0x0018(0x0010)
    FNiagaraLinearRamp                            MaxSystemInstanceCountScaleByGlobalBudgetUse;                 // 0x0028(0x0010)
};


// ScriptStruct  Niagara.NiagaraSystemVisibilityCullingSettings
// Struct Size::0x000C
struct FNiagaraSystemVisibilityCullingSettings
{
    char                                          bCullWhenNotRendered;                                         // 0x0000(0x0001)
    char                                          bCullByViewFrustum;                                           // 0x0000(0x0001)
    char                                          bAllowPreCullingByViewFrustum;                                // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         MaxTimeOutsideViewFrustum;                                    // 0x0004(0x0004)
    float                                         MaxTimeWithoutRender;                                         // 0x0008(0x0004)
};


// ScriptStruct  Niagara.NiagaraSystemScalabilitySettings
// Struct Size::0x0098
struct FNiagaraSystemScalabilitySettings
{
    FNiagaraPlatformSet                           Platforms;                                                    // 0x0000(0x0030)
    char                                          bCullByDistance;                                              // 0x0030(0x0001)
    char                                          bCullMaxInstanceCount;                                        // 0x0030(0x0001)
    char                                          bCullPerSystemMaxInstanceCount;                               // 0x0030(0x0001)
    char                                          pa_0031[0x0003]                                               // 0x0031(0x0003)
    float                                         MaxDistance;                                                  // 0x0034(0x0004)
    char                                          bCullByMaxTimeWithoutRender;                                  // 0x0038(0x0001)
    char                                          pa_0039[0x0003]                                               // 0x0039(0x0003)
    int32_t                                       MaxInstances;                                                 // 0x003C(0x0004)
    int32_t                                       MaxSystemInstances;                                           // 0x0040(0x0004)
    float                                         MaxTimeWithoutRender;                                         // 0x0044(0x0004)
    enum class ENiagaraCullProxyMode              CullProxyMode;                                                // 0x0048(0x0004)
    int32_t                                       MaxSystemProxies;                                             // 0x004C(0x0004)
    FNiagaraSystemVisibilityCullingSettings       VisibilityCulling;                                            // 0x0050(0x000C)
    FNiagaraGlobalBudgetScaling                   BudgetScaling;                                                // 0x005C(0x0038)
    char                                          pa_0094[0x0004]                                               // 0x0094(0x0004)
};


// ScriptStruct  Niagara.NiagaraPlatformSet
// Struct Size::0x0030
struct FNiagaraPlatformSet
{
    int32_t                                       QualityLevelMask;                                             // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    TArray<FNiagaraDeviceProfileStateEntry>       DeviceProfileStates;                                          // 0x0008(0x0010)
    TArray<FNiagaraPlatformSetCVarCondition>      CVarConditions;                                               // 0x0018(0x0010)
    char                                          pa_0028[0x0008]                                               // 0x0028(0x0008)
};


// ScriptStruct  Niagara.NiagaraPlatformSetCVarCondition
// Struct Size::0x0030
struct FNiagaraPlatformSetCVarCondition
{
    FName                                         CVarName;                                                     // 0x0000(0x0008)
    enum class ENiagaraCVarConditionResponse      PassResponse;                                                 // 0x0008(0x0001)
    enum class ENiagaraCVarConditionResponse      FailResponse;                                                 // 0x0009(0x0001)
    bool                                          Value;                                                        // 0x000A(0x0001)
    char                                          pa_000B[0x0001]                                               // 0x000B(0x0001)
    int32_t                                       MinInt;                                                       // 0x000C(0x0004)
    int32_t                                       MaxInt;                                                       // 0x0010(0x0004)
    float                                         MinFloat;                                                     // 0x0014(0x0004)
    float                                         MaxFloat;                                                     // 0x0018(0x0004)
    char                                          bUseMinInt;                                                   // 0x001C(0x0001)
    char                                          bUseMaxInt;                                                   // 0x001C(0x0001)
    char                                          bUseMinFloat;                                                 // 0x001C(0x0001)
    char                                          bUseMaxFloat;                                                 // 0x001C(0x0001)
    char                                          pa_001D[0x0013]                                               // 0x001D(0x0013)
};


// ScriptStruct  Niagara.NiagaraDeviceProfileStateEntry
// Struct Size::0x0010
struct FNiagaraDeviceProfileStateEntry
{
    FName                                         ProfileName;                                                  // 0x0000(0x0008)
    uint32_t                                      QualityLevelMask;                                             // 0x0008(0x0004)
    uint32_t                                      SetQualityLevelMask;                                          // 0x000C(0x0004)
};


// ScriptStruct  Niagara.NiagaraSystemScalabilitySettingsArray
// Struct Size::0x0010
struct FNiagaraSystemScalabilitySettingsArray
{
    TArray<FNiagaraSystemScalabilitySettings>     Settings;                                                     // 0x0000(0x0010)
};


// ScriptStruct  Niagara.NiagaraSystemScalabilityOverride
// Struct Size::0x00A0
struct FNiagaraSystemScalabilityOverride : public FNiagaraSystemScalabilitySettings
{
    char                                          bOverrideDistanceSettings;                                    // 0x0098(0x0001)
    char                                          bOverrideInstanceCountSettings;                               // 0x0098(0x0001)
    char                                          bOverridePerSystemInstanceCountSettings;                      // 0x0098(0x0001)
    char                                          bOverrideVisibilitySettings;                                  // 0x0098(0x0001)
    char                                          bOverrideGlobalBudgetScalingSettings;                         // 0x0098(0x0001)
    char                                          bOverrideCullProxySettings;                                   // 0x0098(0x0001)
    char                                          pa_0099[0x0007]                                               // 0x0099(0x0007)
};


// ScriptStruct  Niagara.NiagaraSystemScalabilityOverrides
// Struct Size::0x0010
struct FNiagaraSystemScalabilityOverrides
{
    TArray<FNiagaraSystemScalabilityOverride>     Overrides;                                                    // 0x0000(0x0010)
};


// ScriptStruct  Niagara.NiagaraEmitterScalabilitySettings
// Struct Size::0x0038
struct FNiagaraEmitterScalabilitySettings
{
    FNiagaraPlatformSet                           Platforms;                                                    // 0x0000(0x0030)
    char                                          bScaleSpawnCount;                                             // 0x0030(0x0001)
    char                                          pa_0031[0x0003]                                               // 0x0031(0x0003)
    float                                         SpawnCountScale;                                              // 0x0034(0x0004)
};


// ScriptStruct  Niagara.NiagaraEmitterScalabilitySettingsArray
// Struct Size::0x0010
struct FNiagaraEmitterScalabilitySettingsArray
{
    TArray<FNiagaraEmitterScalabilitySettings>    Settings;                                                     // 0x0000(0x0010)
};


// ScriptStruct  Niagara.NiagaraEmitterScalabilityOverride
// Struct Size::0x0040
struct FNiagaraEmitterScalabilityOverride : public FNiagaraEmitterScalabilitySettings
{
    char                                          bOverrideSpawnCountScale;                                     // 0x0038(0x0001)
    char                                          pa_0039[0x0007]                                               // 0x0039(0x0007)
};


// ScriptStruct  Niagara.NiagaraEmitterScalabilityOverrides
// Struct Size::0x0010
struct FNiagaraEmitterScalabilityOverrides
{
    TArray<FNiagaraEmitterScalabilityOverride>    Overrides;                                                    // 0x0000(0x0010)
};


// ScriptStruct  Niagara.NiagaraEventReceiverProperties
// Struct Size::0x0018
struct FNiagaraEventReceiverProperties
{
    FName                                         Name;                                                         // 0x0000(0x0008)
    FName                                         SourceEventGenerator;                                         // 0x0008(0x0008)
    FName                                         SourceEmitter;                                                // 0x0010(0x0008)
};


// ScriptStruct  Niagara.NiagaraEventGeneratorProperties
// Struct Size::0x0050
struct FNiagaraEventGeneratorProperties
{
    int32_t                                       MaxEventsPerFrame;                                            // 0x0000(0x0004)
    FName                                         ID;                                                           // 0x0004(0x0008)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FNiagaraDataSetCompiledData                   DataSetCompiledData;                                          // 0x0010(0x0040)
};


// ScriptStruct  Niagara.NiagaraEmitterScriptProperties
// Struct Size::0x0028
struct FNiagaraEmitterScriptProperties
{
    UNiagaraScript*                               Script;                                                       // 0x0000(0x0008)
    TArray<FNiagaraEventReceiverProperties>       EventReceivers;                                               // 0x0008(0x0010)
    TArray<FNiagaraEventGeneratorProperties>      EventGenerators;                                              // 0x0018(0x0010)
};


// ScriptStruct  Niagara.NiagaraEventScriptProperties
// Struct Size::0x0058
struct FNiagaraEventScriptProperties : public FNiagaraEmitterScriptProperties
{
    enum class EScriptExecutionMode               ExecutionMode;                                                // 0x0028(0x0001)
    char                                          pa_0029[0x0003]                                               // 0x0029(0x0003)
    uint32_t                                      SpawnNumber;                                                  // 0x002C(0x0004)
    uint32_t                                      MaxEventsPerFrame;                                            // 0x0030(0x0004)
    FGuid                                         SourceEmitterID;                                              // 0x0034(0x0010)
    FName                                         SourceEventName;                                              // 0x0044(0x0008)
    bool                                          bRandomSpawnNumber;                                           // 0x004C(0x0001)
    char                                          pa_004D[0x0003]                                               // 0x004D(0x0003)
    uint32_t                                      MinSpawnNumber;                                               // 0x0050(0x0004)
    bool                                          UpdateAttributeInitialValues;                                 // 0x0054(0x0001)
    char                                          pa_0055[0x0003]                                               // 0x0055(0x0003)
};


// ScriptStruct  Niagara.NiagaraDetailsLevelScaleOverrides
// Struct Size::0x0014
struct FNiagaraDetailsLevelScaleOverrides
{
    float                                         Low;                                                          // 0x0000(0x0004)
    float                                         Medium;                                                       // 0x0004(0x0004)
    float                                         High;                                                         // 0x0008(0x0004)
    float                                         Epic;                                                         // 0x000C(0x0004)
    float                                         Cine;                                                         // 0x0010(0x0004)
};


// ScriptStruct  Niagara.VersionedNiagaraEmitterData
// Struct Size::0x0328
struct FVersionedNiagaraEmitterData
{
    FNiagaraAssetVersion                          Version;                                                      // 0x0000(0x001C)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    FText                                         VersionChangeDescription;                                     // 0x0020(0x0018)
    enum class ENiagaraPythonUpdateScriptReferenceUpdateScriptExecution;                                        // 0x0038(0x0001)
    char                                          pa_0039[0x0007]                                               // 0x0039(0x0007)
    FString                                       PythonUpdateScript;                                           // 0x0040(0x0010)
    FFilePath                                     ScriptAsset;                                                  // 0x0050(0x0010)
    bool                                          bDeprecated;                                                  // 0x0060(0x0001)
    char                                          pa_0061[0x0007]                                               // 0x0061(0x0007)
    FText                                         DeprecationMessage;                                           // 0x0068(0x0018)
    bool                                          bLocalSpace;                                                  // 0x0080(0x0001)
    bool                                          bDeterminism;                                                 // 0x0081(0x0001)
    char                                          pa_0082[0x0002]                                               // 0x0082(0x0002)
    int32_t                                       RandomSeed;                                                   // 0x0084(0x0004)
    char                                          bInterpolatedSpawning;                                        // 0x0088(0x0001)
    char                                          pa_0089[0x0003]                                               // 0x0089(0x0003)
    enum class ENiagaraSimTarget                  SimTarget;                                                    // 0x008C(0x0001)
    enum class ENiagaraEmitterCalculateBoundMode  CalculateBoundsMode;                                          // 0x008D(0x0001)
    char                                          pa_008E[0x0002]                                               // 0x008E(0x0002)
    FBox                                          FixedBounds;                                                  // 0x0090(0x0038)
    char                                          bRequiresPersistentIDs;                                       // 0x00C8(0x0001)
    char                                          bCombineEventSpawn;                                           // 0x00C8(0x0001)
    char                                          pa_00C9[0x0007]                                               // 0x00C9(0x0007)
    TArray<FNiagaraEventScriptProperties>         EventHandlerScriptProps;                                      // 0x00D0(0x0010)
    FNiagaraPlatformSet                           Platforms;                                                    // 0x00E0(0x0030)
    FNiagaraEmitterScalabilityOverrides           ScalabilityOverrides;                                         // 0x0110(0x0010)
    char                                          bLimitDeltaTime;                                              // 0x0120(0x0001)
    char                                          pa_0121[0x0003]                                               // 0x0121(0x0003)
    int32_t                                       MaxGPUParticlesSpawnPerFrame;                                 // 0x0124(0x0004)
    float                                         MaxDeltaTimePerTick;                                          // 0x0128(0x0004)
    enum class EParticleAllocationMode            AllocationMode;                                               // 0x012C(0x0001)
    char                                          pa_012D[0x0003]                                               // 0x012D(0x0003)
    int32_t                                       PreAllocationCount;                                           // 0x0130(0x0004)
    char                                          pa_0134[0x0004]                                               // 0x0134(0x0004)
    FNiagaraEmitterScriptProperties               UpdateScriptProps;                                            // 0x0138(0x0028)
    FNiagaraEmitterScriptProperties               SpawnScriptProps;                                             // 0x0160(0x0028)
    FNiagaraParameterStore                        RendererBindings;                                             // 0x0188(0x0088)
    TArray<UNiagaraRendererProperties*>           RendererProperties;                                           // 0x0210(0x0010)
    TArray<UNiagaraSimulationStageBase*>          SimulationStages;                                             // 0x0220(0x0010)
    UNiagaraScript*                               GPUComputeScript;                                             // 0x0230(0x0008)
    TArray<FName>                                 SharedEventGeneratorIds;                                      // 0x0238(0x0010)
    FNiagaraEmitterScalabilitySettings            CurrentScalabilitySettings;                                   // 0x0248(0x0038)
    char                                          pa_0280[0x00A8]                                               // 0x0280(0x00A8)
};


// ScriptStruct  Niagara.NiagaraParameterStore
// Struct Size::0x0088
struct FNiagaraParameterStore
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    TWeakObjectPtr<UObject>                       Owner;                                                        // 0x0008(0x0008)
    TArray<FNiagaraVariableWithOffset>            SortedParameterOffsets;                                       // 0x0010(0x0010)
    TArray<char>                                  ParameterData;                                                // 0x0020(0x0010)
    TArray<UNiagaraDataInterface*>                DataInterfaces;                                               // 0x0030(0x0010)
    TArray<UObject*>                              UObjects;                                                     // 0x0040(0x0010)
    TArray<FNiagaraPositionSource>                OriginalPositionData;                                         // 0x0050(0x0010)
    char                                          pa_0060[0x0028]                                               // 0x0060(0x0028)
};


// ScriptStruct  Niagara.NiagaraPositionSource
// Struct Size::0x0020
struct FNiagaraPositionSource
{
    FName                                         Name;                                                         // 0x0000(0x0008)
    FVector                                       Value;                                                        // 0x0008(0x0018)
};


// ScriptStruct  Niagara.NiagaraVariableWithOffset
// Struct Size::0x0020
struct FNiagaraVariableWithOffset : public FNiagaraVariableBase
{
    int32_t                                       Offset;                                                       // 0x000C(0x0004)
    FNiagaraLwcStructConverter                    StructConverter;                                              // 0x0010(0x0010)
};


// ScriptStruct  Niagara.NiagaraLwcStructConverter
// Struct Size::0x0010
struct FNiagaraLwcStructConverter
{
    TArray<FNiagaraStructConversionStep>          ConversionSteps;                                              // 0x0000(0x0010)
};


// ScriptStruct  Niagara.NiagaraStructConversionStep
// Struct Size::0x0014
struct FNiagaraStructConversionStep
{
    int32_t                                       SourceBytes;                                                  // 0x0000(0x0004)
    int32_t                                       SourceOffset;                                                 // 0x0004(0x0004)
    int32_t                                       SimulationBytes;                                              // 0x0008(0x0004)
    int32_t                                       SimulationOffset;                                             // 0x000C(0x0004)
    enum class ENiagaraStructConversionType       ConversionType;                                               // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
};


// ScriptStruct  Niagara.NiagaraAssetVersion
// Struct Size::0x001C
struct FNiagaraAssetVersion
{
    int32_t                                       MajorVersion;                                                 // 0x0000(0x0004)
    int32_t                                       MinorVersion;                                                 // 0x0004(0x0004)
    FGuid                                         VersionGuid;                                                  // 0x0008(0x0010)
    bool                                          bIsVisibleInVersionSelector;                                  // 0x0018(0x0001)
    char                                          pa_0019[0x0003]                                               // 0x0019(0x0003)
};


// ScriptStruct  Niagara.NiagaraEmitterHandle
// Struct Size::0x0048
struct FNiagaraEmitterHandle
{
    FGuid                                         ID;                                                           // 0x0000(0x0010)
    FName                                         IdName;                                                       // 0x0010(0x0008)
    bool                                          bIsEnabled;                                                   // 0x0018(0x0001)
    char                                          pa_0019[0x0003]                                               // 0x0019(0x0003)
    FName                                         Name;                                                         // 0x001C(0x0008)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
    UNiagaraEmitter*                              Instance;                                                     // 0x0028(0x0008)
    FVersionedNiagaraEmitter                      VersionedInstance;                                            // 0x0030(0x0018)
};


// ScriptStruct  Niagara.VersionedNiagaraEmitter
// Struct Size::0x0018
struct FVersionedNiagaraEmitter
{
    UNiagaraEmitter*                              Emitter;                                                      // 0x0000(0x0008)
    FGuid                                         Version;                                                      // 0x0008(0x0010)
};


// ScriptStruct  Niagara.NiagaraCollisionEventPayload
// Struct Size::0x0050
struct FNiagaraCollisionEventPayload
{
    FVector                                       CollisionPos;                                                 // 0x0000(0x0018)
    FVector                                       CollisionNormal;                                              // 0x0018(0x0018)
    FVector                                       CollisionVelocity;                                            // 0x0030(0x0018)
    int32_t                                       ParticleIndex;                                                // 0x0048(0x0004)
    int32_t                                       PhysicalMaterialIndex;                                        // 0x004C(0x0004)
};


// ScriptStruct  Niagara.NiagaraMeshMaterialOverride
// Struct Size::0x0028
struct FNiagaraMeshMaterialOverride
{
    UMaterialInterface*                           ExplicitMat;                                                  // 0x0000(0x0008)
    FNiagaraUserParameterBinding                  UserParamBinding;                                             // 0x0008(0x0020)
};


// ScriptStruct  Niagara.NiagaraMeshRendererMeshProperties
// Struct Size::0x0078
struct FNiagaraMeshRendererMeshProperties
{
    UStaticMesh*                                  Mesh;                                                         // 0x0000(0x0008)
    FNiagaraUserParameterBinding                  UserParamBinding;                                             // 0x0008(0x0020)
    FVector                                       Scale;                                                        // 0x0028(0x0018)
    FRotator                                      Rotation;                                                     // 0x0040(0x0018)
    FVector                                       PivotOffset;                                                  // 0x0058(0x0018)
    enum class ENiagaraMeshPivotOffsetSpace       PivotOffsetSpace;                                             // 0x0070(0x0001)
    char                                          pa_0071[0x0007]                                               // 0x0071(0x0007)
};


// ScriptStruct  Niagara.ParameterDefinitionsSubscription
// Struct Size::0x0001
struct FParameterDefinitionsSubscription
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  Niagara.NiagaraParameters
// Struct Size::0x0010
struct FNiagaraParameters
{
    TArray<FNiagaraVariable>                      Parameters;                                                   // 0x0000(0x0010)
};


// ScriptStruct  Niagara.NiagaraBoundParameter
// Struct Size::0x0028
struct FNiagaraBoundParameter
{
    FNiagaraVariable                              Parameter;                                                    // 0x0000(0x0020)
    int32_t                                       SrcOffset;                                                    // 0x0020(0x0004)
    int32_t                                       DestOffset;                                                   // 0x0024(0x0004)
};


// ScriptStruct  Niagara.NiagaraPerfBaselineStats
// Struct Size::0x0010
struct FNiagaraPerfBaselineStats
{
    float                                         PerInstanceAvg;                                               // 0x0000(0x0004)
    float                                         PerInstanceAvg;                                               // 0x0004(0x0004)
    float                                         PerInstanceMax;                                               // 0x0008(0x0004)
    float                                         PerInstanceMax;                                               // 0x000C(0x0004)
};


// ScriptStruct  Niagara.NiagaraPlatformSetConflictEntry
// Struct Size::0x000C
struct FNiagaraPlatformSetConflictEntry
{
    FName                                         ProfileName;                                                  // 0x0000(0x0008)
    int32_t                                       QualityLevelMask;                                             // 0x0008(0x0004)
};


// ScriptStruct  Niagara.NiagaraPlatformSetConflictInfo
// Struct Size::0x0018
struct FNiagaraPlatformSetConflictInfo
{
    int32_t                                       SetAIndex;                                                    // 0x0000(0x0004)
    int32_t                                       SetBIndex;                                                    // 0x0004(0x0004)
    TArray<FNiagaraPlatformSetConflictEntry>      Conflicts;                                                    // 0x0008(0x0010)
};


// ScriptStruct  Niagara.NiagaraPlatformSetRedirect
// Struct Size::0x0080
struct FNiagaraPlatformSetRedirect
{
    TArray<FName>                                 ProfileNames;                                                 // 0x0000(0x0010)
    enum class ENiagaraDeviceProfileRedirectMode  Mode;                                                         // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
    FName                                         RedirectProfileName;                                          // 0x0014(0x0008)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    FNiagaraPlatformSetCVarCondition              CVarConditionEnabled;                                         // 0x0020(0x0030)
    FNiagaraPlatformSetCVarCondition              CVarConditionDisabled;                                        // 0x0050(0x0030)
};


// ScriptStruct  Niagara.NiagaraRendererMaterialScalarParameter
// Struct Size::0x000C
struct FNiagaraRendererMaterialScalarParameter
{
    FName                                         MaterialParameterName;                                        // 0x0000(0x0008)
    float                                         Value;                                                        // 0x0008(0x0004)
};


// ScriptStruct  Niagara.NiagaraRendererMaterialVectorParameter
// Struct Size::0x0018
struct FNiagaraRendererMaterialVectorParameter
{
    FName                                         MaterialParameterName;                                        // 0x0000(0x0008)
    FLinearColor                                  Value;                                                        // 0x0008(0x0010)
};


// ScriptStruct  Niagara.NiagaraRendererMaterialTextureParameter
// Struct Size::0x0010
struct FNiagaraRendererMaterialTextureParameter
{
    FName                                         MaterialParameterName;                                        // 0x0000(0x0008)
    UTexture*                                     Texture;                                                      // 0x0008(0x0008)
};


// ScriptStruct  Niagara.NiagaraRendererMaterialParameters
// Struct Size::0x0040
struct FNiagaraRendererMaterialParameters
{
    TArray<FNiagaraMaterialAttributeBinding>      AttributeBindings;                                            // 0x0000(0x0010)
    TArray<FNiagaraRendererMaterialScalarParameter>ScalarParameters;                                            // 0x0010(0x0010)
    TArray<FNiagaraRendererMaterialVectorParameter>VectorParameters;                                            // 0x0020(0x0010)
    TArray<FNiagaraRendererMaterialTextureParameter>TextureParameters;                                          // 0x0030(0x0010)
};


// ScriptStruct  Niagara.NiagaraRibbonShapeCustomVertex
// Struct Size::0x0014
struct FNiagaraRibbonShapeCustomVertex
{
    FVector2f                                     position;                                                     // 0x0000(0x0008)
    FVector2f                                     Normal;                                                       // 0x0008(0x0008)
    float                                         TextureV;                                                     // 0x0010(0x0004)
};


// ScriptStruct  Niagara.NiagaraRibbonUVSettings
// Struct Size::0x0038
struct FNiagaraRibbonUVSettings
{
    enum class ENiagaraRibbonUVDistributionMode   DistributionMode;                                             // 0x0000(0x0004)
    enum class ENiagaraRibbonUVEdgeMode           LeadingEdgeMode;                                              // 0x0004(0x0004)
    enum class ENiagaraRibbonUVEdgeMode           TrailingEdgeMode;                                             // 0x0008(0x0004)
    float                                         TilingLength;                                                 // 0x000C(0x0004)
    FVector2D                                     Offset;                                                       // 0x0010(0x0010)
    FVector2D                                     Scale;                                                        // 0x0020(0x0010)
    bool                                          bEnablePerParticleUOverride;                                  // 0x0030(0x0001)
    bool                                          bEnablePerParticleVRangeOverride;                             // 0x0031(0x0001)
    char                                          pa_0032[0x0006]                                               // 0x0032(0x0006)
};


// ScriptStruct  Niagara.NiagaraScalabilityManager
// Struct Size::0x00D8
struct FNiagaraScalabilityManager
{
    UNiagaraEffectType*                           EffectType;                                                   // 0x0000(0x0008)
    TArray<UNiagaraComponent*>                    ManagedComponents;                                            // 0x0008(0x0010)
    char                                          pa_0018[0x00C0]                                               // 0x0018(0x00C0)
};


// ScriptStruct  Niagara.NiagaraModuleDependency
// Struct Size::0x0068
struct FNiagaraModuleDependency
{
    FName                                         ID;                                                           // 0x0000(0x0008)
    enum class ENiagaraModuleDependencyType       Type;                                                         // 0x0008(0x0001)
    enum class ENiagaraModuleDependencyScriptConstraintScriptConstraint;                                        // 0x0009(0x0001)
    char                                          pa_000A[0x0006]                                               // 0x000A(0x0006)
    FString                                       RequiredVersion;                                              // 0x0010(0x0010)
    int32_t                                       OnlyEvaluateInScriptUsage;                                    // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
    FText                                         Description;                                                  // 0x0028(0x0018)
    char                                          pa_0040[0x0028]                                               // 0x0040(0x0028)
};


// ScriptStruct  Niagara.NiagaraCompilerTag
// Struct Size::0x0030
struct FNiagaraCompilerTag
{
    FNiagaraVariable                              Variable;                                                     // 0x0000(0x0020)
    FString                                       StringValue;                                                  // 0x0020(0x0010)
};


// ScriptStruct  Niagara.NiagaraVMExecutableDataId
// Struct Size::0x0058
struct FNiagaraVMExecutableDataId
{
    FGuid                                         CompilerVersionID;                                            // 0x0000(0x0010)
    enum class ENiagaraScriptUsage                ScriptUsageType;                                              // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
    FGuid                                         ScriptUsageTypeID;                                            // 0x0014(0x0010)
    char                                          bUsesRapidIterationParams;                                    // 0x0024(0x0001)
    char                                          bDisableDebugSwitches;                                        // 0x0024(0x0001)
    char                                          bInterpolatedSpawn;                                           // 0x0024(0x0001)
    char                                          bRequiresPersistentIDs;                                       // 0x0024(0x0001)
    char                                          pa_0025[0x0003]                                               // 0x0025(0x0003)
    FGuid                                         BaseScriptID;                                                 // 0x0028(0x0010)
    FNiagaraCompileHash                           BaseScriptCompileHash;                                        // 0x0038(0x0010)
    FGuid                                         ScriptVersionID;                                              // 0x0048(0x0010)
};


// ScriptStruct  Niagara.NiagaraVMExecutableByteCode
// Struct Size::0x0018
struct FNiagaraVMExecutableByteCode
{
    TArray<char>                                  Data;                                                         // 0x0000(0x0010)
    int32_t                                       UncompressedSize;                                             // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  Niagara.NiagaraVMExecutableData
// Struct Size::0x0190
struct FNiagaraVMExecutableData
{
    FNiagaraVMExecutableByteCode                  ByteCode;                                                     // 0x0000(0x0018)
    FNiagaraVMExecutableByteCode                  OptimizedByteCode;                                            // 0x0018(0x0018)
    char                                          pa_0030[0x0038]                                               // 0x0030(0x0038)
    int32_t                                       NumTempRegisters;                                             // 0x0068(0x0004)
    int32_t                                       NumUserPtrs;                                                  // 0x006C(0x0004)
    TArray<FNiagaraCompilerTag>                   CompileTags;                                                  // 0x0070(0x0010)
    TArray<char>                                  ScriptLiterals;                                               // 0x0080(0x0010)
    TArray<FNiagaraVariable>                      Attributes;                                                   // 0x0090(0x0010)
    FNiagaraScriptDataUsageInfo                   DataUsage;                                                    // 0x00A0(0x0001)
    char                                          pa_00A1[0x0007]                                               // 0x00A1(0x0007)
    TArray<FNiagaraScriptDataInterfaceCompileInfo>DataInterfaceInfo;                                            // 0x00A8(0x0010)
    TArray<FVMExternalFunctionBindingInfo>        CalledVMExternalFunctions;                                    // 0x00B8(0x0010)
    char                                          pa_00C8[0x0010]                                               // 0x00C8(0x0010)
    TArray<FNiagaraDataSetID>                     ReadDataSets;                                                 // 0x00D8(0x0010)
    TArray<FNiagaraDataSetProperties>             WriteDataSets;                                                // 0x00E8(0x0010)
    TArray<FNiagaraStatScope>                     StatScopes;                                                   // 0x00F8(0x0010)
    FNiagaraShaderScriptParametersMetadata        ShaderScriptParametersMetadata;                               // 0x0108(0x0058)
    enum class ENiagaraScriptCompileStatus        LastCompileStatus;                                            // 0x0160(0x0001)
    char                                          pa_0161[0x0007]                                               // 0x0161(0x0007)
    TArray<FSimulationStageMetaData>              SimulationStageMetaData;                                      // 0x0168(0x0010)
    TArray<char>                                  ExperimentalContextData;                                      // 0x0178(0x0010)
    char                                          bReadsSignificanceIndex;                                      // 0x0188(0x0001)
    char                                          bNeedsGPUContextInit;                                         // 0x0188(0x0001)
    char                                          pa_0189[0x0007]                                               // 0x0189(0x0007)
};


// ScriptStruct  NiagaraShader.SimulationStageMetaData
// Struct Size::0x0090
struct FSimulationStageMetaData
{
    FName                                         SimulationStageName;                                          // 0x0000(0x0008)
    FName                                         EnabledBinding;                                               // 0x0008(0x0008)
    FName                                         ElementCountXBinding;                                         // 0x0010(0x0008)
    FName                                         ElementCountYBinding;                                         // 0x0018(0x0008)
    FName                                         ElementCountZBinding;                                         // 0x0020(0x0008)
    FName                                         IterationSource;                                              // 0x0028(0x0008)
    enum class ENiagaraSimStageExecuteBehavior    ExecuteBehavior;                                              // 0x0030(0x0001)
    char                                          pa_0031[0x0003]                                               // 0x0031(0x0003)
    char                                          bWritesParticles;                                             // 0x0034(0x0001)
    char                                          bPartialParticleUpdate;                                       // 0x0034(0x0001)
    char                                          bParticleIterationStateEnabled;                               // 0x0034(0x0001)
    char                                          bOverrideElementCount;                                        // 0x0034(0x0001)
    char                                          pa_0035[0x0003]                                               // 0x0035(0x0003)
    FName                                         ParticleIterationStateBinding;                                // 0x0038(0x0008)
    char                                          pa_0040[0x0004]                                               // 0x0040(0x0004)
    FIntPoint                                     ParticleIterationStateRange;                                  // 0x0044(0x0008)
    char                                          pa_004C[0x0004]                                               // 0x004C(0x0004)
    TArray<FName>                                 OutputDestinations;                                           // 0x0050(0x0010)
    TArray<FName>                                 InputDataInterfaces;                                          // 0x0060(0x0010)
    int32_t                                       NumIterations;                                                // 0x0070(0x0004)
    FName                                         NumIterationsBinding;                                         // 0x0074(0x0008)
    enum class ENiagaraGpuDispatchType            GpuDispatchType;                                              // 0x007C(0x0001)
    char                                          pa_007D[0x0003]                                               // 0x007D(0x0003)
    FIntVector                                    GpuDispatchNumThreads;                                        // 0x0080(0x000C)
    char                                          pa_008C[0x0004]                                               // 0x008C(0x0004)
};


// ScriptStruct  NiagaraShader.NiagaraShaderScriptParametersMetadata
// Struct Size::0x0058
struct FNiagaraShaderScriptParametersMetadata
{
    TArray<FNiagaraDataInterfaceGPUParamInfo>     DataInterfaceParamInfo;                                       // 0x0000(0x0010)
    TArray<FString>                               LooseMetadataNames;                                           // 0x0010(0x0010)
    bool                                          bExternalConstantsInterpolated;                               // 0x0020(0x0001)
    char                                          pa_0021[0x0007]                                               // 0x0021(0x0007)
    TArray<FNiagaraShaderScriptExternalConstant>  ExternalConstants;                                            // 0x0028(0x0010)
    char                                          pa_0038[0x0020]                                               // 0x0038(0x0020)
};


// ScriptStruct  NiagaraShader.NiagaraShaderScriptExternalConstant
// Struct Size::0x0018
struct FNiagaraShaderScriptExternalConstant
{
    FName                                         Type;                                                         // 0x0000(0x0008)
    FString                                       Name;                                                         // 0x0008(0x0010)
};


// ScriptStruct  NiagaraShader.NiagaraDataInterfaceGPUParamInfo
// Struct Size::0x0038
struct FNiagaraDataInterfaceGPUParamInfo
{
    FString                                       DataInterfaceHLSLSymbol;                                      // 0x0000(0x0010)
    FString                                       DIClassName;                                                  // 0x0010(0x0010)
    uint32_t                                      ShaderParametersOffset;                                       // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
    TArray<FNiagaraDataInterfaceGeneratedFunction>GeneratedFunctions;                                           // 0x0028(0x0010)
};


// ScriptStruct  NiagaraShader.NiagaraDataInterfaceGeneratedFunction
// Struct Size::0x0028
struct FNiagaraDataInterfaceGeneratedFunction
{
    char                                          pa_0000[0x0028]                                               // 0x0000(0x0028)
};


// ScriptStruct  Niagara.VersionedNiagaraScriptData
// Struct Size::0x0001
struct FVersionedNiagaraScriptData
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  Niagara.NiagaraScriptExecutionPaddingInfo
// Struct Size::0x0008
struct FNiagaraScriptExecutionPaddingInfo
{
    uint16_t                                      SrcOffset;                                                    // 0x0000(0x0002)
    uint16_t                                      DestOffset;                                                   // 0x0002(0x0002)
    uint16_t                                      SrcSize;                                                      // 0x0004(0x0002)
    uint16_t                                      DestSize;                                                     // 0x0006(0x0002)
};


// ScriptStruct  Niagara.NiagaraScriptExecutionParameterStore
// Struct Size::0x00A8
struct FNiagaraScriptExecutionParameterStore : public FNiagaraParameterStore
{
    int32_t                                       ParameterSize;                                                // 0x0088(0x0004)
    uint32_t                                      PaddedParameterSize;                                          // 0x008C(0x0004)
    TArray<FNiagaraScriptExecutionPaddingInfo>    PaddingInfo;                                                  // 0x0090(0x0010)
    char                                          bInitialized;                                                 // 0x00A0(0x0001)
    char                                          pa_00A1[0x0007]                                               // 0x00A1(0x0007)
};


// ScriptStruct  Niagara.NiagaraScriptInstanceParameterStore
// Struct Size::0x0098
struct FNiagaraScriptInstanceParameterStore : public FNiagaraParameterStore
{
    char                                          pa_0088[0x0010]                                               // 0x0088(0x0010)
};


// ScriptStruct  Niagara.NiagaraScriptHighlight
// Struct Size::0x0028
struct FNiagaraScriptHighlight
{
    FLinearColor                                  Color;                                                        // 0x0000(0x0010)
    FText                                         DisplayName;                                                  // 0x0010(0x0018)
};


// ScriptStruct  Niagara.NiagaraSimCacheDataBuffers
// Struct Size::0x0050
struct FNiagaraSimCacheDataBuffers
{
    uint32_t                                      NumInstances;                                                 // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    TArray<char>                                  FloatData;                                                    // 0x0008(0x0010)
    TArray<char>                                  HalfData;                                                     // 0x0018(0x0010)
    TArray<char>                                  Int32Data;                                                    // 0x0028(0x0010)
    TArray<int32_t>                               IDToIndexTable;                                               // 0x0038(0x0010)
    uint32_t                                      IDAcquireTag;                                                 // 0x0048(0x0004)
    char                                          pa_004C[0x0004]                                               // 0x004C(0x0004)
};


// ScriptStruct  Niagara.NiagaraSimCacheEmitterFrame
// Struct Size::0x0090
struct FNiagaraSimCacheEmitterFrame
{
    FBox                                          LocalBounds;                                                  // 0x0000(0x0038)
    int32_t                                       TotalSpawnedParticles;                                        // 0x0038(0x0004)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
    FNiagaraSimCacheDataBuffers                   ParticleDataBuffers;                                          // 0x0040(0x0050)
};


// ScriptStruct  Niagara.NiagaraSimCacheSystemFrame
// Struct Size::0x0088
struct FNiagaraSimCacheSystemFrame
{
    FBox                                          LocalBounds;                                                  // 0x0000(0x0038)
    FNiagaraSimCacheDataBuffers                   SystemDataBuffers;                                            // 0x0038(0x0050)
};


// ScriptStruct  Niagara.NiagaraSimCacheFrame
// Struct Size::0x0110
struct FNiagaraSimCacheFrame
{
    FTransform                                    LocalToWorld;                                                 // 0x0000(0x0060)
    FVector3f                                     LWCTile;                                                      // 0x0060(0x000C)
    char                                          pa_006C[0x0004]                                               // 0x006C(0x0004)
    FNiagaraSimCacheSystemFrame                   SystemData;                                                   // 0x0070(0x0088)
    TArray<FNiagaraSimCacheEmitterFrame>          EmitterData;                                                  // 0x00F8(0x0010)
    char                                          pa_0108[0x0008]                                               // 0x0108(0x0008)
};


// ScriptStruct  Niagara.NiagaraSimCacheVariable
// Struct Size::0x0018
struct FNiagaraSimCacheVariable
{
    FNiagaraVariableBase                          Variable;                                                     // 0x0000(0x000C)
    uint16_t                                      FloatOffset;                                                  // 0x000C(0x0002)
    uint16_t                                      FloatCount;                                                   // 0x000E(0x0002)
    uint16_t                                      HalfOffset;                                                   // 0x0010(0x0002)
    uint16_t                                      HalfCount;                                                    // 0x0012(0x0002)
    uint16_t                                      Int32Offset;                                                  // 0x0014(0x0002)
    uint16_t                                      Int32Count;                                                   // 0x0016(0x0002)
};


// ScriptStruct  Niagara.NiagaraSimCacheDataBuffersLayout
// Struct Size::0x0068
struct FNiagaraSimCacheDataBuffersLayout
{
    FName                                         LayoutName;                                                   // 0x0000(0x0008)
    enum class ENiagaraSimTarget                  SimTarget;                                                    // 0x0008(0x0001)
    char                                          pa_0009[0x0007]                                               // 0x0009(0x0007)
    TArray<FNiagaraSimCacheVariable>              Variables;                                                    // 0x0010(0x0010)
    uint16_t                                      FloatCount;                                                   // 0x0020(0x0002)
    uint16_t                                      HalfCount;                                                    // 0x0022(0x0002)
    uint16_t                                      Int32Count;                                                   // 0x0024(0x0002)
    bool                                          bLocalSpace;                                                  // 0x0026(0x0001)
    char                                          pa_0027[0x0001]                                               // 0x0027(0x0001)
    TArray<FName>                                 RebaseVariableNames;                                          // 0x0028(0x0010)
    char                                          pa_0038[0x0030]                                               // 0x0038(0x0030)
};


// ScriptStruct  Niagara.NiagaraSimCacheLayout
// Struct Size::0x0078
struct FNiagaraSimCacheLayout
{
    FNiagaraSimCacheDataBuffersLayout             SystemLayout;                                                 // 0x0000(0x0068)
    TArray<FNiagaraSimCacheDataBuffersLayout>     EmitterLayouts;                                               // 0x0068(0x0010)
};


// ScriptStruct  Niagara.NiagaraEmitterCompiledData
// Struct Size::0x0130
struct FNiagaraEmitterCompiledData
{
    TArray<FName>                                 SpawnAttributes;                                              // 0x0000(0x0010)
    FNiagaraVariable                              EmitterSpawnIntervalVar;                                      // 0x0010(0x0020)
    FNiagaraVariable                              EmitterInterpSpawnStartDTVar;                                 // 0x0030(0x0020)
    FNiagaraVariable                              EmitterSpawnGroupVar;                                         // 0x0050(0x0020)
    FNiagaraVariable                              EmitterAgeVar;                                                // 0x0070(0x0020)
    FNiagaraVariable                              EmitterRandomSeedVar;                                         // 0x0090(0x0020)
    FNiagaraVariable                              EmitterInstanceSeedVar;                                       // 0x00B0(0x0020)
    FNiagaraVariable                              EmitterTotalSpawnedParticlesVar;                              // 0x00D0(0x0020)
    FNiagaraDataSetCompiledData                   DataSetCompiledData;                                          // 0x00F0(0x0040)
};


// ScriptStruct  Niagara.NiagaraParameterDataSetBinding
// Struct Size::0x0008
struct FNiagaraParameterDataSetBinding
{
    int32_t                                       ParameterOffset;                                              // 0x0000(0x0004)
    int32_t                                       DataSetComponentOffset;                                       // 0x0004(0x0004)
};


// ScriptStruct  Niagara.NiagaraParameterDataSetBindingCollection
// Struct Size::0x0020
struct FNiagaraParameterDataSetBindingCollection
{
    TArray<FNiagaraParameterDataSetBinding>       FloatOffsets;                                                 // 0x0000(0x0010)
    TArray<FNiagaraParameterDataSetBinding>       Int32Offsets;                                                 // 0x0010(0x0010)
};


// ScriptStruct  Niagara.NiagaraSystemCompiledData
// Struct Size::0x0228
struct FNiagaraSystemCompiledData
{
    FNiagaraParameterStore                        InstanceParamStore;                                           // 0x0000(0x0088)
    FNiagaraDataSetCompiledData                   DataSetCompiledData;                                          // 0x0088(0x0040)
    FNiagaraDataSetCompiledData                   SpawnInstanceParamsDataSetCompiledData;                       // 0x00C8(0x0040)
    FNiagaraDataSetCompiledData                   UpdateInstanceParamsDataSetCompiledData;                      // 0x0108(0x0040)
    FNiagaraParameterDataSetBindingCollection     SpawnInstanceGlobalBinding;                                   // 0x0148(0x0020)
    FNiagaraParameterDataSetBindingCollection     SpawnInstanceSystemBinding;                                   // 0x0168(0x0020)
    FNiagaraParameterDataSetBindingCollection     SpawnInstanceOwnerBinding;                                    // 0x0188(0x0020)
    TArray<FNiagaraParameterDataSetBindingCollection>SpawnInstanceEmitterBindings;                              // 0x01A8(0x0010)
    FNiagaraParameterDataSetBindingCollection     UpdateInstanceGlobalBinding;                                  // 0x01B8(0x0020)
    FNiagaraParameterDataSetBindingCollection     UpdateInstanceSystemBinding;                                  // 0x01D8(0x0020)
    FNiagaraParameterDataSetBindingCollection     UpdateInstanceOwnerBinding;                                   // 0x01F8(0x0020)
    TArray<FNiagaraParameterDataSetBindingCollection>UpdateInstanceEmitterBindings;                             // 0x0218(0x0010)
};


// ScriptStruct  Niagara.NiagaraSystemCompileRequest
// Struct Size::0x0030
struct FNiagaraSystemCompileRequest
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    TArray<UObject*>                              RootObjects;                                                  // 0x0008(0x0010)
    char                                          pa_0018[0x0018]                                               // 0x0018(0x0018)
};


// ScriptStruct  Niagara.NiagaraWildcard
// Struct Size::0x0001
struct FNiagaraWildcard
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  Niagara.NiagaraFloat
// Struct Size::0x0004
struct FNiagaraFloat
{
    float                                         Value;                                                        // 0x0000(0x0004)
};


// ScriptStruct  Niagara.NiagaraInt32
// Struct Size::0x0004
struct FNiagaraInt32
{
    int32_t                                       Value;                                                        // 0x0000(0x0004)
};


// ScriptStruct  Niagara.NiagaraBool
// Struct Size::0x0004
struct FNiagaraBool
{
    int32_t                                       Value;                                                        // 0x0000(0x0004)
};


// ScriptStruct  Niagara.NiagaraPosition
// Struct Size::0x000C
struct FNiagaraPosition : public FVector3f
{
};


// ScriptStruct  Niagara.NiagaraHalf
// Struct Size::0x0002
struct FNiagaraHalf
{
    uint16_t                                      Value;                                                        // 0x0000(0x0002)
};


// ScriptStruct  Niagara.NiagaraHalfVector2
// Struct Size::0x0004
struct FNiagaraHalfVector2
{
    uint16_t                                      X;                                                            // 0x0000(0x0002)
    uint16_t                                      Y;                                                            // 0x0002(0x0002)
};


// ScriptStruct  Niagara.NiagaraHalfVector3
// Struct Size::0x0006
struct FNiagaraHalfVector3
{
    uint16_t                                      X;                                                            // 0x0000(0x0002)
    uint16_t                                      Y;                                                            // 0x0002(0x0002)
    uint16_t                                      Z;                                                            // 0x0004(0x0002)
};


// ScriptStruct  Niagara.NiagaraHalfVector4
// Struct Size::0x0008
struct FNiagaraHalfVector4
{
    uint16_t                                      X;                                                            // 0x0000(0x0002)
    uint16_t                                      Y;                                                            // 0x0002(0x0002)
    uint16_t                                      Z;                                                            // 0x0004(0x0002)
    uint16_t                                      W;                                                            // 0x0006(0x0002)
};


// ScriptStruct  Niagara.NiagaraNumeric
// Struct Size::0x0001
struct FNiagaraNumeric
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  Niagara.NiagaraParameterMap
// Struct Size::0x0001
struct FNiagaraParameterMap
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  Niagara.NiagaraMatrix
// Struct Size::0x0040
struct FNiagaraMatrix
{
    FVector4f                                     Row0;                                                         // 0x0000(0x0010)
    FVector4f                                     Row1;                                                         // 0x0010(0x0010)
    FVector4f                                     Row2;                                                         // 0x0020(0x0010)
    FVector4f                                     Row3;                                                         // 0x0030(0x0010)
};


// ScriptStruct  Niagara.NiagaraSpawnInfo
// Struct Size::0x0010
struct FNiagaraSpawnInfo
{
    int32_t                                       Count;                                                        // 0x0000(0x0004)
    float                                         InterpStartDt;                                                // 0x0004(0x0004)
    float                                         IntervalDt;                                                   // 0x0008(0x0004)
    int32_t                                       SpawnGroup;                                                   // 0x000C(0x0004)
};


// ScriptStruct  Niagara.NiagaraID
// Struct Size::0x0008
struct FNiagaraID
{
    int32_t                                       Index;                                                        // 0x0000(0x0004)
    int32_t                                       AcquireTag;                                                   // 0x0004(0x0004)
};


// ScriptStruct  Niagara.NiagaraRandInfo
// Struct Size::0x000C
struct FNiagaraRandInfo
{
    int32_t                                       Seed1;                                                        // 0x0000(0x0004)
    int32_t                                       Seed2;                                                        // 0x0004(0x0004)
    int32_t                                       Seed3;                                                        // 0x0008(0x0004)
};


// ScriptStruct  Niagara.NiagaraCompileHashVisitorDebugInfo
// Struct Size::0x0030
struct FNiagaraCompileHashVisitorDebugInfo
{
    FString                                       Object;                                                       // 0x0000(0x0010)
    TArray<FString>                               PropertyKeys;                                                 // 0x0010(0x0010)
    TArray<FString>                               PropertyValues;                                               // 0x0020(0x0010)
};


// ScriptStruct  Niagara.NiagaraInputConditionMetadata
// Struct Size::0x0018
struct FNiagaraInputConditionMetadata
{
    FName                                         InputName;                                                    // 0x0000(0x0008)
    TArray<FString>                               TargetValues;                                                 // 0x0008(0x0010)
};


// ScriptStruct  Niagara.NiagaraEnumParameterMetaData
// Struct Size::0x0028
struct FNiagaraEnumParameterMetaData
{
    FName                                         OverrideName;                                                 // 0x0000(0x0008)
    UTexture2D*                                   IconOverride;                                                 // 0x0008(0x0008)
    bool                                          bUseColorOverride;                                            // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
    FLinearColor                                  ColorOverride;                                                // 0x0014(0x0010)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
};


// ScriptStruct  Niagara.NiagaraBoolParameterMetaData
// Struct Size::0x0028
struct FNiagaraBoolParameterMetaData
{
    enum class ENiagaraBoolDisplayMode            DisplayMode;                                                  // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FName                                         OverrideNameTrue;                                             // 0x0004(0x0008)
    FName                                         OverrideNameFalse;                                            // 0x000C(0x0008)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    UTexture2D*                                   IconOverrideTrue;                                             // 0x0018(0x0008)
    UTexture2D*                                   IconOverrideFalse;                                            // 0x0020(0x0008)
};


// ScriptStruct  Niagara.NiagaraVariableMetaData
// Struct Size::0x0148
struct FNiagaraVariableMetaData
{
    FText                                         Description;                                                  // 0x0000(0x0018)
    FText                                         CategoryName;                                                 // 0x0018(0x0018)
    bool                                          bAdvancedDisplay;                                             // 0x0030(0x0001)
    bool                                          bDisplayInOverviewStack;                                      // 0x0031(0x0001)
    char                                          pa_0032[0x0002]                                               // 0x0032(0x0002)
    int32_t                                       InlineParameterSortPriority;                                  // 0x0034(0x0004)
    bool                                          bOverrideColor;                                               // 0x0038(0x0001)
    char                                          pa_0039[0x0003]                                               // 0x0039(0x0003)
    FLinearColor                                  InlineParameterColorOverride;                                 // 0x003C(0x0010)
    char                                          pa_004C[0x0004]                                               // 0x004C(0x0004)
    TArray<FNiagaraEnumParameterMetaData>         InlineParameterEnumOverrides;                                 // 0x0050(0x0010)
    bool                                          bEnableBoolOverride;                                          // 0x0060(0x0001)
    char                                          pa_0061[0x0007]                                               // 0x0061(0x0007)
    FNiagaraBoolParameterMetaData                 InlineParameterBoolOverride;                                  // 0x0068(0x0028)
    int32_t                                       EditorSortPriority;                                           // 0x0090(0x0004)
    bool                                          bInlineEditConditionToggle;                                   // 0x0094(0x0001)
    char                                          pa_0095[0x0003]                                               // 0x0095(0x0003)
    FNiagaraInputConditionMetadata                EditCondition;                                                // 0x0098(0x0018)
    FNiagaraInputConditionMetadata                VisibleCondition;                                             // 0x00B0(0x0018)
    TMap<FName,FString>                           PropertyMetaData;                                             // 0x00C8(0x0050)
    FName                                         ParentAttribute;                                              // 0x0118(0x0008)
    TArray<FName>                                 AlternateAliases;                                             // 0x0120(0x0010)
    FGuid                                         VariableGuid;                                                 // 0x0130(0x0010)
    bool                                          bIsStaticSwitch;                                              // 0x0140(0x0001)
    char                                          pa_0141[0x0003]                                               // 0x0141(0x0003)
    int32_t                                       StaticSwitchDefaultValue;                                     // 0x0144(0x0004)
};


// ScriptStruct  Niagara.NiagaraUserRedirectionParameterStore
// Struct Size::0x00D8
struct FNiagaraUserRedirectionParameterStore : public FNiagaraParameterStore
{
    TMap<FNiagaraVariable,FNiagaraVariable>       UserParameterRedirects;                                       // 0x0088(0x0050)
};


// ScriptStruct  Niagara.NiagaraVariant
// Struct Size::0x0028
struct FNiagaraVariant
{
    UObject*                                      Object;                                                       // 0x0000(0x0008)
    UNiagaraDataInterface*                        DataInterface;                                                // 0x0008(0x0008)
    TArray<char>                                  Bytes;                                                        // 0x0010(0x0010)
    enum class ENiagaraVariantMode                CurrentMode;                                                  // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
};


// ScriptStruct  Niagara.NiagaraWorldManagerTickFunction
// Struct Size::0x0030
struct FNiagaraWorldManagerTickFunction : public FTickFunction
{
    char                                          pa_0028[0x0008]                                               // 0x0028(0x0008)
};


// ScriptStruct  NiagaraAnimNotifies.CurveParameterPair
// Struct Size::0x0010
struct FCurveParameterPair
{
    FName                                         AnimCurveName;                                                // 0x0000(0x0008)
    FName                                         UserVariableName;                                             // 0x0008(0x0008)
};


// ScriptStruct  NiagaraShader.NiagaraCompileEvent
// Struct Size::0x0068
struct FNiagaraCompileEvent
{
    enum class FNiagaraCompileEventSeverity       Severity;                                                     // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    FString                                       Message;                                                      // 0x0008(0x0010)
    FString                                       ShortDescription;                                             // 0x0018(0x0010)
    bool                                          bDismissable;                                                 // 0x0028(0x0001)
    char                                          pa_0029[0x0003]                                               // 0x0029(0x0003)
    FGuid                                         NodeGuid;                                                     // 0x002C(0x0010)
    FGuid                                         PinGuid;                                                      // 0x003C(0x0010)
    char                                          pa_004C[0x0004]                                               // 0x004C(0x0004)
    TArray<FGuid>                                 StackGuids;                                                   // 0x0050(0x0010)
    enum class FNiagaraCompileEventSource         Source;                                                       // 0x0060(0x0001)
    char                                          pa_0061[0x0007]                                               // 0x0061(0x0007)
};


// ScriptStruct  DataRegistry.DataRegistrySource
// Struct Size::0x0008
struct FDataRegistrySource
{
    bool                                          bPrecacheTable;                                               // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         CachedTableKeepSeconds;                                       // 0x0004(0x0004)
};


// ScriptStruct  DataRegistry.DataRegistryIdFormat
// Struct Size::0x0008
struct FDataRegistryIdFormat
{
    FGameplayTag                                  BaseGameplayTag;                                              // 0x0000(0x0008)
};


// ScriptStruct  DataRegistry.DataRegistryCachePolicy
// Struct Size::0x0014
struct FDataRegistryCachePolicy
{
    bool                                          bCacheIsAlwaysVolatile;                                       // 0x0000(0x0001)
    bool                                          bUseCurveTableCacheVersion;                                   // 0x0001(0x0001)
    char                                          pa_0002[0x0002]                                               // 0x0002(0x0002)
    int32_t                                       MinNumberKept;                                                // 0x0004(0x0004)
    int32_t                                       MaxNumberKept;                                                // 0x0008(0x0004)
    float                                         ForceKeepSeconds;                                             // 0x000C(0x0004)
    float                                         ForceReleaseSeconds;                                          // 0x0010(0x0004)
};


// ScriptStruct  DataRegistry.DataRegistrySourceItemId
// Struct Size::0x0040
struct FDataRegistrySourceItemId
{
    char                                          pa_0000[0x0040]                                               // 0x0000(0x0040)
};


// ScriptStruct  CommonConversationRuntime.ConversationTaskResult
// Struct Size::0x0080
struct FConversationTaskResult
{
    enum class EConversationTaskResultType        Type;                                                         // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    FAdvanceConversationRequest                   AdvanceToChoice;                                              // 0x0008(0x0030)
    FClientConversationMessage                    Message;                                                      // 0x0038(0x0048)
};


// ScriptStruct  CommonConversationRuntime.ClientConversationMessage
// Struct Size::0x0048
struct FClientConversationMessage
{
    FGameplayTag                                  SpeakerID;                                                    // 0x0000(0x0008)
    FText                                         ParticipantDisplayName;                                       // 0x0008(0x0018)
    FText                                         Text;                                                         // 0x0020(0x0018)
    TArray<FConversationNodeParameterPair>        MetadataParameters;                                           // 0x0038(0x0010)
};


// ScriptStruct  CommonConversationRuntime.ConversationNodeParameterPair
// Struct Size::0x0020
struct FConversationNodeParameterPair
{
    FString                                       Name;                                                         // 0x0000(0x0010)
    FString                                       Value;                                                        // 0x0010(0x0010)
};


// ScriptStruct  CommonConversationRuntime.AdvanceConversationRequest
// Struct Size::0x0030
struct FAdvanceConversationRequest
{
    FConversationChoiceReference                  Choice;                                                       // 0x0000(0x0020)
    TArray<FConversationNodeParameterPair>        UserParameters;                                               // 0x0020(0x0010)
};


// ScriptStruct  CommonConversationRuntime.ConversationChoiceReference
// Struct Size::0x0020
struct FConversationChoiceReference
{
    FConversationNodeHandle                       NodeReference;                                                // 0x0000(0x0010)
    TArray<FConversationNodeParameterPair>        NodeParameters;                                               // 0x0010(0x0010)
};


// ScriptStruct  CommonConversationRuntime.ConversationNodeHandle
// Struct Size::0x0010
struct FConversationNodeHandle
{
    FGuid                                         NodeGuid;                                                     // 0x0000(0x0010)
};


// ScriptStruct  CommonConversationRuntime.ConversationContext
// Struct Size::0x0038
struct FConversationContext
{
    UConversationRegistry*                        ConversationRegistry;                                         // 0x0000(0x0008)
    UConversationInstance*                        ActiveConversation;                                           // 0x0008(0x0008)
    UConversationParticipantComponent*            ClientParticipant;                                            // 0x0010(0x0008)
    UConversationTaskNode*                        TaskBeingConsidered;                                          // 0x0018(0x0008)
    TArray<FConversationNodeHandle>               ReturnScopeStack;                                             // 0x0020(0x0010)
    bool                                          bServer;                                                      // 0x0030(0x0001)
    char                                          pa_0031[0x0007]                                               // 0x0031(0x0007)
};


// ScriptStruct  CommonConversationRuntime.ConversationEntryList
// Struct Size::0x0018
struct FConversationEntryList
{
    FGameplayTag                                  EntryTag;                                                     // 0x0000(0x0008)
    TArray<FGuid>                                 DestinationList;                                              // 0x0008(0x0010)
};


// ScriptStruct  CommonConversationRuntime.CommonDialogueBankParticipant
// Struct Size::0x0030
struct FCommonDialogueBankParticipant
{
    FText                                         FallbackName;                                                 // 0x0000(0x0018)
    FGameplayTag                                  ParticipantName;                                              // 0x0018(0x0008)
    FLinearColor                                  NodeTint;                                                     // 0x0020(0x0010)
};


// ScriptStruct  CommonConversationRuntime.NetSerializeScriptStructCache
// Struct Size::0x0060
struct FNetSerializeScriptStructCache
{
    TMap<UScriptStruct*,int32_t>                  ScriptStructsToIndex;                                         // 0x0000(0x0050)
    TArray<UScriptStruct*>                        IndexToScriptStructs;                                         // 0x0050(0x0010)
};


// ScriptStruct  CommonConversationRuntime.ConversationChoiceData
// Struct Size::0x0008
struct FConversationChoiceData
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
};


// ScriptStruct  CommonConversationRuntime.ConversationChoiceDataHandle
// Struct Size::0x0020
struct FConversationChoiceDataHandle
{
    char                                          pa_0000[0x0020]                                               // 0x0000(0x0020)
};


// ScriptStruct  CommonConversationRuntime.ConversationParticipantEntry
// Struct Size::0x0010
struct FConversationParticipantEntry
{
    AActor*                                       Actor;                                                        // 0x0000(0x0008)
    FGameplayTag                                  ParticipantID;                                                // 0x0008(0x0008)
};


// ScriptStruct  CommonConversationRuntime.ConversationParticipants
// Struct Size::0x0010
struct FConversationParticipants
{
    TArray<FConversationParticipantEntry>         List;                                                         // 0x0000(0x0010)
};


// ScriptStruct  CommonConversationRuntime.ClientConversationOptionEntry
// Struct Size::0x0070
struct FClientConversationOptionEntry
{
    FText                                         ChoiceText;                                                   // 0x0000(0x0018)
    FGameplayTagContainer                         ChoiceTags;                                                   // 0x0018(0x0020)
    enum class EConversationChoiceType            ChoiceType;                                                   // 0x0038(0x0001)
    char                                          pa_0039[0x0007]                                               // 0x0039(0x0007)
    FConversationChoiceReference                  ChoiceReference;                                              // 0x0040(0x0020)
    TArray<FConversationNodeParameterPair>        ExtraData;                                                    // 0x0060(0x0010)
};


// ScriptStruct  CommonConversationRuntime.ConversationBranchPoint
// Struct Size::0x0080
struct FConversationBranchPoint
{
    TArray<FConversationNodeHandle>               ReturnScopeStack;                                             // 0x0000(0x0010)
    FClientConversationOptionEntry                ClientChoice;                                                 // 0x0010(0x0070)
};


// ScriptStruct  CommonConversationRuntime.ClientConversationMessagePayload
// Struct Size::0x0078
struct FClientConversationMessagePayload
{
    FClientConversationMessage                    Message;                                                      // 0x0000(0x0048)
    FConversationParticipants                     Participants;                                                 // 0x0048(0x0010)
    FConversationNodeHandle                       CurrentNode;                                                  // 0x0058(0x0010)
    TArray<FClientConversationOptionEntry>        Options;                                                      // 0x0068(0x0010)
};


// ScriptStruct  GameFeatures.GameFeatureComponentEntry
// Struct Size::0x0068
struct FGameFeatureComponentEntry
{
    TSoftClassPtr<UObject>                        ActorClass;                                                   // 0x0000(0x0030)
    TSoftClassPtr<UObject>                        ComponentClass;                                               // 0x0030(0x0030)
    char                                          bClientComponent;                                             // 0x0060(0x0001)
    char                                          bServerComponent;                                             // 0x0060(0x0001)
    char                                          pa_0061[0x0007]                                               // 0x0061(0x0007)
};


// ScriptStruct  GameFeatures.DataRegistrySourceToAdd
// Struct Size::0x0070
struct FDataRegistrySourceToAdd
{
    FName                                         RegistryToAddTo;                                              // 0x0000(0x0008)
    int32_t                                       AssetPriority;                                                // 0x0008(0x0004)
    char                                          bClientSource;                                                // 0x000C(0x0001)
    char                                          bServerSource;                                                // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
    TSoftObjectPtr<UDataTable>                    DataTableToAdd;                                               // 0x0010(0x0030)
    TSoftObjectPtr<UCurveTable>                   CurveTableToAdd;                                              // 0x0040(0x0030)
};


// ScriptStruct  GameFeatures.GameFeaturePluginStateMachineProperties
// Struct Size::0x00C8
struct FGameFeaturePluginStateMachineProperties
{
    char                                          pa_0000[0x0088]                                               // 0x0000(0x0088)
    UGameFeatureData*                             GameFeatureData;                                              // 0x0088(0x0008)
    char                                          pa_0090[0x0038]                                               // 0x0090(0x0038)
};


// ScriptStruct  GameFeatures.GameFeaturePluginIdentifier
// Struct Size::0x0028
struct FGameFeaturePluginIdentifier
{
    char                                          pa_0000[0x0028]                                               // 0x0000(0x0028)
};


// ScriptStruct  GameFeatures.InstallBundlePluginProtocolMetaData
// Struct Size::0x0020
struct FInstallBundlePluginProtocolMetaData
{
    char                                          pa_0000[0x0020]                                               // 0x0000(0x0020)
};


// ScriptStruct  ModularGameplay.ActorInitStateChangedParams
// Struct Size::0x0020
struct FActorInitStateChangedParams
{
    AActor*                                       OwningActor;                                                  // 0x0000(0x0008)
    FName                                         FeatureName;                                                  // 0x0008(0x0008)
    UObject*                                      Implementer;                                                  // 0x0010(0x0008)
    FGameplayTag                                  FeatureState;                                                 // 0x0018(0x0008)
};


// ScriptStruct  EnhancedInput.PlayerMappableKeyOptions
// Struct Size::0x0050
struct FPlayerMappableKeyOptions
{
    UObject*                                      MetaData;                                                     // 0x0000(0x0008)
    FName                                         Name;                                                         // 0x0008(0x0008)
    FText                                         DisplayName;                                                  // 0x0010(0x0018)
    FText                                         DisplayCategory;                                              // 0x0028(0x0018)
    TArray<FKey>                                  DisableKeys;                                                  // 0x0040(0x0010)
};


// ScriptStruct  EnhancedInput.EnhancedActionKeyMapping
// Struct Size::0x0098
struct FEnhancedActionKeyMapping
{
    FPlayerMappableKeyOptions                     PlayerMappableOptions;                                        // 0x0000(0x0050)
    TArray<UInputTrigger*>                        Triggers;                                                     // 0x0050(0x0010)
    TArray<UInputModifier*>                       Modifiers;                                                    // 0x0060(0x0010)
    UInputAction*                                 Action;                                                       // 0x0070(0x0008)
    FKey                                          Key;                                                          // 0x0078(0x0018)
    char                                          bIsPlayerMappable;                                            // 0x0090(0x0001)
    char                                          bShouldBeIgnored;                                             // 0x0090(0x0001)
    char                                          pa_0091[0x0007]                                               // 0x0091(0x0007)
};


// ScriptStruct  EnhancedInput.MappingQueryIssue
// Struct Size::0x0018
struct FMappingQueryIssue
{
    enum class EMappingQueryIssue                 Issue;                                                        // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    UInputMappingContext*                         BlockingContext;                                              // 0x0008(0x0008)
    UInputAction*                                 BlockingAction;                                               // 0x0010(0x0008)
};


// ScriptStruct  EnhancedInput.BlueprintEnhancedInputActionBinding
// Struct Size::0x0018
struct FBlueprintEnhancedInputActionBinding
{
    UInputAction*                                 InputAction;                                                  // 0x0000(0x0008)
    enum class ETriggerEvent                      TriggerEvent;                                                 // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
    FName                                         FunctionNameToBind;                                           // 0x000C(0x0008)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  EnhancedInput.ModifyContextOptions
// Struct Size::0x0001
struct FModifyContextOptions
{
    char                                          bIgnoreAllPressedKeysUntilRelease;                            // 0x0000(0x0001)
    char                                          bForceImmediately;                                            // 0x0000(0x0001)
};


// ScriptStruct  EnhancedInput.InjectedInputArray
// Struct Size::0x0010
struct FInjectedInputArray
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
};


// ScriptStruct  EnhancedInput.InputActionInstance
// Struct Size::0x0068
struct FInputActionInstance
{
    UInputAction*                                 SourceAction;                                                 // 0x0000(0x0008)
    char                                          pa_0008[0x000C]                                               // 0x0008(0x000C)
    enum class ETriggerEvent                      TriggerEvent;                                                 // 0x0014(0x0001)
    char                                          pa_0015[0x0003]                                               // 0x0015(0x0003)
    float                                         LastTriggeredWorldTime;                                       // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    TArray<UInputTrigger*>                        Triggers;                                                     // 0x0020(0x0010)
    TArray<UInputModifier*>                       Modifiers;                                                    // 0x0030(0x0010)
    char                                          pa_0040[0x0020]                                               // 0x0040(0x0020)
    float                                         ElapsedProcessedTime;                                         // 0x0060(0x0004)
    float                                         ElapsedTriggeredTime;                                         // 0x0064(0x0004)
};


// ScriptStruct  EnhancedInput.BlueprintInputDebugKeyDelegateBinding
// Struct Size::0x0030
struct FBlueprintInputDebugKeyDelegateBinding
{
    FInputChord                                   InputChord;                                                   // 0x0000(0x0020)
    enum class EInputEvent                        InputKeyEvent;                                                // 0x0020(0x0001)
    char                                          pa_0021[0x0003]                                               // 0x0021(0x0003)
    FName                                         FunctionNameToBind;                                           // 0x0024(0x0008)
    bool                                          bExecuteWhenPaused;                                           // 0x002C(0x0001)
    char                                          pa_002D[0x0003]                                               // 0x002D(0x0003)
};


// ScriptStruct  EnhancedInput.InputComboStepData
// Struct Size::0x0010
struct FInputComboStepData
{
    UInputAction*                                 ComboStepAction;                                              // 0x0000(0x0008)
    float                                         TimeToPressKey;                                               // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
};


// ScriptStruct  Landmass.BrushEffectBlurring
// Struct Size::0x0008
struct FBrushEffectBlurring
{
    bool                                          bBlurShape;                                                   // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    int32_t                                       Radius;                                                       // 0x0004(0x0004)
};


// ScriptStruct  Landmass.BrushEffectCurlNoise
// Struct Size::0x0010
struct FBrushEffectCurlNoise
{
    float                                         Curl1Amount;                                                  // 0x0000(0x0004)
    float                                         Curl2Amount;                                                  // 0x0004(0x0004)
    float                                         Curl1Tiling;                                                  // 0x0008(0x0004)
    float                                         Curl2Tiling;                                                  // 0x000C(0x0004)
};


// ScriptStruct  Landmass.BrushEffectCurves
// Struct Size::0x0020
struct FBrushEffectCurves
{
    bool                                          bUseCurveChannel;                                             // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    UCurveFloat*                                  ElevationCurveAsset;                                          // 0x0008(0x0008)
    float                                         ChannelEdgeOffset;                                            // 0x0010(0x0004)
    float                                         ChannelDepth;                                                 // 0x0014(0x0004)
    float                                         CurveRampWidth;                                               // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  Landmass.BrushEffectDisplacement
// Struct Size::0x0028
struct FBrushEffectDisplacement
{
    float                                         DisplacementHeight;                                           // 0x0000(0x0004)
    float                                         DisplacementTiling;                                           // 0x0004(0x0004)
    UTexture2D*                                   Texture;                                                      // 0x0008(0x0008)
    float                                         Midpoint;                                                     // 0x0010(0x0004)
    FLinearColor                                  Channel;                                                      // 0x0014(0x0010)
    float                                         WeightmapInfluence;                                           // 0x0024(0x0004)
};


// ScriptStruct  Landmass.BrushEffectSmoothBlending
// Struct Size::0x0008
struct FBrushEffectSmoothBlending
{
    float                                         InnerSmoothDistance;                                          // 0x0000(0x0004)
    float                                         OuterSmoothDistance;                                          // 0x0004(0x0004)
};


// ScriptStruct  Landmass.BrushEffectTerracing
// Struct Size::0x0014
struct FBrushEffectTerracing
{
    float                                         TerraceAlpha;                                                 // 0x0000(0x0004)
    float                                         TerraceSpacing;                                               // 0x0004(0x0004)
    float                                         TerraceSmoothness;                                            // 0x0008(0x0004)
    float                                         MaskLength;                                                   // 0x000C(0x0004)
    float                                         MaskStartOffset;                                              // 0x0010(0x0004)
};


// ScriptStruct  Landmass.LandmassBrushEffectsList
// Struct Size::0x0060
struct FLandmassBrushEffectsList
{
    FBrushEffectBlurring                          Blurring;                                                     // 0x0000(0x0008)
    FBrushEffectCurlNoise                         CurlNoise;                                                    // 0x0008(0x0010)
    FBrushEffectDisplacement                      Displacement;                                                 // 0x0018(0x0028)
    FBrushEffectSmoothBlending                    SmoothBlending;                                               // 0x0040(0x0008)
    FBrushEffectTerracing                         Terracing;                                                    // 0x0048(0x0014)
    char                                          pa_005C[0x0004]                                               // 0x005C(0x0004)
};


// ScriptStruct  Landmass.LandmassFalloffSettings
// Struct Size::0x0014
struct FLandmassFalloffSettings
{
    enum class EBrushFalloffMode                  FalloffMode;                                                  // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         FalloffAngle;                                                 // 0x0004(0x0004)
    float                                         FalloffWidth;                                                 // 0x0008(0x0004)
    float                                         EdgeOffset;                                                   // 0x000C(0x0004)
    float                                         ZOffset;                                                      // 0x0010(0x0004)
};


// ScriptStruct  Landmass.LandmassTerrainCarvingSettings
// Struct Size::0x0080
struct FLandmassTerrainCarvingSettings
{
    enum class EBrushBlendType                    BlendMode;                                                    // 0x0000(0x0001)
    bool                                          bInvertShape;                                                 // 0x0001(0x0001)
    char                                          pa_0002[0x0002]                                               // 0x0002(0x0002)
    FLandmassFalloffSettings                      FalloffSettings;                                              // 0x0004(0x0014)
    FLandmassBrushEffectsList                     Effects;                                                      // 0x0018(0x0060)
    int32_t                                       Priority;                                                     // 0x0078(0x0004)
    char                                          pa_007C[0x0004]                                               // 0x007C(0x0004)
};


// ScriptStruct  ReplicationGraph.ConnectionAlwaysRelevantNodePair
// Struct Size::0x0010
struct FConnectionAlwaysRelevantNodePair
{
    UNetConnection*                               NetConnection;                                                // 0x0000(0x0008)
    UReplicationGraphNode*                        Node;                                                         // 0x0008(0x0008)
};


// ScriptStruct  ReplicationGraph.AlwaysRelevantActorInfo
// Struct Size::0x0018
struct FAlwaysRelevantActorInfo
{
    UNetConnection*                               Connection;                                                   // 0x0000(0x0008)
    AActor*                                       LastViewer;                                                   // 0x0008(0x0008)
    AActor*                                       LastViewTarget;                                               // 0x0010(0x0008)
};


// ScriptStruct  ReplicationGraph.TearOffActorInfo
// Struct Size::0x0018
struct FTearOffActorInfo
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    AActor*                                       Actor;                                                        // 0x0008(0x0008)
    char                                          pa_0010[0x0008]                                               // 0x0010(0x0008)
};


// ScriptStruct  ReplicationGraph.LastLocationGatherInfo
// Struct Size::0x0038
struct FLastLocationGatherInfo
{
    UNetConnection*                               Connection;                                                   // 0x0000(0x0008)
    FVector                                       LastLocation;                                                 // 0x0008(0x0018)
    FVector                                       LastOutOfRangeLocationCheck;                                  // 0x0020(0x0018)
};


// ScriptStruct  ReplicationGraph.ClassReplicationInfo
// Struct Size::0x0070
struct FClassReplicationInfo
{
    float                                         DistancePriorityScale;                                        // 0x0000(0x0004)
    float                                         StarvationPriorityScale;                                      // 0x0004(0x0004)
    float                                         AccumulatedNetPriorityBias;                                   // 0x0008(0x0004)
    uint16_t                                      ReplicationPeriodFrame;                                       // 0x000C(0x0002)
    uint16_t                                      FastPath;                                                     // 0x000E(0x0002)
    uint16_t                                      ActorChannelFrameTimeout;                                     // 0x0010(0x0002)
    char                                          pa_0012[0x0056]                                               // 0x0012(0x0056)
    float                                         CullDistance;                                                 // 0x0068(0x0004)
    float                                         CullDistanceSquared;                                          // 0x006C(0x0004)
};


// ScriptStruct  Water.BuoyancyData
// Struct Size::0x0090
struct FBuoyancyData
{
    TArray<FSphericalPontoon>                     Pontoons;                                                     // 0x0000(0x0010)
    bool                                          bCenterPontoonsOnCOM;                                         // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
    float                                         BuoyancyCoefficient;                                          // 0x0014(0x0004)
    float                                         BuoyancyDamp;                                                 // 0x0018(0x0004)
    float                                         BuoyancyDamp2;                                                // 0x001C(0x0004)
    float                                         BuoyancyRampMinVelocity;                                      // 0x0020(0x0004)
    float                                         BuoyancyRampMaxVelocity;                                      // 0x0024(0x0004)
    float                                         BuoyancyRampMax;                                              // 0x0028(0x0004)
    float                                         MaxBuoyantForce;                                              // 0x002C(0x0004)
    bool                                          bApplyDragForcesInWater;                                      // 0x0030(0x0001)
    char                                          pa_0031[0x0003]                                               // 0x0031(0x0003)
    float                                         DragCoefficient;                                              // 0x0034(0x0004)
    float                                         DragCoefficient2;                                             // 0x0038(0x0004)
    float                                         AngularDragCoefficient;                                       // 0x003C(0x0004)
    float                                         MaxDragSpeed;                                                 // 0x0040(0x0004)
    bool                                          bApplyRiverForces;                                            // 0x0044(0x0001)
    char                                          pa_0045[0x0003]                                               // 0x0045(0x0003)
    int32_t                                       RiverPontoonIndex;                                            // 0x0048(0x0004)
    float                                         WaterShorePushFactor;                                         // 0x004C(0x0004)
    float                                         RiverTraversalPathWidth;                                      // 0x0050(0x0004)
    float                                         MaxShorePushForce;                                            // 0x0054(0x0004)
    float                                         WaterVelocityStrength;                                        // 0x0058(0x0004)
    float                                         MaxWaterForce;                                                // 0x005C(0x0004)
    bool                                          bAlwaysAllowLateralPush;                                      // 0x0060(0x0001)
    bool                                          bAllowCurrentWhenMovingFastUpstream;                          // 0x0061(0x0001)
    bool                                          bApplyDownstreamAngularRotation;                              // 0x0062(0x0001)
    char                                          pa_0063[0x0005]                                               // 0x0063(0x0005)
    FVector                                       DownstreamAxisOfRotation;                                     // 0x0068(0x0018)
    float                                         DownstreamRotationStrength;                                   // 0x0080(0x0004)
    float                                         DownstreamRotationStiffness;                                  // 0x0084(0x0004)
    float                                         DownstreamRotationAngularDamping;                             // 0x0088(0x0004)
    float                                         DownstreamMaxAcceleration;                                    // 0x008C(0x0004)
};


// ScriptStruct  Water.WaterBodyWeightmapSettings
// Struct Size::0x0020
struct FWaterBodyWeightmapSettings
{
    float                                         FalloffWidth;                                                 // 0x0000(0x0004)
    float                                         EdgeOffset;                                                   // 0x0004(0x0004)
    UTexture2D*                                   ModulationTexture;                                            // 0x0008(0x0008)
    float                                         TextureTiling;                                                // 0x0010(0x0004)
    float                                         TextureInfluence;                                             // 0x0014(0x0004)
    float                                         Midpoint;                                                     // 0x0018(0x0004)
    float                                         FinalOpacity;                                                 // 0x001C(0x0004)
};


// ScriptStruct  Water.WaterCurveSettings
// Struct Size::0x0020
struct FWaterCurveSettings
{
    bool                                          bUseCurveChannel;                                             // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    UCurveFloat*                                  ElevationCurveAsset;                                          // 0x0008(0x0008)
    float                                         ChannelEdgeOffset;                                            // 0x0010(0x0004)
    float                                         ChannelDepth;                                                 // 0x0014(0x0004)
    float                                         CurveRampWidth;                                               // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  Water.GerstnerWave
// Struct Size::0x0048
struct FGerstnerWave
{
    float                                         WaveLength;                                                   // 0x0000(0x0004)
    float                                         Amplitude;                                                    // 0x0004(0x0004)
    float                                         Steepness;                                                    // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FVector                                       Direction;                                                    // 0x0010(0x0018)
    FVector2D                                     WaveVector;                                                   // 0x0028(0x0010)
    float                                         WaveSpeed;                                                    // 0x0038(0x0004)
    float                                         WKA;                                                          // 0x003C(0x0004)
    float                                         Q;                                                            // 0x0040(0x0004)
    float                                         PhaseOffset;                                                  // 0x0044(0x0004)
};


// ScriptStruct  Water.GerstnerWaveOctave
// Struct Size::0x0014
struct FGerstnerWaveOctave
{
    int32_t                                       NumWaves;                                                     // 0x0000(0x0004)
    float                                         AmplitudeScale;                                               // 0x0004(0x0004)
    float                                         MainDirection;                                                // 0x0008(0x0004)
    float                                         SpreadAngle;                                                  // 0x000C(0x0004)
    bool                                          bUniformSpread;                                               // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
};


// ScriptStruct  Water.UnderwaterPostProcessSettings
// Struct Size::0x0700
struct FUnderwaterPostProcessSettings
{
    bool                                          bEnabled;                                                     // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         Priority;                                                     // 0x0004(0x0004)
    float                                         BlendRadius;                                                  // 0x0008(0x0004)
    float                                         BlendWeight;                                                  // 0x000C(0x0004)
    FPostProcessSettings                          PostProcessSettings;                                          // 0x0010(0x06E0)
    UMaterialInterface*                           UnderwaterPostProcessMaterial;                                // 0x06F0(0x0008)
    char                                          pa_06F8[0x0008]                                               // 0x06F8(0x0008)
};


// ScriptStruct  Engine.PostProcessSettings
// Struct Size::0x06E0
struct FPostProcessSettings
{
    char                                          bOverride;                                                    // 0x0000(0x0001)
    char                                          bOverride;                                                    // 0x0000(0x0001)
    char                                          bOverride;                                                    // 0x0000(0x0001)
    char                                          bOverride;                                                    // 0x0000(0x0001)
    char                                          bOverride;                                                    // 0x0000(0x0001)
    char                                          bOverride;                                                    // 0x0000(0x0001)
    char                                          bOverride;                                                    // 0x0000(0x0001)
    char                                          bOverride;                                                    // 0x0000(0x0001)
    char                                          bOverride;                                                    // 0x0001(0x0001)
    char                                          bOverride;                                                    // 0x0001(0x0001)
    char                                          bOverride;                                                    // 0x0001(0x0001)
    char                                          bOverride;                                                    // 0x0001(0x0001)
    char                                          bOverride;                                                    // 0x0001(0x0001)
    char                                          bOverride;                                                    // 0x0001(0x0001)
    char                                          bOverride;                                                    // 0x0001(0x0001)
    char                                          bOverride;                                                    // 0x0001(0x0001)
    char                                          bOverride;                                                    // 0x0002(0x0001)
    char                                          bOverride;                                                    // 0x0002(0x0001)
    char                                          bOverride;                                                    // 0x0002(0x0001)
    char                                          bOverride;                                                    // 0x0002(0x0001)
    char                                          bOverride;                                                    // 0x0002(0x0001)
    char                                          bOverride;                                                    // 0x0002(0x0001)
    char                                          bOverride;                                                    // 0x0002(0x0001)
    char                                          bOverride;                                                    // 0x0002(0x0001)
    char                                          bOverride;                                                    // 0x0003(0x0001)
    char                                          bOverride;                                                    // 0x0003(0x0001)
    char                                          bOverride;                                                    // 0x0003(0x0001)
    char                                          bOverride;                                                    // 0x0003(0x0001)
    char                                          bOverride;                                                    // 0x0003(0x0001)
    char                                          bOverride;                                                    // 0x0003(0x0001)
    char                                          bOverride;                                                    // 0x0003(0x0001)
    char                                          bOverride;                                                    // 0x0003(0x0001)
    char                                          bOverride;                                                    // 0x0004(0x0001)
    char                                          bOverride;                                                    // 0x0004(0x0001)
    char                                          bOverride;                                                    // 0x0004(0x0001)
    char                                          bOverride;                                                    // 0x0004(0x0001)
    char                                          bOverride;                                                    // 0x0004(0x0001)
    char                                          bOverride;                                                    // 0x0004(0x0001)
    char                                          bOverride;                                                    // 0x0004(0x0001)
    char                                          bOverride;                                                    // 0x0004(0x0001)
    char                                          bOverride;                                                    // 0x0005(0x0001)
    char                                          bOverride;                                                    // 0x0005(0x0001)
    char                                          bOverride;                                                    // 0x0005(0x0001)
    char                                          bOverride;                                                    // 0x0005(0x0001)
    char                                          bOverride;                                                    // 0x0005(0x0001)
    char                                          bOverride;                                                    // 0x0005(0x0001)
    char                                          bOverride;                                                    // 0x0005(0x0001)
    char                                          bOverride;                                                    // 0x0005(0x0001)
    char                                          bOverride;                                                    // 0x0006(0x0001)
    char                                          bOverride;                                                    // 0x0006(0x0001)
    char                                          bOverride;                                                    // 0x0006(0x0001)
    char                                          bOverride;                                                    // 0x0006(0x0001)
    char                                          bOverride;                                                    // 0x0006(0x0001)
    char                                          bOverride;                                                    // 0x0006(0x0001)
    char                                          bOverride;                                                    // 0x0006(0x0001)
    char                                          bOverride;                                                    // 0x0006(0x0001)
    char                                          bOverride;                                                    // 0x0007(0x0001)
    char                                          bOverride;                                                    // 0x0007(0x0001)
    char                                          bOverride;                                                    // 0x0007(0x0001)
    char                                          bOverride;                                                    // 0x0007(0x0001)
    char                                          bOverride;                                                    // 0x0007(0x0001)
    char                                          bOverride;                                                    // 0x0007(0x0001)
    char                                          bOverride;                                                    // 0x0007(0x0001)
    char                                          bOverride;                                                    // 0x0007(0x0001)
    char                                          bOverride;                                                    // 0x0008(0x0001)
    char                                          bOverride;                                                    // 0x0008(0x0001)
    char                                          bOverride;                                                    // 0x0008(0x0001)
    char                                          bOverride;                                                    // 0x0008(0x0001)
    char                                          bOverride;                                                    // 0x0008(0x0001)
    char                                          bOverride;                                                    // 0x0008(0x0001)
    char                                          bOverride;                                                    // 0x0008(0x0001)
    char                                          bOverride;                                                    // 0x0008(0x0001)
    char                                          bOverride;                                                    // 0x0009(0x0001)
    char                                          bOverride;                                                    // 0x0009(0x0001)
    char                                          bOverride;                                                    // 0x0009(0x0001)
    char                                          bOverride;                                                    // 0x0009(0x0001)
    char                                          bOverride;                                                    // 0x0009(0x0001)
    char                                          bOverride;                                                    // 0x0009(0x0001)
    char                                          bOverride;                                                    // 0x0009(0x0001)
    char                                          bOverride;                                                    // 0x0009(0x0001)
    char                                          bOverride;                                                    // 0x000A(0x0001)
    char                                          bOverride;                                                    // 0x000A(0x0001)
    char                                          bOverride;                                                    // 0x000A(0x0001)
    char                                          bOverride;                                                    // 0x000A(0x0001)
    char                                          bOverride;                                                    // 0x000A(0x0001)
    char                                          bOverride;                                                    // 0x000A(0x0001)
    char                                          bOverride;                                                    // 0x000A(0x0001)
    char                                          bOverride;                                                    // 0x000A(0x0001)
    char                                          bOverride;                                                    // 0x000B(0x0001)
    char                                          bOverride;                                                    // 0x000B(0x0001)
    char                                          bOverride;                                                    // 0x000B(0x0001)
    char                                          bOverride;                                                    // 0x000B(0x0001)
    char                                          bOverride;                                                    // 0x000B(0x0001)
    char                                          bOverride;                                                    // 0x000B(0x0001)
    char                                          bOverride;                                                    // 0x000B(0x0001)
    char                                          bOverride;                                                    // 0x000B(0x0001)
    char                                          bOverride;                                                    // 0x000C(0x0001)
    char                                          bOverride;                                                    // 0x000C(0x0001)
    char                                          bOverride;                                                    // 0x000C(0x0001)
    char                                          bOverride;                                                    // 0x000C(0x0001)
    char                                          bOverride;                                                    // 0x000C(0x0001)
    char                                          bOverride;                                                    // 0x000C(0x0001)
    char                                          bOverride;                                                    // 0x000C(0x0001)
    char                                          bOverride;                                                    // 0x000C(0x0001)
    char                                          bOverride;                                                    // 0x000D(0x0001)
    char                                          bOverride;                                                    // 0x000D(0x0001)
    char                                          bOverride;                                                    // 0x000D(0x0001)
    char                                          bOverride;                                                    // 0x000D(0x0001)
    char                                          bOverride;                                                    // 0x000D(0x0001)
    char                                          bOverride;                                                    // 0x000D(0x0001)
    char                                          bOverride;                                                    // 0x000D(0x0001)
    char                                          bOverride;                                                    // 0x000D(0x0001)
    char                                          bOverride;                                                    // 0x000E(0x0001)
    char                                          bOverride;                                                    // 0x000E(0x0001)
    char                                          bOverride;                                                    // 0x000E(0x0001)
    char                                          bOverride;                                                    // 0x000E(0x0001)
    char                                          bOverride;                                                    // 0x000E(0x0001)
    char                                          bOverride;                                                    // 0x000E(0x0001)
    char                                          bOverride;                                                    // 0x000E(0x0001)
    char                                          bOverride;                                                    // 0x000E(0x0001)
    char                                          bOverride;                                                    // 0x000F(0x0001)
    char                                          bOverride;                                                    // 0x000F(0x0001)
    char                                          bOverride;                                                    // 0x0010(0x0001)
    char                                          bOverride;                                                    // 0x0010(0x0001)
    char                                          bOverride;                                                    // 0x0010(0x0001)
    char                                          bOverride;                                                    // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
    char                                          bOverride;                                                    // 0x0014(0x0001)
    char                                          bOverride;                                                    // 0x0014(0x0001)
    char                                          bOverride;                                                    // 0x0014(0x0001)
    char                                          bOverride;                                                    // 0x0014(0x0001)
    char                                          bOverride;                                                    // 0x0014(0x0001)
    char                                          bOverride;                                                    // 0x0014(0x0001)
    char                                          bOverride;                                                    // 0x0014(0x0001)
    char                                          bOverride;                                                    // 0x0014(0x0001)
    char                                          bOverride;                                                    // 0x0015(0x0001)
    char                                          bOverride;                                                    // 0x0015(0x0001)
    char                                          bOverride;                                                    // 0x0015(0x0001)
    char                                          bOverride;                                                    // 0x0015(0x0001)
    char                                          bOverride;                                                    // 0x0015(0x0001)
    char                                          bOverride;                                                    // 0x0015(0x0001)
    char                                          bOverride;                                                    // 0x0015(0x0001)
    char                                          bOverride;                                                    // 0x0015(0x0001)
    char                                          bOverride;                                                    // 0x0016(0x0001)
    char                                          bOverride;                                                    // 0x0016(0x0001)
    char                                          bOverride;                                                    // 0x0016(0x0001)
    char                                          bOverride;                                                    // 0x0016(0x0001)
    char                                          bOverride;                                                    // 0x0016(0x0001)
    char                                          bOverride;                                                    // 0x0016(0x0001)
    char                                          bOverride;                                                    // 0x0016(0x0001)
    char                                          bOverride;                                                    // 0x0016(0x0001)
    char                                          bOverride;                                                    // 0x0017(0x0001)
    char                                          bOverride;                                                    // 0x0017(0x0001)
    char                                          bOverride;                                                    // 0x0017(0x0001)
    char                                          bOverride;                                                    // 0x0017(0x0001)
    char                                          bOverride;                                                    // 0x0017(0x0001)
    char                                          bOverride;                                                    // 0x0017(0x0001)
    char                                          bOverride;                                                    // 0x0017(0x0001)
    char                                          bOverride;                                                    // 0x0017(0x0001)
    char                                          bOverride;                                                    // 0x0018(0x0001)
    char                                          bOverride;                                                    // 0x0018(0x0001)
    char                                          bOverride;                                                    // 0x0018(0x0001)
    char                                          bOverride;                                                    // 0x0018(0x0001)
    char                                          bOverride;                                                    // 0x0018(0x0001)
    char                                          bOverride;                                                    // 0x0018(0x0001)
    char                                          bOverride;                                                    // 0x0018(0x0001)
    char                                          bOverride;                                                    // 0x0018(0x0001)
    char                                          bOverride;                                                    // 0x0019(0x0001)
    char                                          bOverride;                                                    // 0x0019(0x0001)
    char                                          bOverride;                                                    // 0x0019(0x0001)
    char                                          bOverride;                                                    // 0x0019(0x0001)
    char                                          bOverride;                                                    // 0x0019(0x0001)
    char                                          bOverride;                                                    // 0x0019(0x0001)
    char                                          bOverride;                                                    // 0x0019(0x0001)
    char                                          bOverride;                                                    // 0x0019(0x0001)
    char                                          pa_001A[0x0002]                                               // 0x001A(0x0002)
    char                                          bOverride;                                                    // 0x001C(0x0001)
    char                                          bOverride;                                                    // 0x001C(0x0001)
    char                                          bOverride;                                                    // 0x001C(0x0001)
    char                                          bOverride;                                                    // 0x001C(0x0001)
    char                                          bOverride;                                                    // 0x001C(0x0001)
    char                                          bOverride;                                                    // 0x001C(0x0001)
    char                                          bOverride;                                                    // 0x001C(0x0001)
    char                                          bOverride;                                                    // 0x001C(0x0001)
    char                                          bOverride;                                                    // 0x001D(0x0001)
    char                                          bOverride;                                                    // 0x001D(0x0001)
    char                                          bOverride;                                                    // 0x001D(0x0001)
    char                                          bOverride;                                                    // 0x001D(0x0001)
    char                                          bOverride;                                                    // 0x001D(0x0001)
    char                                          bOverride;                                                    // 0x001D(0x0001)
    char                                          bOverride;                                                    // 0x001D(0x0001)
    char                                          bOverride;                                                    // 0x001D(0x0001)
    char                                          bOverride;                                                    // 0x001E(0x0001)
    char                                          bOverride;                                                    // 0x001E(0x0001)
    char                                          bOverride;                                                    // 0x001E(0x0001)
    char                                          bOverride;                                                    // 0x001E(0x0001)
    char                                          bOverride;                                                    // 0x001E(0x0001)
    char                                          bOverride;                                                    // 0x001E(0x0001)
    char                                          bOverride;                                                    // 0x001E(0x0001)
    char                                          pa_001F[0x0001]                                               // 0x001F(0x0001)
    char                                          bOverride;                                                    // 0x0020(0x0001)
    char                                          bOverride;                                                    // 0x0020(0x0001)
    char                                          bOverride;                                                    // 0x0020(0x0001)
    char                                          pa_0021[0x0003]                                               // 0x0021(0x0003)
    char                                          bOverride;                                                    // 0x0024(0x0001)
    char                                          bOverride;                                                    // 0x0024(0x0001)
    char                                          bOverride;                                                    // 0x0024(0x0001)
    char                                          bOverride;                                                    // 0x0024(0x0001)
    char                                          bOverride;                                                    // 0x0024(0x0001)
    char                                          bOverride;                                                    // 0x0024(0x0001)
    char                                          bOverride;                                                    // 0x0024(0x0001)
    char                                          bOverride;                                                    // 0x0024(0x0001)
    char                                          bOverride;                                                    // 0x0025(0x0001)
    char                                          bOverride;                                                    // 0x0025(0x0001)
    char                                          bOverride;                                                    // 0x0025(0x0001)
    char                                          pa_0026[0x0002]                                               // 0x0026(0x0002)
    char                                          bMobileHQGaussian;                                            // 0x0028(0x0001)
    enum class EBloomMethod                       BloomMethod;                                                  // 0x0029(0x0001)
    enum class EAutoExposureMethod                AutoExposureMethod;                                           // 0x002A(0x0001)
    enum class ETemperatureMethod                 TemperatureType;                                              // 0x002B(0x0001)
    float                                         WhiteTemp;                                                    // 0x002C(0x0004)
    float                                         WhiteTint;                                                    // 0x0030(0x0004)
    char                                          pa_0034[0x000C]                                               // 0x0034(0x000C)
    FVector4                                      ColorSaturation;                                              // 0x0040(0x0020)
    FVector4                                      ColorContrast;                                                // 0x0060(0x0020)
    FVector4                                      ColorGamma;                                                   // 0x0080(0x0020)
    FVector4                                      ColorGain;                                                    // 0x00A0(0x0020)
    FVector4                                      ColorOffset;                                                  // 0x00C0(0x0020)
    FVector4                                      ColorSaturationShadows;                                       // 0x00E0(0x0020)
    FVector4                                      ColorContrastShadows;                                         // 0x0100(0x0020)
    FVector4                                      ColorGammaShadows;                                            // 0x0120(0x0020)
    FVector4                                      ColorGainShadows;                                             // 0x0140(0x0020)
    FVector4                                      ColorOffsetShadows;                                           // 0x0160(0x0020)
    FVector4                                      ColorSaturationMidtones;                                      // 0x0180(0x0020)
    FVector4                                      ColorContrastMidtones;                                        // 0x01A0(0x0020)
    FVector4                                      ColorGammaMidtones;                                           // 0x01C0(0x0020)
    FVector4                                      ColorGainMidtones;                                            // 0x01E0(0x0020)
    FVector4                                      ColorOffsetMidtones;                                          // 0x0200(0x0020)
    FVector4                                      ColorSaturationHighlights;                                    // 0x0220(0x0020)
    FVector4                                      ColorContrastHighlights;                                      // 0x0240(0x0020)
    FVector4                                      ColorGammaHighlights;                                         // 0x0260(0x0020)
    FVector4                                      ColorGainHighlights;                                          // 0x0280(0x0020)
    FVector4                                      ColorOffsetHighlights;                                        // 0x02A0(0x0020)
    float                                         ColorCorrectionHighlightsMin;                                 // 0x02C0(0x0004)
    float                                         ColorCorrectionHighlightsMax;                                 // 0x02C4(0x0004)
    float                                         ColorCorrectionShadowsMax;                                    // 0x02C8(0x0004)
    float                                         BlueCorrection;                                               // 0x02CC(0x0004)
    float                                         ExpandGamut;                                                  // 0x02D0(0x0004)
    float                                         ToneCurveAmount;                                              // 0x02D4(0x0004)
    float                                         FilmSlope;                                                    // 0x02D8(0x0004)
    float                                         FilmToe;                                                      // 0x02DC(0x0004)
    float                                         FilmShoulder;                                                 // 0x02E0(0x0004)
    float                                         FilmBlackClip;                                                // 0x02E4(0x0004)
    float                                         FilmWhiteClip;                                                // 0x02E8(0x0004)
    FLinearColor                                  SceneColorTint;                                               // 0x02EC(0x0010)
    float                                         SceneFringeIntensity;                                         // 0x02FC(0x0004)
    float                                         ChromaticAberrationStartOffset;                               // 0x0300(0x0004)
    float                                         BloomIntensity;                                               // 0x0304(0x0004)
    float                                         BloomThreshold;                                               // 0x0308(0x0004)
    float                                         BloomSizeScale;                                               // 0x030C(0x0004)
    float                                         Bloom1Size;                                                   // 0x0310(0x0004)
    float                                         Bloom2Size;                                                   // 0x0314(0x0004)
    float                                         Bloom3Size;                                                   // 0x0318(0x0004)
    float                                         Bloom4Size;                                                   // 0x031C(0x0004)
    float                                         Bloom5Size;                                                   // 0x0320(0x0004)
    float                                         Bloom6Size;                                                   // 0x0324(0x0004)
    FLinearColor                                  Bloom1Tint;                                                   // 0x0328(0x0010)
    FLinearColor                                  Bloom2Tint;                                                   // 0x0338(0x0010)
    FLinearColor                                  Bloom3Tint;                                                   // 0x0348(0x0010)
    FLinearColor                                  Bloom4Tint;                                                   // 0x0358(0x0010)
    FLinearColor                                  Bloom5Tint;                                                   // 0x0368(0x0010)
    FLinearColor                                  Bloom6Tint;                                                   // 0x0378(0x0010)
    float                                         BloomConvolutionScatterDispersion;                            // 0x0388(0x0004)
    float                                         BloomConvolutionSize;                                         // 0x038C(0x0004)
    UTexture2D*                                   BloomConvolutionTexture;                                      // 0x0390(0x0008)
    FVector2D                                     BloomConvolutionCenterUV;                                     // 0x0398(0x0010)
    float                                         BloomConvolutionPreFilterMin;                                 // 0x03A8(0x0004)
    float                                         BloomConvolutionPreFilterMax;                                 // 0x03AC(0x0004)
    float                                         BloomConvolutionPreFilterMult;                                // 0x03B0(0x0004)
    float                                         BloomConvolutionBufferScale;                                  // 0x03B4(0x0004)
    UTexture*                                     BloomDirtMask;                                                // 0x03B8(0x0008)
    float                                         BloomDirtMaskIntensity;                                       // 0x03C0(0x0004)
    FLinearColor                                  BloomDirtMaskTint;                                            // 0x03C4(0x0010)
    enum class EDynamicGlobalIlluminationMethod   DynamicGlobalIlluminationMethod;                              // 0x03D4(0x0001)
    char                                          pa_03D5[0x0003]                                               // 0x03D5(0x0003)
    FLinearColor                                  IndirectLightingColor;                                        // 0x03D8(0x0010)
    float                                         IndirectLightingIntensity;                                    // 0x03E8(0x0004)
    float                                         LumenSceneLightingQuality;                                    // 0x03EC(0x0004)
    float                                         LumenSceneDetail;                                             // 0x03F0(0x0004)
    float                                         LumenSceneViewDistance;                                       // 0x03F4(0x0004)
    float                                         LumenSceneLightingUpdateSpeed;                                // 0x03F8(0x0004)
    float                                         LumenFinalGatherQuality;                                      // 0x03FC(0x0004)
    float                                         LumenFinalGatherLightingUpdateSpeed;                          // 0x0400(0x0004)
    float                                         LumenMaxTraceDistance;                                        // 0x0404(0x0004)
    float                                         LumenDiffuseColorBoost;                                       // 0x0408(0x0004)
    float                                         LumenSkylightLeaking;                                         // 0x040C(0x0004)
    float                                         LumenFullSkylightLeakingDistance;                             // 0x0410(0x0004)
    float                                         LumenSurfaceCacheResolution;                                  // 0x0414(0x0004)
    enum class ERayTracingGlobalIlluminationType  RayTracingGIType;                                             // 0x0418(0x0001)
    char                                          pa_0419[0x0003]                                               // 0x0419(0x0003)
    int32_t                                       RayTracingGIMaxBounces;                                       // 0x041C(0x0004)
    int32_t                                       RayTracingGISamplesPerPixel;                                  // 0x0420(0x0004)
    enum class EReflectionMethod                  ReflectionMethod;                                             // 0x0424(0x0001)
    enum class EReflectionsType                   ReflectionsType;                                              // 0x0425(0x0001)
    char                                          pa_0426[0x0002]                                               // 0x0426(0x0002)
    float                                         LumenReflectionQuality;                                       // 0x0428(0x0004)
    enum class ELumenRayLightingModeOverride      LumenRayLightingMode;                                         // 0x042C(0x0001)
    char                                          LumenFrontLayerTranslucencyReflections;                       // 0x042D(0x0001)
    char                                          pa_042E[0x0002]                                               // 0x042E(0x0002)
    float                                         ScreenSpaceReflectionIntensity;                               // 0x0430(0x0004)
    float                                         ScreenSpaceReflectionQuality;                                 // 0x0434(0x0004)
    float                                         ScreenSpaceReflectionMaxRoughness;                            // 0x0438(0x0004)
    float                                         RayTracingReflectionsMaxRoughness;                            // 0x043C(0x0004)
    int32_t                                       RayTracingReflectionsMaxBounces;                              // 0x0440(0x0004)
    int32_t                                       RayTracingReflectionsSamplesPerPixel;                         // 0x0444(0x0004)
    enum class EReflectedAndRefractedRayTracedShadowsRayTracingReflectionsShadows;                              // 0x0448(0x0001)
    char                                          RayTracingReflectionsTranslucency;                            // 0x0449(0x0001)
    char                                          pa_044A[0x0002]                                               // 0x044A(0x0002)
    FLinearColor                                  AmbientCubemapTint;                                           // 0x044C(0x0010)
    float                                         AmbientCubemapIntensity;                                      // 0x045C(0x0004)
    UTextureCube*                                 AmbientCubemap;                                               // 0x0460(0x0008)
    float                                         CameraShutterSpeed;                                           // 0x0468(0x0004)
    float                                         CameraISO;                                                    // 0x046C(0x0004)
    float                                         DepthOfFieldFstop;                                            // 0x0470(0x0004)
    float                                         DepthOfFieldMinFstop;                                         // 0x0474(0x0004)
    int32_t                                       DepthOfFieldBladeCount;                                       // 0x0478(0x0004)
    float                                         AutoExposureBias;                                             // 0x047C(0x0004)
    float                                         AutoExposureBiasBackup;                                       // 0x0480(0x0004)
    char                                          bOverride;                                                    // 0x0484(0x0001)
    char                                          pa_0485[0x0003]                                               // 0x0485(0x0003)
    char                                          AutoExposureApplyPhysicalCameraExposure;                      // 0x0488(0x0001)
    char                                          pa_0489[0x0007]                                               // 0x0489(0x0007)
    UCurveFloat*                                  AutoExposureBiasCurve;                                        // 0x0490(0x0008)
    UTexture*                                     AutoExposureMeterMask;                                        // 0x0498(0x0008)
    float                                         AutoExposureLowPercent;                                       // 0x04A0(0x0004)
    float                                         AutoExposureHighPercent;                                      // 0x04A4(0x0004)
    float                                         AutoExposureMinBrightness;                                    // 0x04A8(0x0004)
    float                                         AutoExposureMaxBrightness;                                    // 0x04AC(0x0004)
    float                                         AutoExposureSpeedUp;                                          // 0x04B0(0x0004)
    float                                         AutoExposureSpeedDown;                                        // 0x04B4(0x0004)
    float                                         HistogramLogMin;                                              // 0x04B8(0x0004)
    float                                         HistogramLogMax;                                              // 0x04BC(0x0004)
    float                                         AutoExposureCalibrationConstant;                              // 0x04C0(0x0004)
    float                                         LocalExposureContrastScale;                                   // 0x04C4(0x0004)
    float                                         LocalExposureHighlightContrastScale;                          // 0x04C8(0x0004)
    float                                         LocalExposureShadowContrastScale;                             // 0x04CC(0x0004)
    float                                         LocalExposureDetailStrength;                                  // 0x04D0(0x0004)
    float                                         LocalExposureBlurredLuminanceBlend;                           // 0x04D4(0x0004)
    float                                         LocalExposureBlurredLuminanceKernelSizePercent;               // 0x04D8(0x0004)
    float                                         LocalExposureMiddleGreyBias;                                  // 0x04DC(0x0004)
    float                                         LensFlareIntensity;                                           // 0x04E0(0x0004)
    FLinearColor                                  LensFlareTint;                                                // 0x04E4(0x0010)
    float                                         LensFlareBokehSize;                                           // 0x04F4(0x0004)
    float                                         LensFlareThreshold;                                           // 0x04F8(0x0004)
    char                                          pa_04FC[0x0004]                                               // 0x04FC(0x0004)
    UTexture*                                     LensFlareBokehShape;                                          // 0x0500(0x0008)
    FLinearColor                                  LensFlareTints;                                               // 0x0508(0x0010)
    char                                          pa_0518[0x0070]                                               // 0x0518(0x0070)
    float                                         VignetteIntensity;                                            // 0x0588(0x0004)
    float                                         GrainJitter;                                                  // 0x058C(0x0004)
    float                                         GrainIntensity;                                               // 0x0590(0x0004)
    float                                         FilmGrainIntensity;                                           // 0x0594(0x0004)
    float                                         FilmGrainIntensityShadows;                                    // 0x0598(0x0004)
    float                                         FilmGrainIntensityMidtones;                                   // 0x059C(0x0004)
    float                                         FilmGrainIntensityHighlights;                                 // 0x05A0(0x0004)
    float                                         FilmGrainShadowsMax;                                          // 0x05A4(0x0004)
    float                                         FilmGrainHighlightsMin;                                       // 0x05A8(0x0004)
    float                                         FilmGrainHighlightsMax;                                       // 0x05AC(0x0004)
    float                                         FilmGrainTexelSize;                                           // 0x05B0(0x0004)
    char                                          pa_05B4[0x0004]                                               // 0x05B4(0x0004)
    UTexture2D*                                   FilmGrainTexture;                                             // 0x05B8(0x0008)
    float                                         AmbientOcclusionIntensity;                                    // 0x05C0(0x0004)
    float                                         AmbientOcclusionStaticFraction;                               // 0x05C4(0x0004)
    float                                         AmbientOcclusionRadius;                                       // 0x05C8(0x0004)
    char                                          AmbientOcclusionRadiusInWS;                                   // 0x05CC(0x0001)
    char                                          pa_05CD[0x0003]                                               // 0x05CD(0x0003)
    float                                         AmbientOcclusionFadeDistance;                                 // 0x05D0(0x0004)
    float                                         AmbientOcclusionFadeRadius;                                   // 0x05D4(0x0004)
    float                                         AmbientOcclusionDistance;                                     // 0x05D8(0x0004)
    float                                         AmbientOcclusionPower;                                        // 0x05DC(0x0004)
    float                                         AmbientOcclusionBias;                                         // 0x05E0(0x0004)
    float                                         AmbientOcclusionQuality;                                      // 0x05E4(0x0004)
    float                                         AmbientOcclusionMipBlend;                                     // 0x05E8(0x0004)
    float                                         AmbientOcclusionMipScale;                                     // 0x05EC(0x0004)
    float                                         AmbientOcclusionMipThreshold;                                 // 0x05F0(0x0004)
    float                                         AmbientOcclusionTemporalBlendWeight;                          // 0x05F4(0x0004)
    char                                          RayTracingAO;                                                 // 0x05F8(0x0001)
    char                                          pa_05F9[0x0003]                                               // 0x05F9(0x0003)
    int32_t                                       RayTracingAOSamplesPerPixel;                                  // 0x05FC(0x0004)
    float                                         RayTracingAOIntensity;                                        // 0x0600(0x0004)
    float                                         RayTracingAORadius;                                           // 0x0604(0x0004)
    float                                         ColorGradingIntensity;                                        // 0x0608(0x0004)
    char                                          pa_060C[0x0004]                                               // 0x060C(0x0004)
    UTexture*                                     ColorGradingLUT;                                              // 0x0610(0x0008)
    float                                         DepthOfFieldSensorWidth;                                      // 0x0618(0x0004)
    float                                         DepthOfFieldSqueezeFactor;                                    // 0x061C(0x0004)
    float                                         DepthOfFieldFocalDistance;                                    // 0x0620(0x0004)
    float                                         DepthOfFieldDepthBlurAmount;                                  // 0x0624(0x0004)
    float                                         DepthOfFieldDepthBlurRadius;                                  // 0x0628(0x0004)
    float                                         DepthOfFieldFocalRegion;                                      // 0x062C(0x0004)
    float                                         DepthOfFieldNearTransitionRegion;                             // 0x0630(0x0004)
    float                                         DepthOfFieldFarTransitionRegion;                              // 0x0634(0x0004)
    float                                         DepthOfFieldScale;                                            // 0x0638(0x0004)
    float                                         DepthOfFieldNearBlurSize;                                     // 0x063C(0x0004)
    float                                         DepthOfFieldFarBlurSize;                                      // 0x0640(0x0004)
    float                                         DepthOfFieldOcclusion;                                        // 0x0644(0x0004)
    float                                         DepthOfFieldSkyFocusDistance;                                 // 0x0648(0x0004)
    float                                         DepthOfFieldVignetteSize;                                     // 0x064C(0x0004)
    float                                         MotionBlurAmount;                                             // 0x0650(0x0004)
    float                                         MotionBlurMax;                                                // 0x0654(0x0004)
    int32_t                                       MotionBlurTargetFPS;                                          // 0x0658(0x0004)
    float                                         MotionBlurPerObjectSize;                                      // 0x065C(0x0004)
    float                                         LPVIntensity;                                                 // 0x0660(0x0004)
    float                                         LPVVplInjectionBias;                                          // 0x0664(0x0004)
    float                                         LPVSize;                                                      // 0x0668(0x0004)
    float                                         LPVSecondaryOcclusionIntensity;                               // 0x066C(0x0004)
    float                                         LPVSecondaryBounceIntensity;                                  // 0x0670(0x0004)
    float                                         LPVGeometryVolumeBias;                                        // 0x0674(0x0004)
    float                                         LPVEmissiveInjectionIntensity;                                // 0x0678(0x0004)
    float                                         LPVDirectionalOcclusionIntensity;                             // 0x067C(0x0004)
    float                                         LPVDirectionalOcclusionRadius;                                // 0x0680(0x0004)
    float                                         LPVDiffuseOcclusionExponent;                                  // 0x0684(0x0004)
    float                                         LPVSpecularOcclusionExponent;                                 // 0x0688(0x0004)
    float                                         LPVDiffuseOcclusionIntensity;                                 // 0x068C(0x0004)
    float                                         LPVSpecularOcclusionIntensity;                                // 0x0690(0x0004)
    enum class ETranslucencyType                  TranslucencyType;                                             // 0x0694(0x0001)
    char                                          pa_0695[0x0003]                                               // 0x0695(0x0003)
    float                                         RayTracingTranslucencyMaxRoughness;                           // 0x0698(0x0004)
    int32_t                                       RayTracingTranslucencyRefractionRays;                         // 0x069C(0x0004)
    int32_t                                       RayTracingTranslucencySamplesPerPixel;                        // 0x06A0(0x0004)
    enum class EReflectedAndRefractedRayTracedShadowsRayTracingTranslucencyShadows;                             // 0x06A4(0x0001)
    char                                          RayTracingTranslucencyRefraction;                             // 0x06A5(0x0001)
    char                                          pa_06A6[0x0002]                                               // 0x06A6(0x0002)
    int32_t                                       PathTracingMaxBounces;                                        // 0x06A8(0x0004)
    int32_t                                       PathTracingSamplesPerPixel;                                   // 0x06AC(0x0004)
    float                                         PathTracingFilterWidth;                                       // 0x06B0(0x0004)
    char                                          PathTracingEnableEmissive;                                    // 0x06B4(0x0001)
    char                                          pa_06B5[0x0003]                                               // 0x06B5(0x0003)
    float                                         PathTracingMaxPathExposure;                                   // 0x06B8(0x0004)
    char                                          PathTracingEnableReferenceDOF;                                // 0x06BC(0x0001)
    char                                          PathTracingEnableReferenceAtmosphere;                         // 0x06BC(0x0001)
    char                                          PathTracingEnableDenoiser;                                    // 0x06BC(0x0001)
    char                                          pa_06BD[0x0003]                                               // 0x06BD(0x0003)
    float                                         LPVFadeRange;                                                 // 0x06C0(0x0004)
    float                                         LPVDirectionalOcclusionFadeRange;                             // 0x06C4(0x0004)
    float                                         ScreenPercentage;                                             // 0x06C8(0x0004)
    char                                          pa_06CC[0x0004]                                               // 0x06CC(0x0004)
    FWeightedBlendables                           WeightedBlendables;                                           // 0x06D0(0x0010)
};


// ScriptStruct  Engine.WeightedBlendables
// Struct Size::0x0010
struct FWeightedBlendables
{
    TArray<FWeightedBlendable>                    Array;                                                        // 0x0000(0x0010)
};


// ScriptStruct  Engine.WeightedBlendable
// Struct Size::0x0010
struct FWeightedBlendable
{
    float                                         Weight;                                                       // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    UObject*                                      Object;                                                       // 0x0008(0x0008)
};


// ScriptStruct  Water.WaterBodyHeightmapSettings
// Struct Size::0x0080
struct FWaterBodyHeightmapSettings
{
    enum class EWaterBrushBlendType               BlendMode;                                                    // 0x0000(0x0001)
    bool                                          bInvertShape;                                                 // 0x0001(0x0001)
    char                                          pa_0002[0x0002]                                               // 0x0002(0x0002)
    FWaterFalloffSettings                         FalloffSettings;                                              // 0x0004(0x0014)
    FWaterBrushEffects                            Effects;                                                      // 0x0018(0x0060)
    int32_t                                       Priority;                                                     // 0x0078(0x0004)
    char                                          pa_007C[0x0004]                                               // 0x007C(0x0004)
};


// ScriptStruct  Water.WaterBrushEffects
// Struct Size::0x0060
struct FWaterBrushEffects
{
    FWaterBrushEffectBlurring                     Blurring;                                                     // 0x0000(0x0008)
    FWaterBrushEffectCurlNoise                    CurlNoise;                                                    // 0x0008(0x0010)
    FWaterBrushEffectDisplacement                 Displacement;                                                 // 0x0018(0x0028)
    FWaterBrushEffectSmoothBlending               SmoothBlending;                                               // 0x0040(0x0008)
    FWaterBrushEffectTerracing                    Terracing;                                                    // 0x0048(0x0014)
    char                                          pa_005C[0x0004]                                               // 0x005C(0x0004)
};


// ScriptStruct  Water.WaterBrushEffectTerracing
// Struct Size::0x0014
struct FWaterBrushEffectTerracing
{
    float                                         TerraceAlpha;                                                 // 0x0000(0x0004)
    float                                         TerraceSpacing;                                               // 0x0004(0x0004)
    float                                         TerraceSmoothness;                                            // 0x0008(0x0004)
    float                                         MaskLength;                                                   // 0x000C(0x0004)
    float                                         MaskStartOffset;                                              // 0x0010(0x0004)
};


// ScriptStruct  Water.WaterBrushEffectSmoothBlending
// Struct Size::0x0008
struct FWaterBrushEffectSmoothBlending
{
    float                                         InnerSmoothDistance;                                          // 0x0000(0x0004)
    float                                         OuterSmoothDistance;                                          // 0x0004(0x0004)
};


// ScriptStruct  Water.WaterBrushEffectDisplacement
// Struct Size::0x0028
struct FWaterBrushEffectDisplacement
{
    float                                         DisplacementHeight;                                           // 0x0000(0x0004)
    float                                         DisplacementTiling;                                           // 0x0004(0x0004)
    UTexture2D*                                   Texture;                                                      // 0x0008(0x0008)
    float                                         Midpoint;                                                     // 0x0010(0x0004)
    FLinearColor                                  Channel;                                                      // 0x0014(0x0010)
    float                                         WeightmapInfluence;                                           // 0x0024(0x0004)
};


// ScriptStruct  Water.WaterBrushEffectCurlNoise
// Struct Size::0x0010
struct FWaterBrushEffectCurlNoise
{
    float                                         Curl1Amount;                                                  // 0x0000(0x0004)
    float                                         Curl2Amount;                                                  // 0x0004(0x0004)
    float                                         Curl1Tiling;                                                  // 0x0008(0x0004)
    float                                         Curl2Tiling;                                                  // 0x000C(0x0004)
};


// ScriptStruct  Water.WaterBrushEffectBlurring
// Struct Size::0x0008
struct FWaterBrushEffectBlurring
{
    bool                                          bBlurShape;                                                   // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    int32_t                                       Radius;                                                       // 0x0004(0x0004)
};


// ScriptStruct  Water.WaterFalloffSettings
// Struct Size::0x0014
struct FWaterFalloffSettings
{
    enum class EWaterBrushFalloffMode             FalloffMode;                                                  // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         FalloffAngle;                                                 // 0x0004(0x0004)
    float                                         FalloffWidth;                                                 // 0x0008(0x0004)
    float                                         EdgeOffset;                                                   // 0x000C(0x0004)
    float                                         ZOffset;                                                      // 0x0010(0x0004)
};


// ScriptStruct  Water.WaterBrushEffectCurves
// Struct Size::0x0020
struct FWaterBrushEffectCurves
{
    bool                                          bUseCurveChannel;                                             // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    UCurveFloat*                                  ElevationCurveAsset;                                          // 0x0008(0x0008)
    float                                         ChannelEdgeOffset;                                            // 0x0010(0x0004)
    float                                         ChannelDepth;                                                 // 0x0014(0x0004)
    float                                         CurveRampWidth;                                               // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  Water.WaterSplineCurveDefaults
// Struct Size::0x0010
struct FWaterSplineCurveDefaults
{
    float                                         DefaultDepth;                                                 // 0x0000(0x0004)
    float                                         DefaultWidth;                                                 // 0x0004(0x0004)
    float                                         DefaultVelocity;                                              // 0x0008(0x0004)
    float                                         DefaultAudioIntensity;                                        // 0x000C(0x0004)
};


// ScriptStruct  CommonUI.UITag
// Struct Size::0x0008
struct FUITag : public FGameplayTag
{
};


// ScriptStruct  CommonUI.UIActionTag
// Struct Size::0x0008
struct FUIActionTag : public FUITag
{
};


// ScriptStruct  CommonUI.CommonInputActionHandlerData
// Struct Size::0x0020
struct FCommonInputActionHandlerData
{
    FDataTableRowHandle                           InputActionRow;                                               // 0x0000(0x0010)
    enum class EInputActionState                  State;                                                        // 0x0010(0x0001)
    char                                          pa_0011[0x000F]                                               // 0x0011(0x000F)
};


// ScriptStruct  CommonUI.CommonButtonStyleOptionalSlateSound
// Struct Size::0x0020
struct FCommonButtonStyleOptionalSlateSound
{
    bool                                          bHasSound;                                                    // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    FSlateSound                                   Sound;                                                        // 0x0008(0x0018)
};


// ScriptStruct  CommonUI.RichTextIconData
// Struct Size::0x0060
struct FRichTextIconData : public FTableRowBase
{
    FText                                         DisplayName;                                                  // 0x0008(0x0018)
    TSoftObjectPtr<UObject>                       ResourceObject;                                               // 0x0020(0x0030)
    FVector2D                                     ImageSize;                                                    // 0x0050(0x0010)
};


// ScriptStruct  CommonUI.CommonInputTypeInfo
// Struct Size::0x00F0
struct FCommonInputTypeInfo
{
    FKey                                          Key;                                                          // 0x0000(0x0018)
    enum class EInputActionState                  OverrrideState;                                               // 0x0018(0x0001)
    bool                                          bActionRequiresHold;                                          // 0x0019(0x0001)
    char                                          pa_001A[0x0002]                                               // 0x001A(0x0002)
    float                                         HoldTime;                                                     // 0x001C(0x0004)
    FSlateBrush                                   OverrideBrush;                                                // 0x0020(0x00D0)
};


// ScriptStruct  CommonUI.CommonInputActionDataBase
// Struct Size::0x0360
struct FCommonInputActionDataBase : public FTableRowBase
{
    FText                                         DisplayName;                                                  // 0x0008(0x0018)
    FText                                         HoldDisplayName;                                              // 0x0020(0x0018)
    int32_t                                       NavBarPriority;                                               // 0x0038(0x0004)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
    FCommonInputTypeInfo                          KeyboardInputTypeInfo;                                        // 0x0040(0x00F0)
    FCommonInputTypeInfo                          DefaultGamepadInputTypeInfo;                                  // 0x0130(0x00F0)
    TMap<FName,FCommonInputTypeInfo>              GamepadInputOverrides;                                        // 0x0220(0x0050)
    FCommonInputTypeInfo                          TouchInputTypeInfo;                                           // 0x0270(0x00F0)
};


// ScriptStruct  CommonUI.UIActionKeyMapping
// Struct Size::0x0020
struct FUIActionKeyMapping
{
    FKey                                          Key;                                                          // 0x0000(0x0018)
    float                                         HoldTime;                                                     // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  CommonUI.UIInputAction
// Struct Size::0x0030
struct FUIInputAction
{
    FUIActionTag                                  ActionTag;                                                    // 0x0000(0x0008)
    FText                                         DefaultDisplayName;                                           // 0x0008(0x0018)
    TArray<FUIActionKeyMapping>                   KeyMappings;                                                  // 0x0020(0x0010)
};


// ScriptStruct  CommonUI.CommonAnalogCursorSettings
// Struct Size::0x0024
struct FCommonAnalogCursorSettings
{
    int32_t                                       PreprocessorPriority;                                         // 0x0000(0x0004)
    bool                                          bEnableCursorAcceleration;                                    // 0x0004(0x0001)
    char                                          pa_0005[0x0003]                                               // 0x0005(0x0003)
    float                                         CursorAcceleration;                                           // 0x0008(0x0004)
    float                                         CursorMaxSpeed;                                               // 0x000C(0x0004)
    float                                         CursorDeadZone;                                               // 0x0010(0x0004)
    float                                         HoverSlowdownFactor;                                          // 0x0014(0x0004)
    float                                         ScrollDeadZone;                                               // 0x0018(0x0004)
    float                                         ScrollUpdatePeriod;                                           // 0x001C(0x0004)
    float                                         ScrollMultiplier;                                             // 0x0020(0x0004)
};


// ScriptStruct  CommonInput.CommonInputKeyBrushConfiguration
// Struct Size::0x00F0
struct FCommonInputKeyBrushConfiguration
{
    FKey                                          Key;                                                          // 0x0000(0x0018)
    char                                          pa_0018[0x0008]                                               // 0x0018(0x0008)
    FSlateBrush                                   KeyBrush;                                                     // 0x0020(0x00D0)
};


// ScriptStruct  CommonInput.CommonInputKeySetBrushConfiguration
// Struct Size::0x00E0
struct FCommonInputKeySetBrushConfiguration
{
    TArray<FKey>                                  Keys;                                                         // 0x0000(0x0010)
    FSlateBrush                                   KeyBrush;                                                     // 0x0010(0x00D0)
};


// ScriptStruct  CommonInput.InputDeviceIdentifierPair
// Struct Size::0x0018
struct FInputDeviceIdentifierPair
{
    FName                                         InputDeviceName;                                              // 0x0000(0x0008)
    FString                                       HardwareDeviceIdentifier;                                     // 0x0008(0x0010)
};


// ScriptStruct  CommonInput.CommonInputPlatformBaseData
// Struct Size::0x0038
struct FCommonInputPlatformBaseData
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    enum class ECommonInputType                   DefaultInputType;                                             // 0x0008(0x0001)
    bool                                          bSupportsMouseAndKeyboard;                                    // 0x0009(0x0001)
    bool                                          bSupportsGamepad;                                             // 0x000A(0x0001)
    char                                          pa_000B[0x0001]                                               // 0x000B(0x0001)
    FName                                         DefaultGamepadName;                                           // 0x000C(0x0008)
    bool                                          bCanChangeGamepadType;                                        // 0x0014(0x0001)
    bool                                          bSupportsTouch;                                               // 0x0015(0x0001)
    char                                          pa_0016[0x0002]                                               // 0x0016(0x0002)
    TArray<TSoftClassPtr<UObject>>                ControllerData;                                               // 0x0018(0x0010)
    TArray<UCommonInputBaseControllerData*>       ControllerDataClasses;                                        // 0x0028(0x0010)
};


// ScriptStruct  GameSettings.GameSettingFilterState
// Struct Size::0x03B8
struct FGameSettingFilterState
{
    bool                                          bIncludeDisabled;                                             // 0x0000(0x0001)
    bool                                          bIncludeHidden;                                               // 0x0001(0x0001)
    bool                                          bIncludeResetable;                                            // 0x0002(0x0001)
    bool                                          bIncludeNestedPages;                                          // 0x0003(0x0001)
    char                                          pa_0004[0x0394]                                               // 0x0004(0x0394)
    TArray<UGameSetting*>                         SettingRootList;                                              // 0x0398(0x0010)
    TArray<UGameSetting*>                         SettingAllowList;                                             // 0x03A8(0x0010)
};


// ScriptStruct  GameSettings.GameSettingClassExtensions
// Struct Size::0x0010
struct FGameSettingClassExtensions
{
    TArray<TSoftClassPtr<UObject>>                Extensions;                                                   // 0x0000(0x0010)
};


// ScriptStruct  GameSettings.GameSettingNameExtensions
// Struct Size::0x0018
struct FGameSettingNameExtensions
{
    bool                                          bIncludeClassDefaultExtensions;                               // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    TArray<TSoftClassPtr<UObject>>                Extensions;                                                   // 0x0008(0x0010)
};


// ScriptStruct  CommonUser.CommonUserInitializeParams
// Struct Size::0x0028
struct FCommonUserInitializeParams
{
    int32_t                                       LocalPlayerIndex;                                             // 0x0000(0x0004)
    int32_t                                       ControllerId;                                                 // 0x0004(0x0004)
    FInputDeviceId                                PrimaryInputDevice;                                           // 0x0008(0x0004)
    FPlatformUserId                               PlatformUser;                                                 // 0x000C(0x0004)
    enum class ECommonUserPrivilege               RequestedPrivilege;                                           // 0x0010(0x0001)
    enum class ECommonUserOnlineContext           OnlineContext;                                                // 0x0011(0x0001)
    bool                                          bCanCreateNewLocalPlayer;                                     // 0x0012(0x0001)
    bool                                          bCanUseGuestLogin;                                            // 0x0013(0x0001)
    bool                                          bSuppressLoginErrors;                                         // 0x0014(0x0001)
    char                                          pa_0015[0x0003]                                               // 0x0015(0x0003)
    FDelegate                                     OnUserInitializeComplete;                                     // 0x0018(0x0010)
};


// ScriptStruct  OnlineSubsystem.NamedInterface
// Struct Size::0x0010
struct FNamedInterface
{
    FName                                         InterfaceName;                                                // 0x0000(0x0008)
    UObject*                                      InterfaceObject;                                              // 0x0008(0x0008)
};


// ScriptStruct  OnlineSubsystem.NamedInterfaceDef
// Struct Size::0x0018
struct FNamedInterfaceDef
{
    FName                                         InterfaceName;                                                // 0x0000(0x0008)
    FString                                       InterfaceClassName;                                           // 0x0008(0x0010)
};


// ScriptStruct  OnlineSubsystemUtils.PlayerReservation
// Struct Size::0x0058
struct FPlayerReservation
{
    FUniqueNetIdRepl                              UniqueId;                                                     // 0x0000(0x0030)
    FString                                       ValidationStr;                                                // 0x0030(0x0010)
    FString                                       Platform;                                                     // 0x0040(0x0010)
    bool                                          bAllowCrossplay;                                              // 0x0050(0x0001)
    char                                          pa_0051[0x0003]                                               // 0x0051(0x0003)
    float                                         ElapsedTime;                                                  // 0x0054(0x0004)
};


// ScriptStruct  Engine.UniqueNetIdRepl
// Struct Size::0x0030
struct FUniqueNetIdRepl : public FUniqueNetIdWrapper
{
    char                                          pa_0001[0x001F]                                               // 0x0001(0x001F)
    TArray<char>                                  ReplicationBytes;                                             // 0x0020(0x0010)
};


// ScriptStruct  OnlineSubsystemUtils.InAppPurchaseProductRequest2
// Struct Size::0x0018
struct FInAppPurchaseProductRequest2
{
    FString                                       ProductIdentifier;                                            // 0x0000(0x0010)
    bool                                          bIsConsumable;                                                // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
};


// ScriptStruct  OnlineSubsystemUtils.InAppPurchaseProductInfo2
// Struct Size::0x00F8
struct FInAppPurchaseProductInfo2
{
    FString                                       Identifier;                                                   // 0x0000(0x0010)
    FString                                       TransactionIdentifier;                                        // 0x0010(0x0010)
    FString                                       DisplayName;                                                  // 0x0020(0x0010)
    FString                                       DisplayDescription;                                           // 0x0030(0x0010)
    FString                                       DisplayPrice;                                                 // 0x0040(0x0010)
    float                                         RawPrice;                                                     // 0x0050(0x0004)
    char                                          pa_0054[0x0004]                                               // 0x0054(0x0004)
    FString                                       CurrencyCode;                                                 // 0x0058(0x0010)
    FString                                       CurrencySymbol;                                               // 0x0068(0x0010)
    FString                                       DecimalSeparator;                                             // 0x0078(0x0010)
    FString                                       GroupingSeparator;                                            // 0x0088(0x0010)
    FString                                       ReceiptData;                                                  // 0x0098(0x0010)
    TMap<FString,FString>                         DynamicFields;                                                // 0x00A8(0x0050)
};


// ScriptStruct  OnlineSubsystemUtils.PIELoginSettingsInternal
// Struct Size::0x0040
struct FPIELoginSettingsInternal
{
    FString                                       ID;                                                           // 0x0000(0x0010)
    FString                                       Token;                                                        // 0x0010(0x0010)
    FString                                       Type;                                                         // 0x0020(0x0010)
    TArray<char>                                  TokenBytes;                                                   // 0x0030(0x0010)
};


// ScriptStruct  OnlineSubsystemUtils.PartyReservation
// Struct Size::0x0058
struct FPartyReservation
{
    int32_t                                       TeamNum;                                                      // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FUniqueNetIdRepl                              PartyLeader;                                                  // 0x0008(0x0030)
    TArray<FPlayerReservation>                    PartyMembers;                                                 // 0x0038(0x0010)
    TArray<FPlayerReservation>                    RemovedPartyMembers;                                          // 0x0048(0x0010)
};


// ScriptStruct  OnlineSubsystemUtils.PartyBeaconCrossplayPlatformMapping
// Struct Size::0x0020
struct FPartyBeaconCrossplayPlatformMapping
{
    FString                                       PlatformName;                                                 // 0x0000(0x0010)
    FString                                       PlatformType;                                                 // 0x0010(0x0010)
};


// ScriptStruct  OnlineSubsystemUtils.SpectatorReservation
// Struct Size::0x0088
struct FSpectatorReservation
{
    FUniqueNetIdRepl                              SpectatorId;                                                  // 0x0000(0x0030)
    FPlayerReservation                            Spectator;                                                    // 0x0030(0x0058)
};


// ScriptStruct  CommonGame.MeasuredText
// Struct Size::0x0030
struct FMeasuredText
{
    char                                          pa_0000[0x0030]                                               // 0x0000(0x0030)
};


// ScriptStruct  CommonGame.RootViewportLayoutInfo
// Struct Size::0x0018
struct FRootViewportLayoutInfo
{
    ULocalPlayer*                                 LocalPlayer;                                                  // 0x0000(0x0008)
    UPrimaryGameLayout*                           RootLayout;                                                   // 0x0008(0x0008)
    bool                                          bAddedToViewport;                                             // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
};


// ScriptStruct  CommonGame.ConfirmationDialogAction
// Struct Size::0x0020
struct FConfirmationDialogAction
{
    enum class ECommonMessagingResult             Result;                                                       // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    FText                                         OptionalDisplayText;                                          // 0x0008(0x0018)
};


// ScriptStruct  Qos.QosSubspaceComparisonParams
// Struct Size::0x0010
struct FQosSubspaceComparisonParams
{
    int32_t                                       MaxNonSubspacePingMs;                                         // 0x0000(0x0004)
    int32_t                                       MinSubspacePingMs;                                            // 0x0004(0x0004)
    int32_t                                       ConstantMaxToleranceMs;                                       // 0x0008(0x0004)
    float                                         ScaledMaxTolerancePct;                                        // 0x000C(0x0004)
};


// ScriptStruct  Qos.QosPingServerInfo
// Struct Size::0x0018
struct FQosPingServerInfo
{
    FString                                       Address;                                                      // 0x0000(0x0010)
    int32_t                                       Port;                                                         // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  Qos.QosDatacenterInfo
// Struct Size::0x0038
struct FQosDatacenterInfo
{
    FString                                       ID;                                                           // 0x0000(0x0010)
    FString                                       RegionId;                                                     // 0x0010(0x0010)
    bool                                          bEnabled;                                                     // 0x0020(0x0001)
    char                                          pa_0021[0x0007]                                               // 0x0021(0x0007)
    TArray<FQosPingServerInfo>                    Servers;                                                      // 0x0028(0x0010)
};


// ScriptStruct  Qos.QosRegionInfo
// Struct Size::0x0040
struct FQosRegionInfo
{
    FText                                         DisplayName;                                                  // 0x0000(0x0018)
    FString                                       RegionId;                                                     // 0x0018(0x0010)
    bool                                          bEnabled;                                                     // 0x0028(0x0001)
    bool                                          bVisible;                                                     // 0x0029(0x0001)
    bool                                          bAutoAssignable;                                              // 0x002A(0x0001)
    bool                                          bAllowSubspaceBias;                                           // 0x002B(0x0001)
    FQosSubspaceComparisonParams                  SubspaceBiasParams;                                           // 0x002C(0x0010)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
};


// ScriptStruct  Qos.DatacenterQosInstance
// Struct Size::0x0068
struct FDatacenterQosInstance
{
    FQosDatacenterInfo                            Definition;                                                   // 0x0000(0x0038)
    enum class EQosDatacenterResult               Result;                                                       // 0x0038(0x0001)
    char                                          pa_0039[0x0003]                                               // 0x0039(0x0003)
    int32_t                                       AvgPingMs;                                                    // 0x003C(0x0004)
    TArray<int32_t>                               PingResults;                                                  // 0x0040(0x0010)
    char                                          pa_0050[0x0008]                                               // 0x0050(0x0008)
    FDateTime                                     LastCheckTimestamp;                                           // 0x0058(0x0008)
    bool                                          bUsable;                                                      // 0x0060(0x0001)
    char                                          pa_0061[0x0007]                                               // 0x0061(0x0007)
};


// ScriptStruct  Qos.RegionQosInstance
// Struct Size::0x0050
struct FRegionQosInstance
{
    FQosRegionInfo                                Definition;                                                   // 0x0000(0x0040)
    TArray<FDatacenterQosInstance>                DatacenterOptions;                                            // 0x0040(0x0010)
};


// ScriptStruct  Party.PartyMemberPlatformData
// Struct Size::0x0098
struct FPartyMemberPlatformData
{
    FUserPlatform                                 Platform;                                                     // 0x0000(0x0058)
    FUniqueNetIdRepl                              UniqueId;                                                     // 0x0058(0x0030)
    FString                                       SessionId;                                                    // 0x0088(0x0010)
};


// ScriptStruct  Party.UserPlatform
// Struct Size::0x0058
struct FUserPlatform
{
    FSocialPlatformDescription                    PlatformDescription;                                          // 0x0000(0x0058)
};


// ScriptStruct  Party.SocialPlatformDescription
// Struct Size::0x0058
struct FSocialPlatformDescription
{
    FString                                       Name;                                                         // 0x0000(0x0010)
    FString                                       PlatformType;                                                 // 0x0010(0x0010)
    FName                                         OnlineSubsystem;                                              // 0x0020(0x0008)
    FString                                       SessionType;                                                  // 0x0028(0x0010)
    FString                                       ExternalAccountType;                                          // 0x0038(0x0010)
    FString                                       CrossplayPool;                                                // 0x0048(0x0010)
};


// ScriptStruct  Party.PartyMemberJoinInProgressRequest
// Struct Size::0x0038
struct FPartyMemberJoinInProgressRequest
{
    FUniqueNetIdRepl                              Target;                                                       // 0x0000(0x0030)
    int64_t                                       Time;                                                         // 0x0030(0x0008)
};


// ScriptStruct  Party.PartyMemberJoinInProgressResponse
// Struct Size::0x0048
struct FPartyMemberJoinInProgressResponse
{
    FUniqueNetIdRepl                              Requester;                                                    // 0x0000(0x0030)
    int64_t                                       RequestTime;                                                  // 0x0030(0x0008)
    int64_t                                       ResponseTime;                                                 // 0x0038(0x0008)
    char                                          DenialReason;                                                 // 0x0040(0x0001)
    char                                          pa_0041[0x0007]                                               // 0x0041(0x0007)
};


// ScriptStruct  Party.PartyMemberJoinInProgressData
// Struct Size::0x0048
struct FPartyMemberJoinInProgressData
{
    FPartyMemberJoinInProgressRequest             Request;                                                      // 0x0000(0x0038)
    TArray<FPartyMemberJoinInProgressResponse>    Responses;                                                    // 0x0038(0x0010)
};


// ScriptStruct  Party.OnlinePartyRepDataBase
// Struct Size::0x0018
struct FOnlinePartyRepDataBase
{
    char                                          pa_0000[0x0018]                                               // 0x0000(0x0018)
};


// ScriptStruct  Party.PartyMemberRepData
// Struct Size::0x0268
struct FPartyMemberRepData : public FOnlinePartyRepDataBase
{
    char                                          pa_0018[0x0008]                                               // 0x0018(0x0008)
    FPartyMemberPlatformData                      PlatformData;                                                 // 0x0020(0x0098)
    char                                          pa_00B8[0x0090]                                               // 0x00B8(0x0090)
    enum class ECrossplayPreference               CrossplayPreference;                                          // 0x0148(0x0001)
    char                                          pa_0149[0x0037]                                               // 0x0149(0x0037)
    FString                                       JoinMethod;                                                   // 0x0180(0x0010)
    char                                          pa_0190[0x0030]                                               // 0x0190(0x0030)
    FPartyMemberJoinInProgressData                JoinInProgressData;                                           // 0x01C0(0x0048)
    char                                          pa_0208[0x0060]                                               // 0x0208(0x0060)
};


// ScriptStruct  Party.PartyPlatformSessionInfo
// Struct Size::0x0050
struct FPartyPlatformSessionInfo
{
    FString                                       SessionType;                                                  // 0x0000(0x0010)
    FString                                       SessionId;                                                    // 0x0010(0x0010)
    FUniqueNetIdRepl                              OwnerPrimaryId;                                               // 0x0020(0x0030)
};


// ScriptStruct  Party.PartyPrivacySettings
// Struct Size::0x0003
struct FPartyPrivacySettings
{
    enum class EPartyType                         PartyType;                                                    // 0x0000(0x0001)
    enum class EPartyInviteRestriction            PartyInviteRestriction;                                       // 0x0001(0x0001)
    bool                                          bOnlyLeaderFriendsCanJoin;                                    // 0x0002(0x0001)
};


// ScriptStruct  Party.PartyRepData
// Struct Size::0x0080
struct FPartyRepData : public FOnlinePartyRepDataBase
{
    char                                          pa_0018[0x0008]                                               // 0x0018(0x0008)
    FPartyPrivacySettings                         PrivacySettings;                                              // 0x0020(0x0003)
    char                                          pa_0023[0x0035]                                               // 0x0023(0x0035)
    TArray<FPartyPlatformSessionInfo>             PlatformSessions;                                             // 0x0058(0x0010)
    char                                          pa_0068[0x0018]                                               // 0x0068(0x0018)
};


// ScriptStruct  Party.SocialChatChannelConfig
// Struct Size::0x0040
struct FSocialChatChannelConfig
{
    USocialUser*                                  SocialUser;                                                   // 0x0000(0x0008)
    char                                          pa_0008[0x0010]                                               // 0x0008(0x0010)
    TArray<USocialChatChannel*>                   ListenChannels;                                               // 0x0018(0x0010)
    char                                          pa_0028[0x0018]                                               // 0x0028(0x0018)
};


// ScriptStruct  Lobby.LobbyPlayerStateActorInfo
// Struct Size::0x0018
struct FLobbyPlayerStateActorInfo : public FFastArraySerializerItem
{
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    ALobbyBeaconPlayerState*                      LobbyPlayerState;                                             // 0x0010(0x0008)
};


// ScriptStruct  Lobby.LobbyPlayerStateInfoArray
// Struct Size::0x0120
struct FLobbyPlayerStateInfoArray : public FFastArraySerializer
{
    TArray<FLobbyPlayerStateActorInfo>            Players;                                                      // 0x0108(0x0010)
    ALobbyBeaconState*                            ParentState;                                                  // 0x0118(0x0008)
};


// ScriptStruct  Hotfix.UpdateContextDefinition
// Struct Size::0x0068
struct FUpdateContextDefinition
{
    FString                                       Name;                                                         // 0x0000(0x0010)
    bool                                          bEnabled;                                                     // 0x0010(0x0001)
    bool                                          bCheckAvailabilityOnly;                                       // 0x0011(0x0001)
    bool                                          bPatchCheckEnabled;                                           // 0x0012(0x0001)
    bool                                          bPlatformEnvironmentDetectionEnabled;                         // 0x0013(0x0001)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    TSet<FString>                                 AdditionalTags;                                               // 0x0018(0x0050)
};


// ScriptStruct  GameSubtitles.SubtitleFormat
// Struct Size::0x0004
struct FSubtitleFormat
{
    enum class ESubtitleDisplayTextSize           SubtitleTextSize;                                             // 0x0000(0x0001)
    enum class ESubtitleDisplayTextColor          SubtitleTextColor;                                            // 0x0001(0x0001)
    enum class ESubtitleDisplayTextBorder         SubtitleTextBorder;                                           // 0x0002(0x0001)
    enum class ESubtitleDisplayBackgroundOpacity  SubtitleBackgroundOpacity;                                    // 0x0003(0x0001)
};


// ScriptStruct  UIExtension.UIExtensionPointHandle
// Struct Size::0x0018
struct FUIExtensionPointHandle
{
    char                                          pa_0000[0x0018]                                               // 0x0000(0x0018)
};


// ScriptStruct  MetasoundFrontend.MetasoundFrontendVersionNumber
// Struct Size::0x0008
struct FMetasoundFrontendVersionNumber
{
    int32_t                                       Major;                                                        // 0x0000(0x0004)
    int32_t                                       Minor;                                                        // 0x0004(0x0004)
};


// ScriptStruct  MetasoundFrontend.MetasoundFrontendVersion
// Struct Size::0x0010
struct FMetasoundFrontendVersion
{
    FName                                         Name;                                                         // 0x0000(0x0008)
    FMetasoundFrontendVersionNumber               Number;                                                       // 0x0008(0x0008)
};


// ScriptStruct  MetasoundFrontend.MetasoundFrontendVertex
// Struct Size::0x0020
struct FMetasoundFrontendVertex
{
    FName                                         Name;                                                         // 0x0000(0x0008)
    FName                                         TypeName;                                                     // 0x0008(0x0008)
    FGuid                                         VertexID;                                                     // 0x0010(0x0010)
};


// ScriptStruct  MetasoundFrontend.MetasoundFrontendVertexLiteral
// Struct Size::0x0068
struct FMetasoundFrontendVertexLiteral
{
    FGuid                                         VertexID;                                                     // 0x0000(0x0010)
    FMetasoundFrontendLiteral                     Value;                                                        // 0x0010(0x0058)
};


// ScriptStruct  MetasoundFrontend.MetasoundFrontendLiteral
// Struct Size::0x0058
struct FMetasoundFrontendLiteral
{
    enum class EMetasoundFrontendLiteralType      Type;                                                         // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    int32_t                                       AsNumDefault;                                                 // 0x0004(0x0004)
    TArray<bool>                                  AsBoolean;                                                    // 0x0008(0x0010)
    TArray<int32_t>                               AsInteger;                                                    // 0x0018(0x0010)
    TArray<float>                                 AsFloat;                                                      // 0x0028(0x0010)
    TArray<FString>                               AsString;                                                     // 0x0038(0x0010)
    TArray<UObject*>                              AsUObject;                                                    // 0x0048(0x0010)
};


// ScriptStruct  MetasoundFrontend.MetasoundFrontendVariable
// Struct Size::0x00B8
struct FMetasoundFrontendVariable
{
    FName                                         Name;                                                         // 0x0000(0x0008)
    FName                                         TypeName;                                                     // 0x0008(0x0008)
    FMetasoundFrontendLiteral                     Literal;                                                      // 0x0010(0x0058)
    FGuid                                         ID;                                                           // 0x0068(0x0010)
    FGuid                                         VariableNodeID;                                               // 0x0078(0x0010)
    FGuid                                         MutatorNodeID;                                                // 0x0088(0x0010)
    TArray<FGuid>                                 AccessorNodeIDs;                                              // 0x0098(0x0010)
    TArray<FGuid>                                 DeferredAccessorNodeIDs;                                      // 0x00A8(0x0010)
};


// ScriptStruct  MetasoundFrontend.MetasoundFrontendNodeInterface
// Struct Size::0x0030
struct FMetasoundFrontendNodeInterface
{
    TArray<FMetasoundFrontendVertex>              Inputs;                                                       // 0x0000(0x0010)
    TArray<FMetasoundFrontendVertex>              Outputs;                                                      // 0x0010(0x0010)
    TArray<FMetasoundFrontendVertex>              Environment;                                                  // 0x0020(0x0010)
};


// ScriptStruct  MetasoundFrontend.MetasoundFrontendNodeStyleDisplay
// Struct Size::0x0001
struct FMetasoundFrontendNodeStyleDisplay
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  MetasoundFrontend.MetasoundFrontendNodeStyle
// Struct Size::0x0001
struct FMetasoundFrontendNodeStyle
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  MetasoundFrontend.MetasoundFrontendNode
// Struct Size::0x0068
struct FMetasoundFrontendNode
{
    FGuid                                         ID;                                                           // 0x0000(0x0010)
    FGuid                                         ClassID;                                                      // 0x0010(0x0010)
    FName                                         Name;                                                         // 0x0020(0x0008)
    FMetasoundFrontendNodeInterface               Interface;                                                    // 0x0028(0x0030)
    TArray<FMetasoundFrontendVertexLiteral>       InputLiterals;                                                // 0x0058(0x0010)
};


// ScriptStruct  MetasoundFrontend.MetasoundFrontendEdge
// Struct Size::0x0040
struct FMetasoundFrontendEdge
{
    FGuid                                         FromNodeID;                                                   // 0x0000(0x0010)
    FGuid                                         FromVertexID;                                                 // 0x0010(0x0010)
    FGuid                                         ToNodeID;                                                     // 0x0020(0x0010)
    FGuid                                         ToVertexID;                                                   // 0x0030(0x0010)
};


// ScriptStruct  MetasoundFrontend.MetasoundFrontendEdgeStyleLiteralColorPair
// Struct Size::0x0068
struct FMetasoundFrontendEdgeStyleLiteralColorPair
{
    FMetasoundFrontendLiteral                     Value;                                                        // 0x0000(0x0058)
    FLinearColor                                  Color;                                                        // 0x0058(0x0010)
};


// ScriptStruct  MetasoundFrontend.MetasoundFrontendEdgeStyle
// Struct Size::0x0028
struct FMetasoundFrontendEdgeStyle
{
    FGuid                                         NodeID;                                                       // 0x0000(0x0010)
    FName                                         OutputName;                                                   // 0x0010(0x0008)
    TArray<FMetasoundFrontendEdgeStyleLiteralColorPair>LiteralColorPairs;                                       // 0x0018(0x0010)
};


// ScriptStruct  MetasoundFrontend.MetasoundFrontendGraphStyle
// Struct Size::0x0018
struct FMetasoundFrontendGraphStyle
{
    bool                                          bIsGraphEditable;                                             // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    TArray<FMetasoundFrontendEdgeStyle>           EdgeStyles;                                                   // 0x0008(0x0010)
};


// ScriptStruct  MetasoundFrontend.MetasoundFrontendGraph
// Struct Size::0x0030
struct FMetasoundFrontendGraph
{
    TArray<FMetasoundFrontendNode>                Nodes;                                                        // 0x0000(0x0010)
    TArray<FMetasoundFrontendEdge>                Edges;                                                        // 0x0010(0x0010)
    TArray<FMetasoundFrontendVariable>            Variables;                                                    // 0x0020(0x0010)
};


// ScriptStruct  MetasoundFrontend.MetasoundFrontendVertexMetadata
// Struct Size::0x0001
struct FMetasoundFrontendVertexMetadata
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  MetasoundFrontend.MetasoundFrontendClassVertex
// Struct Size::0x0034
struct FMetasoundFrontendClassVertex : public FMetasoundFrontendVertex
{
    FGuid                                         NodeID;                                                       // 0x0020(0x0010)
    enum class EMetasoundFrontendVertexAccessType AccessType;                                                   // 0x0030(0x0004)
};


// ScriptStruct  MetasoundFrontend.MetasoundFrontendClassStyleDisplay
// Struct Size::0x0001
struct FMetasoundFrontendClassStyleDisplay
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  MetasoundFrontend.MetasoundFrontendClassInput
// Struct Size::0x0090
struct FMetasoundFrontendClassInput : public FMetasoundFrontendClassVertex
{
    char                                          pa_0034[0x0004]                                               // 0x0034(0x0004)
    FMetasoundFrontendLiteral                     DefaultLiteral;                                               // 0x0038(0x0058)
};


// ScriptStruct  MetasoundFrontend.MetasoundFrontendClassVariable
// Struct Size::0x0090
struct FMetasoundFrontendClassVariable : public FMetasoundFrontendClassVertex
{
    char                                          pa_0034[0x0004]                                               // 0x0034(0x0004)
    FMetasoundFrontendLiteral                     DefaultLiteral;                                               // 0x0038(0x0058)
};


// ScriptStruct  MetasoundFrontend.MetasoundFrontendClassOutput
// Struct Size::0x0034
struct FMetasoundFrontendClassOutput : public FMetasoundFrontendClassVertex
{
};


// ScriptStruct  MetasoundFrontend.MetasoundFrontendClassEnvironmentVariable
// Struct Size::0x0014
struct FMetasoundFrontendClassEnvironmentVariable
{
    FName                                         Name;                                                         // 0x0000(0x0008)
    FName                                         TypeName;                                                     // 0x0008(0x0008)
    bool                                          bIsRequired;                                                  // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
};


// ScriptStruct  MetasoundFrontend.MetasoundFrontendInterfaceStyle
// Struct Size::0x0001
struct FMetasoundFrontendInterfaceStyle
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  MetasoundFrontend.MetasoundFrontendClassInterface
// Struct Size::0x0040
struct FMetasoundFrontendClassInterface
{
    TArray<FMetasoundFrontendClassInput>          Inputs;                                                       // 0x0000(0x0010)
    TArray<FMetasoundFrontendClassOutput>         Outputs;                                                      // 0x0010(0x0010)
    TArray<FMetasoundFrontendClassEnvironmentVariable>Environment;                                              // 0x0020(0x0010)
    FGuid                                         ChangeID;                                                     // 0x0030(0x0010)
};


// ScriptStruct  MetasoundFrontend.MetasoundFrontendInterface
// Struct Size::0x0050
struct FMetasoundFrontendInterface : public FMetasoundFrontendClassInterface
{
    FMetasoundFrontendVersion                     Version;                                                      // 0x0040(0x0010)
};


// ScriptStruct  MetasoundFrontend.MetasoundFrontendClassName
// Struct Size::0x0018
struct FMetasoundFrontendClassName
{
    FName                                         Namespace;                                                    // 0x0000(0x0008)
    FName                                         Name;                                                         // 0x0008(0x0008)
    FName                                         Variant;                                                      // 0x0010(0x0008)
};


// ScriptStruct  MetasoundFrontend.MetasoundFrontendClassMetadata
// Struct Size::0x0034
struct FMetasoundFrontendClassMetadata
{
    FMetasoundFrontendClassName                   ClassName;                                                    // 0x0000(0x0018)
    FMetasoundFrontendVersionNumber               Version;                                                      // 0x0018(0x0008)
    enum class EMetasoundFrontendClassType        Type;                                                         // 0x0020(0x0001)
    bool                                          bIsDeprecated;                                                // 0x0021(0x0001)
    bool                                          bAutoUpdateManagesInterface;                                  // 0x0022(0x0001)
    char                                          pa_0023[0x0001]                                               // 0x0023(0x0001)
    FGuid                                         ChangeID;                                                     // 0x0024(0x0010)
};


// ScriptStruct  MetasoundFrontend.MetasoundFrontendClassStyle
// Struct Size::0x0001
struct FMetasoundFrontendClassStyle
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  MetasoundFrontend.MetasoundFrontendClass
// Struct Size::0x0090
struct FMetasoundFrontendClass
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    FGuid                                         ID;                                                           // 0x0008(0x0010)
    FMetasoundFrontendClassMetadata               MetaData;                                                     // 0x0018(0x0034)
    char                                          pa_004C[0x0004]                                               // 0x004C(0x0004)
    FMetasoundFrontendClassInterface              Interface;                                                    // 0x0050(0x0040)
};


// ScriptStruct  MetasoundFrontend.MetasoundFrontendGraphClassPresetOptions
// Struct Size::0x0058
struct FMetasoundFrontendGraphClassPresetOptions
{
    bool                                          bIsPreset;                                                    // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    TSet<FName>                                   InputsInheritingDefault;                                      // 0x0008(0x0050)
};


// ScriptStruct  MetasoundFrontend.MetasoundFrontendGraphClass
// Struct Size::0x0118
struct FMetasoundFrontendGraphClass : public FMetasoundFrontendClass
{
    FMetasoundFrontendGraph                       Graph;                                                        // 0x0090(0x0030)
    FMetasoundFrontendGraphClassPresetOptions     PresetOptions;                                                // 0x00C0(0x0058)
};


// ScriptStruct  MetasoundFrontend.MetasoundFrontendDocumentMetadata
// Struct Size::0x0010
struct FMetasoundFrontendDocumentMetadata
{
    FMetasoundFrontendVersion                     Version;                                                      // 0x0000(0x0010)
};


// ScriptStruct  MetasoundFrontend.MetasoundFrontendDocument
// Struct Size::0x01C8
struct FMetasoundFrontendDocument
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
    FMetasoundFrontendDocumentMetadata            MetaData;                                                     // 0x0010(0x0010)
    TSet<FMetasoundFrontendVersion>               Interfaces;                                                   // 0x0020(0x0050)
    FMetasoundFrontendGraphClass                  RootGraph;                                                    // 0x0070(0x0118)
    TArray<FMetasoundFrontendGraphClass>          Subgraphs;                                                    // 0x0188(0x0010)
    TArray<FMetasoundFrontendClass>               Dependencies;                                                 // 0x0198(0x0010)
    FMetasoundFrontendVersion                     ArchetypeVersion;                                             // 0x01A8(0x0010)
    TArray<FMetasoundFrontendVersion>             InterfaceVersions;                                            // 0x01B8(0x0010)
};


// ScriptStruct  MetasoundEngine.DefaultMetaSoundAssetAutoUpdateSettings
// Struct Size::0x0020
struct FDefaultMetaSoundAssetAutoUpdateSettings
{
    FSoftObjectPath                               Metasound;                                                    // 0x0000(0x0020)
};


// ScriptStruct  MetasoundEngine.MetaSoundAssetDirectory
// Struct Size::0x0010
struct FMetaSoundAssetDirectory
{
    FDirectoryPath                                Directory;                                                    // 0x0000(0x0010)
};


// ScriptStruct  MetasoundEngine.MetaSoundAsyncAssetDependencies
// Struct Size::0x0030
struct FMetaSoundAsyncAssetDependencies
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    UObject*                                      Metasound;                                                    // 0x0008(0x0008)
    char                                          pa_0010[0x0020]                                               // 0x0010(0x0020)
};


// ScriptStruct  AudioWidgets.AudioTextBoxStyle
// Struct Size::0x0100
struct FAudioTextBoxStyle : public FSlateWidgetStyle
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FSlateBrush                                   BackgroundImage;                                              // 0x0010(0x00D0)
    FSlateColor                                   BackgroundColor;                                              // 0x00E0(0x0014)
    char                                          pa_00F4[0x000C]                                               // 0x00F4(0x000C)
};


// ScriptStruct  AudioWidgets.AudioSliderStyle
// Struct Size::0x0750
struct FAudioSliderStyle : public FSlateWidgetStyle
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FSliderStyle                                  SliderStyle;                                                  // 0x0010(0x0500)
    FAudioTextBoxStyle                            TextBoxStyle;                                                 // 0x0510(0x0100)
    FSlateBrush                                   WidgetBackgroundImage;                                        // 0x0610(0x00D0)
    FSlateColor                                   SliderBackgroundColor;                                        // 0x06E0(0x0014)
    char                                          pa_06F4[0x0004]                                               // 0x06F4(0x0004)
    FVector2D                                     SliderBackgroundSize;                                         // 0x06F8(0x0010)
    float                                         LabelPadding;                                                 // 0x0708(0x0004)
    FSlateColor                                   SliderBarColor;                                               // 0x070C(0x0014)
    FSlateColor                                   SliderThumbColor;                                             // 0x0720(0x0014)
    FSlateColor                                   WidgetBackgroundColor;                                        // 0x0734(0x0014)
    char                                          pa_0748[0x0008]                                               // 0x0748(0x0008)
};


// ScriptStruct  SlateCore.SliderStyle
// Struct Size::0x0500
struct FSliderStyle : public FSlateWidgetStyle
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FSlateBrush                                   NormalBarImage;                                               // 0x0010(0x00D0)
    FSlateBrush                                   HoveredBarImage;                                              // 0x00E0(0x00D0)
    FSlateBrush                                   DisabledBarImage;                                             // 0x01B0(0x00D0)
    FSlateBrush                                   NormalThumbImage;                                             // 0x0280(0x00D0)
    FSlateBrush                                   HoveredThumbImage;                                            // 0x0350(0x00D0)
    FSlateBrush                                   DisabledThumbImage;                                           // 0x0420(0x00D0)
    float                                         BarThickness;                                                 // 0x04F0(0x0004)
    char                                          pa_04F4[0x000C]                                               // 0x04F4(0x000C)
};


// ScriptStruct  AudioWidgets.AudioRadialSliderStyle
// Struct Size::0x0160
struct FAudioRadialSliderStyle : public FSlateWidgetStyle
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FAudioTextBoxStyle                            TextBoxStyle;                                                 // 0x0010(0x0100)
    FSlateColor                                   CenterBackgroundColor;                                        // 0x0110(0x0014)
    FSlateColor                                   SliderBarColor;                                               // 0x0124(0x0014)
    FSlateColor                                   SliderProgressColor;                                          // 0x0138(0x0014)
    float                                         LabelPadding;                                                 // 0x014C(0x0004)
    float                                         DefaultSliderRadius;                                          // 0x0150(0x0004)
    char                                          pa_0154[0x000C]                                               // 0x0154(0x000C)
};


// ScriptStruct  WaveTable.WaveTableBankEntry
// Struct Size::0x00A0
struct FWaveTableBankEntry
{
    FWaveTableTransform                           Transform;                                                    // 0x0000(0x00A0)
};


// ScriptStruct  WaveTable.WaveTableTransform
// Struct Size::0x00A0
struct FWaveTableTransform
{
    enum class EWaveTableCurve                    Curve;                                                        // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         Scalar;                                                       // 0x0004(0x0004)
    FRichCurve                                    CurveCustom;                                                  // 0x0008(0x0080)
    UCurveFloat*                                  CurveShared;                                                  // 0x0088(0x0008)
    TArray<float>                                 WaveTable;                                                    // 0x0090(0x0010)
};


// ScriptStruct  Engine.IndexedCurve
// Struct Size::0x0068
struct FIndexedCurve
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    FKeyHandleMap                                 KeyHandlesToIndices;                                          // 0x0008(0x0060)
};


// ScriptStruct  Engine.KeyHandleMap
// Struct Size::0x0060
struct FKeyHandleMap
{
    char                                          pa_0000[0x0060]                                               // 0x0000(0x0060)
};


// ScriptStruct  Engine.RealCurve
// Struct Size::0x0070
struct FRealCurve : public FIndexedCurve
{
    float                                         DefaultValue;                                                 // 0x0068(0x0004)
    enum class ERichCurveExtrapolation            PreInfinityExtrap;                                            // 0x006C(0x0001)
    enum class ERichCurveExtrapolation            PostInfinityExtrap;                                           // 0x006D(0x0001)
    char                                          pa_006E[0x0002]                                               // 0x006E(0x0002)
};


// ScriptStruct  Engine.RichCurve
// Struct Size::0x0080
struct FRichCurve : public FRealCurve
{
    TArray<FRichCurveKey>                         Keys;                                                         // 0x0070(0x0010)
};


// ScriptStruct  Engine.RichCurveKey
// Struct Size::0x001C
struct FRichCurveKey
{
    enum class ERichCurveInterpMode               InterpMode;                                                   // 0x0000(0x0001)
    enum class ERichCurveTangentMode              TangentMode;                                                  // 0x0001(0x0001)
    enum class ERichCurveTangentWeightMode        TangentWeightMode;                                            // 0x0002(0x0001)
    char                                          pa_0003[0x0001]                                               // 0x0003(0x0001)
    float                                         Time;                                                         // 0x0004(0x0004)
    float                                         Value;                                                        // 0x0008(0x0004)
    float                                         ArriveTangent;                                                // 0x000C(0x0004)
    float                                         ArriveTangentWeight;                                          // 0x0010(0x0004)
    float                                         LeaveTangent;                                                 // 0x0014(0x0004)
    float                                         LeaveTangentWeight;                                           // 0x0018(0x0004)
};


// ScriptStruct  WaveTable.WaveTableSettings
// Struct Size::0x0040
struct FWaveTableSettings
{
    FFilePath                                     FilePath;                                                     // 0x0000(0x0010)
    int32_t                                       ChannelIndex;                                                 // 0x0010(0x0004)
    float                                         Phase;                                                        // 0x0014(0x0004)
    float                                         Top;                                                          // 0x0018(0x0004)
    float                                         Tail;                                                         // 0x001C(0x0004)
    float                                         FadeIn;                                                       // 0x0020(0x0004)
    float                                         FadeOut;                                                      // 0x0024(0x0004)
    bool                                          bNormalize;                                                   // 0x0028(0x0001)
    bool                                          bRemoveOffset;                                                // 0x0029(0x0001)
    char                                          pa_002A[0x0006]                                               // 0x002A(0x0006)
    TArray<float>                                 SourcePCMData;                                                // 0x0030(0x0010)
};


// ScriptStruct  GameplayMessageRuntime.GameplayMessageListenerHandle
// Struct Size::0x0020
struct FGameplayMessageListenerHandle
{
    TWeakObjectPtr<UGameplayMessageSubsystem>     Subsystem;                                                    // 0x0000(0x0008)
    FGameplayTag                                  Channel;                                                      // 0x0008(0x0008)
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    char                                          pa_0014[0x000C]                                               // 0x0014(0x000C)
};


// ScriptStruct  GameplayMessageRuntime.GameplayMessageListenerData
// Struct Size::0x0060
struct FGameplayMessageListenerData
{
    char                                          pa_0000[0x0060]                                               // 0x0000(0x0060)
};


// ScriptStruct  GeometryScriptingCore.GeometryScriptMeshSelection
// Struct Size::0x0010
struct FGeometryScriptMeshSelection
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
};


// ScriptStruct  GeometryScriptingCore.GeometryScriptMeshReadLOD
// Struct Size::0x0008
struct FGeometryScriptMeshReadLOD
{
    enum class EGeometryScriptLODType             LODType;                                                      // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    int32_t                                       LODIndex;                                                     // 0x0004(0x0004)
};


// ScriptStruct  GeometryScriptingCore.GeometryScriptMeshWriteLOD
// Struct Size::0x0008
struct FGeometryScriptMeshWriteLOD
{
    bool                                          bWriteHiResSource;                                            // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    int32_t                                       LODIndex;                                                     // 0x0004(0x0004)
};


// ScriptStruct  GeometryScriptingCore.GeometryScriptTriangle
// Struct Size::0x0048
struct FGeometryScriptTriangle
{
    FVector                                       Vector0;                                                      // 0x0000(0x0018)
    FVector                                       Vector1;                                                      // 0x0018(0x0018)
    FVector                                       Vector2;                                                      // 0x0030(0x0018)
};


// ScriptStruct  GeometryScriptingCore.GeometryScriptTrianglePoint
// Struct Size::0x0038
struct FGeometryScriptTrianglePoint
{
    bool                                          bValid;                                                       // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    int32_t                                       TriangleID;                                                   // 0x0004(0x0004)
    FVector                                       position;                                                     // 0x0008(0x0018)
    FVector                                       BaryCoords;                                                   // 0x0020(0x0018)
};


// ScriptStruct  GeometryScriptingCore.GeometryScriptUVTriangle
// Struct Size::0x0030
struct FGeometryScriptUVTriangle
{
    FVector2D                                     UV0;                                                          // 0x0000(0x0010)
    FVector2D                                     UV1;                                                          // 0x0010(0x0010)
    FVector2D                                     UV2;                                                          // 0x0020(0x0010)
};


// ScriptStruct  GeometryScriptingCore.GeometryScriptColorFlags
// Struct Size::0x0004
struct FGeometryScriptColorFlags
{
    bool                                          bRed;                                                         // 0x0000(0x0001)
    bool                                          bGreen;                                                       // 0x0001(0x0001)
    bool                                          bBlue;                                                        // 0x0002(0x0001)
    bool                                          bAlpha;                                                       // 0x0003(0x0001)
};


// ScriptStruct  GeometryScriptingCore.GeometryScriptGroupLayer
// Struct Size::0x0008
struct FGeometryScriptGroupLayer
{
    bool                                          bDefaultLayer;                                                // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    int32_t                                       ExtendedLayerIndex;                                           // 0x0004(0x0004)
};


// ScriptStruct  GeometryScriptingCore.GeometryScriptIndexList
// Struct Size::0x0018
struct FGeometryScriptIndexList
{
    enum class EGeometryScriptIndexType           IndexType;                                                    // 0x0000(0x0001)
    char                                          pa_0001[0x0017]                                               // 0x0001(0x0017)
};


// ScriptStruct  GeometryScriptingCore.GeometryScriptTriangleList
// Struct Size::0x0010
struct FGeometryScriptTriangleList
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
};


// ScriptStruct  GeometryScriptingCore.GeometryScriptScalarList
// Struct Size::0x0010
struct FGeometryScriptScalarList
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
};


// ScriptStruct  GeometryScriptingCore.GeometryScriptVectorList
// Struct Size::0x0010
struct FGeometryScriptVectorList
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
};


// ScriptStruct  GeometryScriptingCore.GeometryScriptUVList
// Struct Size::0x0010
struct FGeometryScriptUVList
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
};


// ScriptStruct  GeometryScriptingCore.GeometryScriptColorList
// Struct Size::0x0010
struct FGeometryScriptColorList
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
};


// ScriptStruct  GeometryScriptingCore.GeometryScriptPolyPath
// Struct Size::0x0018
struct FGeometryScriptPolyPath
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
    bool                                          bClosedLoop;                                                  // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
};


// ScriptStruct  GeometryScriptingCore.GeometryScriptDynamicMeshBVH
// Struct Size::0x0020
struct FGeometryScriptDynamicMeshBVH
{
    char                                          pa_0000[0x0020]                                               // 0x0000(0x0020)
};


// ScriptStruct  GeometryScriptingCore.GeometryScriptDebugMessage
// Struct Size::0x0020
struct FGeometryScriptDebugMessage
{
    enum class EGeometryScriptDebugMessageType    MessageType;                                                  // 0x0000(0x0001)
    enum class EGeometryScriptErrorType           ErrorType;                                                    // 0x0001(0x0001)
    char                                          pa_0002[0x0006]                                               // 0x0002(0x0006)
    FText                                         Message;                                                      // 0x0008(0x0018)
};


// ScriptStruct  GeometryScriptingCore.GeometryScriptCollisionFromMeshOptions
// Struct Size::0x0030
struct FGeometryScriptCollisionFromMeshOptions
{
    bool                                          bEmitTransaction;                                             // 0x0000(0x0001)
    enum class EGeometryScriptCollisionGenerationMethodMethod;                                                  // 0x0001(0x0001)
    bool                                          bAutoDetectSpheres;                                           // 0x0002(0x0001)
    bool                                          bAutoDetectBoxes;                                             // 0x0003(0x0001)
    bool                                          bAutoDetectCapsules;                                          // 0x0004(0x0001)
    char                                          pa_0005[0x0003]                                               // 0x0005(0x0003)
    float                                         MinThickness;                                                 // 0x0008(0x0004)
    bool                                          bSimplifyHulls;                                               // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
    int32_t                                       ConvexHullTargetFaceCount;                                    // 0x0010(0x0004)
    int32_t                                       MaxConvexHullsPerMesh;                                        // 0x0014(0x0004)
    float                                         ConvexDecompositionSearchFactor;                              // 0x0018(0x0004)
    float                                         ConvexDecompositionErrorTolerance;                            // 0x001C(0x0004)
    float                                         ConvexDecompositionMinPartThickness;                          // 0x0020(0x0004)
    float                                         SweptHullSimplifyTolerance;                                   // 0x0024(0x0004)
    enum class EGeometryScriptSweptHullAxis       SweptHullAxis;                                                // 0x0028(0x0001)
    bool                                          bRemoveFullyContainedShapes;                                  // 0x0029(0x0001)
    char                                          pa_002A[0x0002]                                               // 0x002A(0x0002)
    int32_t                                       MaxShapeCount;                                                // 0x002C(0x0004)
};


// ScriptStruct  GeometryScriptingCore.GeometryScriptSetSimpleCollisionOptions
// Struct Size::0x0001
struct FGeometryScriptSetSimpleCollisionOptions
{
    bool                                          bEmitTransaction;                                             // 0x0000(0x0001)
};


// ScriptStruct  GeometryScriptingCore.GeometryScriptConvexHullOptions
// Struct Size::0x000C
struct FGeometryScriptConvexHullOptions
{
    bool                                          bPrefilterVertices;                                           // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    int32_t                                       PrefilterGridResolution;                                      // 0x0004(0x0004)
    int32_t                                       SimplifyToFaceCount;                                          // 0x0008(0x0004)
};


// ScriptStruct  GeometryScriptingCore.GeometryScriptSweptHullOptions
// Struct Size::0x0018
struct FGeometryScriptSweptHullOptions
{
    bool                                          bPrefilterVertices;                                           // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    int32_t                                       PrefilterGridResolution;                                      // 0x0004(0x0004)
    float                                         MinThickness;                                                 // 0x0008(0x0004)
    bool                                          bSimplify;                                                    // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
    float                                         MinEdgeLength;                                                // 0x0010(0x0004)
    float                                         SimplifyTolerance;                                            // 0x0014(0x0004)
};


// ScriptStruct  GeometryScriptingCore.GeometryScriptConvexDecompositionOptions
// Struct Size::0x0028
struct FGeometryScriptConvexDecompositionOptions
{
    int32_t                                       NumHulls;                                                     // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    double                                        SearchFactor;                                                 // 0x0008(0x0008)
    double                                        ErrorTolerance;                                               // 0x0010(0x0008)
    double                                        MinPartThickness;                                             // 0x0018(0x0008)
    int32_t                                       SimplifyToFaceCount;                                          // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
};


// ScriptStruct  GeometryScriptingCore.GeometryScriptCopyMeshFromAssetOptions
// Struct Size::0x0003
struct FGeometryScriptCopyMeshFromAssetOptions
{
    bool                                          bApplyBuildSettings;                                          // 0x0000(0x0001)
    bool                                          bRequestTangents;                                             // 0x0001(0x0001)
    bool                                          bIgnoreRemoveDegenerates;                                     // 0x0002(0x0001)
};


// ScriptStruct  GeometryScriptingCore.GeometryScriptNaniteOptions
// Struct Size::0x000C
struct FGeometryScriptNaniteOptions
{
    bool                                          bEnabled;                                                     // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         FallbackPercentTriangles;                                     // 0x0004(0x0004)
    float                                         FallbackRelativeError;                                        // 0x0008(0x0004)
};


// ScriptStruct  GeometryScriptingCore.GeometryScriptCopyMeshToAssetOptions
// Struct Size::0x0058
struct FGeometryScriptCopyMeshToAssetOptions
{
    bool                                          bEnableRecomputeNormals;                                      // 0x0000(0x0001)
    bool                                          bEnableRecomputeTangents;                                     // 0x0001(0x0001)
    bool                                          bEnableRemoveDegenerates;                                     // 0x0002(0x0001)
    bool                                          bReplaceMaterials;                                            // 0x0003(0x0001)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    TArray<UMaterialInterface*>                   NewMaterials;                                                 // 0x0008(0x0010)
    TArray<FName>                                 NewMaterialSlotNames;                                         // 0x0018(0x0010)
    bool                                          bApplyNaniteSettings;                                         // 0x0028(0x0001)
    char                                          pa_0029[0x0003]                                               // 0x0029(0x0003)
    FGeometryScriptNaniteOptions                  NaniteSettings;                                               // 0x002C(0x000C)
    FMeshNaniteSettings                           NewNaniteSettings;                                            // 0x0038(0x001C)
    bool                                          bEmitTransaction;                                             // 0x0054(0x0001)
    bool                                          bDeferMeshPostEditChange;                                     // 0x0055(0x0001)
    char                                          pa_0056[0x0002]                                               // 0x0056(0x0002)
};


// ScriptStruct  Engine.MeshNaniteSettings
// Struct Size::0x001C
struct FMeshNaniteSettings
{
    char                                          bEnabled;                                                     // 0x0000(0x0001)
    char                                          bPreserveArea;                                                // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    int32_t                                       PositionPrecision;                                            // 0x0004(0x0004)
    uint32_t                                      TargetMinimumResidencyInKB;                                   // 0x0008(0x0004)
    float                                         KeepPercentTriangles;                                         // 0x000C(0x0004)
    float                                         TrimRelativeError;                                            // 0x0010(0x0004)
    float                                         FallbackPercentTriangles;                                     // 0x0014(0x0004)
    float                                         FallbackRelativeError;                                        // 0x0018(0x0004)
};


// ScriptStruct  GeometryScriptingCore.GeometryScriptBakeTypeOptions
// Struct Size::0x0018
struct FGeometryScriptBakeTypeOptions
{
    enum class EGeometryScriptBakeTypes           BakeType;                                                     // 0x0000(0x0001)
    char                                          pa_0001[0x0017]                                               // 0x0001(0x0017)
};


// ScriptStruct  GeometryScriptingCore.GeometryScriptBakeTextureOptions
// Struct Size::0x0018
struct FGeometryScriptBakeTextureOptions
{
    enum class EGeometryScriptBakeResolution      Resolution;                                                   // 0x0000(0x0001)
    enum class EGeometryScriptBakeBitDepth        BitDepth;                                                     // 0x0001(0x0001)
    enum class EGeometryScriptBakeSamplesPerPixel SamplesPerPixel;                                              // 0x0002(0x0001)
    char                                          pa_0003[0x0005]                                               // 0x0003(0x0005)
    UTexture2D*                                   SampleFilterMask;                                             // 0x0008(0x0008)
    float                                         ProjectionDistance;                                           // 0x0010(0x0004)
    bool                                          bProjectionInWorldSpace;                                      // 0x0014(0x0001)
    char                                          pa_0015[0x0003]                                               // 0x0015(0x0003)
};


// ScriptStruct  GeometryScriptingCore.GeometryScriptBakeVertexOptions
// Struct Size::0x000C
struct FGeometryScriptBakeVertexOptions
{
    bool                                          bSplitAtNormalSeams;                                          // 0x0000(0x0001)
    bool                                          bSplitAtUVSeams;                                              // 0x0001(0x0001)
    char                                          pa_0002[0x0002]                                               // 0x0002(0x0002)
    float                                         ProjectionDistance;                                           // 0x0004(0x0004)
    bool                                          bProjectionInWorldSpace;                                      // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
};


// ScriptStruct  GeometryScriptingCore.GeometryScriptBakeOutputType
// Struct Size::0x0080
struct FGeometryScriptBakeOutputType
{
    enum class EGeometryScriptBakeOutputMode      OutputMode;                                                   // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    FGeometryScriptBakeTypeOptions                RGBA;                                                         // 0x0008(0x0018)
    FGeometryScriptBakeTypeOptions                R;                                                            // 0x0020(0x0018)
    FGeometryScriptBakeTypeOptions                G;                                                            // 0x0038(0x0018)
    FGeometryScriptBakeTypeOptions                B;                                                            // 0x0050(0x0018)
    FGeometryScriptBakeTypeOptions                A;                                                            // 0x0068(0x0018)
};


// ScriptStruct  GeometryScriptingCore.GeometryScriptBakeTargetMeshOptions
// Struct Size::0x0004
struct FGeometryScriptBakeTargetMeshOptions
{
    int32_t                                       TargetUVLayer;                                                // 0x0000(0x0004)
};


// ScriptStruct  GeometryScriptingCore.GeometryScriptBakeSourceMeshOptions
// Struct Size::0x0010
struct FGeometryScriptBakeSourceMeshOptions
{
    UTexture2D*                                   SourceNormalMap;                                              // 0x0000(0x0008)
    int32_t                                       SourceNormalUVLayer;                                          // 0x0008(0x0004)
    enum class EGeometryScriptBakeNormalSpace     SourceNormalSpace;                                            // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
};


// ScriptStruct  GeometryScriptingCore.GeometryScriptSimpleMeshBuffers
// Struct Size::0x00D0
struct FGeometryScriptSimpleMeshBuffers
{
    TArray<FVector>                               Vertices;                                                     // 0x0000(0x0010)
    TArray<FVector>                               Normals;                                                      // 0x0010(0x0010)
    TArray<FVector2D>                             UV0;                                                          // 0x0020(0x0010)
    TArray<FVector2D>                             UV1;                                                          // 0x0030(0x0010)
    TArray<FVector2D>                             UV2;                                                          // 0x0040(0x0010)
    TArray<FVector2D>                             UV3;                                                          // 0x0050(0x0010)
    TArray<FVector2D>                             UV4;                                                          // 0x0060(0x0010)
    TArray<FVector2D>                             UV5;                                                          // 0x0070(0x0010)
    TArray<FVector2D>                             UV6;                                                          // 0x0080(0x0010)
    TArray<FVector2D>                             UV7;                                                          // 0x0090(0x0010)
    TArray<FLinearColor>                          VertexColors;                                                 // 0x00A0(0x0010)
    TArray<FIntVector>                            Triangles;                                                    // 0x00B0(0x0010)
    TArray<int32_t>                               TriGroupIDs;                                                  // 0x00C0(0x0010)
};


// ScriptStruct  GeometryScriptingCore.GeometryScriptAppendMeshOptions
// Struct Size::0x0001
struct FGeometryScriptAppendMeshOptions
{
    enum class EGeometryScriptCombineAttributesModeCombineMode;                                                 // 0x0000(0x0001)
};


// ScriptStruct  GeometryScriptingCore.GeometryScriptMeshBooleanOptions
// Struct Size::0x0008
struct FGeometryScriptMeshBooleanOptions
{
    bool                                          bFillHoles;                                                   // 0x0000(0x0001)
    bool                                          bSimplifyOutput;                                              // 0x0001(0x0001)
    char                                          pa_0002[0x0002]                                               // 0x0002(0x0002)
    float                                         SimplifyPlanarTolerance;                                      // 0x0004(0x0004)
};


// ScriptStruct  GeometryScriptingCore.GeometryScriptMeshSelfUnionOptions
// Struct Size::0x000C
struct FGeometryScriptMeshSelfUnionOptions
{
    bool                                          bFillHoles;                                                   // 0x0000(0x0001)
    bool                                          bTrimFlaps;                                                   // 0x0001(0x0001)
    bool                                          bSimplifyOutput;                                              // 0x0002(0x0001)
    char                                          pa_0003[0x0001]                                               // 0x0003(0x0001)
    float                                         SimplifyPlanarTolerance;                                      // 0x0004(0x0004)
    float                                         WindingThreshold;                                             // 0x0008(0x0004)
};


// ScriptStruct  GeometryScriptingCore.GeometryScriptMeshPlaneCutOptions
// Struct Size::0x0008
struct FGeometryScriptMeshPlaneCutOptions
{
    bool                                          bFillHoles;                                                   // 0x0000(0x0001)
    bool                                          bFillSpans;                                                   // 0x0001(0x0001)
    bool                                          bFlipCutSide;                                                 // 0x0002(0x0001)
    char                                          pa_0003[0x0001]                                               // 0x0003(0x0001)
    float                                         UVWorldDimension;                                             // 0x0004(0x0004)
};


// ScriptStruct  GeometryScriptingCore.GeometryScriptMeshPlaneSliceOptions
// Struct Size::0x000C
struct FGeometryScriptMeshPlaneSliceOptions
{
    bool                                          bFillHoles;                                                   // 0x0000(0x0001)
    bool                                          bFillSpans;                                                   // 0x0001(0x0001)
    char                                          pa_0002[0x0002]                                               // 0x0002(0x0002)
    float                                         GapWidth;                                                     // 0x0004(0x0004)
    float                                         UVWorldDimension;                                             // 0x0008(0x0004)
};


// ScriptStruct  GeometryScriptingCore.GeometryScriptMeshMirrorOptions
// Struct Size::0x0003
struct FGeometryScriptMeshMirrorOptions
{
    bool                                          bApplyPlaneCut;                                               // 0x0000(0x0001)
    bool                                          bFlipCutSide;                                                 // 0x0001(0x0001)
    bool                                          bWeldAlongPlane;                                              // 0x0002(0x0001)
};


// ScriptStruct  GeometryScriptingCore.GeometryScriptIsSameMeshOptions
// Struct Size::0x000C
struct FGeometryScriptIsSameMeshOptions
{
    bool                                          bCheckConnectivity;                                           // 0x0000(0x0001)
    bool                                          bCheckEdgeIDs;                                                // 0x0001(0x0001)
    bool                                          bCheckNormals;                                                // 0x0002(0x0001)
    bool                                          bCheckColors;                                                 // 0x0003(0x0001)
    bool                                          bCheckUVs;                                                    // 0x0004(0x0001)
    bool                                          bCheckGroups;                                                 // 0x0005(0x0001)
    bool                                          bCheckAttributes;                                             // 0x0006(0x0001)
    char                                          pa_0007[0x0001]                                               // 0x0007(0x0001)
    float                                         Epsilon;                                                      // 0x0008(0x0004)
};


// ScriptStruct  GeometryScriptingCore.GeometryScriptMeasureMeshDistanceOptions
// Struct Size::0x0001
struct FGeometryScriptMeasureMeshDistanceOptions
{
    bool                                          bSymmetric;                                                   // 0x0000(0x0001)
};


// ScriptStruct  GeometryScriptingCore.GeometryScriptBendWarpOptions
// Struct Size::0x000C
struct FGeometryScriptBendWarpOptions
{
    bool                                          bSymmetricExtents;                                            // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         LowerExtent;                                                  // 0x0004(0x0004)
    bool                                          bBidirectional;                                               // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
};


// ScriptStruct  GeometryScriptingCore.GeometryScriptTwistWarpOptions
// Struct Size::0x000C
struct FGeometryScriptTwistWarpOptions
{
    bool                                          bSymmetricExtents;                                            // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         LowerExtent;                                                  // 0x0004(0x0004)
    bool                                          bBidirectional;                                               // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
};


// ScriptStruct  GeometryScriptingCore.GeometryScriptFlareWarpOptions
// Struct Size::0x000C
struct FGeometryScriptFlareWarpOptions
{
    bool                                          bSymmetricExtents;                                            // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         LowerExtent;                                                  // 0x0004(0x0004)
    enum class EGeometryScriptFlareType           FlareType;                                                    // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
};


// ScriptStruct  GeometryScriptingCore.GeometryScriptPerlinNoiseLayerOptions
// Struct Size::0x0028
struct FGeometryScriptPerlinNoiseLayerOptions
{
    float                                         Magnitude;                                                    // 0x0000(0x0004)
    float                                         Frequency;                                                    // 0x0004(0x0004)
    FVector                                       FrequencyShift;                                               // 0x0008(0x0018)
    int32_t                                       RandomSeed;                                                   // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
};


// ScriptStruct  GeometryScriptingCore.GeometryScriptMathWarpOptions
// Struct Size::0x000C
struct FGeometryScriptMathWarpOptions
{
    float                                         Magnitude;                                                    // 0x0000(0x0004)
    float                                         Frequency;                                                    // 0x0004(0x0004)
    float                                         FrequencyShift;                                               // 0x0008(0x0004)
};


// ScriptStruct  GeometryScriptingCore.GeometryScriptPerlinNoiseOptions
// Struct Size::0x0030
struct FGeometryScriptPerlinNoiseOptions
{
    FGeometryScriptPerlinNoiseLayerOptions        BaseLayer;                                                    // 0x0000(0x0028)
    bool                                          bApplyAlongNormal;                                            // 0x0028(0x0001)
    enum class EGeometryScriptEmptySelectionBehaviorEmptyBehavior;                                              // 0x0029(0x0001)
    char                                          pa_002A[0x0006]                                               // 0x002A(0x0006)
};


// ScriptStruct  GeometryScriptingCore.GeometryScriptIterativeMeshSmoothingOptions
// Struct Size::0x000C
struct FGeometryScriptIterativeMeshSmoothingOptions
{
    int32_t                                       NumIterations;                                                // 0x0000(0x0004)
    float                                         Alpha;                                                        // 0x0004(0x0004)
    enum class EGeometryScriptEmptySelectionBehaviorEmptyBehavior;                                              // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
};


// ScriptStruct  GeometryScriptingCore.GeometryScriptDisplaceFromTextureOptions
// Struct Size::0x0038
struct FGeometryScriptDisplaceFromTextureOptions
{
    float                                         Magnitude;                                                    // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FVector2D                                     UVScale;                                                      // 0x0008(0x0010)
    FVector2D                                     UVOffset;                                                     // 0x0018(0x0010)
    float                                         Center;                                                       // 0x0028(0x0004)
    int32_t                                       ImageChannel;                                                 // 0x002C(0x0004)
    enum class EGeometryScriptEmptySelectionBehaviorEmptyBehavior;                                              // 0x0030(0x0001)
    char                                          pa_0031[0x0007]                                               // 0x0031(0x0007)
};


// ScriptStruct  GeometryScriptingCore.GeometryScriptMeshEditPolygroupOptions
// Struct Size::0x0008
struct FGeometryScriptMeshEditPolygroupOptions
{
    enum class EGeometryScriptMeshEditPolygroupModeGroupMode;                                                   // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    int32_t                                       ConstantGroup;                                                // 0x0004(0x0004)
};


// ScriptStruct  GeometryScriptingCore.GeometryScriptMeshOffsetOptions
// Struct Size::0x0018
struct FGeometryScriptMeshOffsetOptions
{
    float                                         OffsetDistance;                                               // 0x0000(0x0004)
    bool                                          bFixedBoundary;                                               // 0x0004(0x0001)
    char                                          pa_0005[0x0003]                                               // 0x0005(0x0003)
    int32_t                                       SolveSteps;                                                   // 0x0008(0x0004)
    float                                         SmoothAlpha;                                                  // 0x000C(0x0004)
    bool                                          bReprojectDuringSmoothing;                                    // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
    float                                         BoundaryAlpha;                                                // 0x0014(0x0004)
};


// ScriptStruct  GeometryScriptingCore.GeometryScriptMeshExtrudeOptions
// Struct Size::0x0028
struct FGeometryScriptMeshExtrudeOptions
{
    float                                         ExtrudeDistance;                                              // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FVector                                       ExtrudeDirection;                                             // 0x0008(0x0018)
    float                                         UVScale;                                                      // 0x0020(0x0004)
    bool                                          bSolidsToShells;                                              // 0x0024(0x0001)
    char                                          pa_0025[0x0003]                                               // 0x0025(0x0003)
};


// ScriptStruct  GeometryScriptingCore.GeometryScriptMeshLinearExtrudeOptions
// Struct Size::0x0038
struct FGeometryScriptMeshLinearExtrudeOptions
{
    float                                         Distance;                                                     // 0x0000(0x0004)
    enum class EGeometryScriptLinearExtrudeDirectionDirectionMode;                                              // 0x0004(0x0001)
    char                                          pa_0005[0x0003]                                               // 0x0005(0x0003)
    FVector                                       Direction;                                                    // 0x0008(0x0018)
    enum class EGeometryScriptPolyOperationArea   AreaMode;                                                     // 0x0020(0x0001)
    char                                          pa_0021[0x0003]                                               // 0x0021(0x0003)
    FGeometryScriptMeshEditPolygroupOptions       GroupOptions;                                                 // 0x0024(0x0008)
    float                                         UVScale;                                                      // 0x002C(0x0004)
    bool                                          bSolidsToShells;                                              // 0x0030(0x0001)
    char                                          pa_0031[0x0007]                                               // 0x0031(0x0007)
};


// ScriptStruct  GeometryScriptingCore.GeometryScriptMeshOffsetFacesOptions
// Struct Size::0x0018
struct FGeometryScriptMeshOffsetFacesOptions
{
    float                                         Distance;                                                     // 0x0000(0x0004)
    enum class EGeometryScriptOffsetFacesType     OffsetType;                                                   // 0x0004(0x0001)
    enum class EGeometryScriptPolyOperationArea   AreaMode;                                                     // 0x0005(0x0001)
    char                                          pa_0006[0x0002]                                               // 0x0006(0x0002)
    FGeometryScriptMeshEditPolygroupOptions       GroupOptions;                                                 // 0x0008(0x0008)
    float                                         UVScale;                                                      // 0x0010(0x0004)
    bool                                          bSolidsToShells;                                              // 0x0014(0x0001)
    char                                          pa_0015[0x0003]                                               // 0x0015(0x0003)
};


// ScriptStruct  GeometryScriptingCore.GeometryScriptMeshInsetOutsetFacesOptions
// Struct Size::0x0020
struct FGeometryScriptMeshInsetOutsetFacesOptions
{
    float                                         Distance;                                                     // 0x0000(0x0004)
    bool                                          bReproject;                                                   // 0x0004(0x0001)
    bool                                          bBoundaryOnly;                                                // 0x0005(0x0001)
    char                                          pa_0006[0x0002]                                               // 0x0006(0x0002)
    float                                         Softness;                                                     // 0x0008(0x0004)
    float                                         AreaScale;                                                    // 0x000C(0x0004)
    enum class EGeometryScriptPolyOperationArea   AreaMode;                                                     // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
    FGeometryScriptMeshEditPolygroupOptions       GroupOptions;                                                 // 0x0014(0x0008)
    float                                         UVScale;                                                      // 0x001C(0x0004)
};


// ScriptStruct  GeometryScriptingCore.GeometryScriptMeshBevelOptions
// Struct Size::0x00C0
struct FGeometryScriptMeshBevelOptions
{
    float                                         BevelDistance;                                                // 0x0000(0x0004)
    bool                                          bInferMaterialID;                                             // 0x0004(0x0001)
    char                                          pa_0005[0x0003]                                               // 0x0005(0x0003)
    int32_t                                       SetMaterialID;                                                // 0x0008(0x0004)
    bool                                          bApplyFilterBox;                                              // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
    FBox                                          FilterBox;                                                    // 0x0010(0x0038)
    char                                          pa_0048[0x0008]                                               // 0x0048(0x0008)
    FTransform                                    FilterBoxTransform;                                           // 0x0050(0x0060)
    bool                                          bFullyContained;                                              // 0x00B0(0x0001)
    char                                          pa_00B1[0x000F]                                               // 0x00B1(0x000F)
};


// ScriptStruct  GeometryScriptingCore.GeometryScriptMeshBevelSelectionOptions
// Struct Size::0x000C
struct FGeometryScriptMeshBevelSelectionOptions
{
    float                                         BevelDistance;                                                // 0x0000(0x0004)
    bool                                          bInferMaterialID;                                             // 0x0004(0x0001)
    char                                          pa_0005[0x0003]                                               // 0x0005(0x0003)
    int32_t                                       SetMaterialID;                                                // 0x0008(0x0004)
};


// ScriptStruct  GeometryScriptingCore.GeometryScriptCalculateNormalsOptions
// Struct Size::0x0002
struct FGeometryScriptCalculateNormalsOptions
{
    bool                                          bAngleWeighted;                                               // 0x0000(0x0001)
    bool                                          bAreaWeighted;                                                // 0x0001(0x0001)
};


// ScriptStruct  GeometryScriptingCore.GeometryScriptSplitNormalsOptions
// Struct Size::0x0014
struct FGeometryScriptSplitNormalsOptions
{
    bool                                          bSplitByOpeningAngle;                                         // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         OpeningAngleDeg;                                              // 0x0004(0x0004)
    bool                                          bSplitByFaceGroup;                                            // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
    FGeometryScriptGroupLayer                     GroupLayer;                                                   // 0x000C(0x0008)
};


// ScriptStruct  GeometryScriptingCore.GeometryScriptTangentsOptions
// Struct Size::0x0008
struct FGeometryScriptTangentsOptions
{
    enum class EGeometryScriptTangentTypes        Type;                                                         // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    int32_t                                       UVLayer;                                                      // 0x0004(0x0004)
};


// ScriptStruct  GeometryScriptingCore.GeometryScriptPrimitiveOptions
// Struct Size::0x0003
struct FGeometryScriptPrimitiveOptions
{
    enum class EGeometryScriptPrimitivePolygroupModePolygroupMode;                                              // 0x0000(0x0001)
    bool                                          bFlipOrientation;                                             // 0x0001(0x0001)
    enum class EGeometryScriptPrimitiveUVMode     UVMode;                                                       // 0x0002(0x0001)
};


// ScriptStruct  GeometryScriptingCore.GeometryScriptRevolveOptions
// Struct Size::0x0014
struct FGeometryScriptRevolveOptions
{
    float                                         RevolveDegrees;                                               // 0x0000(0x0004)
    float                                         DegreeOffset;                                                 // 0x0004(0x0004)
    bool                                          bReverseDirection;                                            // 0x0008(0x0001)
    bool                                          bHardNormals;                                                 // 0x0009(0x0001)
    char                                          pa_000A[0x0002]                                               // 0x000A(0x0002)
    float                                         HardNormalAngle;                                              // 0x000C(0x0004)
    bool                                          bProfileAtMidpoint;                                           // 0x0010(0x0001)
    bool                                          bFillPartialRevolveEndcaps;                                   // 0x0011(0x0001)
    char                                          pa_0012[0x0002]                                               // 0x0012(0x0002)
};


// ScriptStruct  GeometryScriptingCore.GeometryScriptVoronoiOptions
// Struct Size::0x0058
struct FGeometryScriptVoronoiOptions
{
    float                                         BoundsExpand;                                                 // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FBox                                          Bounds;                                                       // 0x0008(0x0038)
    TArray<int32_t>                               CreateCells;                                                  // 0x0040(0x0010)
    bool                                          bIncludeBoundary;                                             // 0x0050(0x0001)
    char                                          pa_0051[0x0007]                                               // 0x0051(0x0007)
};


// ScriptStruct  GeometryScriptingCore.GeometryScriptRemeshOptions
// Struct Size::0x001C
struct FGeometryScriptRemeshOptions
{
    bool                                          bDiscardAttributes;                                           // 0x0000(0x0001)
    bool                                          bReprojectToInputMesh;                                        // 0x0001(0x0001)
    enum class EGeometryScriptRemeshSmoothingType SmoothingType;                                                // 0x0002(0x0001)
    char                                          pa_0003[0x0001]                                               // 0x0003(0x0001)
    float                                         SmoothingRate;                                                // 0x0004(0x0004)
    enum class EGeometryScriptRemeshEdgeConstraintTypeMeshBoundaryConstraint;                                   // 0x0008(0x0001)
    enum class EGeometryScriptRemeshEdgeConstraintTypeGroupBoundaryConstraint;                                  // 0x0009(0x0001)
    enum class EGeometryScriptRemeshEdgeConstraintTypeMaterialBoundaryConstraint;                               // 0x000A(0x0001)
    bool                                          bAllowFlips;                                                  // 0x000B(0x0001)
    bool                                          bAllowSplits;                                                 // 0x000C(0x0001)
    bool                                          bAllowCollapses;                                              // 0x000D(0x0001)
    bool                                          bPreventNormalFlips;                                          // 0x000E(0x0001)
    bool                                          bPreventTinyTriangles;                                        // 0x000F(0x0001)
    bool                                          bUseFullRemeshPasses;                                         // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
    int32_t                                       RemeshIterations;                                             // 0x0014(0x0004)
    bool                                          bAutoCompact;                                                 // 0x0018(0x0001)
    char                                          pa_0019[0x0003]                                               // 0x0019(0x0003)
};


// ScriptStruct  GeometryScriptingCore.GeometryScriptUniformRemeshOptions
// Struct Size::0x000C
struct FGeometryScriptUniformRemeshOptions
{
    enum class EGeometryScriptUniformRemeshTargetTypeTargetType;                                                // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    int32_t                                       TargetTriangleCount;                                          // 0x0004(0x0004)
    float                                         TargetEdgeLength;                                             // 0x0008(0x0004)
};


// ScriptStruct  GeometryScriptingCore.GeometryScriptWeldEdgesOptions
// Struct Size::0x0008
struct FGeometryScriptWeldEdgesOptions
{
    float                                         Tolerance;                                                    // 0x0000(0x0004)
    bool                                          bOnlyUniquePairs;                                             // 0x0004(0x0001)
    char                                          pa_0005[0x0003]                                               // 0x0005(0x0003)
};


// ScriptStruct  GeometryScriptingCore.GeometryScriptResolveTJunctionOptions
// Struct Size::0x0004
struct FGeometryScriptResolveTJunctionOptions
{
    float                                         Tolerance;                                                    // 0x0000(0x0004)
};


// ScriptStruct  GeometryScriptingCore.GeometryScriptFillHolesOptions
// Struct Size::0x0002
struct FGeometryScriptFillHolesOptions
{
    enum class EGeometryScriptFillHolesMethod     FillMethod;                                                   // 0x0000(0x0001)
    char                                          pa_0001[0x0001]                                               // 0x0001(0x0001)
};


// ScriptStruct  GeometryScriptingCore.GeometryScriptRemoveSmallComponentOptions
// Struct Size::0x000C
struct FGeometryScriptRemoveSmallComponentOptions
{
    float                                         MinVolume;                                                    // 0x0000(0x0004)
    float                                         MinArea;                                                      // 0x0004(0x0004)
    int32_t                                       MinTriangleCount;                                             // 0x0008(0x0004)
};


// ScriptStruct  GeometryScriptingCore.GeometryScriptRemoveHiddenTrianglesOptions
// Struct Size::0x001C
struct FGeometryScriptRemoveHiddenTrianglesOptions
{
    enum class EGeometryScriptRemoveHiddenTrianglesMethodMethod;                                                // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    int32_t                                       SamplesPerTriangle;                                           // 0x0004(0x0004)
    int32_t                                       ShrinkSelection;                                              // 0x0008(0x0004)
    float                                         WindingIsoValue;                                              // 0x000C(0x0004)
    int32_t                                       RaysPerSample;                                                // 0x0010(0x0004)
    float                                         NormalOffset;                                                 // 0x0014(0x0004)
    bool                                          bCompactResult;                                               // 0x0018(0x0001)
    char                                          pa_0019[0x0003]                                               // 0x0019(0x0003)
};


// ScriptStruct  GeometryScriptingCore.GeometryScriptDegenerateTriangleOptions
// Struct Size::0x0020
struct FGeometryScriptDegenerateTriangleOptions
{
    enum class EGeometryScriptRepairMeshMode      Mode;                                                         // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    double                                        MinTriangleArea;                                              // 0x0008(0x0008)
    double                                        MinEdgeLength;                                                // 0x0010(0x0008)
    bool                                          bCompactOnCompletion;                                         // 0x0018(0x0001)
    char                                          pa_0019[0x0007]                                               // 0x0019(0x0007)
};


// ScriptStruct  GeometryScriptingCore.GeometryScriptPlanarSimplifyOptions
// Struct Size::0x0008
struct FGeometryScriptPlanarSimplifyOptions
{
    float                                         AngleThreshold;                                               // 0x0000(0x0004)
    bool                                          bAutoCompact;                                                 // 0x0004(0x0001)
    char                                          pa_0005[0x0003]                                               // 0x0005(0x0003)
};


// ScriptStruct  GeometryScriptingCore.GeometryScriptPolygroupSimplifyOptions
// Struct Size::0x0008
struct FGeometryScriptPolygroupSimplifyOptions
{
    float                                         AngleThreshold;                                               // 0x0000(0x0004)
    bool                                          bAutoCompact;                                                 // 0x0004(0x0001)
    char                                          pa_0005[0x0003]                                               // 0x0005(0x0003)
};


// ScriptStruct  GeometryScriptingCore.GeometryScriptSimplifyMeshOptions
// Struct Size::0x0007
struct FGeometryScriptSimplifyMeshOptions
{
    enum class EGeometryScriptRemoveMeshSimplificationTypeMethod;                                               // 0x0000(0x0001)
    bool                                          bAllowSeamCollapse;                                           // 0x0001(0x0001)
    bool                                          bAllowSeamSmoothing;                                          // 0x0002(0x0001)
    bool                                          bAllowSeamSplits;                                             // 0x0003(0x0001)
    bool                                          bPreserveVertexPositions;                                     // 0x0004(0x0001)
    bool                                          bRetainQuadricMemory;                                         // 0x0005(0x0001)
    bool                                          bAutoCompact;                                                 // 0x0006(0x0001)
};


// ScriptStruct  GeometryScriptingCore.GeometryScriptSpatialQueryOptions
// Struct Size::0x000C
struct FGeometryScriptSpatialQueryOptions
{
    float                                         MaxDistance;                                                  // 0x0000(0x0004)
    bool                                          bAllowUnsafeModifiedQueries;                                  // 0x0004(0x0001)
    char                                          pa_0005[0x0003]                                               // 0x0005(0x0003)
    float                                         WindingIsoThreshold;                                          // 0x0008(0x0004)
};


// ScriptStruct  GeometryScriptingCore.GeometryScriptRayHitResult
// Struct Size::0x0040
struct FGeometryScriptRayHitResult
{
    bool                                          bHit;                                                         // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         RayParameter;                                                 // 0x0004(0x0004)
    int32_t                                       HitTriangleID;                                                // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FVector                                       HitPosition;                                                  // 0x0010(0x0018)
    FVector                                       HitBaryCoords;                                                // 0x0028(0x0018)
};


// ScriptStruct  GeometryScriptingCore.GeometryScriptPNTessellateOptions
// Struct Size::0x0001
struct FGeometryScriptPNTessellateOptions
{
    bool                                          bRecomputeNormals;                                            // 0x0000(0x0001)
};


// ScriptStruct  GeometryScriptingCore.GeometryScriptSelectiveTessellateOptions
// Struct Size::0x0002
struct FGeometryScriptSelectiveTessellateOptions
{
    bool                                          bEnableMultithreading;                                        // 0x0000(0x0001)
    enum class EGeometryScriptEmptySelectionBehaviorEmptyBehavior;                                              // 0x0001(0x0001)
};


// ScriptStruct  GeometryScriptingCore.GeometryScriptRepackUVsOptions
// Struct Size::0x0008
struct FGeometryScriptRepackUVsOptions
{
    int32_t                                       TargetImageWidth;                                             // 0x0000(0x0004)
    bool                                          bOptimizeIslandRotation;                                      // 0x0004(0x0001)
    char                                          pa_0005[0x0003]                                               // 0x0005(0x0003)
};


// ScriptStruct  GeometryScriptingCore.GeometryScriptExpMapUVOptions
// Struct Size::0x0008
struct FGeometryScriptExpMapUVOptions
{
    int32_t                                       NormalSmoothingRounds;                                        // 0x0000(0x0004)
    float                                         NormalSmoothingAlpha;                                         // 0x0004(0x0004)
};


// ScriptStruct  GeometryScriptingCore.GeometryScriptSpectralConformalUVOptions
// Struct Size::0x0001
struct FGeometryScriptSpectralConformalUVOptions
{
    bool                                          bPreserveIrregularity;                                        // 0x0000(0x0001)
};


// ScriptStruct  GeometryScriptingCore.GeometryScriptRecomputeUVsOptions
// Struct Size::0x001C
struct FGeometryScriptRecomputeUVsOptions
{
    enum class EGeometryScriptUVFlattenMethod     Method;                                                       // 0x0000(0x0001)
    enum class EGeometryScriptUVIslandSource      IslandSource;                                                 // 0x0001(0x0001)
    char                                          pa_0002[0x0002]                                               // 0x0002(0x0002)
    FGeometryScriptExpMapUVOptions                ExpMapOptions;                                                // 0x0004(0x0008)
    FGeometryScriptSpectralConformalUVOptions     SpectralConformalOptions;                                     // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
    FGeometryScriptGroupLayer                     GroupLayer;                                                   // 0x0010(0x0008)
    bool                                          bAutoAlignIslandsWithAxes;                                    // 0x0018(0x0001)
    char                                          pa_0019[0x0003]                                               // 0x0019(0x0003)
};


// ScriptStruct  GeometryScriptingCore.GeometryScriptPatchBuilderOptions
// Struct Size::0x0034
struct FGeometryScriptPatchBuilderOptions
{
    int32_t                                       InitialPatchCount;                                            // 0x0000(0x0004)
    int32_t                                       MinPatchSize;                                                 // 0x0004(0x0004)
    float                                         PatchCurvatureAlignmentWeight;                                // 0x0008(0x0004)
    float                                         PatchMergingMetricThresh;                                     // 0x000C(0x0004)
    float                                         PatchMergingAngleThresh;                                      // 0x0010(0x0004)
    FGeometryScriptExpMapUVOptions                ExpMapOptions;                                                // 0x0014(0x0008)
    bool                                          bRespectInputGroups;                                          // 0x001C(0x0001)
    char                                          pa_001D[0x0003]                                               // 0x001D(0x0003)
    FGeometryScriptGroupLayer                     GroupLayer;                                                   // 0x0020(0x0008)
    bool                                          bAutoPack;                                                    // 0x0028(0x0001)
    char                                          pa_0029[0x0003]                                               // 0x0029(0x0003)
    FGeometryScriptRepackUVsOptions               PackingOptions;                                               // 0x002C(0x0008)
};


// ScriptStruct  GeometryScriptingCore.GeometryScriptXAtlasOptions
// Struct Size::0x0004
struct FGeometryScriptXAtlasOptions
{
    int32_t                                       MaxIterations;                                                // 0x0000(0x0004)
};


// ScriptStruct  GeometryScriptingCore.GeometryScript3DGridParameters
// Struct Size::0x000C
struct FGeometryScript3DGridParameters
{
    enum class EGeometryScriptGridSizingMethod    SizeMethod;                                                   // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         GridCellSize;                                                 // 0x0004(0x0004)
    int32_t                                       GridResolution;                                               // 0x0008(0x0004)
};


// ScriptStruct  GeometryScriptingCore.GeometryScriptSolidifyOptions
// Struct Size::0x0028
struct FGeometryScriptSolidifyOptions
{
    FGeometryScript3DGridParameters               GridParameters;                                               // 0x0000(0x000C)
    float                                         WindingThreshold;                                             // 0x000C(0x0004)
    bool                                          bSolidAtBoundaries;                                           // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
    float                                         ExtendBounds;                                                 // 0x0014(0x0004)
    int32_t                                       SurfaceSearchSteps;                                           // 0x0018(0x0004)
    bool                                          bThickenShells;                                               // 0x001C(0x0001)
    char                                          pa_001D[0x0003]                                               // 0x001D(0x0003)
    double                                        ShellThickness;                                               // 0x0020(0x0008)
};


// ScriptStruct  GeometryScriptingCore.GeometryScriptMorphologyOptions
// Struct Size::0x0024
struct FGeometryScriptMorphologyOptions
{
    FGeometryScript3DGridParameters               SDFGridParameters;                                            // 0x0000(0x000C)
    bool                                          bUseSeparateMeshGrid;                                         // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
    FGeometryScript3DGridParameters               MeshGridParameters;                                           // 0x0010(0x000C)
    enum class EGeometryScriptMorphologicalOpType Operation;                                                    // 0x001C(0x0001)
    char                                          pa_001D[0x0003]                                               // 0x001D(0x0003)
    float                                         Distance;                                                     // 0x0020(0x0004)
};


// ScriptStruct  GeometryScriptingCore.GeometryScriptSplineSamplingOptions
// Struct Size::0x000C
struct FGeometryScriptSplineSamplingOptions
{
    int32_t                                       NumSamples;                                                   // 0x0000(0x0004)
    float                                         ErrorTolerance;                                               // 0x0004(0x0004)
    enum class EGeometryScriptSampleSpacing       SampleSpacing;                                                // 0x0008(0x0001)
    enum class ESplineCoordinateSpace             CoordinateSpace;                                              // 0x0009(0x0001)
    char                                          pa_000A[0x0002]                                               // 0x000A(0x0002)
};


// ScriptStruct  GeometryScriptingCore.GeometryScriptCopyMeshFromComponentOptions
// Struct Size::0x000C
struct FGeometryScriptCopyMeshFromComponentOptions
{
    bool                                          bWantNormals;                                                 // 0x0000(0x0001)
    bool                                          bWantTangents;                                                // 0x0001(0x0001)
    char                                          pa_0002[0x0002]                                               // 0x0002(0x0002)
    FGeometryScriptMeshReadLOD                    RequestedLOD;                                                 // 0x0004(0x0008)
};


// ScriptStruct  GeometryScriptingCore.GeometryScriptSampleTextureOptions
// Struct Size::0x0028
struct FGeometryScriptSampleTextureOptions
{
    enum class EGeometryScriptPixelSamplingMethod SamplingMethod;                                               // 0x0000(0x0001)
    bool                                          bWrap;                                                        // 0x0001(0x0001)
    char                                          pa_0002[0x0006]                                               // 0x0002(0x0006)
    FVector2D                                     UVScale;                                                      // 0x0008(0x0010)
    FVector2D                                     UVOffset;                                                     // 0x0018(0x0010)
};


// ScriptStruct  ModelingComponents.ModelingToolsAxisFilter
// Struct Size::0x0003
struct FModelingToolsAxisFilter
{
    bool                                          bAxisX;                                                       // 0x0000(0x0001)
    bool                                          bAxisY;                                                       // 0x0001(0x0001)
    bool                                          bAxisZ;                                                       // 0x0002(0x0001)
};


// ScriptStruct  ModelingComponents.RenderableTriangleVertex
// Struct Size::0x0048
struct FRenderableTriangleVertex
{
    FVector                                       position;                                                     // 0x0000(0x0018)
    FVector2D                                     UV;                                                           // 0x0018(0x0010)
    FVector                                       Normal;                                                       // 0x0028(0x0018)
    FColor                                        Color;                                                        // 0x0040(0x0004)
    char                                          pa_0044[0x0004]                                               // 0x0044(0x0004)
};


// ScriptStruct  ModelingComponents.RenderableTriangle
// Struct Size::0x00E0
struct FRenderableTriangle
{
    UMaterialInterface*                           Material;                                                     // 0x0000(0x0008)
    FRenderableTriangleVertex                     Vertex0;                                                      // 0x0008(0x0048)
    FRenderableTriangleVertex                     Vertex1;                                                      // 0x0050(0x0048)
    FRenderableTriangleVertex                     Vertex2;                                                      // 0x0098(0x0048)
};


// ScriptStruct  ModelingComponents.CreateMeshObjectParams
// Struct Size::0x05E0
struct FCreateMeshObjectParams
{
    UPrimitiveComponent*                          SourceComponent;                                              // 0x0000(0x0008)
    enum class ECreateObjectTypeHint              TypeHint;                                                     // 0x0008(0x0001)
    char                                          pa_0009[0x0007]                                               // 0x0009(0x0007)
    UClass*                                       TypeHintClass;                                                // 0x0010(0x0008)
    int32_t                                       TypeHintExtended;                                             // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    UWorld*                                       TargetWorld;                                                  // 0x0020(0x0008)
    char                                          pa_0028[0x0008]                                               // 0x0028(0x0008)
    FTransform                                    Transform;                                                    // 0x0030(0x0060)
    FString                                       BaseName;                                                     // 0x0090(0x0010)
    TArray<UMaterialInterface*>                   Materials;                                                    // 0x00A0(0x0010)
    TArray<UMaterialInterface*>                   AssetMaterials;                                               // 0x00B0(0x0010)
    bool                                          bEnableCollision;                                             // 0x00C0(0x0001)
    enum class ECollisionTraceFlag                CollisionMode;                                                // 0x00C1(0x0001)
    bool                                          bEnableRaytracingSupport;                                     // 0x00C2(0x0001)
    bool                                          bEnableRecomputeNormals;                                      // 0x00C3(0x0001)
    bool                                          bEnableRecomputeTangents;                                     // 0x00C4(0x0001)
    bool                                          bEnableNanite;                                                // 0x00C5(0x0001)
    char                                          pa_00C6[0x0002]                                               // 0x00C6(0x0002)
    float                                         NaniteProxyTrianglePercent;                                   // 0x00C8(0x0004)
    FMeshNaniteSettings                           NaniteSettings;                                               // 0x00CC(0x001C)
    char                                          pa_00E8[0x04F8]                                               // 0x00E8(0x04F8)
};


// ScriptStruct  ModelingComponents.CreateMeshObjectResult
// Struct Size::0x0020
struct FCreateMeshObjectResult
{
    enum class ECreateModelingObjectResult        ResultCode;                                                   // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    AActor*                                       NewActor;                                                     // 0x0008(0x0008)
    UPrimitiveComponent*                          NewComponent;                                                 // 0x0010(0x0008)
    UObject*                                      NewAsset;                                                     // 0x0018(0x0008)
};


// ScriptStruct  ModelingComponents.CreateTextureObjectParams
// Struct Size::0x0030
struct FCreateTextureObjectParams
{
    int32_t                                       TypeHintExtended;                                             // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    UWorld*                                       TargetWorld;                                                  // 0x0008(0x0008)
    UObject*                                      StoreRelativeToObject;                                        // 0x0010(0x0008)
    FString                                       BaseName;                                                     // 0x0018(0x0010)
    UTexture2D*                                   GeneratedTransientTexture;                                    // 0x0028(0x0008)
};


// ScriptStruct  ModelingComponents.CreateTextureObjectResult
// Struct Size::0x0010
struct FCreateTextureObjectResult
{
    enum class ECreateModelingObjectResult        ResultCode;                                                   // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    UObject*                                      NewAsset;                                                     // 0x0008(0x0008)
};


// ScriptStruct  AudioModulation.EnvelopeFollowerGeneratorParams
// Struct Size::0x0020
struct FEnvelopeFollowerGeneratorParams
{
    bool                                          bBypass;                                                      // 0x0000(0x0001)
    bool                                          bInvert;                                                      // 0x0001(0x0001)
    char                                          pa_0002[0x0006]                                               // 0x0002(0x0006)
    UAudioBus*                                    AudioBus;                                                     // 0x0008(0x0008)
    float                                         Gain;                                                         // 0x0010(0x0004)
    float                                         AttackTime;                                                   // 0x0014(0x0004)
    float                                         ReleaseTime;                                                  // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  AudioModulation.SoundModulationLFOParams
// Struct Size::0x0020
struct FSoundModulationLFOParams
{
    enum class ESoundModulationLFOShape           Shape;                                                        // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         ExponentialFactor;                                            // 0x0004(0x0004)
    float                                         Width;                                                        // 0x0008(0x0004)
    float                                         Amplitude;                                                    // 0x000C(0x0004)
    float                                         Frequency;                                                    // 0x0010(0x0004)
    float                                         Offset;                                                       // 0x0014(0x0004)
    float                                         Phase;                                                        // 0x0018(0x0004)
    bool                                          bLooping;                                                     // 0x001C(0x0001)
    bool                                          bBypass;                                                      // 0x001D(0x0001)
    char                                          pa_001E[0x0002]                                               // 0x001E(0x0002)
};


// ScriptStruct  AudioModulation.SoundControlBusMixStage
// Struct Size::0x0028
struct FSoundControlBusMixStage
{
    USoundControlBus*                             Bus;                                                          // 0x0000(0x0008)
    FSoundModulationMixValue                      Value;                                                        // 0x0008(0x0020)
};


// ScriptStruct  AudioModulation.SoundModulationMixValue
// Struct Size::0x0020
struct FSoundModulationMixValue
{
    float                                         TargetValue;                                                  // 0x0000(0x0004)
    float                                         AttackTime;                                                   // 0x0004(0x0004)
    float                                         ReleaseTime;                                                  // 0x0008(0x0004)
    char                                          pa_000C[0x0014]                                               // 0x000C(0x0014)
};


// ScriptStruct  AudioModulation.SoundModulationParameterSettings
// Struct Size::0x0004
struct FSoundModulationParameterSettings
{
    float                                         ValueNormalized;                                              // 0x0000(0x0004)
};


// ScriptStruct  AudioModulation.SoundModulationTransform
// Struct Size::0x00A0
struct FSoundModulationTransform : public FWaveTableTransform
{
};


// ScriptStruct  AudioModulation.SoundControlModulationInput
// Struct Size::0x00B0
struct FSoundControlModulationInput
{
    char                                          bSampleAndHold;                                               // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    FSoundModulationTransform                     Transform;                                                    // 0x0008(0x00A0)
    USoundControlBus*                             Bus;                                                          // 0x00A8(0x0008)
};


// ScriptStruct  AudioModulation.SoundControlModulationPatch
// Struct Size::0x0020
struct FSoundControlModulationPatch
{
    bool                                          bBypass;                                                      // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    USoundModulationParameter*                    OutputParameter;                                              // 0x0008(0x0008)
    TArray<FSoundControlModulationInput>          Inputs;                                                       // 0x0010(0x0010)
};


// ScriptStruct  AudioGameplay.AudioGameplayRequirements
// Struct Size::0x0050
struct FAudioGameplayRequirements
{
    UAudioRequirementPreset*                      Preset;                                                       // 0x0000(0x0008)
    FGameplayTagQuery                             Custom;                                                       // 0x0008(0x0048)
};


// ScriptStruct  SoundUtilities.SoundVariation
// Struct Size::0x0030
struct FSoundVariation
{
    USoundWave*                                   SoundWave;                                                    // 0x0000(0x0008)
    float                                         ProbabilityWeight;                                            // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FVector2D                                     VolumeRange;                                                  // 0x0010(0x0010)
    FVector2D                                     PitchRange;                                                   // 0x0020(0x0010)
};


// ScriptStruct  AnimationWarpingRuntime.FootPlacementInterpolationSettings
// Struct Size::0x0024
struct FFootPlacementInterpolationSettings
{
    float                                         UnplantLinearStiffness;                                       // 0x0000(0x0004)
    float                                         UnplantLinearDamping;                                         // 0x0004(0x0004)
    float                                         UnplantAngularStiffness;                                      // 0x0008(0x0004)
    float                                         UnplantAngularDamping;                                        // 0x000C(0x0004)
    float                                         FloorLinearStiffness;                                         // 0x0010(0x0004)
    float                                         FloorLinearDamping;                                           // 0x0014(0x0004)
    float                                         FloorAngularStiffness;                                        // 0x0018(0x0004)
    float                                         FloorAngularDamping;                                          // 0x001C(0x0004)
    bool                                          bEnableFloorInterpolation;                                    // 0x0020(0x0001)
    char                                          pa_0021[0x0003]                                               // 0x0021(0x0003)
};


// ScriptStruct  AnimationWarpingRuntime.FootPlacementTraceSettings
// Struct Size::0x001C
struct FFootPlacementTraceSettings
{
    float                                         StartOffset;                                                  // 0x0000(0x0004)
    float                                         EndOffset;                                                    // 0x0004(0x0004)
    float                                         SweepRadius;                                                  // 0x0008(0x0004)
    enum class ETraceTypeQuery                    ComplexTraceChannel;                                          // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
    float                                         MaxGroundPenetration;                                         // 0x0010(0x0004)
    float                                         SimpleCollisionInfluence;                                     // 0x0014(0x0004)
    enum class ETraceTypeQuery                    SimpleTraceChannel;                                           // 0x0018(0x0001)
    bool                                          bEnabled;                                                     // 0x0019(0x0001)
    char                                          pa_001A[0x0002]                                               // 0x001A(0x0002)
};


// ScriptStruct  AnimationWarpingRuntime.FootPlacementRootDefinition
// Struct Size::0x0020
struct FFootPlacementRootDefinition
{
    FBoneReference                                PelvisBone;                                                   // 0x0000(0x0010)
    FBoneReference                                IKRootBone;                                                   // 0x0010(0x0010)
};


// ScriptStruct  Engine.BoneReference
// Struct Size::0x0010
struct FBoneReference
{
    FName                                         BoneName;                                                     // 0x0000(0x0008)
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
};


// ScriptStruct  AnimationWarpingRuntime.FootPlacementPelvisSettings
// Struct Size::0x0020
struct FFootPlacementPelvisSettings
{
    float                                         MaxOffset;                                                    // 0x0000(0x0004)
    float                                         LinearStiffness;                                              // 0x0004(0x0004)
    float                                         LinearDamping;                                                // 0x0008(0x0004)
    float                                         HorizontalRebalancingWeight;                                  // 0x000C(0x0004)
    float                                         MaxOffsetHorizontal;                                          // 0x0010(0x0004)
    float                                         HeelLiftRatio;                                                // 0x0014(0x0004)
    enum class EPelvisHeightMode                  PelvisHeightMode;                                             // 0x0018(0x0001)
    enum class EActorMovementCompensationMode     ActorMovementCompensationMode;                                // 0x0019(0x0001)
    bool                                          bEnableInterpolation;                                         // 0x001A(0x0001)
    char                                          pa_001B[0x0001]                                               // 0x001B(0x0001)
    float                                         Offset;                                                       // 0x001C(0x0004)
};


// ScriptStruct  AnimationWarpingRuntime.FootPlacemenLegDefinition
// Struct Size::0x0044
struct FFootPlacemenLegDefinition
{
    FBoneReference                                FKFootBone;                                                   // 0x0000(0x0010)
    FBoneReference                                IKFootBone;                                                   // 0x0010(0x0010)
    FBoneReference                                BallBone;                                                     // 0x0020(0x0010)
    int32_t                                       NumBonesInLimb;                                               // 0x0030(0x0004)
    FName                                         SpeedCurveName;                                               // 0x0034(0x0008)
    FName                                         DisableLockCurveName;                                         // 0x003C(0x0008)
};


// ScriptStruct  AnimationWarpingRuntime.FootPlacementPlantSettings
// Struct Size::0x0038
struct FFootPlacementPlantSettings
{
    float                                         SpeedThreshold;                                               // 0x0000(0x0004)
    float                                         DistanceToGround;                                             // 0x0004(0x0004)
    enum class EFootPlacementLockType             LockType;                                                     // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
    float                                         UnplantRadius;                                                // 0x000C(0x0004)
    float                                         ReplantRadiusRatio;                                           // 0x0010(0x0004)
    float                                         UnplantAngle;                                                 // 0x0014(0x0004)
    float                                         ReplantAngleRatio;                                            // 0x0018(0x0004)
    float                                         MaxExtensionRatio;                                            // 0x001C(0x0004)
    float                                         MinExtensionRatio;                                            // 0x0020(0x0004)
    float                                         SeparatingDistance;                                           // 0x0024(0x0004)
    float                                         UnalignmentSpeedThreshold;                                    // 0x0028(0x0004)
    float                                         AnkleTwistReduction;                                          // 0x002C(0x0004)
    bool                                          bAdjustHeelBeforePlanting;                                    // 0x0030(0x0001)
    char                                          pa_0031[0x0003]                                               // 0x0031(0x0003)
    float                                         ShoesThickness;                                               // 0x0034(0x0004)
};


// ScriptStruct  Engine.AnimNode
// Struct Size::0x0010
struct FAnimNode
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x00C8
struct FAnimNode : public FAnimNode
{
    FComponentSpacePoseLink                       ComponentPose;                                                // 0x0010(0x0010)
    int32_t                                       LODThreshold;                                                 // 0x0020(0x0004)
    float                                         ActualAlpha;                                                  // 0x0024(0x0004)
    enum class EAnimAlphaInputType                AlphaInputType;                                               // 0x0028(0x0001)
    bool                                          bAlphaBoolEnabled;                                            // 0x0029(0x0001)
    char                                          pa_002A[0x0002]                                               // 0x002A(0x0002)
    float                                         Alpha;                                                        // 0x002C(0x0004)
    FInputScaleBias                               AlphaScaleBias;                                               // 0x0030(0x0008)
    FInputAlphaBoolBlend                          AlphaBoolBlend;                                               // 0x0038(0x0048)
    FName                                         AlphaCurveName;                                               // 0x0080(0x0008)
    FInputScaleBiasClamp                          AlphaScaleBiasClamp;                                          // 0x0088(0x0030)
    char                                          pa_00B8[0x0010]                                               // 0x00B8(0x0010)
};


// ScriptStruct  Engine.InputScaleBiasClamp
// Struct Size::0x0030
struct FInputScaleBiasClamp
{
    bool                                          bMapRange;                                                    // 0x0000(0x0001)
    bool                                          bClampResult;                                                 // 0x0001(0x0001)
    bool                                          bInterpResult;                                                // 0x0002(0x0001)
    char                                          pa_0003[0x0001]                                               // 0x0003(0x0001)
    FInputRange                                   InRange;                                                      // 0x0004(0x0008)
    FInputRange                                   OutRange;                                                     // 0x000C(0x0008)
    float                                         Scale;                                                        // 0x0014(0x0004)
    float                                         Bias;                                                         // 0x0018(0x0004)
    float                                         ClampMin;                                                     // 0x001C(0x0004)
    float                                         ClampMax;                                                     // 0x0020(0x0004)
    float                                         InterpSpeedIncreasing;                                        // 0x0024(0x0004)
    float                                         InterpSpeedDecreasing;                                        // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
};


// ScriptStruct  Engine.InputRange
// Struct Size::0x0008
struct FInputRange
{
    float                                         Min;                                                          // 0x0000(0x0004)
    float                                         Max;                                                          // 0x0004(0x0004)
};


// ScriptStruct  Engine.InputAlphaBoolBlend
// Struct Size::0x0048
struct FInputAlphaBoolBlend
{
    float                                         BlendInTime;                                                  // 0x0000(0x0004)
    float                                         BlendOutTime;                                                 // 0x0004(0x0004)
    enum class EAlphaBlendOption                  BlendOption;                                                  // 0x0008(0x0001)
    bool                                          bInitialized;                                                 // 0x0009(0x0001)
    char                                          pa_000A[0x0006]                                               // 0x000A(0x0006)
    UCurveFloat*                                  CustomCurve;                                                  // 0x0010(0x0008)
    FAlphaBlend                                   AlphaBlend;                                                   // 0x0018(0x0030)
};


// ScriptStruct  Engine.AlphaBlend
// Struct Size::0x0030
struct FAlphaBlend
{
    UCurveFloat*                                  CustomCurve;                                                  // 0x0000(0x0008)
    float                                         BlendTime;                                                    // 0x0008(0x0004)
    char                                          pa_000C[0x0018]                                               // 0x000C(0x0018)
    enum class EAlphaBlendOption                  BlendOption;                                                  // 0x0024(0x0001)
    char                                          pa_0025[0x000B]                                               // 0x0025(0x000B)
};


// ScriptStruct  Engine.InputScaleBias
// Struct Size::0x0008
struct FInputScaleBias
{
    float                                         Scale;                                                        // 0x0000(0x0004)
    float                                         Bias;                                                         // 0x0004(0x0004)
};


// ScriptStruct  Engine.PoseLinkBase
// Struct Size::0x0010
struct FPoseLinkBase
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    int32_t                                       LinkID;                                                       // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
};


// ScriptStruct  Engine.ComponentSpacePoseLink
// Struct Size::0x0010
struct FComponentSpacePoseLink : public FPoseLinkBase
{
};


// ScriptStruct  AnimationWarpingRuntime.AnimNode
// Struct Size::0x0420
struct FAnimNode : public FAnimNode
{
    enum class EWarpingEvaluationMode             PlantSpeedMode;                                               // 0x00C8(0x0001)
    char                                          pa_00C9[0x0003]                                               // 0x00C9(0x0003)
    FBoneReference                                IKFootRootBone;                                               // 0x00CC(0x0010)
    FBoneReference                                PelvisBone;                                                   // 0x00DC(0x0010)
    FFootPlacementPelvisSettings                  PelvisSettings;                                               // 0x00EC(0x0020)
    char                                          pa_010C[0x0004]                                               // 0x010C(0x0004)
    TArray<FFootPlacemenLegDefinition>            LegDefinitions;                                               // 0x0110(0x0010)
    FFootPlacementPlantSettings                   PlantSettings;                                                // 0x0120(0x0038)
    FFootPlacementInterpolationSettings           InterpolationSettings;                                        // 0x0158(0x0024)
    FFootPlacementTraceSettings                   TraceSettings;                                                // 0x017C(0x001C)
    char                                          pa_0198[0x0288]                                               // 0x0198(0x0288)
};


// ScriptStruct  AnimationWarpingRuntime.AnimNode
// Struct Size::0x0190
struct FAnimNode : public FAnimNode
{
    char                                          pa_00C8[0x00C8]                                               // 0x00C8(0x00C8)
};


// ScriptStruct  AnimationWarpingRuntime.AnimNode
// Struct Size::0x0198
struct FAnimNode : public FAnimNode
{
    enum class EWarpingEvaluationMode             Mode;                                                         // 0x00C8(0x0001)
    char                                          pa_00C9[0x0003]                                               // 0x00C9(0x0003)
    float                                         OrientationAngle;                                             // 0x00CC(0x0004)
    float                                         LocomotionAngle;                                              // 0x00D0(0x0004)
    float                                         MinRootMotionSpeedThreshold;                                  // 0x00D4(0x0004)
    float                                         LocomotionAngleDeltaThreshold;                                // 0x00D8(0x0004)
    char                                          pa_00DC[0x0004]                                               // 0x00DC(0x0004)
    TArray<FBoneReference>                        SpineBones;                                                   // 0x00E0(0x0010)
    FBoneReference                                IKFootRootBone;                                               // 0x00F0(0x0010)
    TArray<FBoneReference>                        IKFootBones;                                                  // 0x0100(0x0010)
    enum class EAxis                              RotationAxis;                                                 // 0x0110(0x0001)
    char                                          pa_0111[0x0003]                                               // 0x0111(0x0003)
    float                                         DistributedBoneOrientationAlpha;                              // 0x0114(0x0004)
    float                                         RotationInterpSpeed;                                          // 0x0118(0x0004)
    float                                         WarpingAlpha;                                                 // 0x011C(0x0004)
    float                                         OffsetAlpha;                                                  // 0x0120(0x0004)
    float                                         MaxOffsetAngle;                                               // 0x0124(0x0004)
    char                                          pa_0128[0x0070]                                               // 0x0128(0x0070)
};


// ScriptStruct  AnimationWarpingRuntime.SlopeWarpingFootDefinition
// Struct Size::0x0028
struct FSlopeWarpingFootDefinition
{
    FBoneReference                                IKFootBone;                                                   // 0x0000(0x0010)
    FBoneReference                                FKFootBone;                                                   // 0x0010(0x0010)
    int32_t                                       NumBonesInLimb;                                               // 0x0020(0x0004)
    float                                         FootSize;                                                     // 0x0024(0x0004)
};


// ScriptStruct  AnimationWarpingRuntime.SlopeWarpingFootData
// Struct Size::0x00B0
struct FSlopeWarpingFootData
{
    char                                          pa_0000[0x00B0]                                               // 0x0000(0x00B0)
};


// ScriptStruct  AnimationWarpingRuntime.AnimNode
// Struct Size::0x02E0
struct FAnimNode : public FAnimNode
{
    char                                          pa_00C8[0x0018]                                               // 0x00C8(0x0018)
    FBoneReference                                IKFootRootBone;                                               // 0x00E0(0x0010)
    FBoneReference                                PelvisBone;                                                   // 0x00F0(0x0010)
    TArray<FSlopeWarpingFootDefinition>           FeetDefinitions;                                              // 0x0100(0x0010)
    TArray<FSlopeWarpingFootData>                 FeetData;                                                     // 0x0110(0x0010)
    FVectorRK4SpringInterpolator                  PelvisOffsetInterpolator;                                     // 0x0120(0x0008)
    char                                          pa_0128[0x0058]                                               // 0x0128(0x0058)
    FVector                                       GravityDir;                                                   // 0x0180(0x0018)
    FVector                                       CustomFloorOffset;                                            // 0x0198(0x0018)
    float                                         CachedDeltaTime;                                              // 0x01B0(0x0004)
    char                                          pa_01B4[0x0004]                                               // 0x01B4(0x0004)
    FVector                                       TargetFloorNormalWorldSpace;                                  // 0x01B8(0x0018)
    FVectorRK4SpringInterpolator                  FloorNormalInterpolator;                                      // 0x01D0(0x0008)
    char                                          pa_01D8[0x0058]                                               // 0x01D8(0x0058)
    FVector                                       TargetFloorOffsetLocalSpace;                                  // 0x0230(0x0018)
    FVectorRK4SpringInterpolator                  FloorOffsetInterpolator;                                      // 0x0248(0x0008)
    char                                          pa_0250[0x0058]                                               // 0x0250(0x0058)
    float                                         MaxStepHeight;                                                // 0x02A8(0x0004)
    char                                          bKeepMeshInsideOfCapsule;                                     // 0x02AC(0x0001)
    char                                          bPullPelvisDown;                                              // 0x02AC(0x0001)
    char                                          bUseCustomFloorOffset;                                        // 0x02AC(0x0001)
    char                                          bWasOnGround;                                                 // 0x02AC(0x0001)
    char                                          bShowDebug;                                                   // 0x02AC(0x0001)
    char                                          bFloorSmoothingInitialized;                                   // 0x02AC(0x0001)
    char                                          pa_02AD[0x0003]                                               // 0x02AD(0x0003)
    FVector                                       ActorLocation;                                                // 0x02B0(0x0018)
    FVector                                       GravityDirCompSpace;                                          // 0x02C8(0x0018)
};


// ScriptStruct  AnimationWarpingRuntime.StrideWarpingFootDefinition
// Struct Size::0x0030
struct FStrideWarpingFootDefinition
{
    FBoneReference                                IKFootBone;                                                   // 0x0000(0x0010)
    FBoneReference                                FKFootBone;                                                   // 0x0010(0x0010)
    FBoneReference                                ThighBone;                                                    // 0x0020(0x0010)
};


// ScriptStruct  AnimationWarpingRuntime.AnimNode
// Struct Size::0x0238
struct FAnimNode : public FAnimNode
{
    enum class EWarpingEvaluationMode             Mode;                                                         // 0x00C8(0x0001)
    char                                          pa_00C9[0x0007]                                               // 0x00C9(0x0007)
    FVector                                       StrideDirection;                                              // 0x00D0(0x0018)
    float                                         StrideScale;                                                  // 0x00E8(0x0004)
    float                                         LocomotionSpeed;                                              // 0x00EC(0x0004)
    float                                         MinRootMotionSpeedThreshold;                                  // 0x00F0(0x0004)
    FBoneReference                                PelvisBone;                                                   // 0x00F4(0x0010)
    FBoneReference                                IKFootRootBone;                                               // 0x0104(0x0010)
    char                                          pa_0114[0x0004]                                               // 0x0114(0x0004)
    TArray<FStrideWarpingFootDefinition>          FootDefinitions;                                              // 0x0118(0x0010)
    FInputClampConstants                          StrideScaleModifier;                                          // 0x0128(0x0014)
    char                                          pa_013C[0x0004]                                               // 0x013C(0x0004)
    FWarpingVectorValue                           FloorNormalDirection;                                         // 0x0140(0x0020)
    FWarpingVectorValue                           GravityDirection;                                             // 0x0160(0x0020)
    FIKFootPelvisPullDownSolver                   PelvisIKFootSolver;                                           // 0x0180(0x0070)
    bool                                          bOrientStrideDirectionUsingFloorNormal;                       // 0x01F0(0x0001)
    bool                                          bCompensateIKUsingFKThighRotation;                            // 0x01F1(0x0001)
    bool                                          bClampIKUsingFKLimits;                                        // 0x01F2(0x0001)
    char                                          pa_01F3[0x0045]                                               // 0x01F3(0x0045)
};


// ScriptStruct  AnimGraphRuntime.IKFootPelvisPullDownSolver
// Struct Size::0x0070
struct FIKFootPelvisPullDownSolver
{
    FVectorRK4SpringInterpolator                  PelvisAdjustmentInterp;                                       // 0x0000(0x0008)
    char                                          pa_0008[0x0058]                                               // 0x0008(0x0058)
    float                                         PelvisAdjustmentInterpAlpha;                                  // 0x0060(0x0004)
    float                                         PelvisAdjustmentMaxDistance;                                  // 0x0064(0x0004)
    float                                         PelvisAdjustmentErrorTolerance;                               // 0x0068(0x0004)
    int32_t                                       PelvisAdjustmentMaxIter;                                      // 0x006C(0x0004)
};


// ScriptStruct  AnimGraphRuntime.WarpingVectorValue
// Struct Size::0x0020
struct FWarpingVectorValue
{
    enum class EWarpingVectorMode                 Mode;                                                         // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    FVector                                       Value;                                                        // 0x0008(0x0018)
};


// ScriptStruct  Engine.InputClampConstants
// Struct Size::0x0014
struct FInputClampConstants
{
    bool                                          bClampResult;                                                 // 0x0000(0x0001)
    bool                                          bInterpResult;                                                // 0x0001(0x0001)
    char                                          pa_0002[0x0002]                                               // 0x0002(0x0002)
    float                                         ClampMin;                                                     // 0x0004(0x0004)
    float                                         ClampMax;                                                     // 0x0008(0x0004)
    float                                         InterpSpeedIncreasing;                                        // 0x000C(0x0004)
    float                                         InterpSpeedDecreasing;                                        // 0x0010(0x0004)
};


// ScriptStruct  AnimationWarpingRuntime.CheckGroundRotateBoneSetting
// Struct Size::0x0018
struct FCheckGroundRotateBoneSetting
{
    FBoneReference                                RotateBone;                                                   // 0x0000(0x0010)
    float                                         ClampAngle;                                                   // 0x0010(0x0004)
    float                                         EpsilonAngle;                                                 // 0x0014(0x0004)
};


// ScriptStruct  AnimationWarpingRuntime.CheckGroundBonesSettings
// Struct Size::0x0048
struct FCheckGroundBonesSettings
{
    FBoneReference                                FirstBone;                                                    // 0x0000(0x0010)
    FBoneReference                                SecondBone;                                                   // 0x0010(0x0010)
    FBoneReference                                ExtraBone;                                                    // 0x0020(0x0010)
    FCheckGroundRotateBoneSetting                 RotateBone;                                                   // 0x0030(0x0018)
};


// ScriptStruct  AnimationWarpingRuntime.CheckGroundTraceSettings
// Struct Size::0x000C
struct FCheckGroundTraceSettings
{
    float                                         Length;                                                       // 0x0000(0x0004)
    float                                         Radius;                                                       // 0x0004(0x0004)
    enum class ETraceTypeQuery                    TraceChannel;                                                 // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
};


// ScriptStruct  AnimationWarpingRuntime.CheckGroundDebugSettings
// Struct Size::0x0014
struct FCheckGroundDebugSettings
{
    bool                                          bDebug;                                                       // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         BoxRadius;                                                    // 0x0004(0x0004)
    float                                         Thickness;                                                    // 0x0008(0x0004)
    enum class ECheckGroundRotateBoneAxis         TestAxis;                                                     // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
    float                                         TestAngle;                                                    // 0x0010(0x0004)
};


// ScriptStruct  AnimationWarpingRuntime.CheckGroundLerpSettings
// Struct Size::0x000C
struct FCheckGroundLerpSettings
{
    bool                                          bLerp;                                                        // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         Stiffness;                                                    // 0x0004(0x0004)
    float                                         DampingFactor;                                                // 0x0008(0x0004)
};


// ScriptStruct  AnimationWarpingRuntime.TGFAnimNode
// Struct Size::0x0360
struct FTGFAnimNode : public FAnimNode
{
    bool                                          bEnable;                                                      // 0x00C8(0x0001)
    char                                          pa_00C9[0x0003]                                               // 0x00C9(0x0003)
    FCheckGroundBonesSettings                     Bones;                                                        // 0x00CC(0x0048)
    FCheckGroundTraceSettings                     TraceSettings;                                                // 0x0114(0x000C)
    FCheckGroundDebugSettings                     DebugSettings;                                                // 0x0120(0x0014)
    FCheckGroundLerpSettings                      LerpSettings;                                                 // 0x0134(0x000C)
    char                                          pa_0140[0x0220]                                               // 0x0140(0x0220)
};


// ScriptStruct  AnimationWarpingRuntime.QuadrupedFootBoneDefinition
// Struct Size::0x0020
struct FQuadrupedFootBoneDefinition
{
    FBoneReference                                IKBone;                                                       // 0x0000(0x0010)
    FBoneReference                                FKBone;                                                       // 0x0010(0x0010)
};


// ScriptStruct  AnimationWarpingRuntime.QuadrupedBones
// Struct Size::0x0020
struct FQuadrupedBones
{
    FBoneReference                                RootBone;                                                     // 0x0000(0x0010)
    TArray<FQuadrupedFootBoneDefinition>          Feet;                                                         // 0x0010(0x0010)
};


// ScriptStruct  AnimationWarpingRuntime.LerpSettings
// Struct Size::0x0008
struct FLerpSettings
{
    bool                                          bEnableLerp;                                                  // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         Stiffness;                                                    // 0x0004(0x0004)
};


// ScriptStruct  AnimationWarpingRuntime.QuadrupedFootPlacementTraceSettings
// Struct Size::0x001C
struct FQuadrupedFootPlacementTraceSettings
{
    float                                         StartOffset;                                                  // 0x0000(0x0004)
    float                                         EndOffset;                                                    // 0x0004(0x0004)
    float                                         SlopingFrontOffset;                                           // 0x0008(0x0004)
    float                                         SlopingEndOffset;                                             // 0x000C(0x0004)
    float                                         HeightHorizOffset;                                            // 0x0010(0x0004)
    float                                         Radius;                                                       // 0x0014(0x0004)
    bool                                          bIncludeInitOffset;                                           // 0x0018(0x0001)
    bool                                          bUseFootTraceHeight;                                          // 0x0019(0x0001)
    enum class ETraceTypeQuery                    TraceChannel;                                                 // 0x001A(0x0001)
    char                                          pa_001B[0x0001]                                               // 0x001B(0x0001)
};


// ScriptStruct  AnimationWarpingRuntime.QuadrupedFootPlacementDebugSettings
// Struct Size::0x000C
struct FQuadrupedFootPlacementDebugSettings
{
    bool                                          bEnableDebug;                                                 // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         BoxRadius;                                                    // 0x0004(0x0004)
    float                                         Thickness;                                                    // 0x0008(0x0004)
};


// ScriptStruct  AnimationWarpingRuntime.TGFAnimNode
// Struct Size::0x01E0
struct FTGFAnimNode : public FAnimNode
{
    FQuadrupedBones                               Bones;                                                        // 0x00C8(0x0020)
    enum class EQuadrupedSlopingAxis              SlopingAxis;                                                  // 0x00E8(0x0001)
    bool                                          bEnable;                                                      // 0x00E9(0x0001)
    char                                          pa_00EA[0x0002]                                               // 0x00EA(0x0002)
    FQuadrupedFootPlacementDebugSettings          DebugSettings;                                                // 0x00EC(0x000C)
    FQuadrupedFootPlacementTraceSettings          TraceSettings;                                                // 0x00F8(0x001C)
    FLerpSettings                                 LerpSettings;                                                 // 0x0114(0x0008)
    char                                          pa_011C[0x00C4]                                               // 0x011C(0x00C4)
};


// ScriptStruct  MovieRenderPipelineCore.MoviePipelineSidecarCamera
// Struct Size::0x0028
struct FMoviePipelineSidecarCamera
{
    FGuid                                         BindingId;                                                    // 0x0000(0x0010)
    char                                          pa_0010[0x0008]                                               // 0x0010(0x0008)
    FString                                       Name;                                                         // 0x0018(0x0010)
};


// ScriptStruct  MovieRenderPipelineCore.MoviePipelineSegmentWorkMetrics
// Struct Size::0x0028
struct FMoviePipelineSegmentWorkMetrics
{
    FString                                       SegmentName;                                                  // 0x0000(0x0010)
    int32_t                                       OutputFrameIndex;                                             // 0x0010(0x0004)
    int32_t                                       TotalOutputFrameCount;                                        // 0x0014(0x0004)
    int32_t                                       OutputSubSampleIndex;                                         // 0x0018(0x0004)
    int32_t                                       TotalSubSampleCount;                                          // 0x001C(0x0004)
    int32_t                                       EngineWarmUpFrameIndex;                                       // 0x0020(0x0004)
    int32_t                                       TotalEngineWarmUpFrameCount;                                  // 0x0024(0x0004)
};


// ScriptStruct  MovieRenderPipelineCore.MoviePipelineCameraCutInfo
// Struct Size::0x00A8
struct FMoviePipelineCameraCutInfo
{
    char                                          pa_0000[0x00A8]                                               // 0x0000(0x00A8)
};


// ScriptStruct  MovieRenderPipelineCore.MoviePipelineFormatArgs
// Struct Size::0x00A8
struct FMoviePipelineFormatArgs
{
    TMap<FString,FString>                         FilenameArguments;                                            // 0x0000(0x0050)
    TMap<FString,FString>                         FileMetadata;                                                 // 0x0050(0x0050)
    UMoviePipelineExecutorJob*                    InJob;                                                        // 0x00A0(0x0008)
};


// ScriptStruct  MovieRenderPipelineCore.MoviePipelineFilenameResolveParams
// Struct Size::0x0118
struct FMoviePipelineFilenameResolveParams
{
    int32_t                                       FrameNumber;                                                  // 0x0000(0x0004)
    int32_t                                       FrameNumberShot;                                              // 0x0004(0x0004)
    int32_t                                       FrameNumberRel;                                               // 0x0008(0x0004)
    int32_t                                       FrameNumberShotRel;                                           // 0x000C(0x0004)
    FString                                       CameraNameOverride;                                           // 0x0010(0x0010)
    FString                                       ShotNameOverride;                                             // 0x0020(0x0010)
    int32_t                                       ZeroPadFrameNumberCount;                                      // 0x0030(0x0004)
    bool                                          bForceRelativeFrameNumbers;                                   // 0x0034(0x0001)
    char                                          pa_0035[0x0003]                                               // 0x0035(0x0003)
    FString                                       FileNameOverride;                                             // 0x0038(0x0010)
    TMap<FString,FString>                         FileNameFormatOverrides;                                      // 0x0048(0x0050)
    TMap<FString,FString>                         FileMetadata;                                                 // 0x0098(0x0050)
    FDateTime                                     InitializationTime;                                           // 0x00E8(0x0008)
    int32_t                                       InitializationVersion;                                        // 0x00F0(0x0004)
    char                                          pa_00F4[0x0004]                                               // 0x00F4(0x0004)
    UMoviePipelineExecutorJob*                    Job;                                                          // 0x00F8(0x0008)
    char                                          pa_0100[0x0008]                                               // 0x0100(0x0008)
    UMoviePipelineExecutorShot*                   ShotOverride;                                                 // 0x0108(0x0008)
    int32_t                                       AdditionalFrameNumberOffset;                                  // 0x0110(0x0004)
    char                                          pa_0114[0x0004]                                               // 0x0114(0x0004)
};


// ScriptStruct  MovieRenderPipelineRenderPasses.MoviePipelinePostProcessPass
// Struct Size::0x0038
struct FMoviePipelinePostProcessPass
{
    bool                                          bEnabled;                                                     // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    TSoftObjectPtr<UMaterialInterface>            Material;                                                     // 0x0008(0x0030)
};


// ScriptStruct  ActorLayerUtilities.ActorLayer
// Struct Size::0x0008
struct FActorLayer
{
    FName                                         Name;                                                         // 0x0000(0x0008)
};


// ScriptStruct  SequencerScripting.SequencerScriptingRange
// Struct Size::0x0014
struct FSequencerScriptingRange
{
    char                                          bHasStart;                                                    // 0x0000(0x0001)
    char                                          bHasEnd;                                                      // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    int32_t                                       InclusiveStart;                                               // 0x0004(0x0004)
    int32_t                                       ExclusiveEnd;                                                 // 0x0008(0x0004)
    FFrameRate                                    InternalRate;                                                 // 0x000C(0x0008)
};


// ScriptStruct  OpenColorIO.OpenColorIOColorSpace
// Struct Size::0x0028
struct FOpenColorIOColorSpace
{
    FString                                       ColorSpaceName;                                               // 0x0000(0x0010)
    int32_t                                       ColorSpaceIndex;                                              // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FString                                       FamilyName;                                                   // 0x0018(0x0010)
};


// ScriptStruct  OpenColorIO.OpenColorIODisplayView
// Struct Size::0x0020
struct FOpenColorIODisplayView
{
    FString                                       Display;                                                      // 0x0000(0x0010)
    FString                                       View;                                                         // 0x0010(0x0010)
};


// ScriptStruct  OpenColorIO.OpenColorIOColorConversionSettings
// Struct Size::0x0080
struct FOpenColorIOColorConversionSettings
{
    UOpenColorIOConfiguration*                    ConfigurationSource;                                          // 0x0000(0x0008)
    FOpenColorIOColorSpace                        SourceColorSpace;                                             // 0x0008(0x0028)
    FOpenColorIOColorSpace                        DestinationColorSpace;                                        // 0x0030(0x0028)
    FOpenColorIODisplayView                       DestinationDisplayView;                                       // 0x0058(0x0020)
    enum class EOpenColorIOViewTransformDirection DisplayViewDirection;                                         // 0x0078(0x0001)
    char                                          pa_0079[0x0007]                                               // 0x0079(0x0007)
};


// ScriptStruct  OpenColorIO.OpenColorIODisplayConfiguration
// Struct Size::0x0088
struct FOpenColorIODisplayConfiguration
{
    bool                                          bIsEnabled;                                                   // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    FOpenColorIOColorConversionSettings           ColorConfiguration;                                           // 0x0008(0x0080)
};


// ScriptStruct  GothicPack.RailingVariationParent
// Struct Size::0x0010
struct FRailingVariationParent
{
    TArray<UStaticMesh*>                          Meshes;                                                       // 0x0000(0x0010)
};


// ScriptStruct  GothicPack.SidewalkVariationParent
// Struct Size::0x0020
struct FSidewalkVariationParent
{
    TArray<UStaticMesh*>                          MiddleSidewalkMeshes;                                         // 0x0000(0x0010)
    UStaticMesh*                                  EndSidewalkMesh;                                              // 0x0010(0x0008)
    UStaticMesh*                                  StartSidewalkMesh;                                            // 0x0018(0x0008)
};


// ScriptStruct  ConsoleVariablesEditorRuntime.ConsoleVariablesEditorAssetSaveData
// Struct Size::0x0028
struct FConsoleVariablesEditorAssetSaveData
{
    FString                                       CommandName;                                                  // 0x0000(0x0010)
    FString                                       CommandValueAsString;                                         // 0x0010(0x0010)
    enum class ECheckBoxState                     CheckedState;                                                 // 0x0020(0x0001)
    char                                          pa_0021[0x0007]                                               // 0x0021(0x0007)
};


// ScriptStruct  RigLogicModule.CoordinateSystem
// Struct Size::0x0003
struct FCoordinateSystem
{
    enum class EDirection                         XAxis;                                                        // 0x0000(0x0001)
    enum class EDirection                         YAxis;                                                        // 0x0001(0x0001)
    enum class EDirection                         ZAxis;                                                        // 0x0002(0x0001)
};


// ScriptStruct  RigLogicModule.MeshBlendShapeChannelMapping
// Struct Size::0x0008
struct FMeshBlendShapeChannelMapping
{
    int32_t                                       MeshIndex;                                                    // 0x0000(0x0004)
    int32_t                                       BlendShapeChannelIndex;                                       // 0x0004(0x0004)
};


// ScriptStruct  RigLogicModule.TextureCoordinate
// Struct Size::0x0008
struct FTextureCoordinate
{
    float                                         U;                                                            // 0x0000(0x0004)
    float                                         V;                                                            // 0x0004(0x0004)
};


// ScriptStruct  RigLogicModule.VertexLayout
// Struct Size::0x000C
struct FVertexLayout
{
    int32_t                                       position;                                                     // 0x0000(0x0004)
    int32_t                                       TextureCoordinate;                                            // 0x0004(0x0004)
    int32_t                                       Normal;                                                       // 0x0008(0x0004)
};


// ScriptStruct  RigLogicModule.AnimNode
// Struct Size::0x0058
struct FAnimNode : public FAnimNode
{
    FPoseLink                                     AnimSequence;                                                 // 0x0010(0x0010)
    char                                          pa_0020[0x0038]                                               // 0x0020(0x0038)
};


// ScriptStruct  Engine.PoseLink
// Struct Size::0x0010
struct FPoseLink : public FPoseLinkBase
{
};


// ScriptStruct  RigLogicModule.RigUnit
// Struct Size::0x0010
struct FRigUnit
{
    TArray<int32_t>                               Values;                                                       // 0x0000(0x0010)
};


// ScriptStruct  RigLogicModule.RigUnit
// Struct Size::0x0088
struct FRigUnit
{
    TWeakObjectPtr<USkeletalMeshComponent>        SkelMeshComponent;                                            // 0x0000(0x0008)
    char                                          pa_0008[0x0018]                                               // 0x0008(0x0018)
    TArray<int32_t>                               InputCurveIndices;                                            // 0x0020(0x0010)
    TArray<int32_t>                               HierarchyBoneIndices;                                         // 0x0030(0x0010)
    TArray<FRigUnit>                              MorphTargetCurveIndices;                                      // 0x0040(0x0010)
    TArray<FRigUnit>                              BlendShapeIndices;                                            // 0x0050(0x0010)
    TArray<FRigUnit>                              CurveElementIndicesForAnimMaps;                               // 0x0060(0x0010)
    TArray<FRigUnit>                              RigLogicIndicesForAnimMaps;                                   // 0x0070(0x0010)
    uint32_t                                      CurrentLOD;                                                   // 0x0080(0x0004)
    char                                          pa_0084[0x0004]                                               // 0x0084(0x0004)
};


// ScriptStruct  RigVM.RigVMStruct
// Struct Size::0x0008
struct FRigVMStruct
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0008
struct FRigUnit : public FRigVMStruct
{
};


// ScriptStruct  ControlRig.RigUnitMutable
// Struct Size::0x0040
struct FRigUnitMutable : public FRigUnit
{
    FControlRigExecuteContext                     ExecuteContext;                                               // 0x0008(0x0038)
};


// ScriptStruct  RigVM.RigVMExecuteContext
// Struct Size::0x0030
struct FRigVMExecuteContext
{
    char                                          pa_0000[0x0030]                                               // 0x0000(0x0030)
};


// ScriptStruct  ControlRig.ControlRigExecuteContext
// Struct Size::0x0038
struct FControlRigExecuteContext : public FRigVMExecuteContext
{
    char                                          pa_0030[0x0008]                                               // 0x0030(0x0008)
};


// ScriptStruct  RigLogicModule.RigUnit
// Struct Size::0x00C8
struct FRigUnit : public FRigUnitMutable
{
    FRigUnit                                      Data;                                                         // 0x0040(0x0088)
};


// ScriptStruct  RigVM.RigVMDispatchFactory
// Struct Size::0x0018
struct FRigVMDispatchFactory
{
    char                                          pa_0000[0x0018]                                               // 0x0000(0x0018)
};


// ScriptStruct  RigVM.RigVMUnknownType
// Struct Size::0x0004
struct FRigVMUnknownType
{
    uint32_t                                      Hash;                                                         // 0x0000(0x0004)
};


// ScriptStruct  MovieScene.MovieSceneSequenceInstanceData
// Struct Size::0x0008
struct FMovieSceneSequenceInstanceData
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
};


// ScriptStruct  ControlRig.MovieSceneControlRigInstanceData
// Struct Size::0x0148
struct FMovieSceneControlRigInstanceData : public FMovieSceneSequenceInstanceData
{
    bool                                          bAdditive;                                                    // 0x0008(0x0001)
    bool                                          bApplyBoneFilter;                                             // 0x0009(0x0001)
    char                                          pa_000A[0x0006]                                               // 0x000A(0x0006)
    FInputBlendPose                               BoneFilter;                                                   // 0x0010(0x0010)
    FMovieSceneFloatChannel                       Weight;                                                       // 0x0020(0x0110)
    FMovieSceneEvaluationOperand                  Operand;                                                      // 0x0130(0x0014)
    char                                          pa_0144[0x0004]                                               // 0x0144(0x0004)
};


// ScriptStruct  MovieScene.MovieSceneEvaluationOperand
// Struct Size::0x0014
struct FMovieSceneEvaluationOperand
{
    FGuid                                         ObjectBindingID;                                              // 0x0000(0x0010)
    FMovieSceneSequenceID                         SequenceID;                                                   // 0x0010(0x0004)
};


// ScriptStruct  MovieScene.MovieSceneSequenceID
// Struct Size::0x0004
struct FMovieSceneSequenceID
{
    uint32_t                                      Value;                                                        // 0x0000(0x0004)
};


// ScriptStruct  Engine.InputBlendPose
// Struct Size::0x0010
struct FInputBlendPose
{
    TArray<FBranchFilter>                         BranchFilters;                                                // 0x0000(0x0010)
};


// ScriptStruct  Engine.BranchFilter
// Struct Size::0x000C
struct FBranchFilter
{
    FName                                         BoneName;                                                     // 0x0000(0x0008)
    int32_t                                       BlendDepth;                                                   // 0x0008(0x0004)
};


// ScriptStruct  ControlRig.RigTransformStackEntry
// Struct Size::0x00F0
struct FRigTransformStackEntry
{
    FRigElementKey                                Key;                                                          // 0x0000(0x000C)
    enum class ERigTransformStackEntryType        EntryType;                                                    // 0x000C(0x0001)
    enum class ERigTransformType                  TransformType;                                                // 0x000D(0x0001)
    char                                          pa_000E[0x0002]                                               // 0x000E(0x0002)
    FTransform                                    OldTransform;                                                 // 0x0010(0x0060)
    FTransform                                    NewTransform;                                                 // 0x0070(0x0060)
    bool                                          bAffectChildren;                                              // 0x00D0(0x0001)
    char                                          pa_00D1[0x0007]                                               // 0x00D1(0x0007)
    TArray<FString>                               Callstack;                                                    // 0x00D8(0x0010)
    char                                          pa_00E8[0x0008]                                               // 0x00E8(0x0008)
};


// ScriptStruct  ControlRig.RigSingleParentElement
// Struct Size::0x0300
struct FRigSingleParentElement : public FRigTransformElement
{
    char                                          pa_02F0[0x0010]                                               // 0x02F0(0x0010)
};


// ScriptStruct  ControlRig.RigElementWeight
// Struct Size::0x000C
struct FRigElementWeight
{
    float                                         Location;                                                     // 0x0000(0x0004)
    float                                         Rotation;                                                     // 0x0004(0x0004)
    float                                         Scale;                                                        // 0x0008(0x0004)
};


// ScriptStruct  ControlRig.RigElementParentConstraint
// Struct Size::0x0090
struct FRigElementParentConstraint
{
    char                                          pa_0000[0x0090]                                               // 0x0000(0x0090)
};


// ScriptStruct  ControlRig.RigBoneElement
// Struct Size::0x0300
struct FRigBoneElement : public FRigSingleParentElement
{
    enum class ERigBoneType                       BoneType;                                                     // 0x02F8(0x0001)
    char                                          pa_02F9[0x0007]                                               // 0x02F9(0x0007)
};


// ScriptStruct  ControlRig.RigNullElement
// Struct Size::0x03F0
struct FRigNullElement : public FRigMultiParentElement
{
};


// ScriptStruct  ControlRig.RigCurveElement
// Struct Size::0x00F8
struct FRigCurveElement : public FRigBaseElement
{
    char                                          pa_00F0[0x0008]                                               // 0x00F0(0x0008)
};


// ScriptStruct  ControlRig.RigRigidBodySettings
// Struct Size::0x0004
struct FRigRigidBodySettings
{
    float                                         Mass;                                                         // 0x0000(0x0004)
};


// ScriptStruct  ControlRig.RigRigidBodyElement
// Struct Size::0x0300
struct FRigRigidBodyElement : public FRigSingleParentElement
{
    FRigRigidBodySettings                         Settings;                                                     // 0x02F8(0x0004)
    char                                          pa_02FC[0x0004]                                               // 0x02FC(0x0004)
};


// ScriptStruct  ControlRig.RigReferenceElement
// Struct Size::0x0310
struct FRigReferenceElement : public FRigSingleParentElement
{
    char                                          pa_0300[0x0010]                                               // 0x0300(0x0010)
};


// ScriptStruct  ControlRig.RigHierarchyCopyPasteContentPerElement
// Struct Size::0x0200
struct FRigHierarchyCopyPasteContentPerElement
{
    FRigElementKey                                Key;                                                          // 0x0000(0x000C)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FString                                       Content;                                                      // 0x0010(0x0010)
    TArray<FRigElementKey>                        Parents;                                                      // 0x0020(0x0010)
    TArray<FRigElementWeight>                     ParentWeights;                                                // 0x0030(0x0010)
    FRigCurrentAndInitialTransform                Pose;                                                         // 0x0040(0x01C0)
};


// ScriptStruct  ControlRig.RigHierarchyCopyPasteContent
// Struct Size::0x0050
struct FRigHierarchyCopyPasteContent
{
    TArray<FRigHierarchyCopyPasteContentPerElement>Elements;                                                    // 0x0000(0x0010)
    TArray<enum class ERigElementType>            Types;                                                        // 0x0010(0x0010)
    TArray<FString>                               Contents;                                                     // 0x0020(0x0010)
    TArray<FTransform>                            LocalTransforms;                                              // 0x0030(0x0010)
    TArray<FTransform>                            GlobalTransforms;                                             // 0x0040(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0008
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0008
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0040
struct FRigUnit : public FRigUnitMutable
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0008
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0040
struct FRigUnit : public FRigUnitMutable
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0008
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0040
struct FRigUnit : public FRigUnitMutable
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0008
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0040
struct FRigUnit : public FRigUnitMutable
{
};


// ScriptStruct  ControlRig.StructReference
// Struct Size::0x0008
struct FStructReference
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
};


// ScriptStruct  Engine.AnimNode
// Struct Size::0x0058
struct FAnimNode : public FAnimNode
{
    TArray<FName>                                 SourcePropertyNames;                                          // 0x0010(0x0010)
    TArray<FName>                                 DestPropertyNames;                                            // 0x0020(0x0010)
    UObject*                                      TargetInstance;                                               // 0x0030(0x0008)
    char                                          pa_0038[0x0020]                                               // 0x0038(0x0020)
};


// ScriptStruct  ControlRig.AnimNode
// Struct Size::0x0270
struct FAnimNode : public FAnimNode
{
    FPoseLink                                     Source;                                                       // 0x0058(0x0010)
    bool                                          bResetInputPoseToInitial;                                     // 0x0068(0x0001)
    bool                                          bTransferInputPose;                                           // 0x0069(0x0001)
    bool                                          bTransferInputCurves;                                         // 0x006A(0x0001)
    bool                                          bTransferPoseInGlobalSpace;                                   // 0x006B(0x0001)
    char                                          pa_006C[0x0004]                                               // 0x006C(0x0004)
    TArray<FBoneReference>                        InputBonesToTransfer;                                         // 0x0070(0x0010)
    char                                          pa_0080[0x01C0]                                               // 0x0080(0x01C0)
    TWeakObjectPtr<UNodeMappingContainer>         NodeMappingContainer;                                         // 0x0240(0x0008)
    FControlRigIOSettings                         InputSettings;                                                // 0x0248(0x0002)
    FControlRigIOSettings                         OutputSettings;                                               // 0x024A(0x0002)
    bool                                          bExecute;                                                     // 0x024C(0x0001)
    char                                          pa_024D[0x000B]                                               // 0x024D(0x000B)
    TArray<FControlRigAnimNodeEventName>          EventQueue;                                                   // 0x0258(0x0010)
    char                                          pa_0268[0x0008]                                               // 0x0268(0x0008)
};


// ScriptStruct  ControlRig.ControlRigAnimNodeEventName
// Struct Size::0x0008
struct FControlRigAnimNodeEventName
{
    FName                                         EventName;                                                    // 0x0000(0x0008)
};


// ScriptStruct  ControlRig.ControlRigIOSettings
// Struct Size::0x0002
struct FControlRigIOSettings
{
    bool                                          bUpdatePose;                                                  // 0x0000(0x0001)
    bool                                          bUpdateCurves;                                                // 0x0001(0x0001)
};


// ScriptStruct  ControlRig.AnimNode
// Struct Size::0x0470
struct FAnimNode : public FAnimNode
{
    UControlRig*                                  ControlRigClass;                                              // 0x0270(0x0008)
    UControlRig*                                  ControlRig;                                                   // 0x0278(0x0008)
    float                                         Alpha;                                                        // 0x0280(0x0004)
    enum class EAnimAlphaInputType                AlphaInputType;                                               // 0x0284(0x0001)
    char                                          bAlphaBoolEnabled;                                            // 0x0285(0x0001)
    char                                          bSetRefPoseFromSkeleton;                                      // 0x0285(0x0001)
    char                                          pa_0286[0x0002]                                               // 0x0286(0x0002)
    FInputScaleBias                               AlphaScaleBias;                                               // 0x0288(0x0008)
    FInputAlphaBoolBlend                          AlphaBoolBlend;                                               // 0x0290(0x0048)
    FName                                         AlphaCurveName;                                               // 0x02D8(0x0008)
    FInputScaleBiasClamp                          AlphaScaleBiasClamp;                                          // 0x02E0(0x0030)
    TMap<FName,FName>                             InputMapping;                                                 // 0x0310(0x0050)
    TMap<FName,FName>                             OutputMapping;                                                // 0x0360(0x0050)
    char                                          pa_03B0[0x00B0]                                               // 0x03B0(0x00B0)
    int32_t                                       LODThreshold;                                                 // 0x0460(0x0004)
    char                                          pa_0464[0x000C]                                               // 0x0464(0x000C)
};


// ScriptStruct  ControlRig.AnimNode
// Struct Size::0x0278
struct FAnimNode : public FAnimNode
{
    TWeakObjectPtr<UControlRig>                   ControlRig;                                                   // 0x0270(0x0008)
};


// ScriptStruct  Engine.AnimInstanceProxy
// Struct Size::0x0880
struct FAnimInstanceProxy
{
    char                                          pa_0000[0x0880]                                               // 0x0000(0x0880)
};


// ScriptStruct  ControlRig.ControlRigAnimInstanceProxy
// Struct Size::0x0920
struct FControlRigAnimInstanceProxy : public FAnimInstanceProxy
{
    char                                          pa_0880[0x00A0]                                               // 0x0880(0x00A0)
};


// ScriptStruct  ControlRig.ControlRigComponentMappedElement
// Struct Size::0x00D0
struct FControlRigComponentMappedElement
{
    FComponentReference                           ComponentReference;                                           // 0x0000(0x0028)
    int32_t                                       TransformIndex;                                               // 0x0028(0x0004)
    FName                                         TransformName;                                                // 0x002C(0x0008)
    enum class ERigElementType                    ElementType;                                                  // 0x0034(0x0001)
    char                                          pa_0035[0x0003]                                               // 0x0035(0x0003)
    FName                                         ElementName;                                                  // 0x0038(0x0008)
    enum class EControlRigComponentMapDirection   Direction;                                                    // 0x0040(0x0001)
    char                                          pa_0041[0x000F]                                               // 0x0041(0x000F)
    FTransform                                    Offset;                                                       // 0x0050(0x0060)
    float                                         Weight;                                                       // 0x00B0(0x0004)
    enum class EControlRigComponentSpace          Space;                                                        // 0x00B4(0x0001)
    char                                          pa_00B5[0x0003]                                               // 0x00B5(0x0003)
    USceneComponent*                              SceneComponent;                                               // 0x00B8(0x0008)
    int32_t                                       ElementIndex;                                                 // 0x00C0(0x0004)
    int32_t                                       SubIndex;                                                     // 0x00C4(0x0004)
    char                                          pa_00C8[0x0008]                                               // 0x00C8(0x0008)
};


// ScriptStruct  Engine.BaseComponentReference
// Struct Size::0x0020
struct FBaseComponentReference
{
    FName                                         ComponentProperty;                                            // 0x0000(0x0008)
    FString                                       PathToComponent;                                              // 0x0008(0x0010)
    char                                          pa_0018[0x0008]                                               // 0x0018(0x0008)
};


// ScriptStruct  Engine.ComponentReference
// Struct Size::0x0028
struct FComponentReference : public FBaseComponentReference
{
    TWeakObjectPtr<AActor>                        OtherActor;                                                   // 0x0020(0x0008)
};


// ScriptStruct  ControlRig.ControlRigComponentMappedComponent
// Struct Size::0x0018
struct FControlRigComponentMappedComponent
{
    USceneComponent*                              Component;                                                    // 0x0000(0x0008)
    FName                                         ElementName;                                                  // 0x0008(0x0008)
    enum class ERigElementType                    ElementType;                                                  // 0x0010(0x0001)
    enum class EControlRigComponentMapDirection   Direction;                                                    // 0x0011(0x0001)
    char                                          pa_0012[0x0006]                                               // 0x0012(0x0006)
};


// ScriptStruct  ControlRig.ControlRigComponentMappedBone
// Struct Size::0x0010
struct FControlRigComponentMappedBone
{
    FName                                         Source;                                                       // 0x0000(0x0008)
    FName                                         Target;                                                       // 0x0008(0x0008)
};


// ScriptStruct  ControlRig.ControlRigComponentMappedCurve
// Struct Size::0x0010
struct FControlRigComponentMappedCurve
{
    FName                                         Source;                                                       // 0x0000(0x0008)
    FName                                         Target;                                                       // 0x0008(0x0008)
};


// ScriptStruct  ControlRig.ControlShapeActorCreationParam
// Struct Size::0x01D0
struct FControlShapeActorCreationParam
{
    char                                          pa_0000[0x01D0]                                               // 0x0000(0x01D0)
};


// ScriptStruct  ControlRig.ControlRigShapeDefinition
// Struct Size::0x00B0
struct FControlRigShapeDefinition
{
    FName                                         ShapeName;                                                    // 0x0000(0x0008)
    TSoftObjectPtr<UStaticMesh>                   StaticMesh;                                                   // 0x0008(0x0030)
    char                                          pa_0038[0x0008]                                               // 0x0038(0x0008)
    FTransform                                    Transform;                                                    // 0x0040(0x0060)
    char                                          pa_00A0[0x0010]                                               // 0x00A0(0x0010)
};


// ScriptStruct  ControlRig.ControlRigValidationContext
// Struct Size::0x0028
struct FControlRigValidationContext
{
    char                                          pa_0000[0x0028]                                               // 0x0000(0x0028)
};


// ScriptStruct  ControlRig.ControlRigDrawInterface
// Struct Size::0x0018
struct FControlRigDrawInterface : public FControlRigDrawContainer
{
};


// ScriptStruct  ControlRig.CRFourPointBezier
// Struct Size::0x0060
struct FCRFourPointBezier
{
    FVector                                       A;                                                            // 0x0000(0x0018)
    FVector                                       B;                                                            // 0x0018(0x0018)
    FVector                                       C;                                                            // 0x0030(0x0018)
    FVector                                       D;                                                            // 0x0048(0x0018)
};


// ScriptStruct  ControlRig.CRSimContainer
// Struct Size::0x0018
struct FCRSimContainer
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    float                                         TimeStep;                                                     // 0x0008(0x0004)
    float                                         AccumulatedTime;                                              // 0x000C(0x0004)
    float                                         TimeLeftForStep;                                              // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  ControlRig.CRSimLinearSpring
// Struct Size::0x0010
struct FCRSimLinearSpring
{
    int32_t                                       SubjectA;                                                     // 0x0000(0x0004)
    int32_t                                       SubjectB;                                                     // 0x0004(0x0004)
    float                                         Coefficient;                                                  // 0x0008(0x0004)
    float                                         Equilibrium;                                                  // 0x000C(0x0004)
};


// ScriptStruct  ControlRig.CRSimPoint
// Struct Size::0x0040
struct FCRSimPoint
{
    float                                         Mass;                                                         // 0x0000(0x0004)
    float                                         Size;                                                         // 0x0004(0x0004)
    float                                         LinearDamping;                                                // 0x0008(0x0004)
    float                                         InheritMotion;                                                // 0x000C(0x0004)
    FVector                                       position;                                                     // 0x0010(0x0018)
    FVector                                       LinearVelocity;                                               // 0x0028(0x0018)
};


// ScriptStruct  ControlRig.CRSimPointConstraint
// Struct Size::0x0040
struct FCRSimPointConstraint
{
    enum class ECRSimConstraintType               Type;                                                         // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    int32_t                                       SubjectA;                                                     // 0x0004(0x0004)
    int32_t                                       SubjectB;                                                     // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FVector                                       DataA;                                                        // 0x0010(0x0018)
    FVector                                       DataB;                                                        // 0x0028(0x0018)
};


// ScriptStruct  ControlRig.CRSimPointContainer
// Struct Size::0x0078
struct FCRSimPointContainer : public FCRSimContainer
{
    TArray<FCRSimPoint>                           Points;                                                       // 0x0018(0x0010)
    TArray<FCRSimLinearSpring>                    Springs;                                                      // 0x0028(0x0010)
    TArray<FCRSimPointForce>                      Forces;                                                       // 0x0038(0x0010)
    TArray<FCRSimSoftCollision>                   CollisionVolumes;                                             // 0x0048(0x0010)
    TArray<FCRSimPointConstraint>                 Constraints;                                                  // 0x0058(0x0010)
    TArray<FCRSimPoint>                           PreviousStep;                                                 // 0x0068(0x0010)
};


// ScriptStruct  ControlRig.CRSimSoftCollision
// Struct Size::0x0080
struct FCRSimSoftCollision
{
    FTransform                                    Transform;                                                    // 0x0000(0x0060)
    enum class ECRSimSoftCollisionType            ShapeType;                                                    // 0x0060(0x0001)
    char                                          pa_0061[0x0003]                                               // 0x0061(0x0003)
    float                                         MinimumDistance;                                              // 0x0064(0x0004)
    float                                         MaximumDistance;                                              // 0x0068(0x0004)
    enum class EControlRigAnimEasingType          FalloffType;                                                  // 0x006C(0x0001)
    char                                          pa_006D[0x0003]                                               // 0x006D(0x0003)
    float                                         Coefficient;                                                  // 0x0070(0x0004)
    bool                                          bInverted;                                                    // 0x0074(0x0001)
    char                                          pa_0075[0x000B]                                               // 0x0075(0x000B)
};


// ScriptStruct  ControlRig.CRSimPointForce
// Struct Size::0x0028
struct FCRSimPointForce
{
    enum class ECRSimPointForceType               ForceType;                                                    // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    FVector                                       Vector;                                                       // 0x0008(0x0018)
    float                                         Coefficient;                                                  // 0x0020(0x0004)
    bool                                          bNormalize;                                                   // 0x0024(0x0001)
    char                                          pa_0025[0x0003]                                               // 0x0025(0x0003)
};


// ScriptStruct  ControlRig.ConstraintNodeData
// Struct Size::0x0140
struct FConstraintNodeData
{
    FTransform                                    RelativeParent;                                               // 0x0000(0x0060)
    FConstraintOffset                             ConstraintOffset;                                             // 0x0060(0x00C0)
    FName                                         LinkedNode;                                                   // 0x0120(0x0008)
    TArray<FTransformConstraint>                  Constraints;                                                  // 0x0128(0x0010)
    char                                          pa_0138[0x0008]                                               // 0x0138(0x0008)
};


// ScriptStruct  AnimationCore.TransformConstraint
// Struct Size::0x0028
struct FTransformConstraint
{
    FConstraintDescription                        Operator;                                                     // 0x0000(0x000D)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
    FName                                         SourceNode;                                                   // 0x0010(0x0008)
    FName                                         TargetNode;                                                   // 0x0018(0x0008)
    float                                         Weight;                                                       // 0x0020(0x0004)
    bool                                          bMaintainOffset;                                              // 0x0024(0x0001)
    char                                          pa_0025[0x0003]                                               // 0x0025(0x0003)
};


// ScriptStruct  AnimationCore.ConstraintDescription
// Struct Size::0x000D
struct FConstraintDescription
{
    bool                                          bTranslation;                                                 // 0x0000(0x0001)
    bool                                          bRotation;                                                    // 0x0001(0x0001)
    bool                                          bScale;                                                       // 0x0002(0x0001)
    bool                                          bParent;                                                      // 0x0003(0x0001)
    FFilterOptionPerAxis                          TranslationAxes;                                              // 0x0004(0x0003)
    FFilterOptionPerAxis                          RotationAxes;                                                 // 0x0007(0x0003)
    FFilterOptionPerAxis                          ScaleAxes;                                                    // 0x000A(0x0003)
};


// ScriptStruct  AnimationCore.FilterOptionPerAxis
// Struct Size::0x0003
struct FFilterOptionPerAxis
{
    bool                                          bX;                                                           // 0x0000(0x0001)
    bool                                          bY;                                                           // 0x0001(0x0001)
    bool                                          bZ;                                                           // 0x0002(0x0001)
};


// ScriptStruct  AnimationCore.ConstraintOffset
// Struct Size::0x00C0
struct FConstraintOffset
{
    FVector                                       Translation;                                                  // 0x0000(0x0018)
    char                                          pa_0018[0x0008]                                               // 0x0018(0x0008)
    FQuat                                         Rotation;                                                     // 0x0020(0x0020)
    FVector                                       Scale;                                                        // 0x0040(0x0018)
    char                                          pa_0058[0x0008]                                               // 0x0058(0x0008)
    FTransform                                    Parent;                                                       // 0x0060(0x0060)
};


// ScriptStruct  AnimationCore.NodeHierarchyWithUserData
// Struct Size::0x0078
struct FNodeHierarchyWithUserData
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    FNodeHierarchyData                            Hierarchy;                                                    // 0x0008(0x0070)
};


// ScriptStruct  AnimationCore.NodeHierarchyData
// Struct Size::0x0070
struct FNodeHierarchyData
{
    TArray<FNodeObject>                           Nodes;                                                        // 0x0000(0x0010)
    TArray<FTransform>                            Transforms;                                                   // 0x0010(0x0010)
    TMap<FName,int32_t>                           NodeNameToIndexMapping;                                       // 0x0020(0x0050)
};


// ScriptStruct  AnimationCore.NodeObject
// Struct Size::0x0010
struct FNodeObject
{
    FName                                         Name;                                                         // 0x0000(0x0008)
    FName                                         ParentName;                                                   // 0x0008(0x0008)
};


// ScriptStruct  ControlRig.AnimationHierarchy
// Struct Size::0x0088
struct FAnimationHierarchy : public FNodeHierarchyWithUserData
{
    TArray<FConstraintNodeData>                   UserData;                                                     // 0x0078(0x0010)
};


// ScriptStruct  ControlRig.RigElement
// Struct Size::0x0018
struct FRigElement
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    FName                                         Name;                                                         // 0x0008(0x0008)
    int32_t                                       Index;                                                        // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  ControlRig.RigBone
// Struct Size::0x0170
struct FRigBone : public FRigElement
{
    FName                                         ParentName;                                                   // 0x0018(0x0008)
    int32_t                                       ParentIndex;                                                  // 0x0020(0x0004)
    char                                          pa_0024[0x000C]                                               // 0x0024(0x000C)
    FTransform                                    InitialTransform;                                             // 0x0030(0x0060)
    FTransform                                    GlobalTransform;                                              // 0x0090(0x0060)
    FTransform                                    LocalTransform;                                               // 0x00F0(0x0060)
    TArray<int32_t>                               Dependents;                                                   // 0x0150(0x0010)
    enum class ERigBoneType                       Type;                                                         // 0x0160(0x0001)
    char                                          pa_0161[0x000F]                                               // 0x0161(0x000F)
};


// ScriptStruct  ControlRig.RigBoneHierarchy
// Struct Size::0x0010
struct FRigBoneHierarchy
{
    TArray<FRigBone>                              Bones;                                                        // 0x0000(0x0010)
};


// ScriptStruct  ControlRig.RigControl
// Struct Size::0x0510
struct FRigControl : public FRigElement
{
    enum class ERigControlType                    ControlType;                                                  // 0x0018(0x0001)
    char                                          pa_0019[0x0003]                                               // 0x0019(0x0003)
    FName                                         DisplayName;                                                  // 0x001C(0x0008)
    FName                                         ParentName;                                                   // 0x0024(0x0008)
    int32_t                                       ParentIndex;                                                  // 0x002C(0x0004)
    FName                                         SpaceName;                                                    // 0x0030(0x0008)
    int32_t                                       SpaceIndex;                                                   // 0x0038(0x0004)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
    FTransform                                    OffsetTransform;                                              // 0x0040(0x0060)
    FRigControlValue                              InitialValue;                                                 // 0x00A0(0x00F0)
    FRigControlValue                              Value;                                                        // 0x0190(0x00F0)
    enum class ERigControlAxis                    PrimaryAxis;                                                  // 0x0280(0x0001)
    bool                                          bIsCurve;                                                     // 0x0281(0x0001)
    bool                                          bAnimatable;                                                  // 0x0282(0x0001)
    bool                                          bLimitTranslation;                                            // 0x0283(0x0001)
    bool                                          bLimitRotation;                                               // 0x0284(0x0001)
    bool                                          bLimitScale;                                                  // 0x0285(0x0001)
    bool                                          bDrawLimits;                                                  // 0x0286(0x0001)
    char                                          pa_0287[0x0009]                                               // 0x0287(0x0009)
    FRigControlValue                              MinimumValue;                                                 // 0x0290(0x00F0)
    FRigControlValue                              MaximumValue;                                                 // 0x0380(0x00F0)
    bool                                          bGizmoEnabled;                                                // 0x0470(0x0001)
    bool                                          bGizmoVisible;                                                // 0x0471(0x0001)
    char                                          pa_0472[0x0002]                                               // 0x0472(0x0002)
    FName                                         GizmoName;                                                    // 0x0474(0x0008)
    char                                          pa_047C[0x0004]                                               // 0x047C(0x0004)
    FTransform                                    GizmoTransform;                                               // 0x0480(0x0060)
    FLinearColor                                  GizmoColor;                                                   // 0x04E0(0x0010)
    TArray<int32_t>                               Dependents;                                                   // 0x04F0(0x0010)
    bool                                          bIsTransientControl;                                          // 0x0500(0x0001)
    char                                          pa_0501[0x0007]                                               // 0x0501(0x0007)
    UEnum*                                        ControlEnum;                                                  // 0x0508(0x0008)
};


// ScriptStruct  ControlRig.RigControlHierarchy
// Struct Size::0x0010
struct FRigControlHierarchy
{
    TArray<FRigControl>                           Controls;                                                     // 0x0000(0x0010)
};


// ScriptStruct  ControlRig.RigCurve
// Struct Size::0x0020
struct FRigCurve : public FRigElement
{
    float                                         Value;                                                        // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  ControlRig.RigCurveContainer
// Struct Size::0x0010
struct FRigCurveContainer
{
    TArray<FRigCurve>                             Curves;                                                       // 0x0000(0x0010)
};


// ScriptStruct  ControlRig.CachedRigElement
// Struct Size::0x0020
struct FCachedRigElement
{
    FRigElementKey                                Key;                                                          // 0x0000(0x000C)
    uint16_t                                      Index;                                                        // 0x000C(0x0002)
    char                                          pa_000E[0x0002]                                               // 0x000E(0x0002)
    int32_t                                       ContainerVersion;                                             // 0x0010(0x0004)
    char                                          pa_0014[0x000C]                                               // 0x0014(0x000C)
};


// ScriptStruct  ControlRig.RigHierarchyContainer
// Struct Size::0x0040
struct FRigHierarchyContainer
{
    FRigBoneHierarchy                             BoneHierarchy;                                                // 0x0000(0x0010)
    FRigSpaceHierarchy                            SpaceHierarchy;                                               // 0x0010(0x0010)
    FRigControlHierarchy                          ControlHierarchy;                                             // 0x0020(0x0010)
    FRigCurveContainer                            CurveContainer;                                               // 0x0030(0x0010)
};


// ScriptStruct  ControlRig.RigSpaceHierarchy
// Struct Size::0x0010
struct FRigSpaceHierarchy
{
    TArray<FRigSpace>                             Spaces;                                                       // 0x0000(0x0010)
};


// ScriptStruct  ControlRig.RigSpace
// Struct Size::0x00F0
struct FRigSpace : public FRigElement
{
    enum class ERigSpaceType                      SpaceType;                                                    // 0x0018(0x0001)
    char                                          pa_0019[0x0003]                                               // 0x0019(0x0003)
    FName                                         ParentName;                                                   // 0x001C(0x0008)
    int32_t                                       ParentIndex;                                                  // 0x0024(0x0004)
    char                                          pa_0028[0x0008]                                               // 0x0028(0x0008)
    FTransform                                    InitialTransform;                                             // 0x0030(0x0060)
    FTransform                                    LocalTransform;                                               // 0x0090(0x0060)
};


// ScriptStruct  ControlRig.RigHierarchyRef
// Struct Size::0x0001
struct FRigHierarchyRef
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  ControlRig.RigControlModifiedContext
// Struct Size::0x0018
struct FRigControlModifiedContext
{
    char                                          pa_0000[0x0018]                                               // 0x0000(0x0018)
};


// ScriptStruct  ControlRig.RigElementKeyCollection
// Struct Size::0x0010
struct FRigElementKeyCollection
{
    TArray<FRigElementKey>                        Keys;                                                         // 0x0000(0x0010)
};


// ScriptStruct  ControlRig.RigEventContext
// Struct Size::0x0028
struct FRigEventContext
{
    char                                          pa_0000[0x0028]                                               // 0x0000(0x0028)
};


// ScriptStruct  ControlRig.RigMirrorSettings
// Struct Size::0x0028
struct FRigMirrorSettings
{
    enum class EAxis                              MirrorAxis;                                                   // 0x0000(0x0001)
    enum class EAxis                              AxisToFlip;                                                   // 0x0001(0x0001)
    char                                          pa_0002[0x0006]                                               // 0x0002(0x0006)
    FString                                       SearchString;                                                 // 0x0008(0x0010)
    FString                                       ReplaceString;                                                // 0x0018(0x0010)
};


// ScriptStruct  ControlRig.RigBaseMetadata
// Struct Size::0x0028
struct FRigBaseMetadata
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
    FName                                         Name;                                                         // 0x0010(0x0008)
    enum class ERigMetadataType                   Type;                                                         // 0x0018(0x0001)
    char                                          pa_0019[0x000F]                                               // 0x0019(0x000F)
};


// ScriptStruct  ControlRig.RigBoolMetadata
// Struct Size::0x0030
struct FRigBoolMetadata : public FRigBaseMetadata
{
    bool                                          Value;                                                        // 0x0028(0x0001)
    char                                          pa_0029[0x0007]                                               // 0x0029(0x0007)
};


// ScriptStruct  ControlRig.RigBoolArrayMetadata
// Struct Size::0x0038
struct FRigBoolArrayMetadata : public FRigBaseMetadata
{
    TArray<bool>                                  Value;                                                        // 0x0028(0x0010)
};


// ScriptStruct  ControlRig.RigFloatMetadata
// Struct Size::0x0030
struct FRigFloatMetadata : public FRigBaseMetadata
{
    float                                         Value;                                                        // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
};


// ScriptStruct  ControlRig.RigFloatArrayMetadata
// Struct Size::0x0038
struct FRigFloatArrayMetadata : public FRigBaseMetadata
{
    TArray<float>                                 Value;                                                        // 0x0028(0x0010)
};


// ScriptStruct  ControlRig.RigInt32Metadata
// Struct Size::0x0030
struct FRigInt32Metadata : public FRigBaseMetadata
{
    int32_t                                       Value;                                                        // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
};


// ScriptStruct  ControlRig.RigInt32ArrayMetadata
// Struct Size::0x0038
struct FRigInt32ArrayMetadata : public FRigBaseMetadata
{
    TArray<int32_t>                               Value;                                                        // 0x0028(0x0010)
};


// ScriptStruct  ControlRig.RigNameMetadata
// Struct Size::0x0030
struct FRigNameMetadata : public FRigBaseMetadata
{
    FName                                         Value;                                                        // 0x0028(0x0008)
};


// ScriptStruct  ControlRig.RigNameArrayMetadata
// Struct Size::0x0038
struct FRigNameArrayMetadata : public FRigBaseMetadata
{
    TArray<FName>                                 Value;                                                        // 0x0028(0x0010)
};


// ScriptStruct  ControlRig.RigVectorMetadata
// Struct Size::0x0040
struct FRigVectorMetadata : public FRigBaseMetadata
{
    FVector                                       Value;                                                        // 0x0028(0x0018)
};


// ScriptStruct  ControlRig.RigVectorArrayMetadata
// Struct Size::0x0038
struct FRigVectorArrayMetadata : public FRigBaseMetadata
{
    TArray<FVector>                               Value;                                                        // 0x0028(0x0010)
};


// ScriptStruct  ControlRig.RigRotatorMetadata
// Struct Size::0x0040
struct FRigRotatorMetadata : public FRigBaseMetadata
{
    FRotator                                      Value;                                                        // 0x0028(0x0018)
};


// ScriptStruct  ControlRig.RigRotatorArrayMetadata
// Struct Size::0x0038
struct FRigRotatorArrayMetadata : public FRigBaseMetadata
{
    TArray<FRotator>                              Value;                                                        // 0x0028(0x0010)
};


// ScriptStruct  ControlRig.RigQuatMetadata
// Struct Size::0x0050
struct FRigQuatMetadata : public FRigBaseMetadata
{
    char                                          pa_0028[0x0008]                                               // 0x0028(0x0008)
    FQuat                                         Value;                                                        // 0x0030(0x0020)
};


// ScriptStruct  ControlRig.RigQuatArrayMetadata
// Struct Size::0x0038
struct FRigQuatArrayMetadata : public FRigBaseMetadata
{
    TArray<FQuat>                                 Value;                                                        // 0x0028(0x0010)
};


// ScriptStruct  ControlRig.RigTransformMetadata
// Struct Size::0x0090
struct FRigTransformMetadata : public FRigBaseMetadata
{
    char                                          pa_0028[0x0008]                                               // 0x0028(0x0008)
    FTransform                                    Value;                                                        // 0x0030(0x0060)
};


// ScriptStruct  ControlRig.RigTransformArrayMetadata
// Struct Size::0x0038
struct FRigTransformArrayMetadata : public FRigBaseMetadata
{
    TArray<FTransform>                            Value;                                                        // 0x0028(0x0010)
};


// ScriptStruct  ControlRig.RigLinearColorMetadata
// Struct Size::0x0038
struct FRigLinearColorMetadata : public FRigBaseMetadata
{
    FLinearColor                                  Value;                                                        // 0x0028(0x0010)
};


// ScriptStruct  ControlRig.RigLinearColorArrayMetadata
// Struct Size::0x0038
struct FRigLinearColorArrayMetadata : public FRigBaseMetadata
{
    TArray<FLinearColor>                          Value;                                                        // 0x0028(0x0010)
};


// ScriptStruct  ControlRig.RigElementKeyMetadata
// Struct Size::0x0038
struct FRigElementKeyMetadata : public FRigBaseMetadata
{
    FRigElementKey                                Value;                                                        // 0x0028(0x000C)
    char                                          pa_0034[0x0004]                                               // 0x0034(0x0004)
};


// ScriptStruct  ControlRig.RigElementKeyArrayMetadata
// Struct Size::0x0038
struct FRigElementKeyArrayMetadata : public FRigBaseMetadata
{
    TArray<FRigElementKey>                        Value;                                                        // 0x0028(0x0010)
};


// ScriptStruct  ControlRig.RigPoseElement
// Struct Size::0x00F0
struct FRigPoseElement
{
    FCachedRigElement                             Index;                                                        // 0x0000(0x0020)
    FTransform                                    GlobalTransform;                                              // 0x0020(0x0060)
    FTransform                                    LocalTransform;                                               // 0x0080(0x0060)
    float                                         CurveValue;                                                   // 0x00E0(0x0004)
    char                                          pa_00E4[0x000C]                                               // 0x00E4(0x000C)
};


// ScriptStruct  ControlRig.RigPose
// Struct Size::0x0070
struct FRigPose
{
    TArray<FRigPoseElement>                       Elements;                                                     // 0x0000(0x0010)
    int32_t                                       HierarchyTopologyVersion;                                     // 0x0010(0x0004)
    int32_t                                       PoseHash;                                                     // 0x0014(0x0004)
    char                                          pa_0018[0x0058]                                               // 0x0018(0x0058)
};


// ScriptStruct  ControlRig.RigInfluenceEntryModifier
// Struct Size::0x0010
struct FRigInfluenceEntryModifier
{
    TArray<FRigElementKey>                        AffectedList;                                                 // 0x0000(0x0010)
};


// ScriptStruct  ControlRig.AnimNode
// Struct Size::0x0030
struct FAnimNode : public FAnimNode
{
    FPoseLink                                     InputPose;                                                    // 0x0010(0x0010)
    char                                          pa_0020[0x0010]                                               // 0x0020(0x0010)
};


// ScriptStruct  ControlRig.ControlRigLayerInstanceProxy
// Struct Size::0x0920
struct FControlRigLayerInstanceProxy : public FAnimInstanceProxy
{
    char                                          pa_0880[0x00A0]                                               // 0x0880(0x00A0)
};


// ScriptStruct  ControlRig.ControlRigSequenceObjectReference
// Struct Size::0x0008
struct FControlRigSequenceObjectReference
{
    UControlRig*                                  ControlRigClass;                                              // 0x0000(0x0008)
};


// ScriptStruct  ControlRig.ControlRigSequenceObjectReferences
// Struct Size::0x0010
struct FControlRigSequenceObjectReferences
{
    TArray<FControlRigSequenceObjectReference>    Array;                                                        // 0x0000(0x0010)
};


// ScriptStruct  ControlRig.ControlRigSequenceObjectReferenceMap
// Struct Size::0x0020
struct FControlRigSequenceObjectReferenceMap
{
    TArray<FGuid>                                 BindingIds;                                                   // 0x0000(0x0010)
    TArray<FControlRigSequenceObjectReferences>   References;                                                   // 0x0010(0x0010)
};


// ScriptStruct  ControlRig.EnumParameterNameAndCurve
// Struct Size::0x0110
struct FEnumParameterNameAndCurve
{
    FName                                         ParameterName;                                                // 0x0000(0x0008)
    FMovieSceneByteChannel                        ParameterCurve;                                               // 0x0008(0x0108)
};


// ScriptStruct  MovieScene.MovieSceneByteChannel
// Struct Size::0x0108
struct FMovieSceneByteChannel : public FMovieSceneChannel
{
    TArray<FFrameNumber>                          Times;                                                        // 0x0050(0x0010)
    char                                          DefaultValue;                                                 // 0x0060(0x0001)
    bool                                          bHasDefaultValue;                                             // 0x0061(0x0001)
    char                                          pa_0062[0x0006]                                               // 0x0062(0x0006)
    TArray<char>                                  Values;                                                       // 0x0068(0x0010)
    UEnum*                                        Enum;                                                         // 0x0078(0x0008)
    char                                          pa_0080[0x0088]                                               // 0x0080(0x0088)
};


// ScriptStruct  ControlRig.IntegerParameterNameAndCurve
// Struct Size::0x0108
struct FIntegerParameterNameAndCurve
{
    FName                                         ParameterName;                                                // 0x0000(0x0008)
    FMovieSceneIntegerChannel                     ParameterCurve;                                               // 0x0008(0x0100)
};


// ScriptStruct  ControlRig.SpaceControlNameAndChannel
// Struct Size::0x0118
struct FSpaceControlNameAndChannel
{
    FName                                         ControlName;                                                  // 0x0000(0x0008)
    FMovieSceneControlRigSpaceChannel             SpaceCurve;                                                   // 0x0008(0x0110)
};


// ScriptStruct  ControlRig.MovieSceneControlRigSpaceChannel
// Struct Size::0x0110
struct FMovieSceneControlRigSpaceChannel : public FMovieSceneChannel
{
    TArray<FFrameNumber>                          KeyTimes;                                                     // 0x0050(0x0010)
    TArray<FMovieSceneControlRigSpaceBaseKey>     KeyValues;                                                    // 0x0060(0x0010)
    char                                          pa_0070[0x00A0]                                               // 0x0070(0x00A0)
};


// ScriptStruct  ControlRig.MovieSceneControlRigSpaceBaseKey
// Struct Size::0x0010
struct FMovieSceneControlRigSpaceBaseKey
{
    enum class EMovieSceneControlRigSpaceType     SpaceType;                                                    // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FRigElementKey                                ControlRigElement;                                            // 0x0004(0x000C)
};


// ScriptStruct  ControlRig.ChannelMapInfo
// Struct Size::0x0040
struct FChannelMapInfo
{
    int32_t                                       ControlIndex;                                                 // 0x0000(0x0004)
    int32_t                                       TotalChannelIndex;                                            // 0x0004(0x0004)
    int32_t                                       ChannelIndex;                                                 // 0x0008(0x0004)
    int32_t                                       ParentControlIndex;                                           // 0x000C(0x0004)
    FName                                         ChannelTypeName;                                              // 0x0010(0x0008)
    bool                                          bDoesHaveSpace;                                               // 0x0018(0x0001)
    char                                          pa_0019[0x0003]                                               // 0x0019(0x0003)
    int32_t                                       SpaceChannelIndex;                                            // 0x001C(0x0004)
    int32_t                                       MaskIndex;                                                    // 0x0020(0x0004)
    int32_t                                       CategoryIndex;                                                // 0x0024(0x0004)
    char                                          pa_0028[0x0008]                                               // 0x0028(0x0008)
    TArray<uint32_t>                              ConstraintsIndex;                                             // 0x0030(0x0010)
};


// ScriptStruct  MovieSceneTracks.MovieSceneParameterSectionTemplate
// Struct Size::0x0080
struct FMovieSceneParameterSectionTemplate : public FMovieSceneEvalTemplate
{
    TArray<FScalarParameterNameAndCurve>          Scalars;                                                      // 0x0020(0x0010)
    TArray<FBoolParameterNameAndCurve>            Bools;                                                        // 0x0030(0x0010)
    TArray<FVector2DParameterNameAndCurves>       Vector2Ds;                                                    // 0x0040(0x0010)
    TArray<FVectorParameterNameAndCurves>         Vectors;                                                      // 0x0050(0x0010)
    TArray<FColorParameterNameAndCurves>          Colors;                                                       // 0x0060(0x0010)
    TArray<FTransformParameterNameAndCurves>      Transforms;                                                   // 0x0070(0x0010)
};


// ScriptStruct  MovieSceneTracks.TransformParameterNameAndCurves
// Struct Size::0x0998
struct FTransformParameterNameAndCurves
{
    FName                                         ParameterName;                                                // 0x0000(0x0008)
    FMovieSceneFloatChannel                       Translation;                                                  // 0x0008(0x0110)
    char                                          pa_0118[0x0220]                                               // 0x0118(0x0220)
    FMovieSceneFloatChannel                       Rotation;                                                     // 0x0338(0x0110)
    char                                          pa_0448[0x0220]                                               // 0x0448(0x0220)
    FMovieSceneFloatChannel                       Scale;                                                        // 0x0668(0x0110)
    char                                          pa_0778[0x0220]                                               // 0x0778(0x0220)
};


// ScriptStruct  MovieSceneTracks.ColorParameterNameAndCurves
// Struct Size::0x0448
struct FColorParameterNameAndCurves
{
    FName                                         ParameterName;                                                // 0x0000(0x0008)
    FMovieSceneFloatChannel                       RedCurve;                                                     // 0x0008(0x0110)
    FMovieSceneFloatChannel                       GreenCurve;                                                   // 0x0118(0x0110)
    FMovieSceneFloatChannel                       BlueCurve;                                                    // 0x0228(0x0110)
    FMovieSceneFloatChannel                       AlphaCurve;                                                   // 0x0338(0x0110)
};


// ScriptStruct  MovieSceneTracks.VectorParameterNameAndCurves
// Struct Size::0x0338
struct FVectorParameterNameAndCurves
{
    FName                                         ParameterName;                                                // 0x0000(0x0008)
    FMovieSceneFloatChannel                       XCurve;                                                       // 0x0008(0x0110)
    FMovieSceneFloatChannel                       YCurve;                                                       // 0x0118(0x0110)
    FMovieSceneFloatChannel                       ZCurve;                                                       // 0x0228(0x0110)
};


// ScriptStruct  MovieSceneTracks.Vector2DParameterNameAndCurves
// Struct Size::0x0228
struct FVector2DParameterNameAndCurves
{
    FName                                         ParameterName;                                                // 0x0000(0x0008)
    FMovieSceneFloatChannel                       XCurve;                                                       // 0x0008(0x0110)
    FMovieSceneFloatChannel                       YCurve;                                                       // 0x0118(0x0110)
};


// ScriptStruct  MovieSceneTracks.BoolParameterNameAndCurve
// Struct Size::0x0108
struct FBoolParameterNameAndCurve
{
    FName                                         ParameterName;                                                // 0x0000(0x0008)
    FMovieSceneBoolChannel                        ParameterCurve;                                               // 0x0008(0x0100)
};


// ScriptStruct  MovieSceneTracks.ScalarParameterNameAndCurve
// Struct Size::0x0118
struct FScalarParameterNameAndCurve
{
    FName                                         ParameterName;                                                // 0x0000(0x0008)
    FMovieSceneFloatChannel                       ParameterCurve;                                               // 0x0008(0x0110)
};


// ScriptStruct  ControlRig.MovieSceneControlRigParameterTemplate
// Struct Size::0x00C0
struct FMovieSceneControlRigParameterTemplate : public FMovieSceneParameterSectionTemplate
{
    TArray<FEnumParameterNameAndCurve>            Enums;                                                        // 0x0080(0x0010)
    TArray<FIntegerParameterNameAndCurve>         Integers;                                                     // 0x0090(0x0010)
    TArray<FSpaceControlNameAndChannel>           Spaces;                                                       // 0x00A0(0x0010)
    TArray<FConstraintAndActiveChannel>           Constraints;                                                  // 0x00B0(0x0010)
};


// ScriptStruct  Constraints.ConstraintAndActiveChannel
// Struct Size::0x0138
struct FConstraintAndActiveChannel
{
    TSoftObjectPtr<UTickableConstraint>           Constraint;                                                   // 0x0000(0x0030)
    FMovieSceneConstraintChannel                  ActiveChannel;                                                // 0x0030(0x0100)
    UTickableConstraint*                          ConstraintCopyToSpawn;                                        // 0x0130(0x0008)
};


// ScriptStruct  Constraints.MovieSceneConstraintChannel
// Struct Size::0x0100
struct FMovieSceneConstraintChannel : public FMovieSceneBoolChannel
{
};


// ScriptStruct  ControlRig.ControlRigSettingsPerPinBool
// Struct Size::0x0050
struct FControlRigSettingsPerPinBool
{
    TMap<FString,bool>                            Values;                                                       // 0x0000(0x0050)
};


// ScriptStruct  ControlRig.RigControlCopy
// Struct Size::0x02A0
struct FRigControlCopy
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
    FName                                         Name;                                                         // 0x0010(0x0008)
    enum class ERigControlType                    ControlType;                                                  // 0x0018(0x0001)
    char                                          pa_0019[0x0007]                                               // 0x0019(0x0007)
    FRigControlValue                              Value;                                                        // 0x0020(0x00F0)
    FRigElementKey                                ParentKey;                                                    // 0x0110(0x000C)
    char                                          pa_011C[0x0004]                                               // 0x011C(0x0004)
    FTransform                                    OffsetTransform;                                              // 0x0120(0x0060)
    FTransform                                    ParentTransform;                                              // 0x0180(0x0060)
    FTransform                                    LocalTransform;                                               // 0x01E0(0x0060)
    FTransform                                    GlobalTransform;                                              // 0x0240(0x0060)
};


// ScriptStruct  ControlRig.ControlRigControlPose
// Struct Size::0x0060
struct FControlRigControlPose
{
    TArray<FRigControlCopy>                       CopyOfControls;                                               // 0x0000(0x0010)
    char                                          pa_0010[0x0050]                                               // 0x0010(0x0050)
};


// ScriptStruct  ControlRig.RigDispatchFactory
// Struct Size::0x0018
struct FRigDispatchFactory : public FRigVMDispatchFactory
{
};


// ScriptStruct  ControlRig.RigDispatch
// Struct Size::0x0050
struct FRigDispatch : public FRigDispatchFactory
{
    char                                          pa_0018[0x0038]                                               // 0x0018(0x0038)
};


// ScriptStruct  ControlRig.RigDispatch
// Struct Size::0x0050
struct FRigDispatch : public FRigDispatch
{
};


// ScriptStruct  ControlRig.RigDispatch
// Struct Size::0x0050
struct FRigDispatch : public FRigDispatch
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0010
struct FRigUnit : public FRigUnit
{
    enum class EControlRigAnimEasingType          Type;                                                         // 0x0008(0x0001)
    char                                          pa_0009[0x0007]                                               // 0x0009(0x0007)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0028
struct FRigUnit : public FRigUnit
{
    float                                         Value;                                                        // 0x0008(0x0004)
    enum class EControlRigAnimEasingType          Type;                                                         // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
    float                                         SourceMinimum;                                                // 0x0010(0x0004)
    float                                         SourceMaximum;                                                // 0x0014(0x0004)
    float                                         TargetMinimum;                                                // 0x0018(0x0004)
    float                                         TargetMaximum;                                                // 0x001C(0x0004)
    float                                         Result;                                                       // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00B0
struct FRigUnit : public FRigUnit
{
    float                                         Value;                                                        // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FRuntimeFloatCurve                            Curve;                                                        // 0x0010(0x0088)
    float                                         SourceMinimum;                                                // 0x0098(0x0004)
    float                                         SourceMaximum;                                                // 0x009C(0x0004)
    float                                         TargetMinimum;                                                // 0x00A0(0x0004)
    float                                         TargetMaximum;                                                // 0x00A4(0x0004)
    float                                         Result;                                                       // 0x00A8(0x0004)
    char                                          pa_00AC[0x0004]                                               // 0x00AC(0x0004)
};


// ScriptStruct  Engine.RuntimeFloatCurve
// Struct Size::0x0088
struct FRuntimeFloatCurve
{
    FRichCurve                                    EditorCurveData;                                              // 0x0000(0x0080)
    UCurveFloat*                                  ExternalCurve;                                                // 0x0080(0x0008)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0090
struct FRigUnit : public FRigUnit
{
    FRuntimeFloatCurve                            Curve;                                                        // 0x0008(0x0088)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0010
struct FRigUnit : public FRigUnit
{
    float                                         Result;                                                       // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0028
struct FRigUnit : public FRigUnit
{
    float                                         Year;                                                         // 0x0008(0x0004)
    float                                         Month;                                                        // 0x000C(0x0004)
    float                                         Day;                                                          // 0x0010(0x0004)
    float                                         WeekDay;                                                      // 0x0014(0x0004)
    float                                         Hours;                                                        // 0x0018(0x0004)
    float                                         Minutes;                                                      // 0x001C(0x0004)
    float                                         Seconds;                                                      // 0x0020(0x0004)
    float                                         OverallSeconds;                                               // 0x0024(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0010
struct FRigUnit : public FRigUnit
{
    float                                         Frames;                                                       // 0x0008(0x0004)
    float                                         Seconds;                                                      // 0x000C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0010
struct FRigUnit : public FRigUnit
{
    float                                         Seconds;                                                      // 0x0008(0x0004)
    float                                         Frames;                                                       // 0x000C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0078
struct FRigUnit : public FRigUnit
{
    FVector                                       Start;                                                        // 0x0008(0x0018)
    FVector                                       End;                                                          // 0x0020(0x0018)
    enum class ECollisionChannel                  Channel;                                                      // 0x0038(0x0001)
    char                                          pa_0039[0x0003]                                               // 0x0039(0x0003)
    float                                         Radius;                                                       // 0x003C(0x0004)
    bool                                          bHit;                                                         // 0x0040(0x0001)
    char                                          pa_0041[0x0007]                                               // 0x0041(0x0007)
    FVector                                       HitLocation;                                                  // 0x0048(0x0018)
    FVector                                       HitNormal;                                                    // 0x0060(0x0018)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0078
struct FRigUnit : public FRigUnit
{
    FVector                                       Start;                                                        // 0x0008(0x0018)
    FVector                                       End;                                                          // 0x0020(0x0018)
    enum class ETraceTypeQuery                    TraceChannel;                                                 // 0x0038(0x0001)
    char                                          pa_0039[0x0003]                                               // 0x0039(0x0003)
    float                                         Radius;                                                       // 0x003C(0x0004)
    bool                                          bHit;                                                         // 0x0040(0x0001)
    char                                          pa_0041[0x0007]                                               // 0x0041(0x0007)
    FVector                                       HitLocation;                                                  // 0x0048(0x0018)
    FVector                                       HitNormal;                                                    // 0x0060(0x0018)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0080
struct FRigUnit : public FRigUnit
{
    FVector                                       Start;                                                        // 0x0008(0x0018)
    FVector                                       End;                                                          // 0x0020(0x0018)
    TArray<enum class EObjectTypeQuery>           ObjectTypes;                                                  // 0x0038(0x0010)
    float                                         Radius;                                                       // 0x0048(0x0004)
    bool                                          bHit;                                                         // 0x004C(0x0001)
    char                                          pa_004D[0x0003]                                               // 0x004D(0x0003)
    FVector                                       HitLocation;                                                  // 0x0050(0x0018)
    FVector                                       HitNormal;                                                    // 0x0068(0x0018)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0180
struct FRigUnit : public FRigUnit
{
    FEulerTransform                               Transform;                                                    // 0x0008(0x0048)
    FTransform                                    Base;                                                         // 0x0050(0x0060)
    FTransform                                    InitTransform;                                                // 0x00B0(0x0060)
    FTransform                                    Result;                                                       // 0x0110(0x0060)
    FTransformFilter                              Filter;                                                       // 0x0170(0x0009)
    char                                          pa_0179[0x0007]                                               // 0x0179(0x0007)
};


// ScriptStruct  AnimationCore.TransformFilter
// Struct Size::0x0009
struct FTransformFilter
{
    FFilterOptionPerAxis                          TranslationFilter;                                            // 0x0000(0x0003)
    FFilterOptionPerAxis                          RotationFilter;                                               // 0x0003(0x0003)
    FFilterOptionPerAxis                          ScaleFilter;                                                  // 0x0006(0x0003)
};


// ScriptStruct  AnimationCore.EulerTransform
// Struct Size::0x0048
struct FEulerTransform
{
    FVector                                       Location;                                                     // 0x0000(0x0018)
    FRotator                                      Rotation;                                                     // 0x0018(0x0018)
    FVector                                       Scale;                                                        // 0x0030(0x0018)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x01E0
struct FRigUnit : public FRigUnit
{
    FTransform                                    MeshTransform;                                                // 0x0180(0x0060)
};


// ScriptStruct  ControlRig.RigDispatch
// Struct Size::0x0018
struct FRigDispatch : public FRigDispatchFactory
{
};


// ScriptStruct  ControlRig.RigDispatch
// Struct Size::0x0018
struct FRigDispatch : public FRigDispatch
{
};


// ScriptStruct  ControlRig.RigDispatch
// Struct Size::0x0018
struct FRigDispatch : public FRigDispatch
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0008
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0020
struct FRigUnit : public FRigUnit
{
    FName                                         A;                                                            // 0x0008(0x0008)
    FName                                         B;                                                            // 0x0010(0x0008)
    FName                                         Result;                                                       // 0x0018(0x0008)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0028
struct FRigUnit : public FRigUnit
{
    FName                                         Name;                                                         // 0x0008(0x0008)
    int32_t                                       Count;                                                        // 0x0010(0x0004)
    bool                                          FromEnd;                                                      // 0x0014(0x0001)
    char                                          pa_0015[0x0003]                                               // 0x0015(0x0003)
    FName                                         Remainder;                                                    // 0x0018(0x0008)
    FName                                         Chopped;                                                      // 0x0020(0x0008)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0028
struct FRigUnit : public FRigUnit
{
    FName                                         Name;                                                         // 0x0008(0x0008)
    FName                                         Old;                                                          // 0x0010(0x0008)
    FName                                         New;                                                          // 0x0018(0x0008)
    FName                                         Result;                                                       // 0x0020(0x0008)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0020
struct FRigUnit : public FRigUnit
{
    FName                                         Name;                                                         // 0x0008(0x0008)
    FName                                         Ending;                                                       // 0x0010(0x0008)
    bool                                          Result;                                                       // 0x0018(0x0001)
    char                                          pa_0019[0x0007]                                               // 0x0019(0x0007)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0020
struct FRigUnit : public FRigUnit
{
    FName                                         Name;                                                         // 0x0008(0x0008)
    FName                                         Start;                                                        // 0x0010(0x0008)
    bool                                          Result;                                                       // 0x0018(0x0001)
    char                                          pa_0019[0x0007]                                               // 0x0019(0x0007)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0020
struct FRigUnit : public FRigUnit
{
    FName                                         Name;                                                         // 0x0008(0x0008)
    FName                                         Search;                                                       // 0x0010(0x0008)
    bool                                          Result;                                                       // 0x0018(0x0001)
    char                                          pa_0019[0x0007]                                               // 0x0019(0x0007)
};


// ScriptStruct  ControlRig.RigDispatch
// Struct Size::0x0018
struct FRigDispatch : public FRigDispatchFactory
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0008
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0038
struct FRigUnit : public FRigUnit
{
    FString                                       A;                                                            // 0x0008(0x0010)
    FString                                       B;                                                            // 0x0018(0x0010)
    FString                                       Result;                                                       // 0x0028(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0040
struct FRigUnit : public FRigUnit
{
    FString                                       Name;                                                         // 0x0008(0x0010)
    int32_t                                       Count;                                                        // 0x0018(0x0004)
    bool                                          FromEnd;                                                      // 0x001C(0x0001)
    char                                          pa_001D[0x0003]                                               // 0x001D(0x0003)
    FString                                       Remainder;                                                    // 0x0020(0x0010)
    FString                                       Chopped;                                                      // 0x0030(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0048
struct FRigUnit : public FRigUnit
{
    FString                                       Name;                                                         // 0x0008(0x0010)
    FString                                       Old;                                                          // 0x0018(0x0010)
    FString                                       New;                                                          // 0x0028(0x0010)
    FString                                       Result;                                                       // 0x0038(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0030
struct FRigUnit : public FRigUnit
{
    FString                                       Name;                                                         // 0x0008(0x0010)
    FString                                       Ending;                                                       // 0x0018(0x0010)
    bool                                          Result;                                                       // 0x0028(0x0001)
    char                                          pa_0029[0x0007]                                               // 0x0029(0x0007)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0030
struct FRigUnit : public FRigUnit
{
    FString                                       Name;                                                         // 0x0008(0x0010)
    FString                                       Start;                                                        // 0x0018(0x0010)
    bool                                          Result;                                                       // 0x0028(0x0001)
    char                                          pa_0029[0x0007]                                               // 0x0029(0x0007)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0030
struct FRigUnit : public FRigUnit
{
    FString                                       Name;                                                         // 0x0008(0x0010)
    FString                                       Search;                                                       // 0x0018(0x0010)
    bool                                          Result;                                                       // 0x0028(0x0001)
    char                                          pa_0029[0x0007]                                               // 0x0029(0x0007)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0020
struct FRigUnit : public FRigUnit
{
    FString                                       Value;                                                        // 0x0008(0x0010)
    int32_t                                       Length;                                                       // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0028
struct FRigUnit : public FRigUnit
{
    FString                                       Value;                                                        // 0x0008(0x0010)
    FString                                       Result;                                                       // 0x0018(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0028
struct FRigUnit : public FRigUnit
{
    FString                                       Value;                                                        // 0x0008(0x0010)
    FString                                       Result;                                                       // 0x0018(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0028
struct FRigUnit : public FRigUnit
{
    FString                                       Value;                                                        // 0x0008(0x0010)
    FString                                       Result;                                                       // 0x0018(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0028
struct FRigUnit : public FRigUnit
{
    FString                                       Value;                                                        // 0x0008(0x0010)
    FString                                       Reverse;                                                      // 0x0018(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0030
struct FRigUnit : public FRigUnit
{
    FString                                       Value;                                                        // 0x0008(0x0010)
    int32_t                                       Count;                                                        // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    FString                                       Result;                                                       // 0x0020(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0030
struct FRigUnit : public FRigUnit
{
    FString                                       Value;                                                        // 0x0008(0x0010)
    int32_t                                       Count;                                                        // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    FString                                       Result;                                                       // 0x0020(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0030
struct FRigUnit : public FRigUnit
{
    FString                                       Value;                                                        // 0x0008(0x0010)
    int32_t                                       Start;                                                        // 0x0018(0x0004)
    int32_t                                       Count;                                                        // 0x001C(0x0004)
    FString                                       Result;                                                       // 0x0020(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0030
struct FRigUnit : public FRigUnit
{
    FString                                       Value;                                                        // 0x0008(0x0010)
    FString                                       Search;                                                       // 0x0018(0x0010)
    bool                                          Found;                                                        // 0x0028(0x0001)
    char                                          pa_0029[0x0003]                                               // 0x0029(0x0003)
    int32_t                                       Index;                                                        // 0x002C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0038
struct FRigUnit : public FRigUnit
{
    FString                                       Value;                                                        // 0x0008(0x0010)
    FString                                       Separator;                                                    // 0x0018(0x0010)
    TArray<FString>                               Result;                                                       // 0x0028(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0038
struct FRigUnit : public FRigUnit
{
    TArray<FString>                               Values;                                                       // 0x0008(0x0010)
    FString                                       Separator;                                                    // 0x0018(0x0010)
    FString                                       Result;                                                       // 0x0028(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0020
struct FRigUnit : public FRigUnit
{
    int32_t                                       Value;                                                        // 0x0008(0x0004)
    int32_t                                       Digits;                                                       // 0x000C(0x0004)
    FString                                       Result;                                                       // 0x0010(0x0010)
};


// ScriptStruct  ControlRig.RigDispatch
// Struct Size::0x0018
struct FRigDispatch : public FRigDispatchFactory
{
};


// ScriptStruct  ControlRig.RigDispatch
// Struct Size::0x0018
struct FRigDispatch : public FRigDispatchFactory
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0140
struct FRigUnit : public FRigUnit
{
    FCRFourPointBezier                            Bezier;                                                       // 0x0040(0x0060)
    float                                         MinimumU;                                                     // 0x00A0(0x0004)
    float                                         MaximumU;                                                     // 0x00A4(0x0004)
    FLinearColor                                  Color;                                                        // 0x00A8(0x0010)
    float                                         Thickness;                                                    // 0x00B8(0x0004)
    int32_t                                       Detail;                                                       // 0x00BC(0x0004)
    FName                                         Space;                                                        // 0x00C0(0x0008)
    char                                          pa_00C8[0x0008]                                               // 0x00C8(0x0008)
    FTransform                                    WorldOffset;                                                  // 0x00D0(0x0060)
    bool                                          bEnabled;                                                     // 0x0130(0x0001)
    char                                          pa_0131[0x000F]                                               // 0x0131(0x000F)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0140
struct FRigUnit : public FRigUnit
{
    FCRFourPointBezier                            Bezier;                                                       // 0x0040(0x0060)
    float                                         MinimumU;                                                     // 0x00A0(0x0004)
    float                                         MaximumU;                                                     // 0x00A4(0x0004)
    FLinearColor                                  Color;                                                        // 0x00A8(0x0010)
    float                                         Thickness;                                                    // 0x00B8(0x0004)
    int32_t                                       Detail;                                                       // 0x00BC(0x0004)
    FRigElementKey                                Space;                                                        // 0x00C0(0x000C)
    char                                          pa_00CC[0x0004]                                               // 0x00CC(0x0004)
    FTransform                                    WorldOffset;                                                  // 0x00D0(0x0060)
    bool                                          bEnabled;                                                     // 0x0130(0x0001)
    char                                          pa_0131[0x000F]                                               // 0x0131(0x000F)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00D0
struct FRigUnit : public FRigUnit
{
    float                                         Scale;                                                        // 0x0040(0x0004)
    FLinearColor                                  Color;                                                        // 0x0044(0x0010)
    float                                         Thickness;                                                    // 0x0054(0x0004)
    char                                          pa_0058[0x0008]                                               // 0x0058(0x0008)
    FTransform                                    WorldOffset;                                                  // 0x0060(0x0060)
    bool                                          bEnabled;                                                     // 0x00C0(0x0001)
    char                                          pa_00C1[0x000F]                                               // 0x00C1(0x000F)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0140
struct FRigUnit : public FRigUnit
{
    FRigPose                                      Pose;                                                         // 0x0040(0x0070)
    float                                         Scale;                                                        // 0x00B0(0x0004)
    FLinearColor                                  Color;                                                        // 0x00B4(0x0010)
    float                                         Thickness;                                                    // 0x00C4(0x0004)
    char                                          pa_00C8[0x0008]                                               // 0x00C8(0x0008)
    FTransform                                    WorldOffset;                                                  // 0x00D0(0x0060)
    bool                                          bEnabled;                                                     // 0x0130(0x0001)
    char                                          pa_0131[0x000F]                                               // 0x0131(0x000F)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0100
struct FRigUnit : public FRigUnit
{
    FVector                                       A;                                                            // 0x0040(0x0018)
    FVector                                       B;                                                            // 0x0058(0x0018)
    FLinearColor                                  Color;                                                        // 0x0070(0x0010)
    float                                         Thickness;                                                    // 0x0080(0x0004)
    FName                                         Space;                                                        // 0x0084(0x0008)
    char                                          pa_008C[0x0004]                                               // 0x008C(0x0004)
    FTransform                                    WorldOffset;                                                  // 0x0090(0x0060)
    bool                                          bEnabled;                                                     // 0x00F0(0x0001)
    char                                          pa_00F1[0x000F]                                               // 0x00F1(0x000F)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0100
struct FRigUnit : public FRigUnit
{
    FVector                                       A;                                                            // 0x0040(0x0018)
    FVector                                       B;                                                            // 0x0058(0x0018)
    FLinearColor                                  Color;                                                        // 0x0070(0x0010)
    float                                         Thickness;                                                    // 0x0080(0x0004)
    FRigElementKey                                Space;                                                        // 0x0084(0x000C)
    FTransform                                    WorldOffset;                                                  // 0x0090(0x0060)
    bool                                          bEnabled;                                                     // 0x00F0(0x0001)
    char                                          pa_00F1[0x000F]                                               // 0x00F1(0x000F)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00E0
struct FRigUnit : public FRigUnit
{
    TArray<FVector>                               Points;                                                       // 0x0040(0x0010)
    FLinearColor                                  Color;                                                        // 0x0050(0x0010)
    float                                         Thickness;                                                    // 0x0060(0x0004)
    FName                                         Space;                                                        // 0x0064(0x0008)
    char                                          pa_006C[0x0004]                                               // 0x006C(0x0004)
    FTransform                                    WorldOffset;                                                  // 0x0070(0x0060)
    bool                                          bEnabled;                                                     // 0x00D0(0x0001)
    char                                          pa_00D1[0x000F]                                               // 0x00D1(0x000F)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00E0
struct FRigUnit : public FRigUnit
{
    TArray<FVector>                               Points;                                                       // 0x0040(0x0010)
    FLinearColor                                  Color;                                                        // 0x0050(0x0010)
    float                                         Thickness;                                                    // 0x0060(0x0004)
    FRigElementKey                                Space;                                                        // 0x0064(0x000C)
    FTransform                                    WorldOffset;                                                  // 0x0070(0x0060)
    bool                                          bEnabled;                                                     // 0x00D0(0x0001)
    char                                          pa_00D1[0x000F]                                               // 0x00D1(0x000F)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00C0
struct FRigUnit : public FRigUnit
{
    FVector                                       Vector;                                                       // 0x0008(0x0018)
    enum class ERigUnitDebugPointMode             Mode;                                                         // 0x0020(0x0001)
    char                                          pa_0021[0x0003]                                               // 0x0021(0x0003)
    FLinearColor                                  Color;                                                        // 0x0024(0x0010)
    float                                         Scale;                                                        // 0x0034(0x0004)
    float                                         Thickness;                                                    // 0x0038(0x0004)
    FName                                         Space;                                                        // 0x003C(0x0008)
    char                                          pa_0044[0x000C]                                               // 0x0044(0x000C)
    FTransform                                    WorldOffset;                                                  // 0x0050(0x0060)
    bool                                          bEnabled;                                                     // 0x00B0(0x0001)
    char                                          pa_00B1[0x000F]                                               // 0x00B1(0x000F)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00F0
struct FRigUnit : public FRigUnit
{
    FVector                                       Vector;                                                       // 0x0040(0x0018)
    enum class ERigUnitDebugPointMode             Mode;                                                         // 0x0058(0x0001)
    char                                          pa_0059[0x0003]                                               // 0x0059(0x0003)
    FLinearColor                                  Color;                                                        // 0x005C(0x0010)
    float                                         Scale;                                                        // 0x006C(0x0004)
    float                                         Thickness;                                                    // 0x0070(0x0004)
    FName                                         Space;                                                        // 0x0074(0x0008)
    char                                          pa_007C[0x0004]                                               // 0x007C(0x0004)
    FTransform                                    WorldOffset;                                                  // 0x0080(0x0060)
    bool                                          bEnabled;                                                     // 0x00E0(0x0001)
    char                                          pa_00E1[0x000F]                                               // 0x00E1(0x000F)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0130
struct FRigUnit : public FRigUnit
{
    FTransform                                    Transform;                                                    // 0x0040(0x0060)
    FLinearColor                                  Color;                                                        // 0x00A0(0x0010)
    float                                         Scale;                                                        // 0x00B0(0x0004)
    float                                         Thickness;                                                    // 0x00B4(0x0004)
    FName                                         Space;                                                        // 0x00B8(0x0008)
    FTransform                                    WorldOffset;                                                  // 0x00C0(0x0060)
    bool                                          bEnabled;                                                     // 0x0120(0x0001)
    char                                          pa_0121[0x000F]                                               // 0x0121(0x000F)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0140
struct FRigUnit : public FRigUnit
{
    FTransform                                    Transform;                                                    // 0x0040(0x0060)
    FLinearColor                                  Color;                                                        // 0x00A0(0x0010)
    float                                         Scale;                                                        // 0x00B0(0x0004)
    float                                         Thickness;                                                    // 0x00B4(0x0004)
    FRigElementKey                                Space;                                                        // 0x00B8(0x000C)
    char                                          pa_00C4[0x000C]                                               // 0x00C4(0x000C)
    FTransform                                    WorldOffset;                                                  // 0x00D0(0x0060)
    bool                                          bEnabled;                                                     // 0x0130(0x0001)
    char                                          pa_0131[0x000F]                                               // 0x0131(0x000F)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0140
struct FRigUnit : public FRigUnit
{
    FTransform                                    Transform;                                                    // 0x0040(0x0060)
    FLinearColor                                  Color;                                                        // 0x00A0(0x0010)
    float                                         Radius;                                                       // 0x00B0(0x0004)
    float                                         MinimumDegrees;                                               // 0x00B4(0x0004)
    float                                         MaximumDegrees;                                               // 0x00B8(0x0004)
    float                                         Thickness;                                                    // 0x00BC(0x0004)
    int32_t                                       Detail;                                                       // 0x00C0(0x0004)
    FName                                         Space;                                                        // 0x00C4(0x0008)
    char                                          pa_00CC[0x0004]                                               // 0x00CC(0x0004)
    FTransform                                    WorldOffset;                                                  // 0x00D0(0x0060)
    bool                                          bEnabled;                                                     // 0x0130(0x0001)
    char                                          pa_0131[0x000F]                                               // 0x0131(0x000F)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0140
struct FRigUnit : public FRigUnit
{
    FTransform                                    Transform;                                                    // 0x0040(0x0060)
    FLinearColor                                  Color;                                                        // 0x00A0(0x0010)
    float                                         Radius;                                                       // 0x00B0(0x0004)
    float                                         MinimumDegrees;                                               // 0x00B4(0x0004)
    float                                         MaximumDegrees;                                               // 0x00B8(0x0004)
    float                                         Thickness;                                                    // 0x00BC(0x0004)
    int32_t                                       Detail;                                                       // 0x00C0(0x0004)
    FRigElementKey                                Space;                                                        // 0x00C4(0x000C)
    FTransform                                    WorldOffset;                                                  // 0x00D0(0x0060)
    bool                                          bEnabled;                                                     // 0x0130(0x0001)
    char                                          pa_0131[0x000F]                                               // 0x0131(0x000F)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0110
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FTransform                                    Transform;                                                    // 0x0010(0x0060)
    enum class ERigUnitDebugTransformMode         Mode;                                                         // 0x0070(0x0001)
    char                                          pa_0071[0x0003]                                               // 0x0071(0x0003)
    FLinearColor                                  Color;                                                        // 0x0074(0x0010)
    float                                         Thickness;                                                    // 0x0084(0x0004)
    float                                         Scale;                                                        // 0x0088(0x0004)
    FName                                         Space;                                                        // 0x008C(0x0008)
    char                                          pa_0094[0x000C]                                               // 0x0094(0x000C)
    FTransform                                    WorldOffset;                                                  // 0x00A0(0x0060)
    bool                                          bEnabled;                                                     // 0x0100(0x0001)
    char                                          pa_0101[0x000F]                                               // 0x0101(0x000F)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0140
struct FRigUnit : public FRigUnit
{
    FTransform                                    Transform;                                                    // 0x0040(0x0060)
    enum class ERigUnitDebugTransformMode         Mode;                                                         // 0x00A0(0x0001)
    char                                          pa_00A1[0x0003]                                               // 0x00A1(0x0003)
    FLinearColor                                  Color;                                                        // 0x00A4(0x0010)
    float                                         Thickness;                                                    // 0x00B4(0x0004)
    float                                         Scale;                                                        // 0x00B8(0x0004)
    FName                                         Space;                                                        // 0x00BC(0x0008)
    char                                          pa_00C4[0x000C]                                               // 0x00C4(0x000C)
    FTransform                                    WorldOffset;                                                  // 0x00D0(0x0060)
    bool                                          bEnabled;                                                     // 0x0130(0x0001)
    char                                          pa_0131[0x000F]                                               // 0x0131(0x000F)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0140
struct FRigUnit : public FRigUnit
{
    FTransform                                    Transform;                                                    // 0x0040(0x0060)
    enum class ERigUnitDebugTransformMode         Mode;                                                         // 0x00A0(0x0001)
    char                                          pa_00A1[0x0003]                                               // 0x00A1(0x0003)
    FLinearColor                                  Color;                                                        // 0x00A4(0x0010)
    float                                         Thickness;                                                    // 0x00B4(0x0004)
    float                                         Scale;                                                        // 0x00B8(0x0004)
    FRigElementKey                                Space;                                                        // 0x00BC(0x000C)
    char                                          pa_00C8[0x0008]                                               // 0x00C8(0x0008)
    FTransform                                    WorldOffset;                                                  // 0x00D0(0x0060)
    bool                                          bEnabled;                                                     // 0x0130(0x0001)
    char                                          pa_0131[0x000F]                                               // 0x0131(0x000F)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0010
struct FRigUnit
{
    TArray<FTransform>                            DrawTransforms;                                               // 0x0000(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0100
struct FRigUnit : public FRigUnit
{
    TArray<FTransform>                            Transforms;                                                   // 0x0040(0x0010)
    enum class ERigUnitDebugTransformMode         Mode;                                                         // 0x0050(0x0001)
    char                                          pa_0051[0x0003]                                               // 0x0051(0x0003)
    FLinearColor                                  Color;                                                        // 0x0054(0x0010)
    float                                         Thickness;                                                    // 0x0064(0x0004)
    float                                         Scale;                                                        // 0x0068(0x0004)
    FName                                         Space;                                                        // 0x006C(0x0008)
    char                                          pa_0074[0x000C]                                               // 0x0074(0x000C)
    FTransform                                    WorldOffset;                                                  // 0x0080(0x0060)
    bool                                          bEnabled;                                                     // 0x00E0(0x0001)
    char                                          pa_00E1[0x0007]                                               // 0x00E1(0x0007)
    FRigUnit                                      WorkData;                                                     // 0x00E8(0x0010)
    char                                          pa_00F8[0x0008]                                               // 0x00F8(0x0008)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0100
struct FRigUnit : public FRigUnit
{
    TArray<FTransform>                            Transforms;                                                   // 0x0040(0x0010)
    TArray<int32_t>                               ParentIndices;                                                // 0x0050(0x0010)
    enum class ERigUnitDebugTransformMode         Mode;                                                         // 0x0060(0x0001)
    char                                          pa_0061[0x0003]                                               // 0x0061(0x0003)
    FLinearColor                                  Color;                                                        // 0x0064(0x0010)
    float                                         Thickness;                                                    // 0x0074(0x0004)
    float                                         Scale;                                                        // 0x0078(0x0004)
    FRigElementKey                                Space;                                                        // 0x007C(0x000C)
    char                                          pa_0088[0x0008]                                               // 0x0088(0x0008)
    FTransform                                    WorldOffset;                                                  // 0x0090(0x0060)
    bool                                          bEnabled;                                                     // 0x00F0(0x0001)
    char                                          pa_00F1[0x000F]                                               // 0x00F1(0x000F)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0040
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0060
struct FRigUnit : public FRigUnit
{
    int32_t                                       NumberOfMeasurements;                                         // 0x0040(0x0004)
    char                                          pa_0044[0x0004]                                               // 0x0044(0x0004)
    FString                                       Prefix;                                                       // 0x0048(0x0010)
    float                                         AccumulatedTime;                                              // 0x0058(0x0004)
    int32_t                                       MeasurementsLeft;                                             // 0x005C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0048
struct FRigUnit : public FRigUnit
{
    FVector                                       Value;                                                        // 0x0008(0x0018)
    bool                                          bEnabled;                                                     // 0x0020(0x0001)
    enum class ERigUnitVisualDebugPointMode       Mode;                                                         // 0x0021(0x0001)
    char                                          pa_0022[0x0002]                                               // 0x0022(0x0002)
    FLinearColor                                  Color;                                                        // 0x0024(0x0010)
    float                                         Thickness;                                                    // 0x0034(0x0004)
    float                                         Scale;                                                        // 0x0038(0x0004)
    FName                                         BoneSpace;                                                    // 0x003C(0x0008)
    char                                          pa_0044[0x0004]                                               // 0x0044(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0048
struct FRigUnit : public FRigUnit
{
    FVector                                       Value;                                                        // 0x0008(0x0018)
    bool                                          bEnabled;                                                     // 0x0020(0x0001)
    enum class ERigUnitVisualDebugPointMode       Mode;                                                         // 0x0021(0x0001)
    char                                          pa_0022[0x0002]                                               // 0x0022(0x0002)
    FLinearColor                                  Color;                                                        // 0x0024(0x0010)
    float                                         Thickness;                                                    // 0x0034(0x0004)
    float                                         Scale;                                                        // 0x0038(0x0004)
    FRigElementKey                                Space;                                                        // 0x003C(0x000C)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0050
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FQuat                                         Value;                                                        // 0x0010(0x0020)
    bool                                          bEnabled;                                                     // 0x0030(0x0001)
    char                                          pa_0031[0x0003]                                               // 0x0031(0x0003)
    float                                         Thickness;                                                    // 0x0034(0x0004)
    float                                         Scale;                                                        // 0x0038(0x0004)
    FName                                         BoneSpace;                                                    // 0x003C(0x0008)
    char                                          pa_0044[0x000C]                                               // 0x0044(0x000C)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0050
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FQuat                                         Value;                                                        // 0x0010(0x0020)
    bool                                          bEnabled;                                                     // 0x0030(0x0001)
    char                                          pa_0031[0x0003]                                               // 0x0031(0x0003)
    float                                         Thickness;                                                    // 0x0034(0x0004)
    float                                         Scale;                                                        // 0x0038(0x0004)
    FRigElementKey                                Space;                                                        // 0x003C(0x000C)
    char                                          pa_0048[0x0008]                                               // 0x0048(0x0008)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0090
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FTransform                                    Value;                                                        // 0x0010(0x0060)
    bool                                          bEnabled;                                                     // 0x0070(0x0001)
    char                                          pa_0071[0x0003]                                               // 0x0071(0x0003)
    float                                         Thickness;                                                    // 0x0074(0x0004)
    float                                         Scale;                                                        // 0x0078(0x0004)
    FName                                         BoneSpace;                                                    // 0x007C(0x0008)
    char                                          pa_0084[0x000C]                                               // 0x0084(0x000C)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0090
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FTransform                                    Value;                                                        // 0x0010(0x0060)
    bool                                          bEnabled;                                                     // 0x0070(0x0001)
    char                                          pa_0071[0x0003]                                               // 0x0071(0x0003)
    float                                         Thickness;                                                    // 0x0074(0x0004)
    float                                         Scale;                                                        // 0x0078(0x0004)
    FRigElementKey                                Space;                                                        // 0x007C(0x000C)
    char                                          pa_0088[0x0008]                                               // 0x0088(0x0008)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00C0
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FTransform                                    Input;                                                        // 0x0010(0x0060)
    FEulerTransform                               Result;                                                       // 0x0070(0x0048)
    char                                          pa_00B8[0x0008]                                               // 0x00B8(0x0008)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00B0
struct FRigUnit : public FRigUnit
{
    FEulerTransform                               Input;                                                        // 0x0008(0x0048)
    FTransform                                    Result;                                                       // 0x0050(0x0060)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0040
struct FRigUnit : public FRigUnit
{
    FRotator                                      Input;                                                        // 0x0008(0x0018)
    FQuat                                         Result;                                                       // 0x0020(0x0020)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0040
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0050
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FQuat                                         Input;                                                        // 0x0010(0x0020)
    FRotator                                      Result;                                                       // 0x0030(0x0018)
    char                                          pa_0048[0x0008]                                               // 0x0048(0x0008)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0038
struct FRigUnit : public FRigUnit
{
    FVector                                       Input;                                                        // 0x0008(0x0018)
    FRotator                                      Result;                                                       // 0x0020(0x0018)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0040
struct FRigUnit : public FRigUnit
{
    FVector                                       Input;                                                        // 0x0008(0x0018)
    FQuat                                         Result;                                                       // 0x0020(0x0020)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0038
struct FRigUnit : public FRigUnit
{
    FRotator                                      Input;                                                        // 0x0008(0x0018)
    FVector                                       Result;                                                       // 0x0020(0x0018)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0050
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FQuat                                         Input;                                                        // 0x0010(0x0020)
    FVector                                       Result;                                                       // 0x0030(0x0018)
    char                                          pa_0048[0x0008]                                               // 0x0048(0x0008)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0090
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FQuat                                         Input;                                                        // 0x0010(0x0020)
    FVector                                       TwistAxis;                                                    // 0x0030(0x0018)
    char                                          pa_0048[0x0008]                                               // 0x0048(0x0008)
    FQuat                                         Swing;                                                        // 0x0050(0x0020)
    FQuat                                         Twist;                                                        // 0x0070(0x0020)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
    float                                         Argument0;                                                    // 0x0008(0x0004)
    float                                         Argument1;                                                    // 0x000C(0x0004)
    float                                         Result;                                                       // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
    float                                         Value;                                                        // 0x0008(0x0004)
    float                                         Min;                                                          // 0x000C(0x0004)
    float                                         Max;                                                          // 0x0010(0x0004)
    float                                         Result;                                                       // 0x0014(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0020
struct FRigUnit : public FRigUnit
{
    float                                         Value;                                                        // 0x0008(0x0004)
    float                                         MinIn;                                                        // 0x000C(0x0004)
    float                                         MaxIn;                                                        // 0x0010(0x0004)
    float                                         MinOut;                                                       // 0x0014(0x0004)
    float                                         MaxOut;                                                       // 0x0018(0x0004)
    float                                         Result;                                                       // 0x001C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0070
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FQuat                                         Argument0;                                                    // 0x0010(0x0020)
    FQuat                                         Argument1;                                                    // 0x0030(0x0020)
    FQuat                                         Result;                                                       // 0x0050(0x0020)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0070
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0050
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FQuat                                         Argument;                                                     // 0x0010(0x0020)
    FQuat                                         Result;                                                       // 0x0030(0x0020)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0050
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0050
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FQuat                                         Argument;                                                     // 0x0010(0x0020)
    FVector                                       Axis;                                                         // 0x0030(0x0018)
    float                                         Angle;                                                        // 0x0048(0x0004)
    char                                          pa_004C[0x0004]                                               // 0x004C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0050
struct FRigUnit : public FRigUnit
{
    FVector                                       Axis;                                                         // 0x0008(0x0018)
    float                                         Angle;                                                        // 0x0020(0x0004)
    char                                          pa_0024[0x000C]                                               // 0x0024(0x000C)
    FQuat                                         Result;                                                       // 0x0030(0x0020)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0050
struct FRigUnit : public FRigUnit
{
    FVector                                       Axis;                                                         // 0x0008(0x0018)
    FQuat                                         Argument;                                                     // 0x0020(0x0020)
    float                                         Angle;                                                        // 0x0040(0x0004)
    char                                          pa_0044[0x000C]                                               // 0x0044(0x000C)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0130
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FTransform                                    Argument0;                                                    // 0x0010(0x0060)
    FTransform                                    Argument1;                                                    // 0x0070(0x0060)
    FTransform                                    Result;                                                       // 0x00D0(0x0060)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0130
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0130
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0050
struct FRigUnit : public FRigUnit
{
    FVector                                       Argument0;                                                    // 0x0008(0x0018)
    FVector                                       Argument1;                                                    // 0x0020(0x0018)
    FVector                                       Result;                                                       // 0x0038(0x0018)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0050
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0050
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0050
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0050
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0040
struct FRigUnit : public FRigUnit
{
    FVector                                       Argument0;                                                    // 0x0008(0x0018)
    FVector                                       Argument1;                                                    // 0x0020(0x0018)
    float                                         Result;                                                       // 0x0038(0x0004)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
};


// ScriptStruct  ControlRig.AimTarget
// Struct Size::0x0090
struct FAimTarget
{
    float                                         Weight;                                                       // 0x0000(0x0004)
    char                                          pa_0004[0x000C]                                               // 0x0004(0x000C)
    FTransform                                    Transform;                                                    // 0x0010(0x0060)
    FVector                                       AlignVector;                                                  // 0x0070(0x0018)
    char                                          pa_0088[0x0008]                                               // 0x0088(0x0008)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0010
struct FRigUnit
{
    TArray<FConstraintData>                       ConstraintData;                                               // 0x0000(0x0010)
};


// ScriptStruct  AnimationCore.ConstraintData
// Struct Size::0x00E0
struct FConstraintData
{
    FConstraintDescriptor                         Constraint;                                                   // 0x0000(0x0010)
    float                                         Weight;                                                       // 0x0010(0x0004)
    bool                                          bMaintainOffset;                                              // 0x0014(0x0001)
    char                                          pa_0015[0x000B]                                               // 0x0015(0x000B)
    FTransform                                    Offset;                                                       // 0x0020(0x0060)
    FTransform                                    CurrentTransform;                                             // 0x0080(0x0060)
};


// ScriptStruct  AnimationCore.ConstraintDescriptor
// Struct Size::0x0010
struct FConstraintDescriptor
{
    enum class EConstraintType                    Type;                                                         // 0x0000(0x0001)
    char                                          pa_0001[0x000F]                                               // 0x0001(0x000F)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00B0
struct FRigUnit : public FRigUnitMutable
{
    FName                                         Joint;                                                        // 0x0040(0x0008)
    enum class EAimMode                           AimMode;                                                      // 0x0048(0x0001)
    enum class EAimMode                           UpMode;                                                       // 0x0049(0x0001)
    char                                          pa_004A[0x0006]                                               // 0x004A(0x0006)
    FVector                                       AimVector;                                                    // 0x0050(0x0018)
    FVector                                       UpVector;                                                     // 0x0068(0x0018)
    TArray<FAimTarget>                            AimTargets;                                                   // 0x0080(0x0010)
    TArray<FAimTarget>                            UpTargets;                                                    // 0x0090(0x0010)
    FRigUnit                                      WorkData;                                                     // 0x00A0(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0130
struct FRigUnit : public FRigUnitMutable
{
    FName                                         Joint;                                                        // 0x0040(0x0008)
    char                                          pa_0048[0x0008]                                               // 0x0048(0x0008)
    FTransform                                    Transform;                                                    // 0x0050(0x0060)
    FTransformFilter                              Filter;                                                       // 0x00B0(0x0009)
    enum class EApplyTransformMode                ApplyTransformMode;                                           // 0x00B9(0x0001)
    enum class ETransformSpaceMode                ApplyTransformSpace;                                          // 0x00BA(0x0001)
    char                                          pa_00BB[0x0005]                                               // 0x00BB(0x0005)
    FTransform                                    BaseTransform;                                                // 0x00C0(0x0060)
    FName                                         BaseJoint;                                                    // 0x0120(0x0008)
    char                                          pa_0128[0x0008]                                               // 0x0128(0x0008)
};


// ScriptStruct  ControlRig.BlendTarget
// Struct Size::0x0070
struct FBlendTarget
{
    FTransform                                    Transform;                                                    // 0x0000(0x0060)
    float                                         Weight;                                                       // 0x0060(0x0004)
    char                                          pa_0064[0x000C]                                               // 0x0064(0x000C)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00E0
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FTransform                                    Source;                                                       // 0x0010(0x0060)
    TArray<FBlendTarget>                          Targets;                                                      // 0x0070(0x0010)
    FTransform                                    Result;                                                       // 0x0080(0x0060)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0120
struct FRigUnit : public FRigUnitMutable
{
    FName                                         Joint;                                                        // 0x0040(0x0008)
    enum class ETransformGetterType               Type;                                                         // 0x0048(0x0001)
    enum class ETransformSpaceMode                TransformSpace;                                               // 0x0049(0x0001)
    char                                          pa_004A[0x0006]                                               // 0x004A(0x0006)
    FTransform                                    BaseTransform;                                                // 0x0050(0x0060)
    FName                                         BaseJoint;                                                    // 0x00B0(0x0008)
    char                                          pa_00B8[0x0008]                                               // 0x00B8(0x0008)
    FTransform                                    Output;                                                       // 0x00C0(0x0060)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0350
struct FRigUnit : public FRigUnitMutable
{
    FName                                         StartJoint;                                                   // 0x0040(0x0008)
    FName                                         EndJoint;                                                     // 0x0048(0x0008)
    FVector                                       PoleTarget;                                                   // 0x0050(0x0018)
    float                                         Spin;                                                         // 0x0068(0x0004)
    char                                          pa_006C[0x0004]                                               // 0x006C(0x0004)
    FTransform                                    EndEffector;                                                  // 0x0070(0x0060)
    float                                         IKBlend;                                                      // 0x00D0(0x0004)
    char                                          pa_00D4[0x000C]                                               // 0x00D4(0x000C)
    FTransform                                    StartJointFKTransform;                                        // 0x00E0(0x0060)
    FTransform                                    MidJointFKTransform;                                          // 0x0140(0x0060)
    FTransform                                    EndJointFKTransform;                                          // 0x01A0(0x0060)
    float                                         PreviousFKIKBlend;                                            // 0x0200(0x0004)
    char                                          pa_0204[0x000C]                                               // 0x0204(0x000C)
    FTransform                                    StartJointIKTransform;                                        // 0x0210(0x0060)
    FTransform                                    MidJointIKTransform;                                          // 0x0270(0x0060)
    FTransform                                    EndJointIKTransform;                                          // 0x02D0(0x0060)
    int32_t                                       StartJointIndex;                                              // 0x0330(0x0004)
    int32_t                                       MidJointIndex;                                                // 0x0334(0x0004)
    int32_t                                       EndJointIndex;                                                // 0x0338(0x0004)
    float                                         UpperLimbLength;                                              // 0x033C(0x0004)
    float                                         LowerLimbLength;                                              // 0x0340(0x0004)
    char                                          pa_0344[0x000C]                                               // 0x0344(0x000C)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0080
struct FRigUnit : public FRigUnit
{
    FName                                         InstructionName;                                              // 0x0008(0x0008)
    FLinearColor                                  Color;                                                        // 0x0010(0x0010)
    FTransform                                    Transform;                                                    // 0x0020(0x0060)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0058
struct FRigUnit : public FRigUnitMutable
{
    FName                                         InstructionName;                                              // 0x0040(0x0008)
    FLinearColor                                  Color;                                                        // 0x0048(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0050
struct FRigUnit : public FRigUnitMutable
{
    FName                                         InstructionName;                                              // 0x0040(0x0008)
    float                                         Thickness;                                                    // 0x0048(0x0004)
    char                                          pa_004C[0x0004]                                               // 0x004C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00B0
struct FRigUnit : public FRigUnitMutable
{
    FName                                         InstructionName;                                              // 0x0040(0x0008)
    char                                          pa_0048[0x0008]                                               // 0x0048(0x0008)
    FTransform                                    Transform;                                                    // 0x0050(0x0060)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0040
struct FRigUnit : public FRigUnit
{
    FControlRigExecuteContext                     ExecuteContext;                                               // 0x0008(0x0038)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0008
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0040
struct FRigUnit : public FRigUnitMutable
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0038
struct FRigUnit : public FRigUnit
{
    FRigElementKey                                FirstItem;                                                    // 0x0008(0x000C)
    FRigElementKey                                LastItem;                                                     // 0x0014(0x000C)
    bool                                          Reverse;                                                      // 0x0020(0x0001)
    char                                          pa_0021[0x0007]                                               // 0x0021(0x0007)
    FRigElementKeyCollection                      Collection;                                                   // 0x0028(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0038
struct FRigUnit : public FRigUnit
{
    FRigElementKey                                FirstItem;                                                    // 0x0008(0x000C)
    FRigElementKey                                LastItem;                                                     // 0x0014(0x000C)
    bool                                          Reverse;                                                      // 0x0020(0x0001)
    char                                          pa_0021[0x0007]                                               // 0x0021(0x0007)
    TArray<FRigElementKey>                        Items;                                                        // 0x0028(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0028
struct FRigUnit : public FRigUnit
{
    FName                                         PartialName;                                                  // 0x0008(0x0008)
    enum class ERigElementType                    TypeToSearch;                                                 // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
    FRigElementKeyCollection                      Collection;                                                   // 0x0018(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0028
struct FRigUnit : public FRigUnit
{
    FName                                         PartialName;                                                  // 0x0008(0x0008)
    enum class ERigElementType                    TypeToSearch;                                                 // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
    TArray<FRigElementKey>                        Items;                                                        // 0x0018(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0028
struct FRigUnit : public FRigUnit
{
    FRigElementKey                                Parent;                                                       // 0x0008(0x000C)
    bool                                          bIncludeParent;                                               // 0x0014(0x0001)
    bool                                          bRecursive;                                                   // 0x0015(0x0001)
    enum class ERigElementType                    TypeToSearch;                                                 // 0x0016(0x0001)
    char                                          pa_0017[0x0001]                                               // 0x0017(0x0001)
    FRigElementKeyCollection                      Collection;                                                   // 0x0018(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0028
struct FRigUnit : public FRigUnit
{
    FRigElementKey                                Parent;                                                       // 0x0008(0x000C)
    bool                                          bIncludeParent;                                               // 0x0014(0x0001)
    bool                                          bRecursive;                                                   // 0x0015(0x0001)
    enum class ERigElementType                    TypeToSearch;                                                 // 0x0016(0x0001)
    char                                          pa_0017[0x0001]                                               // 0x0017(0x0001)
    TArray<FRigElementKey>                        Items;                                                        // 0x0018(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0020
struct FRigUnit : public FRigUnit
{
    enum class ERigElementType                    TypeToSearch;                                                 // 0x0008(0x0001)
    char                                          pa_0009[0x0007]                                               // 0x0009(0x0007)
    TArray<FRigElementKey>                        Items;                                                        // 0x0010(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0040
struct FRigUnit : public FRigUnit
{
    FRigElementKeyCollection                      Items;                                                        // 0x0008(0x0010)
    FName                                         Old;                                                          // 0x0018(0x0008)
    FName                                         New;                                                          // 0x0020(0x0008)
    bool                                          RemoveInvalidItems;                                           // 0x0028(0x0001)
    bool                                          bAllowDuplicates;                                             // 0x0029(0x0001)
    char                                          pa_002A[0x0006]                                               // 0x002A(0x0006)
    FRigElementKeyCollection                      Collection;                                                   // 0x0030(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0040
struct FRigUnit : public FRigUnit
{
    TArray<FRigElementKey>                        Items;                                                        // 0x0008(0x0010)
    FName                                         Old;                                                          // 0x0018(0x0008)
    FName                                         New;                                                          // 0x0020(0x0008)
    bool                                          RemoveInvalidItems;                                           // 0x0028(0x0001)
    bool                                          bAllowDuplicates;                                             // 0x0029(0x0001)
    char                                          pa_002A[0x0006]                                               // 0x002A(0x0006)
    TArray<FRigElementKey>                        Result;                                                       // 0x0030(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0030
struct FRigUnit : public FRigUnit
{
    TArray<FRigElementKey>                        Items;                                                        // 0x0008(0x0010)
    bool                                          bAllowDuplicates;                                             // 0x0018(0x0001)
    char                                          pa_0019[0x0007]                                               // 0x0019(0x0007)
    FRigElementKeyCollection                      Collection;                                                   // 0x0020(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0028
struct FRigUnit : public FRigUnit
{
    FRigElementKeyCollection                      Collection;                                                   // 0x0008(0x0010)
    TArray<FRigElementKey>                        Items;                                                        // 0x0018(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0028
struct FRigUnit : public FRigUnit
{
    FRigElementKeyCollection                      Collection;                                                   // 0x0008(0x0010)
    TArray<int32_t>                               ParentIndices;                                                // 0x0018(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0028
struct FRigUnit : public FRigUnit
{
    TArray<FRigElementKey>                        Items;                                                        // 0x0008(0x0010)
    TArray<int32_t>                               ParentIndices;                                                // 0x0018(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0040
struct FRigUnit : public FRigUnit
{
    FRigElementKeyCollection                      A;                                                            // 0x0008(0x0010)
    FRigElementKeyCollection                      B;                                                            // 0x0018(0x0010)
    bool                                          bAllowDuplicates;                                             // 0x0028(0x0001)
    char                                          pa_0029[0x0007]                                               // 0x0029(0x0007)
    FRigElementKeyCollection                      Collection;                                                   // 0x0030(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0038
struct FRigUnit : public FRigUnit
{
    FRigElementKeyCollection                      A;                                                            // 0x0008(0x0010)
    FRigElementKeyCollection                      B;                                                            // 0x0018(0x0010)
    FRigElementKeyCollection                      Collection;                                                   // 0x0028(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0038
struct FRigUnit : public FRigUnit
{
    FRigElementKeyCollection                      A;                                                            // 0x0008(0x0010)
    FRigElementKeyCollection                      B;                                                            // 0x0018(0x0010)
    FRigElementKeyCollection                      Collection;                                                   // 0x0028(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0028
struct FRigUnit : public FRigUnit
{
    FRigElementKeyCollection                      Collection;                                                   // 0x0008(0x0010)
    FRigElementKeyCollection                      Reversed;                                                     // 0x0018(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0020
struct FRigUnit : public FRigUnit
{
    FRigElementKeyCollection                      Collection;                                                   // 0x0008(0x0010)
    int32_t                                       Count;                                                        // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0028
struct FRigUnit : public FRigUnit
{
    FRigElementKeyCollection                      Collection;                                                   // 0x0008(0x0010)
    int32_t                                       Index;                                                        // 0x0018(0x0004)
    FRigElementKey                                Item;                                                         // 0x001C(0x000C)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00A8
struct FRigUnit : public FRigUnit
{
    FRigElementKeyCollection                      Collection;                                                   // 0x0040(0x0010)
    FRigElementKey                                Item;                                                         // 0x0050(0x000C)
    int32_t                                       Index;                                                        // 0x005C(0x0004)
    int32_t                                       Count;                                                        // 0x0060(0x0004)
    float                                         Ratio;                                                        // 0x0064(0x0004)
    bool                                          Continue;                                                     // 0x0068(0x0001)
    char                                          pa_0069[0x0007]                                               // 0x0069(0x0007)
    FControlRigExecuteContext                     Completed;                                                    // 0x0070(0x0038)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0038
struct FRigUnit : public FRigUnit
{
    FRigElementKeyCollection                      Collection;                                                   // 0x0008(0x0010)
    FRigElementKey                                Item;                                                         // 0x0018(0x000C)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
    FRigElementKeyCollection                      Result;                                                       // 0x0028(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0008
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0040
struct FRigUnit : public FRigUnitMutable
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0058
struct FRigUnit : public FRigUnit
{
    FRigElementKey                                Child;                                                        // 0x0040(0x000C)
    FRigElementKey                                Parent;                                                       // 0x004C(0x000C)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0058
struct FRigUnit : public FRigUnit
{
    FRigElementKey                                Child;                                                        // 0x0040(0x000C)
    FRigElementKey                                Parent;                                                       // 0x004C(0x000C)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0060
struct FRigUnit : public FRigUnit
{
    enum class ERigSwitchParentMode               Mode;                                                         // 0x0040(0x0001)
    char                                          pa_0041[0x0003]                                               // 0x0041(0x0003)
    FRigElementKey                                Child;                                                        // 0x0044(0x000C)
    FRigElementKey                                Parent;                                                       // 0x0050(0x000C)
    bool                                          bMaintainGlobal;                                              // 0x005C(0x0001)
    char                                          pa_005D[0x0003]                                               // 0x005D(0x0003)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0038
struct FRigUnit : public FRigUnit
{
    FRigElementKey                                Child;                                                        // 0x0008(0x000C)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    TArray<FRigElementWeight>                     Weights;                                                      // 0x0018(0x0010)
    FRigElementKeyCollection                      Parents;                                                      // 0x0028(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0038
struct FRigUnit : public FRigUnit
{
    FRigElementKey                                Child;                                                        // 0x0008(0x000C)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    TArray<FRigElementWeight>                     Weights;                                                      // 0x0018(0x0010)
    TArray<FRigElementKey>                        Parents;                                                      // 0x0028(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0060
struct FRigUnit : public FRigUnit
{
    FRigElementKey                                Child;                                                        // 0x0040(0x000C)
    char                                          pa_004C[0x0004]                                               // 0x004C(0x0004)
    TArray<FRigElementWeight>                     Weights;                                                      // 0x0050(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0040
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0060
struct FRigUnit : public FRigUnit
{
    FName                                         Namespace;                                                    // 0x0040(0x0008)
    bool                                          bIncludeCurves;                                               // 0x0048(0x0001)
    char                                          pa_0049[0x0007]                                               // 0x0049(0x0007)
    TArray<FRigElementKey>                        Items;                                                        // 0x0050(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0050
struct FRigUnit : public FRigUnit
{
    FRigElementKey                                Item;                                                         // 0x0040(0x000C)
    bool                                          bSuccess;                                                     // 0x004C(0x0001)
    char                                          pa_004D[0x0003]                                               // 0x004D(0x0003)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0060
struct FRigUnit : public FRigUnit
{
    FRigElementKey                                Parent;                                                       // 0x0040(0x000C)
    FName                                         Name;                                                         // 0x004C(0x0008)
    FRigElementKey                                Item;                                                         // 0x0054(0x000C)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00D0
struct FRigUnit : public FRigUnit
{
    FTransform                                    Transform;                                                    // 0x0060(0x0060)
    enum class EBoneGetterSetterMode              Space;                                                        // 0x00C0(0x0001)
    char                                          pa_00C1[0x000F]                                               // 0x00C1(0x000F)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00D0
struct FRigUnit : public FRigUnit
{
    FTransform                                    Transform;                                                    // 0x0060(0x0060)
    enum class EBoneGetterSetterMode              Space;                                                        // 0x00C0(0x0001)
    char                                          pa_00C1[0x000F]                                               // 0x00C1(0x000F)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0010
struct FRigUnit
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    FName                                         DisplayName;                                                  // 0x0008(0x0008)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0080
struct FRigUnit
{
    bool                                          bVisible;                                                     // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FName                                         Name;                                                         // 0x0004(0x0008)
    FLinearColor                                  Color;                                                        // 0x000C(0x0010)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    FTransform                                    Transform;                                                    // 0x0020(0x0060)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0020
struct FRigUnit
{
    bool                                          bIsProxy;                                                     // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    TArray<FRigElementKey>                        DrivenControls;                                               // 0x0008(0x0010)
    enum class ERigControlVisibility              ShapeVisibility;                                              // 0x0018(0x0001)
    char                                          pa_0019[0x0007]                                               // 0x0019(0x0007)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0010
struct FRigUnit
{
    FRigControlLimitEnabled                       Limit;                                                        // 0x0000(0x0002)
    char                                          pa_0002[0x0002]                                               // 0x0002(0x0002)
    float                                         MinValue;                                                     // 0x0004(0x0004)
    float                                         MaxValue;                                                     // 0x0008(0x0004)
    bool                                          bDrawLimits;                                                  // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00D0
struct FRigUnit : public FRigUnit
{
    enum class ERigControlAxis                    PrimaryAxis;                                                  // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
    FRigUnit                                      Limits;                                                       // 0x0014(0x0010)
    char                                          pa_0024[0x000C]                                               // 0x0024(0x000C)
    FRigUnit                                      Shape;                                                        // 0x0030(0x0080)
    FRigUnit                                      Proxy;                                                        // 0x00B0(0x0020)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x01A0
struct FRigUnit : public FRigUnit
{
    FTransform                                    OffsetTransform;                                              // 0x0060(0x0060)
    float                                         InitialValue;                                                 // 0x00C0(0x0004)
    char                                          pa_00C4[0x000C]                                               // 0x00C4(0x000C)
    FRigUnit                                      Settings;                                                     // 0x00D0(0x00D0)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0010
struct FRigUnit
{
    FRigControlLimitEnabled                       Limit;                                                        // 0x0000(0x0002)
    char                                          pa_0002[0x0002]                                               // 0x0002(0x0002)
    int32_t                                       MinValue;                                                     // 0x0004(0x0004)
    int32_t                                       MaxValue;                                                     // 0x0008(0x0004)
    bool                                          bDrawLimits;                                                  // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00D0
struct FRigUnit : public FRigUnit
{
    enum class ERigControlAxis                    PrimaryAxis;                                                  // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
    FRigUnit                                      Limits;                                                       // 0x0014(0x0010)
    char                                          pa_0024[0x000C]                                               // 0x0024(0x000C)
    FRigUnit                                      Shape;                                                        // 0x0030(0x0080)
    FRigUnit                                      Proxy;                                                        // 0x00B0(0x0020)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x01A0
struct FRigUnit : public FRigUnit
{
    FTransform                                    OffsetTransform;                                              // 0x0060(0x0060)
    int32_t                                       InitialValue;                                                 // 0x00C0(0x0004)
    char                                          pa_00C4[0x000C]                                               // 0x00C4(0x000C)
    FRigUnit                                      Settings;                                                     // 0x00D0(0x00D0)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0030
struct FRigUnit
{
    FRigControlLimitEnabled                       LimitX;                                                       // 0x0000(0x0002)
    FRigControlLimitEnabled                       LimitY;                                                       // 0x0002(0x0002)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FVector2D                                     MinValue;                                                     // 0x0008(0x0010)
    FVector2D                                     MaxValue;                                                     // 0x0018(0x0010)
    bool                                          bDrawLimits;                                                  // 0x0028(0x0001)
    char                                          pa_0029[0x0007]                                               // 0x0029(0x0007)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00F0
struct FRigUnit : public FRigUnit
{
    enum class ERigControlAxis                    PrimaryAxis;                                                  // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
    FRigUnit                                      Limits;                                                       // 0x0018(0x0030)
    char                                          pa_0048[0x0008]                                               // 0x0048(0x0008)
    FRigUnit                                      Shape;                                                        // 0x0050(0x0080)
    FRigUnit                                      Proxy;                                                        // 0x00D0(0x0020)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x01C0
struct FRigUnit : public FRigUnit
{
    FTransform                                    OffsetTransform;                                              // 0x0060(0x0060)
    FVector2D                                     InitialValue;                                                 // 0x00C0(0x0010)
    FRigUnit                                      Settings;                                                     // 0x00D0(0x00F0)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0040
struct FRigUnit
{
    FRigControlLimitEnabled                       LimitX;                                                       // 0x0000(0x0002)
    FRigControlLimitEnabled                       LimitY;                                                       // 0x0002(0x0002)
    FRigControlLimitEnabled                       LimitZ;                                                       // 0x0004(0x0002)
    char                                          pa_0006[0x0002]                                               // 0x0006(0x0002)
    FVector                                       MinValue;                                                     // 0x0008(0x0018)
    FVector                                       MaxValue;                                                     // 0x0020(0x0018)
    bool                                          bDrawLimits;                                                  // 0x0038(0x0001)
    char                                          pa_0039[0x0007]                                               // 0x0039(0x0007)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0100
struct FRigUnit : public FRigUnit
{
    bool                                          bIsPosition;                                                  // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
    FRigUnit                                      Limits;                                                       // 0x0018(0x0040)
    char                                          pa_0058[0x0008]                                               // 0x0058(0x0008)
    FRigUnit                                      Shape;                                                        // 0x0060(0x0080)
    FRigUnit                                      Proxy;                                                        // 0x00E0(0x0020)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x01E0
struct FRigUnit : public FRigUnit
{
    FTransform                                    OffsetTransform;                                              // 0x0060(0x0060)
    FVector                                       InitialValue;                                                 // 0x00C0(0x0018)
    char                                          pa_00D8[0x0008]                                               // 0x00D8(0x0008)
    FRigUnit                                      Settings;                                                     // 0x00E0(0x0100)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0040
struct FRigUnit
{
    FRigControlLimitEnabled                       LimitPitch;                                                   // 0x0000(0x0002)
    FRigControlLimitEnabled                       LimitYaw;                                                     // 0x0002(0x0002)
    FRigControlLimitEnabled                       LimitRoll;                                                    // 0x0004(0x0002)
    char                                          pa_0006[0x0002]                                               // 0x0006(0x0002)
    FRotator                                      MinValue;                                                     // 0x0008(0x0018)
    FRotator                                      MaxValue;                                                     // 0x0020(0x0018)
    bool                                          bDrawLimits;                                                  // 0x0038(0x0001)
    char                                          pa_0039[0x0007]                                               // 0x0039(0x0007)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00F0
struct FRigUnit : public FRigUnit
{
    FRigUnit                                      Limits;                                                       // 0x0010(0x0040)
    FRigUnit                                      Shape;                                                        // 0x0050(0x0080)
    FRigUnit                                      Proxy;                                                        // 0x00D0(0x0020)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x01D0
struct FRigUnit : public FRigUnit
{
    FTransform                                    OffsetTransform;                                              // 0x0060(0x0060)
    FRotator                                      InitialValue;                                                 // 0x00C0(0x0018)
    char                                          pa_00D8[0x0008]                                               // 0x00D8(0x0008)
    FRigUnit                                      Settings;                                                     // 0x00E0(0x00F0)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00B0
struct FRigUnit : public FRigUnit
{
    FRigUnit                                      Shape;                                                        // 0x0010(0x0080)
    FRigUnit                                      Proxy;                                                        // 0x0090(0x0020)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x01D0
struct FRigUnit : public FRigUnit
{
    FTransform                                    OffsetTransform;                                              // 0x0060(0x0060)
    FTransform                                    InitialValue;                                                 // 0x00C0(0x0060)
    FRigUnit                                      Settings;                                                     // 0x0120(0x00B0)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0068
struct FRigUnit : public FRigUnit
{
    bool                                          InitialValue;                                                 // 0x0060(0x0001)
    bool                                          MinimumValue;                                                 // 0x0061(0x0001)
    bool                                          MaximumValue;                                                 // 0x0062(0x0001)
    char                                          pa_0063[0x0005]                                               // 0x0063(0x0005)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0070
struct FRigUnit : public FRigUnit
{
    float                                         InitialValue;                                                 // 0x0060(0x0004)
    float                                         MinimumValue;                                                 // 0x0064(0x0004)
    float                                         MaximumValue;                                                 // 0x0068(0x0004)
    char                                          pa_006C[0x0004]                                               // 0x006C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0070
struct FRigUnit : public FRigUnit
{
    int32_t                                       InitialValue;                                                 // 0x0060(0x0004)
    int32_t                                       MinimumValue;                                                 // 0x0064(0x0004)
    int32_t                                       MaximumValue;                                                 // 0x0068(0x0004)
    char                                          pa_006C[0x0004]                                               // 0x006C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0090
struct FRigUnit : public FRigUnit
{
    FVector2D                                     InitialValue;                                                 // 0x0060(0x0010)
    FVector2D                                     MinimumValue;                                                 // 0x0070(0x0010)
    FVector2D                                     MaximumValue;                                                 // 0x0080(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00A8
struct FRigUnit : public FRigUnit
{
    FVector                                       InitialValue;                                                 // 0x0060(0x0018)
    FVector                                       MinimumValue;                                                 // 0x0078(0x0018)
    FVector                                       MaximumValue;                                                 // 0x0090(0x0018)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00A8
struct FRigUnit : public FRigUnit
{
    FRotator                                      InitialValue;                                                 // 0x0060(0x0018)
    FRotator                                      MinimumValue;                                                 // 0x0078(0x0018)
    FRotator                                      MaximumValue;                                                 // 0x0090(0x0018)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0088
struct FRigUnit : public FRigUnitMutable
{
    int32_t                                       Count;                                                        // 0x0040(0x0004)
    int32_t                                       Index;                                                        // 0x0044(0x0004)
    float                                         Ratio;                                                        // 0x0048(0x0004)
    bool                                          Continue;                                                     // 0x004C(0x0001)
    char                                          pa_004D[0x0003]                                               // 0x004D(0x0003)
    FControlRigExecuteContext                     Completed;                                                    // 0x0050(0x0038)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0008
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0040
struct FRigUnit : public FRigUnitMutable
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0060
struct FRigUnit : public FRigUnit
{
    FRigElementKey                                Child;                                                        // 0x0008(0x000C)
    FRigElementKey                                Parent;                                                       // 0x0014(0x000C)
    FCachedRigElement                             CachedChild;                                                  // 0x0020(0x0020)
    FCachedRigElement                             CachedParent;                                                 // 0x0040(0x0020)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0058
struct FRigUnit : public FRigUnit
{
    FRigElementKey                                Child;                                                        // 0x0008(0x000C)
    bool                                          bIncludeChild;                                                // 0x0014(0x0001)
    bool                                          bReverse;                                                     // 0x0015(0x0001)
    char                                          pa_0016[0x0002]                                               // 0x0016(0x0002)
    FRigElementKeyCollection                      Parents;                                                      // 0x0018(0x0010)
    FCachedRigElement                             CachedChild;                                                  // 0x0028(0x0020)
    FRigElementKeyCollection                      CachedParents;                                                // 0x0048(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0058
struct FRigUnit : public FRigUnit
{
    FRigElementKey                                Child;                                                        // 0x0008(0x000C)
    bool                                          bIncludeChild;                                                // 0x0014(0x0001)
    bool                                          bReverse;                                                     // 0x0015(0x0001)
    char                                          pa_0016[0x0002]                                               // 0x0016(0x0002)
    TArray<FRigElementKey>                        Parents;                                                      // 0x0018(0x0010)
    FCachedRigElement                             CachedChild;                                                  // 0x0028(0x0020)
    FRigElementKeyCollection                      CachedParents;                                                // 0x0048(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0058
struct FRigUnit : public FRigUnit
{
    FRigElementKey                                Parent;                                                       // 0x0008(0x000C)
    bool                                          bIncludeParent;                                               // 0x0014(0x0001)
    bool                                          bRecursive;                                                   // 0x0015(0x0001)
    char                                          pa_0016[0x0002]                                               // 0x0016(0x0002)
    FRigElementKeyCollection                      Children;                                                     // 0x0018(0x0010)
    FCachedRigElement                             CachedParent;                                                 // 0x0028(0x0020)
    FRigElementKeyCollection                      CachedChildren;                                               // 0x0048(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0058
struct FRigUnit : public FRigUnit
{
    FRigElementKey                                Item;                                                         // 0x0008(0x000C)
    bool                                          bIncludeItem;                                                 // 0x0014(0x0001)
    char                                          pa_0015[0x0003]                                               // 0x0015(0x0003)
    FRigElementKeyCollection                      Siblings;                                                     // 0x0018(0x0010)
    FCachedRigElement                             CachedItem;                                                   // 0x0028(0x0020)
    FRigElementKeyCollection                      CachedSiblings;                                               // 0x0048(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0058
struct FRigUnit : public FRigUnit
{
    FRigElementKey                                Item;                                                         // 0x0008(0x000C)
    bool                                          bIncludeItem;                                                 // 0x0014(0x0001)
    char                                          pa_0015[0x0003]                                               // 0x0015(0x0003)
    TArray<FRigElementKey>                        Siblings;                                                     // 0x0018(0x0010)
    FCachedRigElement                             CachedItem;                                                   // 0x0028(0x0020)
    FRigElementKeyCollection                      CachedSiblings;                                               // 0x0048(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0090
struct FRigUnit : public FRigUnit
{
    bool                                          Initial;                                                      // 0x0008(0x0001)
    enum class ERigElementType                    ElementType;                                                  // 0x0009(0x0001)
    char                                          pa_000A[0x0006]                                               // 0x000A(0x0006)
    FRigElementKeyCollection                      ItemsToGet;                                                   // 0x0010(0x0010)
    FRigPose                                      Pose;                                                         // 0x0020(0x0070)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0090
struct FRigUnit : public FRigUnit
{
    bool                                          Initial;                                                      // 0x0008(0x0001)
    enum class ERigElementType                    ElementType;                                                  // 0x0009(0x0001)
    char                                          pa_000A[0x0006]                                               // 0x000A(0x0006)
    TArray<FRigElementKey>                        ItemsToGet;                                                   // 0x0010(0x0010)
    FRigPose                                      Pose;                                                         // 0x0020(0x0070)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00D0
struct FRigUnit : public FRigUnit
{
    FRigPose                                      Pose;                                                         // 0x0040(0x0070)
    enum class ERigElementType                    ElementType;                                                  // 0x00B0(0x0001)
    enum class EBoneGetterSetterMode              Space;                                                        // 0x00B1(0x0001)
    char                                          pa_00B2[0x0006]                                               // 0x00B2(0x0006)
    FRigElementKeyCollection                      ItemsToSet;                                                   // 0x00B8(0x0010)
    float                                         Weight;                                                       // 0x00C8(0x0004)
    char                                          pa_00CC[0x0004]                                               // 0x00CC(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00D0
struct FRigUnit : public FRigUnit
{
    FRigPose                                      Pose;                                                         // 0x0040(0x0070)
    enum class ERigElementType                    ElementType;                                                  // 0x00B0(0x0001)
    enum class EBoneGetterSetterMode              Space;                                                        // 0x00B1(0x0001)
    char                                          pa_00B2[0x0006]                                               // 0x00B2(0x0006)
    TArray<FRigElementKey>                        ItemsToSet;                                                   // 0x00B8(0x0010)
    float                                         Weight;                                                       // 0x00C8(0x0004)
    char                                          pa_00CC[0x0004]                                               // 0x00CC(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0080
struct FRigUnit : public FRigUnit
{
    FRigPose                                      Pose;                                                         // 0x0008(0x0070)
    bool                                          IsEmpty;                                                      // 0x0078(0x0001)
    char                                          pa_0079[0x0007]                                               // 0x0079(0x0007)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0090
struct FRigUnit : public FRigUnit
{
    FRigPose                                      Pose;                                                         // 0x0008(0x0070)
    enum class ERigElementType                    ElementType;                                                  // 0x0078(0x0001)
    char                                          pa_0079[0x0007]                                               // 0x0079(0x0007)
    FRigElementKeyCollection                      Items;                                                        // 0x0080(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0090
struct FRigUnit : public FRigUnit
{
    FRigPose                                      Pose;                                                         // 0x0008(0x0070)
    enum class ERigElementType                    ElementType;                                                  // 0x0078(0x0001)
    char                                          pa_0079[0x0007]                                               // 0x0079(0x0007)
    TArray<FRigElementKey>                        Items;                                                        // 0x0080(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0128
struct FRigUnit : public FRigUnit
{
    FRigPose                                      PoseA;                                                        // 0x0008(0x0070)
    FRigPose                                      PoseB;                                                        // 0x0078(0x0070)
    float                                         PositionThreshold;                                            // 0x00E8(0x0004)
    float                                         RotationThreshold;                                            // 0x00EC(0x0004)
    float                                         ScaleThreshold;                                               // 0x00F0(0x0004)
    float                                         CurveThreshold;                                               // 0x00F4(0x0004)
    enum class ERigElementType                    ElementType;                                                  // 0x00F8(0x0001)
    enum class EBoneGetterSetterMode              Space;                                                        // 0x00F9(0x0001)
    char                                          pa_00FA[0x0006]                                               // 0x00FA(0x0006)
    FRigElementKeyCollection                      ItemsToCompare;                                               // 0x0100(0x0010)
    bool                                          PosesAreEqual;                                                // 0x0110(0x0001)
    char                                          pa_0111[0x0007]                                               // 0x0111(0x0007)
    FRigElementKeyCollection                      ItemsWithDelta;                                               // 0x0118(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0100
struct FRigUnit : public FRigUnit
{
    FRigPose                                      Pose;                                                         // 0x0008(0x0070)
    FRigElementKey                                Item;                                                         // 0x0078(0x000C)
    enum class EBoneGetterSetterMode              Space;                                                        // 0x0084(0x0001)
    bool                                          Valid;                                                        // 0x0085(0x0001)
    char                                          pa_0086[0x000A]                                               // 0x0086(0x000A)
    FTransform                                    Transform;                                                    // 0x0090(0x0060)
    float                                         CurveValue;                                                   // 0x00F0(0x0004)
    int32_t                                       CachedPoseElementIndex;                                       // 0x00F4(0x0004)
    int32_t                                       CachedPoseHash;                                               // 0x00F8(0x0004)
    char                                          pa_00FC[0x0004]                                               // 0x00FC(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0090
struct FRigUnit : public FRigUnit
{
    FRigPose                                      Pose;                                                         // 0x0008(0x0070)
    enum class EBoneGetterSetterMode              Space;                                                        // 0x0078(0x0001)
    bool                                          Valid;                                                        // 0x0079(0x0001)
    char                                          pa_007A[0x0006]                                               // 0x007A(0x0006)
    TArray<FTransform>                            Transforms;                                                   // 0x0080(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0090
struct FRigUnit : public FRigUnit
{
    FRigPose                                      Pose;                                                         // 0x0008(0x0070)
    FName                                         Curve;                                                        // 0x0078(0x0008)
    bool                                          Valid;                                                        // 0x0080(0x0001)
    char                                          pa_0081[0x0003]                                               // 0x0081(0x0003)
    float                                         CurveValue;                                                   // 0x0084(0x0004)
    int32_t                                       CachedPoseElementIndex;                                       // 0x0088(0x0004)
    int32_t                                       CachedPoseHash;                                               // 0x008C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x01D0
struct FRigUnit : public FRigUnit
{
    FRigPose                                      Pose;                                                         // 0x0040(0x0070)
    FRigElementKey                                Item;                                                         // 0x00B0(0x000C)
    char                                          pa_00BC[0x0004]                                               // 0x00BC(0x0004)
    FTransform                                    GlobalTransform;                                              // 0x00C0(0x0060)
    FTransform                                    LocalTransform;                                               // 0x0120(0x0060)
    float                                         CurveValue;                                                   // 0x0180(0x0004)
    int32_t                                       Index;                                                        // 0x0184(0x0004)
    int32_t                                       Count;                                                        // 0x0188(0x0004)
    float                                         Ratio;                                                        // 0x018C(0x0004)
    bool                                          Continue;                                                     // 0x0190(0x0001)
    char                                          pa_0191[0x0007]                                               // 0x0191(0x0007)
    FControlRigExecuteContext                     Completed;                                                    // 0x0198(0x0038)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0040
struct FRigUnit : public FRigUnit
{
    FControlRigExecuteContext                     ExecuteContext;                                               // 0x0008(0x0038)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0040
struct FRigUnit : public FRigUnit
{
    FControlRigExecuteContext                     ExecuteContext;                                               // 0x0008(0x0038)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0020
struct FRigUnit : public FRigUnit
{
    bool                                          bIsInteracting;                                               // 0x0008(0x0001)
    bool                                          bIsTranslating;                                               // 0x0009(0x0001)
    bool                                          bIsRotating;                                                  // 0x000A(0x0001)
    bool                                          bIsScaling;                                                   // 0x000B(0x0001)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    TArray<FRigElementKey>                        Items;                                                        // 0x0010(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0008
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0040
struct FRigUnit : public FRigUnitMutable
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0038
struct FRigUnit : public FRigUnit
{
    FRigElementKey                                Item;                                                         // 0x0008(0x000C)
    bool                                          Exists;                                                       // 0x0014(0x0001)
    char                                          pa_0015[0x0003]                                               // 0x0015(0x0003)
    FCachedRigElement                             CachedIndex;                                                  // 0x0018(0x0020)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0030
struct FRigUnit : public FRigUnit
{
    FRigElementKey                                Item;                                                         // 0x0008(0x000C)
    FName                                         Old;                                                          // 0x0014(0x0008)
    FName                                         New;                                                          // 0x001C(0x0008)
    FRigElementKey                                Result;                                                       // 0x0024(0x000C)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0028
struct FRigUnit : public FRigUnit
{
    FRigElementKey                                A;                                                            // 0x0008(0x000C)
    FRigElementKey                                B;                                                            // 0x0014(0x000C)
    bool                                          Result;                                                       // 0x0020(0x0001)
    char                                          pa_0021[0x0007]                                               // 0x0021(0x0007)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0028
struct FRigUnit : public FRigUnit
{
    FRigElementKey                                A;                                                            // 0x0008(0x000C)
    FRigElementKey                                B;                                                            // 0x0014(0x000C)
    bool                                          Result;                                                       // 0x0020(0x0001)
    char                                          pa_0021[0x0007]                                               // 0x0021(0x0007)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0028
struct FRigUnit : public FRigUnit
{
    FRigElementKey                                A;                                                            // 0x0008(0x000C)
    FRigElementKey                                B;                                                            // 0x0014(0x000C)
    bool                                          Result;                                                       // 0x0020(0x0001)
    char                                          pa_0021[0x0007]                                               // 0x0021(0x0007)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0028
struct FRigUnit : public FRigUnit
{
    FRigElementKey                                A;                                                            // 0x0008(0x000C)
    FRigElementKey                                B;                                                            // 0x0014(0x000C)
    bool                                          Result;                                                       // 0x0020(0x0001)
    char                                          pa_0021[0x0007]                                               // 0x0021(0x0007)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0040
struct FRigUnit : public FRigUnit
{
    FControlRigExecuteContext                     ExecuteContext;                                               // 0x0008(0x0038)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0120
struct FRigUnit : public FRigUnit
{
    FControlRigExecuteContext                     ExecuteContext;                                               // 0x0008(0x0038)
    FControlRigExecuteContext                     A;                                                            // 0x0040(0x0038)
    FControlRigExecuteContext                     B;                                                            // 0x0078(0x0038)
    FControlRigExecuteContext                     C;                                                            // 0x00B0(0x0038)
    FControlRigExecuteContext                     D;                                                            // 0x00E8(0x0038)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00B0
struct FRigUnit : public FRigUnit
{
    FControlRigExecuteContext                     ExecuteContext;                                               // 0x0008(0x0038)
    FControlRigExecuteContext                     A;                                                            // 0x0040(0x0038)
    FControlRigExecuteContext                     B;                                                            // 0x0078(0x0038)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0048
struct FRigUnit : public FRigUnit
{
    FControlRigExecuteContext                     ExecuteContext;                                               // 0x0008(0x0038)
    FName                                         EventName;                                                    // 0x0040(0x0008)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00E0
struct FRigUnit : public FRigUnitMutable
{
    FName                                         bone;                                                         // 0x0040(0x0008)
    char                                          pa_0048[0x0008]                                               // 0x0048(0x0008)
    FTransform                                    Transform;                                                    // 0x0050(0x0060)
    float                                         Weight;                                                       // 0x00B0(0x0004)
    bool                                          bPostMultiply;                                                // 0x00B4(0x0001)
    bool                                          bPropagateToChildren;                                         // 0x00B5(0x0001)
    char                                          pa_00B6[0x0002]                                               // 0x00B6(0x0002)
    FCachedRigElement                             CachedBone;                                                   // 0x00B8(0x0020)
    char                                          pa_00D8[0x0008]                                               // 0x00D8(0x0008)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
    FRigElementKey                                Item;                                                         // 0x0008(0x000C)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0010
struct FRigUnit : public FRigUnit
{
    FName                                         bone;                                                         // 0x0008(0x0008)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0010
struct FRigUnit : public FRigUnit
{
    FName                                         Space;                                                        // 0x0008(0x0008)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0010
struct FRigUnit : public FRigUnit
{
    FName                                         Control;                                                      // 0x0008(0x0008)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0030
struct FRigUnit : public FRigUnit
{
    FName                                         Control;                                                      // 0x0008(0x0008)
    FName                                         Channel;                                                      // 0x0010(0x0008)
    bool                                          bInitial;                                                     // 0x0018(0x0001)
    char                                          pa_0019[0x0003]                                               // 0x0019(0x0003)
    FRigElementKey                                CachedChannelKey;                                             // 0x001C(0x000C)
    int32_t                                       CachedChannelHash;                                            // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0038
struct FRigUnit : public FRigUnit
{
    bool                                          Value;                                                        // 0x0030(0x0001)
    char                                          pa_0031[0x0007]                                               // 0x0031(0x0007)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0038
struct FRigUnit : public FRigUnit
{
    float                                         Value;                                                        // 0x0030(0x0004)
    char                                          pa_0034[0x0004]                                               // 0x0034(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0038
struct FRigUnit : public FRigUnit
{
    int32_t                                       Value;                                                        // 0x0030(0x0004)
    char                                          pa_0034[0x0004]                                               // 0x0034(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0040
struct FRigUnit : public FRigUnit
{
    FVector2D                                     Value;                                                        // 0x0030(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0048
struct FRigUnit : public FRigUnit
{
    FVector                                       Value;                                                        // 0x0030(0x0018)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0048
struct FRigUnit : public FRigUnit
{
    FRotator                                      Value;                                                        // 0x0030(0x0018)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0090
struct FRigUnit : public FRigUnit
{
    FTransform                                    Value;                                                        // 0x0030(0x0060)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0068
struct FRigUnit : public FRigUnit
{
    FControlRigExecuteContext                     ExecuteContext;                                               // 0x0030(0x0038)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0070
struct FRigUnit : public FRigUnit
{
    bool                                          Value;                                                        // 0x0068(0x0001)
    char                                          pa_0069[0x0007]                                               // 0x0069(0x0007)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0070
struct FRigUnit : public FRigUnit
{
    float                                         Value;                                                        // 0x0068(0x0004)
    char                                          pa_006C[0x0004]                                               // 0x006C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0070
struct FRigUnit : public FRigUnit
{
    int32_t                                       Value;                                                        // 0x0068(0x0004)
    char                                          pa_006C[0x0004]                                               // 0x006C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0078
struct FRigUnit : public FRigUnit
{
    FVector2D                                     Value;                                                        // 0x0068(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0080
struct FRigUnit : public FRigUnit
{
    FVector                                       Value;                                                        // 0x0068(0x0018)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0080
struct FRigUnit : public FRigUnit
{
    FRotator                                      Value;                                                        // 0x0068(0x0018)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00D0
struct FRigUnit : public FRigUnit
{
    char                                          pa_0068[0x0008]                                               // 0x0068(0x0008)
    FTransform                                    Value;                                                        // 0x0070(0x0060)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00A0
struct FRigUnit : public FRigUnit
{
    FName                                         bone;                                                         // 0x0008(0x0008)
    enum class EBoneGetterSetterMode              Space;                                                        // 0x0010(0x0001)
    char                                          pa_0011[0x000F]                                               // 0x0011(0x000F)
    FTransform                                    Transform;                                                    // 0x0020(0x0060)
    FCachedRigElement                             CachedBone;                                                   // 0x0080(0x0020)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00A0
struct FRigUnit : public FRigUnit
{
    FName                                         Control;                                                      // 0x0008(0x0008)
    enum class EBoneGetterSetterMode              Space;                                                        // 0x0010(0x0001)
    char                                          pa_0011[0x000F]                                               // 0x0011(0x000F)
    FTransform                                    Transform;                                                    // 0x0020(0x0060)
    FCachedRigElement                             CachedControlIndex;                                           // 0x0080(0x0020)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0038
struct FRigUnit : public FRigUnit
{
    FName                                         Control;                                                      // 0x0008(0x0008)
    bool                                          BoolValue;                                                    // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
    FCachedRigElement                             CachedControlIndex;                                           // 0x0018(0x0020)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0040
struct FRigUnit : public FRigUnit
{
    FName                                         Control;                                                      // 0x0008(0x0008)
    float                                         FloatValue;                                                   // 0x0010(0x0004)
    float                                         Minimum;                                                      // 0x0014(0x0004)
    float                                         Maximum;                                                      // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    FCachedRigElement                             CachedControlIndex;                                           // 0x0020(0x0020)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0040
struct FRigUnit : public FRigUnit
{
    FName                                         Control;                                                      // 0x0008(0x0008)
    int32_t                                       IntegerValue;                                                 // 0x0010(0x0004)
    int32_t                                       Minimum;                                                      // 0x0014(0x0004)
    int32_t                                       Maximum;                                                      // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    FCachedRigElement                             CachedControlIndex;                                           // 0x0020(0x0020)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0060
struct FRigUnit : public FRigUnit
{
    FName                                         Control;                                                      // 0x0008(0x0008)
    FVector2D                                     Vector;                                                       // 0x0010(0x0010)
    FVector2D                                     Minimum;                                                      // 0x0020(0x0010)
    FVector2D                                     Maximum;                                                      // 0x0030(0x0010)
    FCachedRigElement                             CachedControlIndex;                                           // 0x0040(0x0020)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0080
struct FRigUnit : public FRigUnit
{
    FName                                         Control;                                                      // 0x0008(0x0008)
    enum class EBoneGetterSetterMode              Space;                                                        // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
    FVector                                       Vector;                                                       // 0x0018(0x0018)
    FVector                                       Minimum;                                                      // 0x0030(0x0018)
    FVector                                       Maximum;                                                      // 0x0048(0x0018)
    FCachedRigElement                             CachedControlIndex;                                           // 0x0060(0x0020)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0080
struct FRigUnit : public FRigUnit
{
    FName                                         Control;                                                      // 0x0008(0x0008)
    enum class EBoneGetterSetterMode              Space;                                                        // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
    FRotator                                      Rotator;                                                      // 0x0018(0x0018)
    FRotator                                      Minimum;                                                      // 0x0030(0x0018)
    FRotator                                      Maximum;                                                      // 0x0048(0x0018)
    FCachedRigElement                             CachedControlIndex;                                           // 0x0060(0x0020)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0160
struct FRigUnit : public FRigUnit
{
    FName                                         Control;                                                      // 0x0008(0x0008)
    enum class EBoneGetterSetterMode              Space;                                                        // 0x0010(0x0001)
    char                                          pa_0011[0x000F]                                               // 0x0011(0x000F)
    FTransform                                    Transform;                                                    // 0x0020(0x0060)
    FTransform                                    Minimum;                                                      // 0x0080(0x0060)
    FTransform                                    Maximum;                                                      // 0x00E0(0x0060)
    FCachedRigElement                             CachedControlIndex;                                           // 0x0140(0x0020)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0038
struct FRigUnit : public FRigUnit
{
    FName                                         Curve;                                                        // 0x0008(0x0008)
    bool                                          Valid;                                                        // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
    float                                         Value;                                                        // 0x0014(0x0004)
    FCachedRigElement                             CachedCurveIndex;                                             // 0x0018(0x0020)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00A0
struct FRigUnit : public FRigUnit
{
    FName                                         bone;                                                         // 0x0008(0x0008)
    enum class EBoneGetterSetterMode              Space;                                                        // 0x0010(0x0001)
    char                                          pa_0011[0x000F]                                               // 0x0011(0x000F)
    FTransform                                    Transform;                                                    // 0x0020(0x0060)
    FCachedRigElement                             CachedBone;                                                   // 0x0080(0x0020)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00C0
struct FRigUnit : public FRigUnit
{
    FName                                         bone;                                                         // 0x0008(0x0008)
    FName                                         Space;                                                        // 0x0010(0x0008)
    char                                          pa_0018[0x0008]                                               // 0x0018(0x0008)
    FTransform                                    Transform;                                                    // 0x0020(0x0060)
    FCachedRigElement                             CachedBone;                                                   // 0x0080(0x0020)
    FCachedRigElement                             CachedSpace;                                                  // 0x00A0(0x0020)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00D0
struct FRigUnit : public FRigUnit
{
    FRigElementKey                                Child;                                                        // 0x0008(0x000C)
    bool                                          bChildInitial;                                                // 0x0014(0x0001)
    char                                          pa_0015[0x0003]                                               // 0x0015(0x0003)
    FRigElementKey                                Parent;                                                       // 0x0018(0x000C)
    bool                                          bParentInitial;                                               // 0x0024(0x0001)
    char                                          pa_0025[0x000B]                                               // 0x0025(0x000B)
    FTransform                                    RelativeTransform;                                            // 0x0030(0x0060)
    FCachedRigElement                             CachedChild;                                                  // 0x0090(0x0020)
    FCachedRigElement                             CachedParent;                                                 // 0x00B0(0x0020)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00A0
struct FRigUnit : public FRigUnit
{
    FName                                         Space;                                                        // 0x0008(0x0008)
    enum class EBoneGetterSetterMode              SpaceType;                                                    // 0x0010(0x0001)
    char                                          pa_0011[0x000F]                                               // 0x0011(0x000F)
    FTransform                                    Transform;                                                    // 0x0020(0x0060)
    FCachedRigElement                             CachedSpaceIndex;                                             // 0x0080(0x0020)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00A0
struct FRigUnit : public FRigUnit
{
    FRigElementKey                                Item;                                                         // 0x0008(0x000C)
    enum class EBoneGetterSetterMode              Space;                                                        // 0x0014(0x0001)
    bool                                          bInitial;                                                     // 0x0015(0x0001)
    char                                          pa_0016[0x000A]                                               // 0x0016(0x000A)
    FTransform                                    Transform;                                                    // 0x0020(0x0060)
    FCachedRigElement                             CachedIndex;                                                  // 0x0080(0x0020)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0040
struct FRigUnit : public FRigUnit
{
    FRigElementKeyCollection                      Items;                                                        // 0x0008(0x0010)
    enum class EBoneGetterSetterMode              Space;                                                        // 0x0018(0x0001)
    bool                                          bInitial;                                                     // 0x0019(0x0001)
    char                                          pa_001A[0x0006]                                               // 0x001A(0x0006)
    TArray<FTransform>                            Transforms;                                                   // 0x0020(0x0010)
    TArray<FCachedRigElement>                     CachedIndex;                                                  // 0x0030(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0040
struct FRigUnit : public FRigUnit
{
    TArray<FRigElementKey>                        Items;                                                        // 0x0008(0x0010)
    enum class EBoneGetterSetterMode              Space;                                                        // 0x0018(0x0001)
    bool                                          bInitial;                                                     // 0x0019(0x0001)
    char                                          pa_001A[0x0006]                                               // 0x001A(0x0006)
    TArray<FTransform>                            Transforms;                                                   // 0x0020(0x0010)
    TArray<FCachedRigElement>                     CachedIndex;                                                  // 0x0030(0x0010)
};


// ScriptStruct  ControlRig.RigDispatch
// Struct Size::0x0048
struct FRigDispatch : public FRigDispatchFactory
{
    char                                          pa_0018[0x0030]                                               // 0x0018(0x0030)
};


// ScriptStruct  ControlRig.RigDispatch
// Struct Size::0x0048
struct FRigDispatch : public FRigDispatch
{
};


// ScriptStruct  ControlRig.RigDispatch
// Struct Size::0x0048
struct FRigDispatch : public FRigDispatch
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0078
struct FRigUnit : public FRigUnitMutable
{
    FRigElementKey                                Item;                                                         // 0x0040(0x000C)
    FName                                         Name;                                                         // 0x004C(0x0008)
    bool                                          Removed;                                                      // 0x0054(0x0001)
    char                                          pa_0055[0x0003]                                               // 0x0055(0x0003)
    FCachedRigElement                             CachedIndex;                                                  // 0x0058(0x0020)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0070
struct FRigUnit : public FRigUnitMutable
{
    FRigElementKey                                Item;                                                         // 0x0040(0x000C)
    bool                                          Removed;                                                      // 0x004C(0x0001)
    char                                          pa_004D[0x0003]                                               // 0x004D(0x0003)
    FCachedRigElement                             CachedIndex;                                                  // 0x0050(0x0020)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0040
struct FRigUnit : public FRigUnit
{
    FRigElementKey                                Item;                                                         // 0x0008(0x000C)
    FName                                         Name;                                                         // 0x0014(0x0008)
    enum class ERigMetadataType                   Type;                                                         // 0x001C(0x0001)
    bool                                          Found;                                                        // 0x001D(0x0001)
    char                                          pa_001E[0x0002]                                               // 0x001E(0x0002)
    FCachedRigElement                             CachedIndex;                                                  // 0x0020(0x0020)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0028
struct FRigUnit : public FRigUnit
{
    FName                                         Name;                                                         // 0x0008(0x0008)
    enum class ERigMetadataType                   Type;                                                         // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
    TArray<FRigElementKey>                        Items;                                                        // 0x0018(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0048
struct FRigUnit : public FRigUnit
{
    FRigElementKey                                Item;                                                         // 0x0008(0x000C)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    TArray<FName>                                 Tags;                                                         // 0x0018(0x0010)
    FCachedRigElement                             CachedIndex;                                                  // 0x0028(0x0020)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0078
struct FRigUnit : public FRigUnitMutable
{
    FRigElementKey                                Item;                                                         // 0x0040(0x000C)
    FName                                         Tag;                                                          // 0x004C(0x0008)
    char                                          pa_0054[0x0004]                                               // 0x0054(0x0004)
    FCachedRigElement                             CachedIndex;                                                  // 0x0058(0x0020)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0080
struct FRigUnit : public FRigUnitMutable
{
    FRigElementKey                                Item;                                                         // 0x0040(0x000C)
    char                                          pa_004C[0x0004]                                               // 0x004C(0x0004)
    TArray<FName>                                 Tags;                                                         // 0x0050(0x0010)
    FCachedRigElement                             CachedIndex;                                                  // 0x0060(0x0020)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0078
struct FRigUnit : public FRigUnitMutable
{
    FRigElementKey                                Item;                                                         // 0x0040(0x000C)
    FName                                         Tag;                                                          // 0x004C(0x0008)
    bool                                          Removed;                                                      // 0x0054(0x0001)
    char                                          pa_0055[0x0003]                                               // 0x0055(0x0003)
    FCachedRigElement                             CachedIndex;                                                  // 0x0058(0x0020)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0040
struct FRigUnit : public FRigUnit
{
    FRigElementKey                                Item;                                                         // 0x0008(0x000C)
    FName                                         Tag;                                                          // 0x0014(0x0008)
    bool                                          Found;                                                        // 0x001C(0x0001)
    char                                          pa_001D[0x0003]                                               // 0x001D(0x0003)
    FCachedRigElement                             CachedIndex;                                                  // 0x0020(0x0020)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0050
struct FRigUnit : public FRigUnit
{
    FRigElementKey                                Item;                                                         // 0x0008(0x000C)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    TArray<FName>                                 Tags;                                                         // 0x0018(0x0010)
    bool                                          Found;                                                        // 0x0028(0x0001)
    char                                          pa_0029[0x0007]                                               // 0x0029(0x0007)
    FCachedRigElement                             CachedIndex;                                                  // 0x0030(0x0020)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0020
struct FRigUnit : public FRigUnit
{
    FName                                         Tag;                                                          // 0x0008(0x0008)
    TArray<FRigElementKey>                        Items;                                                        // 0x0010(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0028
struct FRigUnit : public FRigUnit
{
    TArray<FName>                                 Tags;                                                         // 0x0008(0x0010)
    TArray<FRigElementKey>                        Items;                                                        // 0x0018(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0050
struct FRigUnit : public FRigUnit
{
    TArray<FRigElementKey>                        Items;                                                        // 0x0008(0x0010)
    TArray<FName>                                 Tags;                                                         // 0x0018(0x0010)
    bool                                          Inclusive;                                                    // 0x0028(0x0001)
    char                                          pa_0029[0x0007]                                               // 0x0029(0x0007)
    TArray<FRigElementKey>                        Result;                                                       // 0x0030(0x0010)
    TArray<FCachedRigElement>                     CachedIndices;                                                // 0x0040(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00E0
struct FRigUnit : public FRigUnitMutable
{
    FRigElementKey                                Item;                                                         // 0x0040(0x000C)
    char                                          pa_004C[0x0004]                                               // 0x004C(0x0004)
    FTransform                                    OffsetTransform;                                              // 0x0050(0x0060)
    float                                         Weight;                                                       // 0x00B0(0x0004)
    bool                                          bPropagateToChildren;                                         // 0x00B4(0x0001)
    char                                          pa_00B5[0x0003]                                               // 0x00B5(0x0003)
    FCachedRigElement                             CachedIndex;                                                  // 0x00B8(0x0020)
    char                                          pa_00D8[0x0008]                                               // 0x00D8(0x0008)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x01E0
struct FRigUnit : public FRigUnitMutable
{
    FRigElementKey                                Subject;                                                      // 0x0040(0x000C)
    int32_t                                       ParentIndex;                                                  // 0x004C(0x0004)
    FRigElementKeyCollection                      Parents;                                                      // 0x0050(0x0010)
    FTransform                                    InitialGlobalTransform;                                       // 0x0060(0x0060)
    float                                         Weight;                                                       // 0x00C0(0x0004)
    char                                          pa_00C4[0x000C]                                               // 0x00C4(0x000C)
    FTransform                                    Transform;                                                    // 0x00D0(0x0060)
    bool                                          Switched;                                                     // 0x0130(0x0001)
    char                                          pa_0131[0x0007]                                               // 0x0131(0x0007)
    FCachedRigElement                             CachedSubject;                                                // 0x0138(0x0020)
    FCachedRigElement                             CachedParent;                                                 // 0x0158(0x0020)
    char                                          pa_0178[0x0008]                                               // 0x0178(0x0008)
    FTransform                                    RelativeOffset;                                               // 0x0180(0x0060)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x01E0
struct FRigUnit : public FRigUnitMutable
{
    FRigElementKey                                Subject;                                                      // 0x0040(0x000C)
    int32_t                                       ParentIndex;                                                  // 0x004C(0x0004)
    TArray<FRigElementKey>                        Parents;                                                      // 0x0050(0x0010)
    FTransform                                    InitialGlobalTransform;                                       // 0x0060(0x0060)
    float                                         Weight;                                                       // 0x00C0(0x0004)
    char                                          pa_00C4[0x000C]                                               // 0x00C4(0x000C)
    FTransform                                    Transform;                                                    // 0x00D0(0x0060)
    bool                                          Switched;                                                     // 0x0130(0x0001)
    char                                          pa_0131[0x0007]                                               // 0x0131(0x0007)
    FCachedRigElement                             CachedSubject;                                                // 0x0138(0x0020)
    FCachedRigElement                             CachedParent;                                                 // 0x0158(0x0020)
    char                                          pa_0178[0x0008]                                               // 0x0178(0x0008)
    FTransform                                    RelativeOffset;                                               // 0x0180(0x0060)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0100
struct FRigUnit : public FRigUnit
{
    FRigElementKey                                Child;                                                        // 0x0008(0x000C)
    bool                                          bChildInitial;                                                // 0x0014(0x0001)
    char                                          pa_0015[0x0003]                                               // 0x0015(0x0003)
    FRigElementKey                                OldParent;                                                    // 0x0018(0x000C)
    bool                                          bOldParentInitial;                                            // 0x0024(0x0001)
    char                                          pa_0025[0x0003]                                               // 0x0025(0x0003)
    FRigElementKey                                NewParent;                                                    // 0x0028(0x000C)
    bool                                          bNewParentInitial;                                            // 0x0034(0x0001)
    char                                          pa_0035[0x000B]                                               // 0x0035(0x000B)
    FTransform                                    Transform;                                                    // 0x0040(0x0060)
    FCachedRigElement                             CachedChild;                                                  // 0x00A0(0x0020)
    FCachedRigElement                             CachedOldParent;                                              // 0x00C0(0x0020)
    FCachedRigElement                             CachedNewParent;                                              // 0x00E0(0x0020)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0070
struct FRigUnit : public FRigUnitMutable
{
    FRigElementKey                                Item;                                                         // 0x0040(0x000C)
    bool                                          bRecomputeGlobal;                                             // 0x004C(0x0001)
    bool                                          bApplyToChildren;                                             // 0x004D(0x0001)
    bool                                          bRecursive;                                                   // 0x004E(0x0001)
    char                                          pa_004F[0x0001]                                               // 0x004F(0x0001)
    FCachedRigElement                             CachedIndex;                                                  // 0x0050(0x0020)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0058
struct FRigUnit : public FRigUnitMutable
{
    enum class ERigEvent                          Event;                                                        // 0x0040(0x0001)
    char                                          pa_0041[0x0003]                                               // 0x0041(0x0003)
    FRigElementKey                                Item;                                                         // 0x0044(0x000C)
    float                                         OffsetInSeconds;                                              // 0x0050(0x0004)
    bool                                          bEnable;                                                      // 0x0054(0x0001)
    bool                                          bOnlyDuringInteraction;                                       // 0x0055(0x0001)
    char                                          pa_0056[0x0002]                                               // 0x0056(0x0002)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0140
struct FRigUnit : public FRigUnitMutable
{
    FName                                         bone;                                                         // 0x0040(0x0008)
    char                                          pa_0048[0x0008]                                               // 0x0048(0x0008)
    FTransform                                    Transform;                                                    // 0x0050(0x0060)
    FTransform                                    Result;                                                       // 0x00B0(0x0060)
    enum class EBoneGetterSetterMode              Space;                                                        // 0x0110(0x0001)
    bool                                          bPropagateToChildren;                                         // 0x0111(0x0001)
    char                                          pa_0112[0x0006]                                               // 0x0112(0x0006)
    FCachedRigElement                             CachedBone;                                                   // 0x0118(0x0020)
    char                                          pa_0138[0x0008]                                               // 0x0138(0x0008)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00A0
struct FRigUnit : public FRigUnitMutable
{
    FName                                         bone;                                                         // 0x0040(0x0008)
    char                                          pa_0048[0x0008]                                               // 0x0048(0x0008)
    FQuat                                         Rotation;                                                     // 0x0050(0x0020)
    enum class EBoneGetterSetterMode              Space;                                                        // 0x0070(0x0001)
    char                                          pa_0071[0x0003]                                               // 0x0071(0x0003)
    float                                         Weight;                                                       // 0x0074(0x0004)
    bool                                          bPropagateToChildren;                                         // 0x0078(0x0001)
    char                                          pa_0079[0x0007]                                               // 0x0079(0x0007)
    FCachedRigElement                             CachedBone;                                                   // 0x0080(0x0020)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0140
struct FRigUnit : public FRigUnitMutable
{
    FName                                         bone;                                                         // 0x0040(0x0008)
    char                                          pa_0048[0x0008]                                               // 0x0048(0x0008)
    FTransform                                    Transform;                                                    // 0x0050(0x0060)
    FTransform                                    Result;                                                       // 0x00B0(0x0060)
    enum class EBoneGetterSetterMode              Space;                                                        // 0x0110(0x0001)
    char                                          pa_0111[0x0003]                                               // 0x0111(0x0003)
    float                                         Weight;                                                       // 0x0114(0x0004)
    bool                                          bPropagateToChildren;                                         // 0x0118(0x0001)
    char                                          pa_0119[0x0007]                                               // 0x0119(0x0007)
    FCachedRigElement                             CachedBone;                                                   // 0x0120(0x0020)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0090
struct FRigUnit : public FRigUnitMutable
{
    FName                                         bone;                                                         // 0x0040(0x0008)
    FVector                                       Translation;                                                  // 0x0048(0x0018)
    enum class EBoneGetterSetterMode              Space;                                                        // 0x0060(0x0001)
    char                                          pa_0061[0x0003]                                               // 0x0061(0x0003)
    float                                         Weight;                                                       // 0x0064(0x0004)
    bool                                          bPropagateToChildren;                                         // 0x0068(0x0001)
    char                                          pa_0069[0x0007]                                               // 0x0069(0x0007)
    FCachedRigElement                             CachedBone;                                                   // 0x0070(0x0020)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0040
struct FRigUnit : public FRigUnit
{
    FName                                         Control;                                                      // 0x0008(0x0008)
    FLinearColor                                  Color;                                                        // 0x0010(0x0010)
    FCachedRigElement                             CachedControlIndex;                                           // 0x0020(0x0020)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0078
struct FRigUnit : public FRigUnitMutable
{
    FName                                         Control;                                                      // 0x0040(0x0008)
    FLinearColor                                  Color;                                                        // 0x0048(0x0010)
    FCachedRigElement                             CachedControlIndex;                                           // 0x0058(0x0020)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0040
struct FRigUnit : public FRigUnit
{
    FName                                         Control;                                                      // 0x0008(0x0008)
    TArray<FRigElementKey>                        Driven;                                                       // 0x0010(0x0010)
    FCachedRigElement                             CachedControlIndex;                                           // 0x0020(0x0020)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0078
struct FRigUnit : public FRigUnitMutable
{
    FName                                         Control;                                                      // 0x0040(0x0008)
    TArray<FRigElementKey>                        Driven;                                                       // 0x0048(0x0010)
    FCachedRigElement                             CachedControlIndex;                                           // 0x0058(0x0020)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00E0
struct FRigUnit : public FRigUnitMutable
{
    FName                                         Control;                                                      // 0x0040(0x0008)
    char                                          pa_0048[0x0008]                                               // 0x0048(0x0008)
    FTransform                                    Offset;                                                       // 0x0050(0x0060)
    enum class EBoneGetterSetterMode              Space;                                                        // 0x00B0(0x0001)
    char                                          pa_00B1[0x0007]                                               // 0x00B1(0x0007)
    FCachedRigElement                             CachedControlIndex;                                           // 0x00B8(0x0020)
    char                                          pa_00D8[0x0008]                                               // 0x00D8(0x0008)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0090
struct FRigUnit : public FRigUnit
{
    FName                                         Control;                                                      // 0x0008(0x0008)
    FTransform                                    Transform;                                                    // 0x0010(0x0060)
    FCachedRigElement                             CachedControlIndex;                                           // 0x0070(0x0020)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00D0
struct FRigUnit : public FRigUnitMutable
{
    FName                                         Control;                                                      // 0x0040(0x0008)
    char                                          pa_0048[0x0008]                                               // 0x0048(0x0008)
    FTransform                                    Transform;                                                    // 0x0050(0x0060)
    FCachedRigElement                             CachedControlIndex;                                           // 0x00B0(0x0020)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0070
struct FRigUnit : public FRigUnitMutable
{
    FName                                         Control;                                                      // 0x0040(0x0008)
    bool                                          BoolValue;                                                    // 0x0048(0x0001)
    char                                          pa_0049[0x0007]                                               // 0x0049(0x0007)
    FCachedRigElement                             CachedControlIndex;                                           // 0x0050(0x0020)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x000C
struct FRigUnit
{
    FName                                         Control;                                                      // 0x0000(0x0008)
    bool                                          BoolValue;                                                    // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0060
struct FRigUnit : public FRigUnitMutable
{
    TArray<FRigUnit>                              Entries;                                                      // 0x0040(0x0010)
    TArray<FCachedRigElement>                     CachedControlIndices;                                         // 0x0050(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0070
struct FRigUnit : public FRigUnitMutable
{
    FName                                         Control;                                                      // 0x0040(0x0008)
    float                                         Weight;                                                       // 0x0048(0x0004)
    float                                         FloatValue;                                                   // 0x004C(0x0004)
    FCachedRigElement                             CachedControlIndex;                                           // 0x0050(0x0020)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x000C
struct FRigUnit
{
    FName                                         Control;                                                      // 0x0000(0x0008)
    float                                         FloatValue;                                                   // 0x0008(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0068
struct FRigUnit : public FRigUnitMutable
{
    TArray<FRigUnit>                              Entries;                                                      // 0x0040(0x0010)
    float                                         Weight;                                                       // 0x0050(0x0004)
    char                                          pa_0054[0x0004]                                               // 0x0054(0x0004)
    TArray<FCachedRigElement>                     CachedControlIndices;                                         // 0x0058(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0070
struct FRigUnit : public FRigUnitMutable
{
    FName                                         Control;                                                      // 0x0040(0x0008)
    int32_t                                       Weight;                                                       // 0x0048(0x0004)
    int32_t                                       IntegerValue;                                                 // 0x004C(0x0004)
    FCachedRigElement                             CachedControlIndex;                                           // 0x0050(0x0020)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x000C
struct FRigUnit
{
    FName                                         Control;                                                      // 0x0000(0x0008)
    int32_t                                       IntegerValue;                                                 // 0x0008(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0068
struct FRigUnit : public FRigUnitMutable
{
    TArray<FRigUnit>                              Entries;                                                      // 0x0040(0x0010)
    float                                         Weight;                                                       // 0x0050(0x0004)
    char                                          pa_0054[0x0004]                                               // 0x0054(0x0004)
    TArray<FCachedRigElement>                     CachedControlIndices;                                         // 0x0058(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0080
struct FRigUnit : public FRigUnitMutable
{
    FName                                         Control;                                                      // 0x0040(0x0008)
    float                                         Weight;                                                       // 0x0048(0x0004)
    char                                          pa_004C[0x0004]                                               // 0x004C(0x0004)
    FVector2D                                     Vector;                                                       // 0x0050(0x0010)
    FCachedRigElement                             CachedControlIndex;                                           // 0x0060(0x0020)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit
{
    FName                                         Control;                                                      // 0x0000(0x0008)
    FVector2D                                     Vector;                                                       // 0x0008(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0068
struct FRigUnit : public FRigUnitMutable
{
    TArray<FRigUnit>                              Entries;                                                      // 0x0040(0x0010)
    float                                         Weight;                                                       // 0x0050(0x0004)
    char                                          pa_0054[0x0004]                                               // 0x0054(0x0004)
    TArray<FCachedRigElement>                     CachedControlIndices;                                         // 0x0058(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0090
struct FRigUnit : public FRigUnitMutable
{
    FName                                         Control;                                                      // 0x0040(0x0008)
    float                                         Weight;                                                       // 0x0048(0x0004)
    char                                          pa_004C[0x0004]                                               // 0x004C(0x0004)
    FVector                                       Vector;                                                       // 0x0050(0x0018)
    enum class EBoneGetterSetterMode              Space;                                                        // 0x0068(0x0001)
    char                                          pa_0069[0x0007]                                               // 0x0069(0x0007)
    FCachedRigElement                             CachedControlIndex;                                           // 0x0070(0x0020)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0090
struct FRigUnit : public FRigUnitMutable
{
    FName                                         Control;                                                      // 0x0040(0x0008)
    float                                         Weight;                                                       // 0x0048(0x0004)
    char                                          pa_004C[0x0004]                                               // 0x004C(0x0004)
    FRotator                                      Rotator;                                                      // 0x0050(0x0018)
    enum class EBoneGetterSetterMode              Space;                                                        // 0x0068(0x0001)
    char                                          pa_0069[0x0007]                                               // 0x0069(0x0007)
    FCachedRigElement                             CachedControlIndex;                                           // 0x0070(0x0020)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0028
struct FRigUnit
{
    FName                                         Control;                                                      // 0x0000(0x0008)
    FRotator                                      Rotator;                                                      // 0x0008(0x0018)
    enum class EBoneGetterSetterMode              Space;                                                        // 0x0020(0x0001)
    char                                          pa_0021[0x0007]                                               // 0x0021(0x0007)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0068
struct FRigUnit : public FRigUnitMutable
{
    TArray<FRigUnit>                              Entries;                                                      // 0x0040(0x0010)
    float                                         Weight;                                                       // 0x0050(0x0004)
    char                                          pa_0054[0x0004]                                               // 0x0054(0x0004)
    TArray<FCachedRigElement>                     CachedControlIndices;                                         // 0x0058(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00E0
struct FRigUnit : public FRigUnitMutable
{
    FName                                         Control;                                                      // 0x0040(0x0008)
    float                                         Weight;                                                       // 0x0048(0x0004)
    char                                          pa_004C[0x0004]                                               // 0x004C(0x0004)
    FTransform                                    Transform;                                                    // 0x0050(0x0060)
    enum class EBoneGetterSetterMode              Space;                                                        // 0x00B0(0x0001)
    char                                          pa_00B1[0x0007]                                               // 0x00B1(0x0007)
    FCachedRigElement                             CachedControlIndex;                                           // 0x00B8(0x0020)
    char                                          pa_00D8[0x0008]                                               // 0x00D8(0x0008)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0038
struct FRigUnit : public FRigUnit
{
    FRigElementKey                                Item;                                                         // 0x0008(0x000C)
    bool                                          bVisible;                                                     // 0x0014(0x0001)
    char                                          pa_0015[0x0003]                                               // 0x0015(0x0003)
    FCachedRigElement                             CachedControlIndex;                                           // 0x0018(0x0020)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0078
struct FRigUnit : public FRigUnitMutable
{
    FRigElementKey                                Item;                                                         // 0x0040(0x000C)
    char                                          pa_004C[0x0004]                                               // 0x004C(0x0004)
    FString                                       Pattern;                                                      // 0x0050(0x0010)
    bool                                          bVisible;                                                     // 0x0060(0x0001)
    char                                          pa_0061[0x0007]                                               // 0x0061(0x0007)
    TArray<FCachedRigElement>                     CachedControlIndices;                                         // 0x0068(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0070
struct FRigUnit : public FRigUnitMutable
{
    FName                                         Curve;                                                        // 0x0040(0x0008)
    float                                         Value;                                                        // 0x0048(0x0004)
    char                                          pa_004C[0x0004]                                               // 0x004C(0x0004)
    FCachedRigElement                             CachedCurveIndex;                                             // 0x0050(0x0020)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0100
struct FRigUnit : public FRigUnitMutable
{
    FName                                         bone;                                                         // 0x0040(0x0008)
    FName                                         Space;                                                        // 0x0048(0x0008)
    FTransform                                    Transform;                                                    // 0x0050(0x0060)
    float                                         Weight;                                                       // 0x00B0(0x0004)
    bool                                          bPropagateToChildren;                                         // 0x00B4(0x0001)
    char                                          pa_00B5[0x0003]                                               // 0x00B5(0x0003)
    FCachedRigElement                             CachedBone;                                                   // 0x00B8(0x0020)
    FCachedRigElement                             CachedSpaceIndex;                                             // 0x00D8(0x0020)
    char                                          pa_00F8[0x0008]                                               // 0x00F8(0x0008)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0110
struct FRigUnit : public FRigUnitMutable
{
    FRigElementKey                                Child;                                                        // 0x0040(0x000C)
    FRigElementKey                                Parent;                                                       // 0x004C(0x000C)
    bool                                          bParentInitial;                                               // 0x0058(0x0001)
    char                                          pa_0059[0x0007]                                               // 0x0059(0x0007)
    FTransform                                    Value;                                                        // 0x0060(0x0060)
    float                                         Weight;                                                       // 0x00C0(0x0004)
    bool                                          bPropagateToChildren;                                         // 0x00C4(0x0001)
    char                                          pa_00C5[0x0003]                                               // 0x00C5(0x0003)
    FCachedRigElement                             CachedChild;                                                  // 0x00C8(0x0020)
    FCachedRigElement                             CachedParent;                                                 // 0x00E8(0x0020)
    char                                          pa_0108[0x0008]                                               // 0x0108(0x0008)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00C0
struct FRigUnit : public FRigUnitMutable
{
    FRigElementKey                                Child;                                                        // 0x0040(0x000C)
    FRigElementKey                                Parent;                                                       // 0x004C(0x000C)
    bool                                          bParentInitial;                                               // 0x0058(0x0001)
    char                                          pa_0059[0x0007]                                               // 0x0059(0x0007)
    FVector                                       Value;                                                        // 0x0060(0x0018)
    float                                         Weight;                                                       // 0x0078(0x0004)
    bool                                          bPropagateToChildren;                                         // 0x007C(0x0001)
    char                                          pa_007D[0x0003]                                               // 0x007D(0x0003)
    FCachedRigElement                             CachedChild;                                                  // 0x0080(0x0020)
    FCachedRigElement                             CachedParent;                                                 // 0x00A0(0x0020)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00D0
struct FRigUnit : public FRigUnitMutable
{
    FRigElementKey                                Child;                                                        // 0x0040(0x000C)
    FRigElementKey                                Parent;                                                       // 0x004C(0x000C)
    bool                                          bParentInitial;                                               // 0x0058(0x0001)
    char                                          pa_0059[0x0007]                                               // 0x0059(0x0007)
    FQuat                                         Value;                                                        // 0x0060(0x0020)
    float                                         Weight;                                                       // 0x0080(0x0004)
    bool                                          bPropagateToChildren;                                         // 0x0084(0x0001)
    char                                          pa_0085[0x0003]                                               // 0x0085(0x0003)
    FCachedRigElement                             CachedChild;                                                  // 0x0088(0x0020)
    FCachedRigElement                             CachedParent;                                                 // 0x00A8(0x0020)
    char                                          pa_00C8[0x0008]                                               // 0x00C8(0x0008)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0140
struct FRigUnit : public FRigUnitMutable
{
    FName                                         SpaceName;                                                    // 0x0040(0x0008)
    char                                          pa_0048[0x0008]                                               // 0x0048(0x0008)
    FTransform                                    Transform;                                                    // 0x0050(0x0060)
    FTransform                                    Result;                                                       // 0x00B0(0x0060)
    enum class EBoneGetterSetterMode              Space;                                                        // 0x0110(0x0001)
    char                                          pa_0111[0x0007]                                               // 0x0111(0x0007)
    FCachedRigElement                             CachedSpaceIndex;                                             // 0x0118(0x0020)
    char                                          pa_0138[0x0008]                                               // 0x0138(0x0008)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00E0
struct FRigUnit : public FRigUnitMutable
{
    FName                                         Space;                                                        // 0x0040(0x0008)
    float                                         Weight;                                                       // 0x0048(0x0004)
    char                                          pa_004C[0x0004]                                               // 0x004C(0x0004)
    FTransform                                    Transform;                                                    // 0x0050(0x0060)
    enum class EBoneGetterSetterMode              SpaceType;                                                    // 0x00B0(0x0001)
    char                                          pa_00B1[0x0007]                                               // 0x00B1(0x0007)
    FCachedRigElement                             CachedSpaceIndex;                                             // 0x00B8(0x0020)
    char                                          pa_00D8[0x0008]                                               // 0x00D8(0x0008)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00E0
struct FRigUnit : public FRigUnitMutable
{
    FRigElementKey                                Item;                                                         // 0x0040(0x000C)
    enum class EBoneGetterSetterMode              Space;                                                        // 0x004C(0x0001)
    bool                                          bInitial;                                                     // 0x004D(0x0001)
    char                                          pa_004E[0x0002]                                               // 0x004E(0x0002)
    FTransform                                    Value;                                                        // 0x0050(0x0060)
    float                                         Weight;                                                       // 0x00B0(0x0004)
    bool                                          bPropagateToChildren;                                         // 0x00B4(0x0001)
    char                                          pa_00B5[0x0003]                                               // 0x00B5(0x0003)
    FCachedRigElement                             CachedIndex;                                                  // 0x00B8(0x0020)
    char                                          pa_00D8[0x0008]                                               // 0x00D8(0x0008)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0090
struct FRigUnit : public FRigUnitMutable
{
    FRigElementKey                                Item;                                                         // 0x0040(0x000C)
    enum class EBoneGetterSetterMode              Space;                                                        // 0x004C(0x0001)
    bool                                          bInitial;                                                     // 0x004D(0x0001)
    char                                          pa_004E[0x0002]                                               // 0x004E(0x0002)
    FVector                                       Value;                                                        // 0x0050(0x0018)
    float                                         Weight;                                                       // 0x0068(0x0004)
    bool                                          bPropagateToChildren;                                         // 0x006C(0x0001)
    char                                          pa_006D[0x0003]                                               // 0x006D(0x0003)
    FCachedRigElement                             CachedIndex;                                                  // 0x0070(0x0020)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00A0
struct FRigUnit : public FRigUnitMutable
{
    FRigElementKey                                Item;                                                         // 0x0040(0x000C)
    enum class EBoneGetterSetterMode              Space;                                                        // 0x004C(0x0001)
    bool                                          bInitial;                                                     // 0x004D(0x0001)
    char                                          pa_004E[0x0002]                                               // 0x004E(0x0002)
    FQuat                                         Value;                                                        // 0x0050(0x0020)
    float                                         Weight;                                                       // 0x0070(0x0004)
    bool                                          bPropagateToChildren;                                         // 0x0074(0x0001)
    char                                          pa_0075[0x0003]                                               // 0x0075(0x0003)
    FCachedRigElement                             CachedIndex;                                                  // 0x0078(0x0020)
    char                                          pa_0098[0x0008]                                               // 0x0098(0x0008)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0090
struct FRigUnit : public FRigUnitMutable
{
    FRigElementKey                                Item;                                                         // 0x0040(0x000C)
    enum class EBoneGetterSetterMode              Space;                                                        // 0x004C(0x0001)
    bool                                          bInitial;                                                     // 0x004D(0x0001)
    char                                          pa_004E[0x0002]                                               // 0x004E(0x0002)
    FVector                                       Scale;                                                        // 0x0050(0x0018)
    float                                         Weight;                                                       // 0x0068(0x0004)
    bool                                          bPropagateToChildren;                                         // 0x006C(0x0001)
    char                                          pa_006D[0x0003]                                               // 0x006D(0x0003)
    FCachedRigElement                             CachedIndex;                                                  // 0x0070(0x0020)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0080
struct FRigUnit : public FRigUnitMutable
{
    FRigElementKeyCollection                      Items;                                                        // 0x0040(0x0010)
    enum class EBoneGetterSetterMode              Space;                                                        // 0x0050(0x0001)
    bool                                          bInitial;                                                     // 0x0051(0x0001)
    char                                          pa_0052[0x0006]                                               // 0x0052(0x0006)
    TArray<FTransform>                            Transforms;                                                   // 0x0058(0x0010)
    float                                         Weight;                                                       // 0x0068(0x0004)
    bool                                          bPropagateToChildren;                                         // 0x006C(0x0001)
    char                                          pa_006D[0x0003]                                               // 0x006D(0x0003)
    TArray<FCachedRigElement>                     CachedIndex;                                                  // 0x0070(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0080
struct FRigUnit : public FRigUnitMutable
{
    TArray<FRigElementKey>                        Items;                                                        // 0x0040(0x0010)
    enum class EBoneGetterSetterMode              Space;                                                        // 0x0050(0x0001)
    bool                                          bInitial;                                                     // 0x0051(0x0001)
    char                                          pa_0052[0x0006]                                               // 0x0052(0x0006)
    TArray<FTransform>                            Transforms;                                                   // 0x0058(0x0010)
    float                                         Weight;                                                       // 0x0068(0x0004)
    bool                                          bPropagateToChildren;                                         // 0x006C(0x0001)
    char                                          pa_006D[0x0003]                                               // 0x006D(0x0003)
    TArray<FCachedRigElement>                     CachedIndex;                                                  // 0x0070(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0068
struct FRigUnit : public FRigUnitMutable
{
    FName                                         Curve;                                                        // 0x0040(0x0008)
    FCachedRigElement                             CachedCurveIndex;                                             // 0x0048(0x0020)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00D0
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FTransform                                    Value;                                                        // 0x0010(0x0060)
    FTransform                                    World;                                                        // 0x0070(0x0060)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00D0
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FTransform                                    Value;                                                        // 0x0010(0x0060)
    FTransform                                    Global;                                                       // 0x0070(0x0060)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0038
struct FRigUnit : public FRigUnit
{
    FVector                                       Value;                                                        // 0x0008(0x0018)
    FVector                                       World;                                                        // 0x0020(0x0018)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0038
struct FRigUnit : public FRigUnit
{
    FVector                                       Value;                                                        // 0x0008(0x0018)
    FVector                                       Global;                                                       // 0x0020(0x0018)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0050
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FQuat                                         Value;                                                        // 0x0010(0x0020)
    FQuat                                         World;                                                        // 0x0030(0x0020)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0050
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FQuat                                         Value;                                                        // 0x0010(0x0020)
    FQuat                                         Global;                                                       // 0x0030(0x0020)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x000C
struct FRigUnit
{
    FName                                         bone;                                                         // 0x0000(0x0008)
    float                                         Ratio;                                                        // 0x0008(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0010
struct FRigUnit
{
    FRigElementKey                                Item;                                                         // 0x0000(0x000C)
    float                                         Ratio;                                                        // 0x000C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0028
struct FRigUnit
{
    TArray<FCachedRigElement>                     CachedItems;                                                  // 0x0000(0x0010)
    FVector                                       WaveTime;                                                     // 0x0010(0x0018)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0100
struct FRigUnit : public FRigUnit
{
    TArray<FRigUnit>                              Bones;                                                        // 0x0040(0x0010)
    FVector                                       WaveSpeed;                                                    // 0x0050(0x0018)
    FVector                                       WaveFrequency;                                                // 0x0068(0x0018)
    FVector                                       WaveAmplitude;                                                // 0x0080(0x0018)
    FVector                                       WaveOffset;                                                   // 0x0098(0x0018)
    FVector                                       WaveNoise;                                                    // 0x00B0(0x0018)
    enum class EControlRigAnimEasingType          WaveEase;                                                     // 0x00C8(0x0001)
    char                                          pa_00C9[0x0003]                                               // 0x00C9(0x0003)
    float                                         WaveMinimum;                                                  // 0x00CC(0x0004)
    float                                         WaveMaximum;                                                  // 0x00D0(0x0004)
    enum class EEulerRotationOrder                RotationOrder;                                                // 0x00D4(0x0001)
    bool                                          bPropagateToChildren;                                         // 0x00D5(0x0001)
    char                                          pa_00D6[0x0002]                                               // 0x00D6(0x0002)
    FRigUnit                                      WorkData;                                                     // 0x00D8(0x0028)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0100
struct FRigUnit : public FRigUnit
{
    TArray<FRigUnit>                              Targets;                                                      // 0x0040(0x0010)
    FVector                                       WaveSpeed;                                                    // 0x0050(0x0018)
    FVector                                       WaveFrequency;                                                // 0x0068(0x0018)
    FVector                                       WaveAmplitude;                                                // 0x0080(0x0018)
    FVector                                       WaveOffset;                                                   // 0x0098(0x0018)
    FVector                                       WaveNoise;                                                    // 0x00B0(0x0018)
    enum class EControlRigAnimEasingType          WaveEase;                                                     // 0x00C8(0x0001)
    char                                          pa_00C9[0x0003]                                               // 0x00C9(0x0003)
    float                                         WaveMinimum;                                                  // 0x00CC(0x0004)
    float                                         WaveMaximum;                                                  // 0x00D0(0x0004)
    enum class EEulerRotationOrder                RotationOrder;                                                // 0x00D4(0x0001)
    char                                          pa_00D5[0x0003]                                               // 0x00D5(0x0003)
    FRigUnit                                      WorkData;                                                     // 0x00D8(0x0028)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0048
struct FRigUnit
{
    bool                                          bEnabled;                                                     // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    FVector                                       ReachTarget;                                                  // 0x0008(0x0018)
    FVector                                       ReachAxis;                                                    // 0x0020(0x0018)
    float                                         ReachMinimum;                                                 // 0x0038(0x0004)
    float                                         ReachMaximum;                                                 // 0x003C(0x0004)
    enum class EControlRigAnimEasingType          ReachEase;                                                    // 0x0040(0x0001)
    char                                          pa_0041[0x0007]                                               // 0x0041(0x0007)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0078
struct FRigUnit
{
    bool                                          bEnabled;                                                     // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    FVector                                       WaveFrequency;                                                // 0x0008(0x0018)
    FVector                                       WaveAmplitude;                                                // 0x0020(0x0018)
    FVector                                       WaveOffset;                                                   // 0x0038(0x0018)
    FVector                                       WaveNoise;                                                    // 0x0050(0x0018)
    float                                         WaveMinimum;                                                  // 0x0068(0x0004)
    float                                         WaveMaximum;                                                  // 0x006C(0x0004)
    enum class EControlRigAnimEasingType          WaveEase;                                                     // 0x0070(0x0001)
    char                                          pa_0071[0x0007]                                               // 0x0071(0x0007)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0058
struct FRigUnit
{
    bool                                          bEnabled;                                                     // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         PendulumStiffness;                                            // 0x0004(0x0004)
    FVector                                       PendulumGravity;                                              // 0x0008(0x0018)
    float                                         PendulumBlend;                                                // 0x0020(0x0004)
    float                                         PendulumDrag;                                                 // 0x0024(0x0004)
    float                                         PendulumMinimum;                                              // 0x0028(0x0004)
    float                                         PendulumMaximum;                                              // 0x002C(0x0004)
    enum class EControlRigAnimEasingType          PendulumEase;                                                 // 0x0030(0x0001)
    char                                          pa_0031[0x0007]                                               // 0x0031(0x0007)
    FVector                                       UnwindAxis;                                                   // 0x0038(0x0018)
    float                                         UnwindMinimum;                                                // 0x0050(0x0004)
    float                                         UnwindMaximum;                                                // 0x0054(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0098
struct FRigUnit
{
    FVector                                       Time;                                                         // 0x0000(0x0018)
    TArray<FCachedRigElement>                     Items;                                                        // 0x0018(0x0010)
    TArray<float>                                 Ratio;                                                        // 0x0028(0x0010)
    TArray<FVector>                               LocalTip;                                                     // 0x0038(0x0010)
    TArray<FVector>                               PendulumTip;                                                  // 0x0048(0x0010)
    TArray<FVector>                               PendulumPosition;                                             // 0x0058(0x0010)
    TArray<FVector>                               PendulumVelocity;                                             // 0x0068(0x0010)
    TArray<FVector>                               HierarchyLine;                                                // 0x0078(0x0010)
    TArray<FVector>                               VelocityLines;                                                // 0x0088(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0310
struct FRigUnit : public FRigUnit
{
    FName                                         ChainRoot;                                                    // 0x0040(0x0008)
    FVector                                       Speed;                                                        // 0x0048(0x0018)
    FRigUnit                                      Reach;                                                        // 0x0060(0x0048)
    FRigUnit                                      Wave;                                                         // 0x00A8(0x0078)
    FRuntimeFloatCurve                            WaveCurve;                                                    // 0x0120(0x0088)
    FRigUnit                                      Pendulum;                                                     // 0x01A8(0x0058)
    bool                                          bDrawDebug;                                                   // 0x0200(0x0001)
    char                                          pa_0201[0x000F]                                               // 0x0201(0x000F)
    FTransform                                    DrawWorldOffset;                                              // 0x0210(0x0060)
    FRigUnit                                      WorkData;                                                     // 0x0270(0x0098)
    char                                          pa_0308[0x0008]                                               // 0x0308(0x0008)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0310
struct FRigUnit : public FRigUnit
{
    FRigElementKey                                ChainRoot;                                                    // 0x0040(0x000C)
    char                                          pa_004C[0x0004]                                               // 0x004C(0x0004)
    FVector                                       Speed;                                                        // 0x0050(0x0018)
    FRigUnit                                      Reach;                                                        // 0x0068(0x0048)
    FRigUnit                                      Wave;                                                         // 0x00B0(0x0078)
    FRuntimeFloatCurve                            WaveCurve;                                                    // 0x0128(0x0088)
    FRigUnit                                      Pendulum;                                                     // 0x01B0(0x0058)
    bool                                          bDrawDebug;                                                   // 0x0208(0x0001)
    char                                          pa_0209[0x0007]                                               // 0x0209(0x0007)
    FTransform                                    DrawWorldOffset;                                              // 0x0210(0x0060)
    FRigUnit                                      WorkData;                                                     // 0x0270(0x0098)
    char                                          pa_0308[0x0008]                                               // 0x0308(0x0008)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0048
struct FRigUnit
{
    float                                         Weight;                                                       // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FVector                                       Axis;                                                         // 0x0008(0x0018)
    FVector                                       Target;                                                       // 0x0020(0x0018)
    enum class EControlRigVectorKind              Kind;                                                         // 0x0038(0x0001)
    char                                          pa_0039[0x0003]                                               // 0x0039(0x0003)
    FName                                         Space;                                                        // 0x003C(0x0008)
    char                                          pa_0044[0x0004]                                               // 0x0044(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0048
struct FRigUnit
{
    float                                         Weight;                                                       // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FVector                                       Axis;                                                         // 0x0008(0x0018)
    FVector                                       Target;                                                       // 0x0020(0x0018)
    enum class EControlRigVectorKind              Kind;                                                         // 0x0038(0x0001)
    char                                          pa_0039[0x0003]                                               // 0x0039(0x0003)
    FRigElementKey                                Space;                                                        // 0x003C(0x000C)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0070
struct FRigUnit
{
    bool                                          bEnabled;                                                     // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         Scale;                                                        // 0x0004(0x0004)
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FTransform                                    WorldOffset;                                                  // 0x0010(0x0060)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0220
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FTransform                                    InputTransform;                                               // 0x0010(0x0060)
    FRigUnit                                      Primary;                                                      // 0x0070(0x0048)
    FRigUnit                                      Secondary;                                                    // 0x00B8(0x0048)
    float                                         Weight;                                                       // 0x0100(0x0004)
    char                                          pa_0104[0x000C]                                               // 0x0104(0x000C)
    FTransform                                    Result;                                                       // 0x0110(0x0060)
    FRigUnit                                      DebugSettings;                                                // 0x0170(0x0070)
    FCachedRigElement                             PrimaryCachedSpace;                                           // 0x01E0(0x0020)
    FCachedRigElement                             SecondaryCachedSpace;                                         // 0x0200(0x0020)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x01B0
struct FRigUnit : public FRigUnit
{
    FName                                         bone;                                                         // 0x0040(0x0008)
    FRigUnit                                      Primary;                                                      // 0x0048(0x0048)
    FRigUnit                                      Secondary;                                                    // 0x0090(0x0048)
    float                                         Weight;                                                       // 0x00D8(0x0004)
    bool                                          bPropagateToChildren;                                         // 0x00DC(0x0001)
    char                                          pa_00DD[0x0003]                                               // 0x00DD(0x0003)
    FRigUnit                                      DebugSettings;                                                // 0x00E0(0x0070)
    FCachedRigElement                             CachedBoneIndex;                                              // 0x0150(0x0020)
    FCachedRigElement                             PrimaryCachedSpace;                                           // 0x0170(0x0020)
    FCachedRigElement                             SecondaryCachedSpace;                                         // 0x0190(0x0020)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x01C0
struct FRigUnit : public FRigUnit
{
    FRigElementKey                                Item;                                                         // 0x0040(0x000C)
    char                                          pa_004C[0x0004]                                               // 0x004C(0x0004)
    FRigUnit                                      Primary;                                                      // 0x0050(0x0048)
    FRigUnit                                      Secondary;                                                    // 0x0098(0x0048)
    float                                         Weight;                                                       // 0x00E0(0x0004)
    char                                          pa_00E4[0x000C]                                               // 0x00E4(0x000C)
    FRigUnit                                      DebugSettings;                                                // 0x00F0(0x0070)
    FCachedRigElement                             CachedItem;                                                   // 0x0160(0x0020)
    FCachedRigElement                             PrimaryCachedSpace;                                           // 0x0180(0x0020)
    FCachedRigElement                             SecondaryCachedSpace;                                         // 0x01A0(0x0020)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0028
struct FRigUnit
{
    FVector                                       Target;                                                       // 0x0000(0x0018)
    enum class EControlRigVectorKind              Kind;                                                         // 0x0018(0x0001)
    char                                          pa_0019[0x0003]                                               // 0x0019(0x0003)
    FRigElementKey                                Space;                                                        // 0x001C(0x000C)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0080
struct FRigUnit
{
    FRigUnit                                      DebugSettings;                                                // 0x0000(0x0070)
    enum class EEulerRotationOrder                RotationOrderForFilter;                                       // 0x0070(0x0001)
    char                                          pa_0071[0x000F]                                               // 0x0071(0x000F)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x01A0
struct FRigUnit : public FRigUnit
{
    FRigElementKey                                Child;                                                        // 0x0040(0x000C)
    bool                                          bMaintainOffset;                                              // 0x004C(0x0001)
    FFilterOptionPerAxis                          Filter;                                                       // 0x004D(0x0003)
    FVector                                       AimAxis;                                                      // 0x0050(0x0018)
    FVector                                       UpAxis;                                                       // 0x0068(0x0018)
    FRigUnit                                      WorldUp;                                                      // 0x0080(0x0028)
    TArray<FConstraintParent>                     Parents;                                                      // 0x00A8(0x0010)
    char                                          pa_00B8[0x0008]                                               // 0x00B8(0x0008)
    FRigUnit                                      AdvancedSettings;                                             // 0x00C0(0x0080)
    float                                         Weight;                                                       // 0x0140(0x0004)
    char                                          pa_0144[0x0004]                                               // 0x0144(0x0004)
    FCachedRigElement                             WorldUpSpaceCache;                                            // 0x0148(0x0020)
    FCachedRigElement                             ChildCache;                                                   // 0x0168(0x0020)
    TArray<FCachedRigElement>                     ParentCaches;                                                 // 0x0188(0x0010)
    char                                          pa_0198[0x0008]                                               // 0x0198(0x0008)
};


// ScriptStruct  ControlRig.ConstraintParent
// Struct Size::0x0010
struct FConstraintParent
{
    FRigElementKey                                Item;                                                         // 0x0000(0x000C)
    float                                         Weight;                                                       // 0x000C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x000C
struct FRigUnit
{
    FName                                         bone;                                                         // 0x0000(0x0008)
    float                                         Limit;                                                        // 0x0008(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0010
struct FRigUnit
{
    FRigElementKey                                Item;                                                         // 0x0000(0x000C)
    float                                         Limit;                                                        // 0x000C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0060
struct FRigUnit
{
    TArray<FCCDIKChainLink>                       Chain;                                                        // 0x0000(0x0010)
    TArray<FCachedRigElement>                     CachedItems;                                                  // 0x0010(0x0010)
    TArray<int32_t>                               RotationLimitIndex;                                           // 0x0020(0x0010)
    TArray<float>                                 RotationLimitsPerItem;                                        // 0x0030(0x0010)
    FCachedRigElement                             CachedEffector;                                               // 0x0040(0x0020)
};


// ScriptStruct  AnimationCore.CCDIKChainLink
// Struct Size::0x00E0
struct FCCDIKChainLink
{
    char                                          pa_0000[0x00E0]                                               // 0x0000(0x00E0)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0140
struct FRigUnit : public FRigUnit
{
    FName                                         StartBone;                                                    // 0x0040(0x0008)
    FName                                         EffectorBone;                                                 // 0x0048(0x0008)
    FTransform                                    EffectorTransform;                                            // 0x0050(0x0060)
    float                                         Precision;                                                    // 0x00B0(0x0004)
    float                                         Weight;                                                       // 0x00B4(0x0004)
    int32_t                                       MaxIterations;                                                // 0x00B8(0x0004)
    bool                                          bStartFromTail;                                               // 0x00BC(0x0001)
    char                                          pa_00BD[0x0003]                                               // 0x00BD(0x0003)
    float                                         BaseRotationLimit;                                            // 0x00C0(0x0004)
    char                                          pa_00C4[0x0004]                                               // 0x00C4(0x0004)
    TArray<FRigUnit>                              RotationLimits;                                               // 0x00C8(0x0010)
    bool                                          bPropagateToChildren;                                         // 0x00D8(0x0001)
    char                                          pa_00D9[0x0007]                                               // 0x00D9(0x0007)
    FRigUnit                                      WorkData;                                                     // 0x00E0(0x0060)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0140
struct FRigUnit : public FRigUnit
{
    FRigElementKeyCollection                      Items;                                                        // 0x0040(0x0010)
    FTransform                                    EffectorTransform;                                            // 0x0050(0x0060)
    float                                         Precision;                                                    // 0x00B0(0x0004)
    float                                         Weight;                                                       // 0x00B4(0x0004)
    int32_t                                       MaxIterations;                                                // 0x00B8(0x0004)
    bool                                          bStartFromTail;                                               // 0x00BC(0x0001)
    char                                          pa_00BD[0x0003]                                               // 0x00BD(0x0003)
    float                                         BaseRotationLimit;                                            // 0x00C0(0x0004)
    char                                          pa_00C4[0x0004]                                               // 0x00C4(0x0004)
    TArray<FRigUnit>                              RotationLimits;                                               // 0x00C8(0x0010)
    bool                                          bPropagateToChildren;                                         // 0x00D8(0x0001)
    char                                          pa_00D9[0x0007]                                               // 0x00D9(0x0007)
    FRigUnit                                      WorkData;                                                     // 0x00E0(0x0060)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0140
struct FRigUnit : public FRigUnit
{
    TArray<FRigElementKey>                        Items;                                                        // 0x0040(0x0010)
    FTransform                                    EffectorTransform;                                            // 0x0050(0x0060)
    float                                         Precision;                                                    // 0x00B0(0x0004)
    float                                         Weight;                                                       // 0x00B4(0x0004)
    int32_t                                       MaxIterations;                                                // 0x00B8(0x0004)
    bool                                          bStartFromTail;                                               // 0x00BC(0x0001)
    char                                          pa_00BD[0x0003]                                               // 0x00BD(0x0003)
    float                                         BaseRotationLimit;                                            // 0x00C0(0x0004)
    char                                          pa_00C4[0x0004]                                               // 0x00C4(0x0004)
    TArray<FRigUnit>                              RotationLimits;                                               // 0x00C8(0x0010)
    bool                                          bPropagateToChildren;                                         // 0x00D8(0x0001)
    char                                          pa_00D9[0x0007]                                               // 0x00D9(0x0007)
    FRigUnit                                      WorkData;                                                     // 0x00E0(0x0060)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0030
struct FRigUnit
{
    FQuat                                         Rotation;                                                     // 0x0000(0x0020)
    float                                         Ratio;                                                        // 0x0020(0x0004)
    char                                          pa_0024[0x000C]                                               // 0x0024(0x000C)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0050
struct FRigUnit
{
    TArray<FCachedRigElement>                     CachedItems;                                                  // 0x0000(0x0010)
    TArray<int32_t>                               ItemRotationA;                                                // 0x0010(0x0010)
    TArray<int32_t>                               ItemRotationB;                                                // 0x0020(0x0010)
    TArray<float>                                 ItemRotationT;                                                // 0x0030(0x0010)
    TArray<FTransform>                            ItemLocalTransforms;                                          // 0x0040(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00C0
struct FRigUnit : public FRigUnit
{
    FName                                         StartBone;                                                    // 0x0040(0x0008)
    FName                                         EndBone;                                                      // 0x0048(0x0008)
    TArray<FRigUnit>                              Rotations;                                                    // 0x0050(0x0010)
    enum class EControlRigAnimEasingType          RotationEaseType;                                             // 0x0060(0x0001)
    char                                          pa_0061[0x0003]                                               // 0x0061(0x0003)
    float                                         Weight;                                                       // 0x0064(0x0004)
    bool                                          bPropagateToChildren;                                         // 0x0068(0x0001)
    char                                          pa_0069[0x0007]                                               // 0x0069(0x0007)
    FRigUnit                                      WorkData;                                                     // 0x0070(0x0050)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00B8
struct FRigUnit : public FRigUnit
{
    FRigElementKeyCollection                      Items;                                                        // 0x0040(0x0010)
    TArray<FRigUnit>                              Rotations;                                                    // 0x0050(0x0010)
    enum class EControlRigAnimEasingType          RotationEaseType;                                             // 0x0060(0x0001)
    char                                          pa_0061[0x0003]                                               // 0x0061(0x0003)
    float                                         Weight;                                                       // 0x0064(0x0004)
    FRigUnit                                      WorkData;                                                     // 0x0068(0x0050)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00B8
struct FRigUnit : public FRigUnit
{
    TArray<FRigElementKey>                        Items;                                                        // 0x0040(0x0010)
    TArray<FRigUnit>                              Rotations;                                                    // 0x0050(0x0010)
    enum class EControlRigAnimEasingType          RotationEaseType;                                             // 0x0060(0x0001)
    char                                          pa_0061[0x0003]                                               // 0x0061(0x0003)
    float                                         Weight;                                                       // 0x0064(0x0004)
    FRigUnit                                      WorkData;                                                     // 0x0068(0x0050)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0040
struct FRigUnit
{
    TArray<FFABRIKChainLink>                      Chain;                                                        // 0x0000(0x0010)
    TArray<FCachedRigElement>                     CachedItems;                                                  // 0x0010(0x0010)
    FCachedRigElement                             CachedEffector;                                               // 0x0020(0x0020)
};


// ScriptStruct  AnimationCore.FABRIKChainLink
// Struct Size::0x0050
struct FFABRIKChainLink
{
    char                                          pa_0000[0x0050]                                               // 0x0000(0x0050)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0110
struct FRigUnit : public FRigUnit
{
    FName                                         StartBone;                                                    // 0x0040(0x0008)
    FName                                         EffectorBone;                                                 // 0x0048(0x0008)
    FTransform                                    EffectorTransform;                                            // 0x0050(0x0060)
    float                                         Precision;                                                    // 0x00B0(0x0004)
    float                                         Weight;                                                       // 0x00B4(0x0004)
    bool                                          bPropagateToChildren;                                         // 0x00B8(0x0001)
    char                                          pa_00B9[0x0003]                                               // 0x00B9(0x0003)
    int32_t                                       MaxIterations;                                                // 0x00BC(0x0004)
    FRigUnit                                      WorkData;                                                     // 0x00C0(0x0040)
    bool                                          bSetEffectorTransform;                                        // 0x0100(0x0001)
    char                                          pa_0101[0x000F]                                               // 0x0101(0x000F)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0110
struct FRigUnit : public FRigUnit
{
    FRigElementKeyCollection                      Items;                                                        // 0x0040(0x0010)
    FTransform                                    EffectorTransform;                                            // 0x0050(0x0060)
    float                                         Precision;                                                    // 0x00B0(0x0004)
    float                                         Weight;                                                       // 0x00B4(0x0004)
    bool                                          bPropagateToChildren;                                         // 0x00B8(0x0001)
    char                                          pa_00B9[0x0003]                                               // 0x00B9(0x0003)
    int32_t                                       MaxIterations;                                                // 0x00BC(0x0004)
    FRigUnit                                      WorkData;                                                     // 0x00C0(0x0040)
    bool                                          bSetEffectorTransform;                                        // 0x0100(0x0001)
    char                                          pa_0101[0x000F]                                               // 0x0101(0x000F)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0110
struct FRigUnit : public FRigUnit
{
    TArray<FRigElementKey>                        Items;                                                        // 0x0040(0x0010)
    FTransform                                    EffectorTransform;                                            // 0x0050(0x0060)
    float                                         Precision;                                                    // 0x00B0(0x0004)
    float                                         Weight;                                                       // 0x00B4(0x0004)
    bool                                          bPropagateToChildren;                                         // 0x00B8(0x0001)
    char                                          pa_00B9[0x0003]                                               // 0x00B9(0x0003)
    int32_t                                       MaxIterations;                                                // 0x00BC(0x0004)
    FRigUnit                                      WorkData;                                                     // 0x00C0(0x0040)
    bool                                          bSetEffectorTransform;                                        // 0x0100(0x0001)
    char                                          pa_0101[0x000F]                                               // 0x0101(0x000F)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0030
struct FRigUnit
{
    FQuat                                         Rotation;                                                     // 0x0000(0x0020)
    float                                         Ratio;                                                        // 0x0020(0x0004)
    char                                          pa_0024[0x000C]                                               // 0x0024(0x000C)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0090
struct FRigUnit
{
    bool                                          bEnabled;                                                     // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         Scale;                                                        // 0x0004(0x0004)
    FLinearColor                                  CurveColor;                                                   // 0x0008(0x0010)
    FLinearColor                                  SegmentsColor;                                                // 0x0018(0x0010)
    char                                          pa_0028[0x0008]                                               // 0x0028(0x0008)
    FTransform                                    WorldOffset;                                                  // 0x0030(0x0060)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0098
struct FRigUnit
{
    float                                         ChainLength;                                                  // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    TArray<FVector>                               ItemPositions;                                                // 0x0008(0x0010)
    TArray<float>                                 ItemSegments;                                                 // 0x0018(0x0010)
    TArray<FVector>                               CurvePositions;                                               // 0x0028(0x0010)
    TArray<float>                                 CurveSegments;                                                // 0x0038(0x0010)
    TArray<FCachedRigElement>                     CachedItems;                                                  // 0x0048(0x0010)
    TArray<int32_t>                               ItemRotationA;                                                // 0x0058(0x0010)
    TArray<int32_t>                               ItemRotationB;                                                // 0x0068(0x0010)
    TArray<float>                                 ItemRotationT;                                                // 0x0078(0x0010)
    TArray<FTransform>                            ItemLocalTransforms;                                          // 0x0088(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0260
struct FRigUnit : public FRigUnit
{
    FName                                         StartBone;                                                    // 0x0040(0x0008)
    FName                                         EndBone;                                                      // 0x0048(0x0008)
    FCRFourPointBezier                            Bezier;                                                       // 0x0050(0x0060)
    enum class EControlRigCurveAlignment          Alignment;                                                    // 0x00B0(0x0001)
    char                                          pa_00B1[0x0003]                                               // 0x00B1(0x0003)
    float                                         Minimum;                                                      // 0x00B4(0x0004)
    float                                         Maximum;                                                      // 0x00B8(0x0004)
    int32_t                                       SamplingPrecision;                                            // 0x00BC(0x0004)
    FVector                                       PrimaryAxis;                                                  // 0x00C0(0x0018)
    FVector                                       SecondaryAxis;                                                // 0x00D8(0x0018)
    FVector                                       PoleVectorPosition;                                           // 0x00F0(0x0018)
    TArray<FRigUnit>                              Rotations;                                                    // 0x0108(0x0010)
    enum class EControlRigAnimEasingType          RotationEaseType;                                             // 0x0118(0x0001)
    char                                          pa_0119[0x0003]                                               // 0x0119(0x0003)
    float                                         Weight;                                                       // 0x011C(0x0004)
    bool                                          bPropagateToChildren;                                         // 0x0120(0x0001)
    char                                          pa_0121[0x000F]                                               // 0x0121(0x000F)
    FRigUnit                                      DebugSettings;                                                // 0x0130(0x0090)
    FRigUnit                                      WorkData;                                                     // 0x01C0(0x0098)
    char                                          pa_0258[0x0008]                                               // 0x0258(0x0008)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0260
struct FRigUnit : public FRigUnit
{
    FRigElementKeyCollection                      Items;                                                        // 0x0040(0x0010)
    FCRFourPointBezier                            Bezier;                                                       // 0x0050(0x0060)
    enum class EControlRigCurveAlignment          Alignment;                                                    // 0x00B0(0x0001)
    char                                          pa_00B1[0x0003]                                               // 0x00B1(0x0003)
    float                                         Minimum;                                                      // 0x00B4(0x0004)
    float                                         Maximum;                                                      // 0x00B8(0x0004)
    int32_t                                       SamplingPrecision;                                            // 0x00BC(0x0004)
    FVector                                       PrimaryAxis;                                                  // 0x00C0(0x0018)
    FVector                                       SecondaryAxis;                                                // 0x00D8(0x0018)
    FVector                                       PoleVectorPosition;                                           // 0x00F0(0x0018)
    TArray<FRigUnit>                              Rotations;                                                    // 0x0108(0x0010)
    enum class EControlRigAnimEasingType          RotationEaseType;                                             // 0x0118(0x0001)
    char                                          pa_0119[0x0003]                                               // 0x0119(0x0003)
    float                                         Weight;                                                       // 0x011C(0x0004)
    bool                                          bPropagateToChildren;                                         // 0x0120(0x0001)
    char                                          pa_0121[0x000F]                                               // 0x0121(0x000F)
    FRigUnit                                      DebugSettings;                                                // 0x0130(0x0090)
    FRigUnit                                      WorkData;                                                     // 0x01C0(0x0098)
    char                                          pa_0258[0x0008]                                               // 0x0258(0x0008)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0260
struct FRigUnit : public FRigUnit
{
    TArray<FRigElementKey>                        Items;                                                        // 0x0040(0x0010)
    FCRFourPointBezier                            Bezier;                                                       // 0x0050(0x0060)
    enum class EControlRigCurveAlignment          Alignment;                                                    // 0x00B0(0x0001)
    char                                          pa_00B1[0x0003]                                               // 0x00B1(0x0003)
    float                                         Minimum;                                                      // 0x00B4(0x0004)
    float                                         Maximum;                                                      // 0x00B8(0x0004)
    int32_t                                       SamplingPrecision;                                            // 0x00BC(0x0004)
    FVector                                       PrimaryAxis;                                                  // 0x00C0(0x0018)
    FVector                                       SecondaryAxis;                                                // 0x00D8(0x0018)
    FVector                                       PoleVectorPosition;                                           // 0x00F0(0x0018)
    TArray<FRigUnit>                              Rotations;                                                    // 0x0108(0x0010)
    enum class EControlRigAnimEasingType          RotationEaseType;                                             // 0x0118(0x0001)
    char                                          pa_0119[0x0003]                                               // 0x0119(0x0003)
    float                                         Weight;                                                       // 0x011C(0x0004)
    bool                                          bPropagateToChildren;                                         // 0x0120(0x0001)
    char                                          pa_0121[0x000F]                                               // 0x0121(0x000F)
    FRigUnit                                      DebugSettings;                                                // 0x0130(0x0090)
    FRigUnit                                      WorkData;                                                     // 0x01C0(0x0098)
    char                                          pa_0258[0x0008]                                               // 0x0258(0x0008)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0070
struct FRigUnit
{
    FName                                         bone;                                                         // 0x0000(0x0008)
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FTransform                                    Transform;                                                    // 0x0010(0x0060)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0010
struct FRigUnit
{
    TArray<FCachedRigElement>                     CachedItems;                                                  // 0x0000(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0010
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0070
struct FRigUnit : public FRigUnit
{
    TArray<FRigUnit>                              BoneToModify;                                                 // 0x0040(0x0010)
    float                                         Weight;                                                       // 0x0050(0x0004)
    float                                         WeightMinimum;                                                // 0x0054(0x0004)
    float                                         WeightMaximum;                                                // 0x0058(0x0004)
    enum class EControlRigModifyBoneMode          Mode;                                                         // 0x005C(0x0001)
    char                                          pa_005D[0x0003]                                               // 0x005D(0x0003)
    FRigUnit                                      WorkData;                                                     // 0x0060(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0070
struct FRigUnit
{
    FRigElementKey                                Item;                                                         // 0x0000(0x000C)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FTransform                                    Transform;                                                    // 0x0010(0x0060)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0070
struct FRigUnit : public FRigUnit
{
    TArray<FRigUnit>                              ItemToModify;                                                 // 0x0040(0x0010)
    float                                         Weight;                                                       // 0x0050(0x0004)
    float                                         WeightMinimum;                                                // 0x0054(0x0004)
    float                                         WeightMaximum;                                                // 0x0058(0x0004)
    enum class EControlRigModifyBoneMode          Mode;                                                         // 0x005C(0x0001)
    char                                          pa_005D[0x0003]                                               // 0x005D(0x0003)
    FRigUnit                                      WorkData;                                                     // 0x0060(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0068
struct FRigUnit
{
    char                                          pa_0000[0x0068]                                               // 0x0000(0x0068)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0020
struct FRigUnit
{
    FName                                         bone;                                                         // 0x0000(0x0008)
    FVector                                       Location;                                                     // 0x0008(0x0018)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00D0
struct FRigUnit : public FRigUnit
{
    FName                                         RootBone;                                                     // 0x0040(0x0008)
    TArray<FRigUnit>                              Effectors;                                                    // 0x0048(0x0010)
    float                                         Precision;                                                    // 0x0058(0x0004)
    bool                                          bPropagateToChildren;                                         // 0x005C(0x0001)
    char                                          pa_005D[0x0003]                                               // 0x005D(0x0003)
    int32_t                                       MaxIterations;                                                // 0x0060(0x0004)
    char                                          pa_0064[0x0004]                                               // 0x0064(0x0004)
    FRigUnit                                      WorkData;                                                     // 0x0068(0x0068)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0048
struct FRigUnit
{
    float                                         ChainLength;                                                  // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    TArray<float>                                 ItemSegments;                                                 // 0x0008(0x0010)
    TArray<FCachedRigElement>                     CachedItems;                                                  // 0x0018(0x0010)
    TArray<FTransform>                            Transforms;                                                   // 0x0028(0x0010)
    TArray<FTransform>                            BlendedTransforms;                                            // 0x0038(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00A0
struct FRigUnit : public FRigUnit
{
    FName                                         StartBone;                                                    // 0x0040(0x0008)
    FName                                         EndBone;                                                      // 0x0048(0x0008)
    float                                         SlideAmount;                                                  // 0x0050(0x0004)
    bool                                          bPropagateToChildren;                                         // 0x0054(0x0001)
    char                                          pa_0055[0x0003]                                               // 0x0055(0x0003)
    FRigUnit                                      WorkData;                                                     // 0x0058(0x0048)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00A0
struct FRigUnit : public FRigUnit
{
    FRigElementKeyCollection                      Items;                                                        // 0x0040(0x0010)
    float                                         SlideAmount;                                                  // 0x0050(0x0004)
    bool                                          bPropagateToChildren;                                         // 0x0054(0x0001)
    char                                          pa_0055[0x0003]                                               // 0x0055(0x0003)
    FRigUnit                                      WorkData;                                                     // 0x0058(0x0048)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00A0
struct FRigUnit : public FRigUnit
{
    TArray<FRigElementKey>                        Items;                                                        // 0x0040(0x0010)
    float                                         SlideAmount;                                                  // 0x0050(0x0004)
    bool                                          bPropagateToChildren;                                         // 0x0054(0x0001)
    char                                          pa_0055[0x0003]                                               // 0x0055(0x0003)
    FRigUnit                                      WorkData;                                                     // 0x0058(0x0048)
};


// ScriptStruct  ControlRig.RegionScaleFactors
// Struct Size::0x0010
struct FRegionScaleFactors
{
    float                                         PositiveWidth;                                                // 0x0000(0x0004)
    float                                         NegativeWidth;                                                // 0x0004(0x0004)
    float                                         PositiveHeight;                                               // 0x0008(0x0004)
    float                                         NegativeHeight;                                               // 0x000C(0x0004)
};


// ScriptStruct  ControlRig.SphericalRegion
// Struct Size::0x0014
struct FSphericalRegion
{
    char                                          pa_0000[0x0014]                                               // 0x0000(0x0014)
};


// ScriptStruct  ControlRig.SphericalPoseReaderDebugSettings
// Struct Size::0x0010
struct FSphericalPoseReaderDebugSettings
{
    bool                                          bDrawDebug;                                                   // 0x0000(0x0001)
    bool                                          bDraw2D;                                                      // 0x0001(0x0001)
    bool                                          bDrawLocalAxes;                                               // 0x0002(0x0001)
    char                                          pa_0003[0x0001]                                               // 0x0003(0x0001)
    float                                         DebugScale;                                                   // 0x0004(0x0004)
    int32_t                                       DebugSegments;                                                // 0x0008(0x0004)
    float                                         DebugThickness;                                               // 0x000C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x01E0
struct FRigUnit : public FRigUnit
{
    float                                         OutputParam;                                                  // 0x0040(0x0004)
    FRigElementKey                                DriverItem;                                                   // 0x0044(0x000C)
    FVector                                       DriverAxis;                                                   // 0x0050(0x0018)
    FVector                                       RotationOffset;                                               // 0x0068(0x0018)
    float                                         ActiveRegionSize;                                             // 0x0080(0x0004)
    FRegionScaleFactors                           ActiveRegionScaleFactors;                                     // 0x0084(0x0010)
    float                                         FalloffSize;                                                  // 0x0094(0x0004)
    FRegionScaleFactors                           FalloffRegionScaleFactors;                                    // 0x0098(0x0010)
    bool                                          FlipWidthScaling;                                             // 0x00A8(0x0001)
    bool                                          FlipHeightScaling;                                            // 0x00A9(0x0001)
    char                                          pa_00AA[0x0002]                                               // 0x00AA(0x0002)
    FRigElementKey                                OptionalParentItem;                                           // 0x00AC(0x000C)
    FSphericalPoseReaderDebugSettings             Debug;                                                        // 0x00B8(0x0010)
    FSphericalRegion                              InnerRegion;                                                  // 0x00C8(0x0014)
    FSphericalRegion                              OuterRegion;                                                  // 0x00DC(0x0014)
    FVector                                       DriverNormal;                                                 // 0x00F0(0x0018)
    FVector                                       Driver2D;                                                     // 0x0108(0x0018)
    FCachedRigElement                             DriverCache;                                                  // 0x0120(0x0020)
    FCachedRigElement                             OptionalParentCache;                                          // 0x0140(0x0020)
    FTransform                                    LocalDriverTransformInit;                                     // 0x0160(0x0060)
    FVector                                       CachedRotationOffset;                                         // 0x01C0(0x0018)
    bool                                          bCachedInitTransforms;                                        // 0x01D8(0x0001)
    char                                          pa_01D9[0x0007]                                               // 0x01D9(0x0007)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0080
struct FRigUnit
{
    bool                                          bEnabled;                                                     // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         Scale;                                                        // 0x0004(0x0004)
    FLinearColor                                  Color;                                                        // 0x0008(0x0010)
    char                                          pa_0018[0x0008]                                               // 0x0018(0x0008)
    FTransform                                    WorldOffset;                                                  // 0x0020(0x0060)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00B8
struct FRigUnit
{
    TArray<FCachedRigElement>                     CachedBones;                                                  // 0x0000(0x0010)
    FCachedRigElement                             CachedPoleVector;                                             // 0x0010(0x0020)
    TArray<FTransform>                            Transforms;                                                   // 0x0030(0x0010)
    FCRSimPointContainer                          Simulation;                                                   // 0x0040(0x0078)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0210
struct FRigUnit : public FRigUnit
{
    FName                                         StartBone;                                                    // 0x0040(0x0008)
    FName                                         EndBone;                                                      // 0x0048(0x0008)
    float                                         HierarchyStrength;                                            // 0x0050(0x0004)
    float                                         EffectorStrength;                                             // 0x0054(0x0004)
    float                                         EffectorRatio;                                                // 0x0058(0x0004)
    float                                         RootStrength;                                                 // 0x005C(0x0004)
    float                                         RootRatio;                                                    // 0x0060(0x0004)
    float                                         Damping;                                                      // 0x0064(0x0004)
    FVector                                       PoleVector;                                                   // 0x0068(0x0018)
    bool                                          bFlipPolePlane;                                               // 0x0080(0x0001)
    enum class EControlRigVectorKind              PoleVectorKind;                                               // 0x0081(0x0001)
    char                                          pa_0082[0x0002]                                               // 0x0082(0x0002)
    FName                                         PoleVectorSpace;                                              // 0x0084(0x0008)
    char                                          pa_008C[0x0004]                                               // 0x008C(0x0004)
    FVector                                       PrimaryAxis;                                                  // 0x0090(0x0018)
    FVector                                       SecondaryAxis;                                                // 0x00A8(0x0018)
    bool                                          bLiveSimulation;                                              // 0x00C0(0x0001)
    char                                          pa_00C1[0x0003]                                               // 0x00C1(0x0003)
    int32_t                                       Iterations;                                                   // 0x00C4(0x0004)
    bool                                          bLimitLocalPosition;                                          // 0x00C8(0x0001)
    bool                                          bPropagateToChildren;                                         // 0x00C9(0x0001)
    char                                          pa_00CA[0x0006]                                               // 0x00CA(0x0006)
    FRigUnit                                      DebugSettings;                                                // 0x00D0(0x0080)
    FRigUnit                                      WorkData;                                                     // 0x0150(0x00B8)
    char                                          pa_0208[0x0008]                                               // 0x0208(0x0008)
};


// ScriptStruct  ControlRig.ConstraintTarget
// Struct Size::0x0070
struct FConstraintTarget
{
    FTransform                                    Transform;                                                    // 0x0000(0x0060)
    float                                         Weight;                                                       // 0x0060(0x0004)
    bool                                          bMaintainOffset;                                              // 0x0064(0x0001)
    FTransformFilter                              Filter;                                                       // 0x0065(0x0009)
    char                                          pa_006E[0x0002]                                               // 0x006E(0x0002)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0060
struct FRigUnit
{
    TArray<FConstraintData>                       ConstraintData;                                               // 0x0000(0x0010)
    TMap<int32_t,int32_t>                         ConstraintDataToTargets;                                      // 0x0010(0x0050)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0130
struct FRigUnit : public FRigUnit
{
    FName                                         bone;                                                         // 0x0040(0x0008)
    enum class ETransformSpaceMode                BaseTransformSpace;                                           // 0x0048(0x0001)
    char                                          pa_0049[0x0007]                                               // 0x0049(0x0007)
    FTransform                                    BaseTransform;                                                // 0x0050(0x0060)
    FName                                         BaseBone;                                                     // 0x00B0(0x0008)
    TArray<FConstraintTarget>                     Targets;                                                      // 0x00B8(0x0010)
    bool                                          bUseInitialTransforms;                                        // 0x00C8(0x0001)
    char                                          pa_00C9[0x0007]                                               // 0x00C9(0x0007)
    FRigUnit                                      WorkData;                                                     // 0x00D0(0x0060)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0140
struct FRigUnit : public FRigUnit
{
    FRigElementKey                                Item;                                                         // 0x0040(0x000C)
    enum class ETransformSpaceMode                BaseTransformSpace;                                           // 0x004C(0x0001)
    char                                          pa_004D[0x0003]                                               // 0x004D(0x0003)
    FTransform                                    BaseTransform;                                                // 0x0050(0x0060)
    FRigElementKey                                BaseItem;                                                     // 0x00B0(0x000C)
    char                                          pa_00BC[0x0004]                                               // 0x00BC(0x0004)
    TArray<FConstraintTarget>                     Targets;                                                      // 0x00C0(0x0010)
    bool                                          bUseInitialTransforms;                                        // 0x00D0(0x0001)
    char                                          pa_00D1[0x0007]                                               // 0x00D1(0x0007)
    FRigUnit                                      WorkData;                                                     // 0x00D8(0x0060)
    char                                          pa_0138[0x0008]                                               // 0x0138(0x0008)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0002
struct FRigUnit
{
    enum class EConstraintInterpType              InterpolationType;                                            // 0x0000(0x0001)
    enum class EEulerRotationOrder                RotationOrderForFilter;                                       // 0x0001(0x0001)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00A0
struct FRigUnit : public FRigUnit
{
    FRigElementKey                                Child;                                                        // 0x0040(0x000C)
    bool                                          bMaintainOffset;                                              // 0x004C(0x0001)
    FTransformFilter                              Filter;                                                       // 0x004D(0x0009)
    char                                          pa_0056[0x0002]                                               // 0x0056(0x0002)
    TArray<FConstraintParent>                     Parents;                                                      // 0x0058(0x0010)
    FRigUnit                                      AdvancedSettings;                                             // 0x0068(0x0002)
    char                                          pa_006A[0x0002]                                               // 0x006A(0x0002)
    float                                         Weight;                                                       // 0x006C(0x0004)
    FCachedRigElement                             ChildCache;                                                   // 0x0070(0x0020)
    TArray<FCachedRigElement>                     ParentCaches;                                                 // 0x0090(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0068
struct FRigUnit : public FRigUnit
{
    FRigElementKey                                Child;                                                        // 0x0040(0x000C)
    bool                                          bMaintainOffset;                                              // 0x004C(0x0001)
    FFilterOptionPerAxis                          Filter;                                                       // 0x004D(0x0003)
    TArray<FConstraintParent>                     Parents;                                                      // 0x0050(0x0010)
    float                                         Weight;                                                       // 0x0060(0x0004)
    char                                          pa_0064[0x0004]                                               // 0x0064(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0098
struct FRigUnit : public FRigUnit
{
    FRigElementKey                                Child;                                                        // 0x0040(0x000C)
    bool                                          bMaintainOffset;                                              // 0x004C(0x0001)
    FFilterOptionPerAxis                          Filter;                                                       // 0x004D(0x0003)
    TArray<FConstraintParent>                     Parents;                                                      // 0x0050(0x0010)
    float                                         Weight;                                                       // 0x0060(0x0004)
    char                                          pa_0064[0x0004]                                               // 0x0064(0x0004)
    FCachedRigElement                             ChildCache;                                                   // 0x0068(0x0020)
    TArray<FCachedRigElement>                     ParentCaches;                                                 // 0x0088(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0002
struct FRigUnit
{
    enum class EConstraintInterpType              InterpolationType;                                            // 0x0000(0x0001)
    enum class EEulerRotationOrder                RotationOrderForFilter;                                       // 0x0001(0x0001)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0068
struct FRigUnit : public FRigUnit
{
    FRigElementKey                                Child;                                                        // 0x0040(0x000C)
    bool                                          bMaintainOffset;                                              // 0x004C(0x0001)
    FFilterOptionPerAxis                          Filter;                                                       // 0x004D(0x0003)
    TArray<FConstraintParent>                     Parents;                                                      // 0x0050(0x0010)
    FRigUnit                                      AdvancedSettings;                                             // 0x0060(0x0002)
    char                                          pa_0062[0x0002]                                               // 0x0062(0x0002)
    float                                         Weight;                                                       // 0x0064(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0098
struct FRigUnit : public FRigUnit
{
    FRigElementKey                                Child;                                                        // 0x0040(0x000C)
    bool                                          bMaintainOffset;                                              // 0x004C(0x0001)
    FFilterOptionPerAxis                          Filter;                                                       // 0x004D(0x0003)
    TArray<FConstraintParent>                     Parents;                                                      // 0x0050(0x0010)
    FRigUnit                                      AdvancedSettings;                                             // 0x0060(0x0002)
    char                                          pa_0062[0x0002]                                               // 0x0062(0x0002)
    float                                         Weight;                                                       // 0x0064(0x0004)
    FCachedRigElement                             ChildCache;                                                   // 0x0068(0x0020)
    TArray<FCachedRigElement>                     ParentCaches;                                                 // 0x0088(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0068
struct FRigUnit : public FRigUnit
{
    FRigElementKey                                Child;                                                        // 0x0040(0x000C)
    bool                                          bMaintainOffset;                                              // 0x004C(0x0001)
    FFilterOptionPerAxis                          Filter;                                                       // 0x004D(0x0003)
    TArray<FConstraintParent>                     Parents;                                                      // 0x0050(0x0010)
    float                                         Weight;                                                       // 0x0060(0x0004)
    char                                          pa_0064[0x0004]                                               // 0x0064(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0098
struct FRigUnit : public FRigUnit
{
    FRigElementKey                                Child;                                                        // 0x0040(0x000C)
    bool                                          bMaintainOffset;                                              // 0x004C(0x0001)
    FFilterOptionPerAxis                          Filter;                                                       // 0x004D(0x0003)
    TArray<FConstraintParent>                     Parents;                                                      // 0x0050(0x0010)
    float                                         Weight;                                                       // 0x0060(0x0004)
    char                                          pa_0064[0x0004]                                               // 0x0064(0x0004)
    FCachedRigElement                             ChildCache;                                                   // 0x0068(0x0020)
    TArray<FCachedRigElement>                     ParentCaches;                                                 // 0x0088(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0030
struct FRigUnit
{
    TArray<FCachedRigElement>                     CachedItems;                                                  // 0x0000(0x0010)
    TArray<float>                                 ItemRatios;                                                   // 0x0010(0x0010)
    TArray<FTransform>                            ItemTransforms;                                               // 0x0020(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00C0
struct FRigUnit : public FRigUnit
{
    FName                                         StartBone;                                                    // 0x0040(0x0008)
    FName                                         EndBone;                                                      // 0x0048(0x0008)
    FVector                                       TwistAxis;                                                    // 0x0050(0x0018)
    FVector                                       PoleAxis;                                                     // 0x0068(0x0018)
    enum class EControlRigAnimEasingType          TwistEaseType;                                                // 0x0080(0x0001)
    char                                          pa_0081[0x0003]                                               // 0x0081(0x0003)
    float                                         Weight;                                                       // 0x0084(0x0004)
    bool                                          bPropagateToChildren;                                         // 0x0088(0x0001)
    char                                          pa_0089[0x0007]                                               // 0x0089(0x0007)
    FRigUnit                                      WorkData;                                                     // 0x0090(0x0030)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00C0
struct FRigUnit : public FRigUnit
{
    FRigElementKeyCollection                      Items;                                                        // 0x0040(0x0010)
    FVector                                       TwistAxis;                                                    // 0x0050(0x0018)
    FVector                                       PoleAxis;                                                     // 0x0068(0x0018)
    enum class EControlRigAnimEasingType          TwistEaseType;                                                // 0x0080(0x0001)
    char                                          pa_0081[0x0003]                                               // 0x0081(0x0003)
    float                                         Weight;                                                       // 0x0084(0x0004)
    bool                                          bPropagateToChildren;                                         // 0x0088(0x0001)
    char                                          pa_0089[0x0007]                                               // 0x0089(0x0007)
    FRigUnit                                      WorkData;                                                     // 0x0090(0x0030)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0070
struct FRigUnit
{
    bool                                          bEnabled;                                                     // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         Scale;                                                        // 0x0004(0x0004)
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FTransform                                    WorldOffset;                                                  // 0x0010(0x0060)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0230
struct FRigUnit : public FRigUnit
{
    FName                                         BoneA;                                                        // 0x0040(0x0008)
    FName                                         BoneB;                                                        // 0x0048(0x0008)
    FName                                         EffectorBone;                                                 // 0x0050(0x0008)
    char                                          pa_0058[0x0008]                                               // 0x0058(0x0008)
    FTransform                                    Effector;                                                     // 0x0060(0x0060)
    FVector                                       PrimaryAxis;                                                  // 0x00C0(0x0018)
    FVector                                       SecondaryAxis;                                                // 0x00D8(0x0018)
    float                                         SecondaryAxisWeight;                                          // 0x00F0(0x0004)
    char                                          pa_00F4[0x0004]                                               // 0x00F4(0x0004)
    FVector                                       PoleVector;                                                   // 0x00F8(0x0018)
    enum class EControlRigVectorKind              PoleVectorKind;                                               // 0x0110(0x0001)
    char                                          pa_0111[0x0003]                                               // 0x0111(0x0003)
    FName                                         PoleVectorSpace;                                              // 0x0114(0x0008)
    bool                                          bEnableStretch;                                               // 0x011C(0x0001)
    char                                          pa_011D[0x0003]                                               // 0x011D(0x0003)
    float                                         StretchStartRatio;                                            // 0x0120(0x0004)
    float                                         StretchMaximumRatio;                                          // 0x0124(0x0004)
    float                                         Weight;                                                       // 0x0128(0x0004)
    float                                         BoneALength;                                                  // 0x012C(0x0004)
    float                                         BoneBLength;                                                  // 0x0130(0x0004)
    bool                                          bPropagateToChildren;                                         // 0x0134(0x0001)
    char                                          pa_0135[0x000B]                                               // 0x0135(0x000B)
    FRigUnit                                      DebugSettings;                                                // 0x0140(0x0070)
    FCachedRigElement                             CachedBoneAIndex;                                             // 0x01B0(0x0020)
    FCachedRigElement                             CachedBoneBIndex;                                             // 0x01D0(0x0020)
    FCachedRigElement                             CachedEffectorBoneIndex;                                      // 0x01F0(0x0020)
    FCachedRigElement                             CachedPoleVectorSpaceIndex;                                   // 0x0210(0x0020)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0240
struct FRigUnit : public FRigUnit
{
    FRigElementKey                                ItemA;                                                        // 0x0040(0x000C)
    FRigElementKey                                ItemB;                                                        // 0x004C(0x000C)
    FRigElementKey                                EffectorItem;                                                 // 0x0058(0x000C)
    char                                          pa_0064[0x000C]                                               // 0x0064(0x000C)
    FTransform                                    Effector;                                                     // 0x0070(0x0060)
    FVector                                       PrimaryAxis;                                                  // 0x00D0(0x0018)
    FVector                                       SecondaryAxis;                                                // 0x00E8(0x0018)
    float                                         SecondaryAxisWeight;                                          // 0x0100(0x0004)
    char                                          pa_0104[0x0004]                                               // 0x0104(0x0004)
    FVector                                       PoleVector;                                                   // 0x0108(0x0018)
    enum class EControlRigVectorKind              PoleVectorKind;                                               // 0x0120(0x0001)
    char                                          pa_0121[0x0003]                                               // 0x0121(0x0003)
    FRigElementKey                                PoleVectorSpace;                                              // 0x0124(0x000C)
    bool                                          bEnableStretch;                                               // 0x0130(0x0001)
    char                                          pa_0131[0x0003]                                               // 0x0131(0x0003)
    float                                         StretchStartRatio;                                            // 0x0134(0x0004)
    float                                         StretchMaximumRatio;                                          // 0x0138(0x0004)
    float                                         Weight;                                                       // 0x013C(0x0004)
    float                                         ItemALength;                                                  // 0x0140(0x0004)
    float                                         ItemBLength;                                                  // 0x0144(0x0004)
    bool                                          bPropagateToChildren;                                         // 0x0148(0x0001)
    char                                          pa_0149[0x0007]                                               // 0x0149(0x0007)
    FRigUnit                                      DebugSettings;                                                // 0x0150(0x0070)
    FCachedRigElement                             CachedItemAIndex;                                             // 0x01C0(0x0020)
    FCachedRigElement                             CachedItemBIndex;                                             // 0x01E0(0x0020)
    FCachedRigElement                             CachedEffectorItemIndex;                                      // 0x0200(0x0020)
    FCachedRigElement                             CachedPoleVectorSpaceIndex;                                   // 0x0220(0x0020)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0080
struct FRigUnit : public FRigUnit
{
    FVector                                       Root;                                                         // 0x0008(0x0018)
    FVector                                       PoleVector;                                                   // 0x0020(0x0018)
    FVector                                       Effector;                                                     // 0x0038(0x0018)
    bool                                          bEnableStretch;                                               // 0x0050(0x0001)
    char                                          pa_0051[0x0003]                                               // 0x0051(0x0003)
    float                                         StretchStartRatio;                                            // 0x0054(0x0004)
    float                                         StretchMaximumRatio;                                          // 0x0058(0x0004)
    float                                         BoneALength;                                                  // 0x005C(0x0004)
    float                                         BoneBLength;                                                  // 0x0060(0x0004)
    char                                          pa_0064[0x0004]                                               // 0x0064(0x0004)
    FVector                                       Elbow;                                                        // 0x0068(0x0018)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x01A0
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FTransform                                    Root;                                                         // 0x0010(0x0060)
    FVector                                       PoleVector;                                                   // 0x0070(0x0018)
    char                                          pa_0088[0x0008]                                               // 0x0088(0x0008)
    FTransform                                    Effector;                                                     // 0x0090(0x0060)
    FVector                                       PrimaryAxis;                                                  // 0x00F0(0x0018)
    FVector                                       SecondaryAxis;                                                // 0x0108(0x0018)
    float                                         SecondaryAxisWeight;                                          // 0x0120(0x0004)
    bool                                          bEnableStretch;                                               // 0x0124(0x0001)
    char                                          pa_0125[0x0003]                                               // 0x0125(0x0003)
    float                                         StretchStartRatio;                                            // 0x0128(0x0004)
    float                                         StretchMaximumRatio;                                          // 0x012C(0x0004)
    float                                         BoneALength;                                                  // 0x0130(0x0004)
    float                                         BoneBLength;                                                  // 0x0134(0x0004)
    char                                          pa_0138[0x0008]                                               // 0x0138(0x0008)
    FTransform                                    Elbow;                                                        // 0x0140(0x0060)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0008
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0010
struct FRigUnit : public FRigUnit
{
    bool                                          Value;                                                        // 0x0008(0x0001)
    char                                          pa_0009[0x0007]                                               // 0x0009(0x0007)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0010
struct FRigUnit : public FRigUnit
{
    bool                                          Value;                                                        // 0x0008(0x0001)
    bool                                          Result;                                                       // 0x0009(0x0001)
    char                                          pa_000A[0x0006]                                               // 0x000A(0x0006)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0010
struct FRigUnit : public FRigUnit
{
    bool                                          A;                                                            // 0x0008(0x0001)
    bool                                          B;                                                            // 0x0009(0x0001)
    bool                                          Result;                                                       // 0x000A(0x0001)
    char                                          pa_000B[0x0005]                                               // 0x000B(0x0005)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0010
struct FRigUnit : public FRigUnit
{
    bool                                          A;                                                            // 0x0008(0x0001)
    bool                                          B;                                                            // 0x0009(0x0001)
    bool                                          Result;                                                       // 0x000A(0x0001)
    char                                          pa_000B[0x0005]                                               // 0x000B(0x0005)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0010
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0010
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0010
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0010
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0010
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0010
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0010
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0010
struct FRigUnit : public FRigUnit
{
    bool                                          A;                                                            // 0x0008(0x0001)
    bool                                          B;                                                            // 0x0009(0x0001)
    bool                                          Result;                                                       // 0x000A(0x0001)
    char                                          pa_000B[0x0005]                                               // 0x000B(0x0005)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0010
struct FRigUnit : public FRigUnit
{
    bool                                          A;                                                            // 0x0008(0x0001)
    bool                                          B;                                                            // 0x0009(0x0001)
    bool                                          Result;                                                       // 0x000A(0x0001)
    char                                          pa_000B[0x0005]                                               // 0x000B(0x0005)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0010
struct FRigUnit : public FRigUnit
{
    bool                                          Value;                                                        // 0x0008(0x0001)
    bool                                          Toggled;                                                      // 0x0009(0x0001)
    bool                                          Initialized;                                                  // 0x000A(0x0001)
    bool                                          LastValue;                                                    // 0x000B(0x0001)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
    bool                                          StartValue;                                                   // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
    float                                         Duration;                                                     // 0x000C(0x0004)
    bool                                          Result;                                                       // 0x0010(0x0001)
    bool                                          LastValue;                                                    // 0x0011(0x0001)
    char                                          pa_0012[0x0002]                                               // 0x0012(0x0002)
    float                                         TimeLeft;                                                     // 0x0014(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
    float                                         Duration;                                                     // 0x0008(0x0004)
    bool                                          Result;                                                       // 0x000C(0x0001)
    bool                                          LastValue;                                                    // 0x000D(0x0001)
    char                                          pa_000E[0x0002]                                               // 0x000E(0x0002)
    float                                         TimeLeft;                                                     // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0010
struct FRigUnit : public FRigUnit
{
    bool                                          Value;                                                        // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
    float                                         Result;                                                       // 0x000C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0010
struct FRigUnit : public FRigUnit
{
    bool                                          Value;                                                        // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
    int32_t                                       Result;                                                       // 0x000C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0008
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0038
struct FRigUnit : public FRigUnit
{
    FLinearColor                                  A;                                                            // 0x0008(0x0010)
    FLinearColor                                  B;                                                            // 0x0018(0x0010)
    FLinearColor                                  Result;                                                       // 0x0028(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0038
struct FRigUnit : public FRigUnit
{
    FLinearColor                                  A;                                                            // 0x0008(0x0010)
    FLinearColor                                  B;                                                            // 0x0018(0x0010)
    FLinearColor                                  Result;                                                       // 0x0028(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0020
struct FRigUnit : public FRigUnit
{
    float                                         Value;                                                        // 0x0008(0x0004)
    FLinearColor                                  Result;                                                       // 0x000C(0x0010)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0038
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0038
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0038
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0040
struct FRigUnit : public FRigUnit
{
    FLinearColor                                  A;                                                            // 0x0008(0x0010)
    FLinearColor                                  B;                                                            // 0x0018(0x0010)
    float                                         T;                                                            // 0x0028(0x0004)
    FLinearColor                                  Result;                                                       // 0x002C(0x0010)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0008
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0010
struct FRigUnit : public FRigUnit
{
    double                                        Value;                                                        // 0x0008(0x0008)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
    double                                        Value;                                                        // 0x0008(0x0008)
    double                                        Result;                                                       // 0x0010(0x0008)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0020
struct FRigUnit : public FRigUnit
{
    double                                        A;                                                            // 0x0008(0x0008)
    double                                        B;                                                            // 0x0010(0x0008)
    double                                        Result;                                                       // 0x0018(0x0008)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0020
struct FRigUnit : public FRigUnit
{
    double                                        A;                                                            // 0x0008(0x0008)
    double                                        B;                                                            // 0x0010(0x0008)
    double                                        Result;                                                       // 0x0018(0x0008)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0010
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0010
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0010
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0010
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0020
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0020
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0020
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0020
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0020
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0020
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0020
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0020
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0020
struct FRigUnit : public FRigUnit
{
    double                                        Value;                                                        // 0x0008(0x0008)
    double                                        Result;                                                       // 0x0010(0x0008)
    int32_t                                       Int;                                                          // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0020
struct FRigUnit : public FRigUnit
{
    double                                        Value;                                                        // 0x0008(0x0008)
    double                                        Result;                                                       // 0x0010(0x0008)
    int32_t                                       Int;                                                          // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0020
struct FRigUnit : public FRigUnit
{
    double                                        Value;                                                        // 0x0008(0x0008)
    double                                        Result;                                                       // 0x0010(0x0008)
    int32_t                                       Int;                                                          // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
    double                                        Value;                                                        // 0x0008(0x0008)
    int32_t                                       Result;                                                       // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0028
struct FRigUnit : public FRigUnit
{
    double                                        Value;                                                        // 0x0008(0x0008)
    double                                        Minimum;                                                      // 0x0010(0x0008)
    double                                        Maximum;                                                      // 0x0018(0x0008)
    double                                        Result;                                                       // 0x0020(0x0008)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0028
struct FRigUnit : public FRigUnit
{
    double                                        A;                                                            // 0x0008(0x0008)
    double                                        B;                                                            // 0x0010(0x0008)
    double                                        T;                                                            // 0x0018(0x0008)
    double                                        Result;                                                       // 0x0020(0x0008)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0040
struct FRigUnit : public FRigUnit
{
    double                                        Value;                                                        // 0x0008(0x0008)
    double                                        SourceMinimum;                                                // 0x0010(0x0008)
    double                                        SourceMaximum;                                                // 0x0018(0x0008)
    double                                        TargetMinimum;                                                // 0x0020(0x0008)
    double                                        TargetMaximum;                                                // 0x0028(0x0008)
    bool                                          bClamp;                                                       // 0x0030(0x0001)
    char                                          pa_0031[0x0007]                                               // 0x0031(0x0007)
    double                                        Result;                                                       // 0x0038(0x0008)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0020
struct FRigUnit : public FRigUnit
{
    double                                        A;                                                            // 0x0008(0x0008)
    double                                        B;                                                            // 0x0010(0x0008)
    bool                                          Result;                                                       // 0x0018(0x0001)
    char                                          pa_0019[0x0007]                                               // 0x0019(0x0007)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0020
struct FRigUnit : public FRigUnit
{
    double                                        A;                                                            // 0x0008(0x0008)
    double                                        B;                                                            // 0x0010(0x0008)
    bool                                          Result;                                                       // 0x0018(0x0001)
    char                                          pa_0019[0x0007]                                               // 0x0019(0x0007)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0020
struct FRigUnit : public FRigUnit
{
    double                                        A;                                                            // 0x0008(0x0008)
    double                                        B;                                                            // 0x0010(0x0008)
    bool                                          Result;                                                       // 0x0018(0x0001)
    char                                          pa_0019[0x0007]                                               // 0x0019(0x0007)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0020
struct FRigUnit : public FRigUnit
{
    double                                        A;                                                            // 0x0008(0x0008)
    double                                        B;                                                            // 0x0010(0x0008)
    bool                                          Result;                                                       // 0x0018(0x0001)
    char                                          pa_0019[0x0007]                                               // 0x0019(0x0007)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0020
struct FRigUnit : public FRigUnit
{
    double                                        A;                                                            // 0x0008(0x0008)
    double                                        B;                                                            // 0x0010(0x0008)
    bool                                          Result;                                                       // 0x0018(0x0001)
    char                                          pa_0019[0x0007]                                               // 0x0019(0x0007)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0020
struct FRigUnit : public FRigUnit
{
    double                                        A;                                                            // 0x0008(0x0008)
    double                                        B;                                                            // 0x0010(0x0008)
    bool                                          Result;                                                       // 0x0018(0x0001)
    char                                          pa_0019[0x0007]                                               // 0x0019(0x0007)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0020
struct FRigUnit : public FRigUnit
{
    double                                        Value;                                                        // 0x0008(0x0008)
    double                                        Tolerance;                                                    // 0x0010(0x0008)
    bool                                          Result;                                                       // 0x0018(0x0001)
    char                                          pa_0019[0x0007]                                               // 0x0019(0x0007)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0028
struct FRigUnit : public FRigUnit
{
    double                                        A;                                                            // 0x0008(0x0008)
    double                                        B;                                                            // 0x0010(0x0008)
    double                                        Tolerance;                                                    // 0x0018(0x0008)
    bool                                          Result;                                                       // 0x0020(0x0001)
    char                                          pa_0021[0x0007]                                               // 0x0021(0x0007)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0040
struct FRigUnit : public FRigUnit
{
    double                                        A;                                                            // 0x0008(0x0008)
    double                                        B;                                                            // 0x0010(0x0008)
    double                                        C;                                                            // 0x0018(0x0008)
    double                                        AlphaAngle;                                                   // 0x0020(0x0008)
    double                                        BetaAngle;                                                    // 0x0028(0x0008)
    double                                        GammaAngle;                                                   // 0x0030(0x0008)
    bool                                          bValid;                                                       // 0x0038(0x0001)
    char                                          pa_0039[0x0007]                                               // 0x0039(0x0007)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0008
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0010
struct FRigUnit : public FRigUnit
{
    float                                         Value;                                                        // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0010
struct FRigUnit : public FRigUnit
{
    float                                         Value;                                                        // 0x0008(0x0004)
    float                                         Result;                                                       // 0x000C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
    float                                         A;                                                            // 0x0008(0x0004)
    float                                         B;                                                            // 0x000C(0x0004)
    float                                         Result;                                                       // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
    float                                         A;                                                            // 0x0008(0x0004)
    float                                         B;                                                            // 0x000C(0x0004)
    float                                         Result;                                                       // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0010
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0010
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0010
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0010
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0010
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0010
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0010
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
    float                                         Value;                                                        // 0x0008(0x0004)
    float                                         Result;                                                       // 0x000C(0x0004)
    int32_t                                       Int;                                                          // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
    float                                         Value;                                                        // 0x0008(0x0004)
    float                                         Result;                                                       // 0x000C(0x0004)
    int32_t                                       Int;                                                          // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
    float                                         Value;                                                        // 0x0008(0x0004)
    float                                         Result;                                                       // 0x000C(0x0004)
    int32_t                                       Int;                                                          // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0010
struct FRigUnit : public FRigUnit
{
    float                                         Value;                                                        // 0x0008(0x0004)
    int32_t                                       Result;                                                       // 0x000C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0010
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
    float                                         Value;                                                        // 0x0008(0x0004)
    float                                         Minimum;                                                      // 0x000C(0x0004)
    float                                         Maximum;                                                      // 0x0010(0x0004)
    float                                         Result;                                                       // 0x0014(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
    float                                         A;                                                            // 0x0008(0x0004)
    float                                         B;                                                            // 0x000C(0x0004)
    float                                         T;                                                            // 0x0010(0x0004)
    float                                         Result;                                                       // 0x0014(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0028
struct FRigUnit : public FRigUnit
{
    float                                         Value;                                                        // 0x0008(0x0004)
    float                                         SourceMinimum;                                                // 0x000C(0x0004)
    float                                         SourceMaximum;                                                // 0x0010(0x0004)
    float                                         TargetMinimum;                                                // 0x0014(0x0004)
    float                                         TargetMaximum;                                                // 0x0018(0x0004)
    bool                                          bClamp;                                                       // 0x001C(0x0001)
    char                                          pa_001D[0x0003]                                               // 0x001D(0x0003)
    float                                         Result;                                                       // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
    float                                         A;                                                            // 0x0008(0x0004)
    float                                         B;                                                            // 0x000C(0x0004)
    bool                                          Result;                                                       // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
    float                                         A;                                                            // 0x0008(0x0004)
    float                                         B;                                                            // 0x000C(0x0004)
    bool                                          Result;                                                       // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
    float                                         A;                                                            // 0x0008(0x0004)
    float                                         B;                                                            // 0x000C(0x0004)
    bool                                          Result;                                                       // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
    float                                         A;                                                            // 0x0008(0x0004)
    float                                         B;                                                            // 0x000C(0x0004)
    bool                                          Result;                                                       // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
    float                                         A;                                                            // 0x0008(0x0004)
    float                                         B;                                                            // 0x000C(0x0004)
    bool                                          Result;                                                       // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
    float                                         A;                                                            // 0x0008(0x0004)
    float                                         B;                                                            // 0x000C(0x0004)
    bool                                          Result;                                                       // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
    float                                         Value;                                                        // 0x0008(0x0004)
    float                                         Tolerance;                                                    // 0x000C(0x0004)
    bool                                          Result;                                                       // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
    float                                         A;                                                            // 0x0008(0x0004)
    float                                         B;                                                            // 0x000C(0x0004)
    float                                         Tolerance;                                                    // 0x0010(0x0004)
    bool                                          Result;                                                       // 0x0014(0x0001)
    char                                          pa_0015[0x0003]                                               // 0x0015(0x0003)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
    bool                                          Condition;                                                    // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
    float                                         IfTrue;                                                       // 0x000C(0x0004)
    float                                         IfFalse;                                                      // 0x0010(0x0004)
    float                                         Result;                                                       // 0x0014(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0010
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0010
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0010
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0010
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0010
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0010
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0010
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0010
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0028
struct FRigUnit : public FRigUnit
{
    float                                         A;                                                            // 0x0008(0x0004)
    float                                         B;                                                            // 0x000C(0x0004)
    float                                         C;                                                            // 0x0010(0x0004)
    float                                         AlphaAngle;                                                   // 0x0014(0x0004)
    float                                         BetaAngle;                                                    // 0x0018(0x0004)
    float                                         GammaAngle;                                                   // 0x001C(0x0004)
    bool                                          bValid;                                                       // 0x0020(0x0001)
    char                                          pa_0021[0x0007]                                               // 0x0021(0x0007)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0010
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0008
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0010
struct FRigUnit : public FRigUnit
{
    int32_t                                       Value;                                                        // 0x0008(0x0004)
    int32_t                                       Result;                                                       // 0x000C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
    int32_t                                       A;                                                            // 0x0008(0x0004)
    int32_t                                       B;                                                            // 0x000C(0x0004)
    int32_t                                       Result;                                                       // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
    int32_t                                       A;                                                            // 0x0008(0x0004)
    int32_t                                       B;                                                            // 0x000C(0x0004)
    int32_t                                       Result;                                                       // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0010
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0010
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0010
struct FRigUnit : public FRigUnit
{
    int32_t                                       Value;                                                        // 0x0008(0x0004)
    float                                         Result;                                                       // 0x000C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0010
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
    int32_t                                       Value;                                                        // 0x0008(0x0004)
    int32_t                                       Minimum;                                                      // 0x000C(0x0004)
    int32_t                                       Maximum;                                                      // 0x0010(0x0004)
    int32_t                                       Result;                                                       // 0x0014(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
    int32_t                                       A;                                                            // 0x0008(0x0004)
    int32_t                                       B;                                                            // 0x000C(0x0004)
    bool                                          Result;                                                       // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
    int32_t                                       A;                                                            // 0x0008(0x0004)
    int32_t                                       B;                                                            // 0x000C(0x0004)
    bool                                          Result;                                                       // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
    int32_t                                       A;                                                            // 0x0008(0x0004)
    int32_t                                       B;                                                            // 0x000C(0x0004)
    bool                                          Result;                                                       // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
    int32_t                                       A;                                                            // 0x0008(0x0004)
    int32_t                                       B;                                                            // 0x000C(0x0004)
    bool                                          Result;                                                       // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
    int32_t                                       A;                                                            // 0x0008(0x0004)
    int32_t                                       B;                                                            // 0x000C(0x0004)
    bool                                          Result;                                                       // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
    int32_t                                       A;                                                            // 0x0008(0x0004)
    int32_t                                       B;                                                            // 0x000C(0x0004)
    bool                                          Result;                                                       // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0008
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0110
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FMatrix                                       Value;                                                        // 0x0010(0x0080)
    FMatrix                                       Result;                                                       // 0x0090(0x0080)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0190
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FMatrix                                       A;                                                            // 0x0010(0x0080)
    FMatrix                                       B;                                                            // 0x0090(0x0080)
    FMatrix                                       Result;                                                       // 0x0110(0x0080)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0190
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FMatrix                                       A;                                                            // 0x0010(0x0080)
    FMatrix                                       B;                                                            // 0x0090(0x0080)
    FMatrix                                       Result;                                                       // 0x0110(0x0080)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00F0
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FMatrix                                       Value;                                                        // 0x0010(0x0080)
    FTransform                                    Result;                                                       // 0x0090(0x0060)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00F0
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FTransform                                    Transform;                                                    // 0x0010(0x0060)
    FMatrix                                       Result;                                                       // 0x0070(0x0080)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00F0
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FTransform                                    Value;                                                        // 0x0010(0x0060)
    FMatrix                                       Result;                                                       // 0x0070(0x0080)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00F0
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FMatrix                                       Value;                                                        // 0x0010(0x0080)
    FVector                                       Origin;                                                       // 0x0090(0x0018)
    FVector                                       X;                                                            // 0x00A8(0x0018)
    FVector                                       Y;                                                            // 0x00C0(0x0018)
    FVector                                       Z;                                                            // 0x00D8(0x0018)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00F0
struct FRigUnit : public FRigUnit
{
    FVector                                       Origin;                                                       // 0x0008(0x0018)
    FVector                                       X;                                                            // 0x0020(0x0018)
    FVector                                       Y;                                                            // 0x0038(0x0018)
    FVector                                       Z;                                                            // 0x0050(0x0018)
    char                                          pa_0068[0x0008]                                               // 0x0068(0x0008)
    FMatrix                                       Result;                                                       // 0x0070(0x0080)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0190
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0110
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0008
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0050
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FQuat                                         Value;                                                        // 0x0010(0x0020)
    FQuat                                         Result;                                                       // 0x0030(0x0020)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0070
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FQuat                                         A;                                                            // 0x0010(0x0020)
    FQuat                                         B;                                                            // 0x0030(0x0020)
    FQuat                                         Result;                                                       // 0x0050(0x0020)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0070
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FQuat                                         A;                                                            // 0x0010(0x0020)
    FQuat                                         B;                                                            // 0x0030(0x0020)
    FQuat                                         Result;                                                       // 0x0050(0x0020)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0050
struct FRigUnit : public FRigUnit
{
    FVector                                       Axis;                                                         // 0x0008(0x0018)
    float                                         Angle;                                                        // 0x0020(0x0004)
    char                                          pa_0024[0x000C]                                               // 0x0024(0x000C)
    FQuat                                         Result;                                                       // 0x0030(0x0020)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0050
struct FRigUnit : public FRigUnit
{
    FVector                                       Euler;                                                        // 0x0008(0x0018)
    enum class EEulerRotationOrder                RotationOrder;                                                // 0x0020(0x0001)
    char                                          pa_0021[0x000F]                                               // 0x0021(0x000F)
    FQuat                                         Result;                                                       // 0x0030(0x0020)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0040
struct FRigUnit : public FRigUnit
{
    FRotator                                      Rotator;                                                      // 0x0008(0x0018)
    FQuat                                         Result;                                                       // 0x0020(0x0020)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0040
struct FRigUnit : public FRigUnit
{
    FRotator                                      Value;                                                        // 0x0008(0x0018)
    FQuat                                         Result;                                                       // 0x0020(0x0020)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0060
struct FRigUnit : public FRigUnit
{
    FVector                                       A;                                                            // 0x0008(0x0018)
    FVector                                       B;                                                            // 0x0020(0x0018)
    char                                          pa_0038[0x0008]                                               // 0x0038(0x0008)
    FQuat                                         Result;                                                       // 0x0040(0x0020)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0050
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FQuat                                         Value;                                                        // 0x0010(0x0020)
    FVector                                       Axis;                                                         // 0x0030(0x0018)
    float                                         Angle;                                                        // 0x0048(0x0004)
    char                                          pa_004C[0x0004]                                               // 0x004C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0040
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FQuat                                         Value;                                                        // 0x0010(0x0020)
    float                                         Scale;                                                        // 0x0030(0x0004)
    char                                          pa_0034[0x000C]                                               // 0x0034(0x000C)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0060
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FQuat                                         Value;                                                        // 0x0010(0x0020)
    float                                         Factor;                                                       // 0x0030(0x0004)
    char                                          pa_0034[0x000C]                                               // 0x0034(0x000C)
    FQuat                                         Result;                                                       // 0x0040(0x0020)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0050
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FQuat                                         Value;                                                        // 0x0010(0x0020)
    enum class EEulerRotationOrder                RotationOrder;                                                // 0x0030(0x0001)
    char                                          pa_0031[0x0007]                                               // 0x0031(0x0007)
    FVector                                       Result;                                                       // 0x0038(0x0018)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0050
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FQuat                                         Value;                                                        // 0x0010(0x0020)
    FRotator                                      Result;                                                       // 0x0030(0x0018)
    char                                          pa_0048[0x0008]                                               // 0x0048(0x0008)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0070
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0050
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0080
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FQuat                                         A;                                                            // 0x0010(0x0020)
    FQuat                                         B;                                                            // 0x0030(0x0020)
    float                                         T;                                                            // 0x0050(0x0004)
    char                                          pa_0054[0x000C]                                               // 0x0054(0x000C)
    FQuat                                         Result;                                                       // 0x0060(0x0020)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0060
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FQuat                                         A;                                                            // 0x0010(0x0020)
    FQuat                                         B;                                                            // 0x0030(0x0020)
    bool                                          Result;                                                       // 0x0050(0x0001)
    char                                          pa_0051[0x000F]                                               // 0x0051(0x000F)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0060
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FQuat                                         A;                                                            // 0x0010(0x0020)
    FQuat                                         B;                                                            // 0x0030(0x0020)
    bool                                          Result;                                                       // 0x0050(0x0001)
    char                                          pa_0051[0x000F]                                               // 0x0051(0x000F)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0070
struct FRigUnit : public FRigUnit
{
    bool                                          Condition;                                                    // 0x0008(0x0001)
    char                                          pa_0009[0x0007]                                               // 0x0009(0x0007)
    FQuat                                         IfTrue;                                                       // 0x0010(0x0020)
    FQuat                                         IfFalse;                                                      // 0x0030(0x0020)
    FQuat                                         Result;                                                       // 0x0050(0x0020)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0060
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FQuat                                         A;                                                            // 0x0010(0x0020)
    FQuat                                         B;                                                            // 0x0030(0x0020)
    float                                         Result;                                                       // 0x0050(0x0004)
    char                                          pa_0054[0x000C]                                               // 0x0054(0x000C)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0050
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0060
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FQuat                                         Transform;                                                    // 0x0010(0x0020)
    FVector                                       Vector;                                                       // 0x0030(0x0018)
    FVector                                       Result;                                                       // 0x0048(0x0018)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0050
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FQuat                                         Quaternion;                                                   // 0x0010(0x0020)
    enum class EAxis                              Axis;                                                         // 0x0030(0x0001)
    char                                          pa_0031[0x0007]                                               // 0x0031(0x0007)
    FVector                                       Result;                                                       // 0x0038(0x0018)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0090
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FQuat                                         Input;                                                        // 0x0010(0x0020)
    FVector                                       TwistAxis;                                                    // 0x0030(0x0018)
    char                                          pa_0048[0x0008]                                               // 0x0048(0x0008)
    FQuat                                         Swing;                                                        // 0x0050(0x0020)
    FQuat                                         Twist;                                                        // 0x0070(0x0020)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0010
struct FRigUnit : public FRigUnit
{
    enum class EEulerRotationOrder                RotationOrder;                                                // 0x0008(0x0001)
    char                                          pa_0009[0x0007]                                               // 0x0009(0x0007)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0070
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FQuat                                         Global;                                                       // 0x0010(0x0020)
    FQuat                                         Parent;                                                       // 0x0030(0x0020)
    FQuat                                         Local;                                                        // 0x0050(0x0020)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0070
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FQuat                                         Local;                                                        // 0x0010(0x0020)
    FQuat                                         Parent;                                                       // 0x0030(0x0020)
    FQuat                                         Global;                                                       // 0x0050(0x0020)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00C0
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FQuat                                         Value;                                                        // 0x0010(0x0020)
    enum class EAxis                              MirrorAxis;                                                   // 0x0030(0x0001)
    enum class EAxis                              AxisToFlip;                                                   // 0x0031(0x0001)
    char                                          pa_0032[0x000E]                                               // 0x0032(0x000E)
    FTransform                                    CentralTransform;                                             // 0x0040(0x0060)
    FQuat                                         Result;                                                       // 0x00A0(0x0020)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0090
struct FRigUnit
{
    char                                          pa_0000[0x0090]                                               // 0x0000(0x0090)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0090
struct FRigUnit
{
    char                                          pa_0000[0x0090]                                               // 0x0000(0x0090)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0008
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00F0
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FQuat                                         Input;                                                        // 0x0010(0x0020)
    enum class ERBFQuatDistanceType               DistanceFunction;                                             // 0x0030(0x0001)
    enum class ERBFKernelType                     SmoothingFunction;                                            // 0x0031(0x0001)
    char                                          pa_0032[0x0002]                                               // 0x0032(0x0002)
    float                                         SmoothingAngle;                                               // 0x0034(0x0004)
    bool                                          bNormalizeOutput;                                             // 0x0038(0x0001)
    char                                          pa_0039[0x0007]                                               // 0x0039(0x0007)
    FVector                                       TwistAxis;                                                    // 0x0040(0x0018)
    char                                          pa_0058[0x0008]                                               // 0x0058(0x0008)
    FRigUnit                                      WorkData;                                                     // 0x0060(0x0090)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00C0
struct FRigUnit : public FRigUnit
{
    FVector                                       Input;                                                        // 0x0008(0x0018)
    enum class ERBFVectorDistanceType             DistanceFunction;                                             // 0x0020(0x0001)
    enum class ERBFKernelType                     SmoothingFunction;                                            // 0x0021(0x0001)
    char                                          pa_0022[0x0002]                                               // 0x0022(0x0002)
    float                                         SmoothingRadius;                                              // 0x0024(0x0004)
    bool                                          bNormalizeOutput;                                             // 0x0028(0x0001)
    char                                          pa_0029[0x0007]                                               // 0x0029(0x0007)
    FRigUnit                                      WorkData;                                                     // 0x0030(0x0090)
};


// ScriptStruct  ControlRig.MathRBFInterpolateQuatFloat
// Struct Size::0x0030
struct FMathRBFInterpolateQuatFloat
{
    FQuat                                         Target;                                                       // 0x0000(0x0020)
    float                                         Value;                                                        // 0x0020(0x0004)
    char                                          pa_0024[0x000C]                                               // 0x0024(0x000C)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0110
struct FRigUnit : public FRigUnit
{
    TArray<FMathRBFInterpolateQuatFloat>          Targets;                                                      // 0x00F0(0x0010)
    float                                         Output;                                                       // 0x0100(0x0004)
    char                                          pa_0104[0x000C]                                               // 0x0104(0x000C)
};


// ScriptStruct  ControlRig.MathRBFInterpolateQuatVector
// Struct Size::0x0040
struct FMathRBFInterpolateQuatVector
{
    FQuat                                         Target;                                                       // 0x0000(0x0020)
    FVector                                       Value;                                                        // 0x0020(0x0018)
    char                                          pa_0038[0x0008]                                               // 0x0038(0x0008)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0120
struct FRigUnit : public FRigUnit
{
    TArray<FMathRBFInterpolateQuatVector>         Targets;                                                      // 0x00F0(0x0010)
    FVector                                       Output;                                                       // 0x0100(0x0018)
    char                                          pa_0118[0x0008]                                               // 0x0118(0x0008)
};


// ScriptStruct  ControlRig.MathRBFInterpolateQuatColor
// Struct Size::0x0030
struct FMathRBFInterpolateQuatColor
{
    FQuat                                         Target;                                                       // 0x0000(0x0020)
    FLinearColor                                  Value;                                                        // 0x0020(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0110
struct FRigUnit : public FRigUnit
{
    TArray<FMathRBFInterpolateQuatColor>          Targets;                                                      // 0x00F0(0x0010)
    FLinearColor                                  Output;                                                       // 0x0100(0x0010)
};


// ScriptStruct  ControlRig.MathRBFInterpolateQuatQuat
// Struct Size::0x0040
struct FMathRBFInterpolateQuatQuat
{
    FQuat                                         Target;                                                       // 0x0000(0x0020)
    FQuat                                         Value;                                                        // 0x0020(0x0020)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0120
struct FRigUnit : public FRigUnit
{
    TArray<FMathRBFInterpolateQuatQuat>           Targets;                                                      // 0x00F0(0x0010)
    FQuat                                         Output;                                                       // 0x0100(0x0020)
};


// ScriptStruct  ControlRig.MathRBFInterpolateQuatXform
// Struct Size::0x0080
struct FMathRBFInterpolateQuatXform
{
    FQuat                                         Target;                                                       // 0x0000(0x0020)
    FTransform                                    Value;                                                        // 0x0020(0x0060)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0160
struct FRigUnit : public FRigUnit
{
    TArray<FMathRBFInterpolateQuatXform>          Targets;                                                      // 0x00F0(0x0010)
    FTransform                                    Output;                                                       // 0x0100(0x0060)
};


// ScriptStruct  ControlRig.MathRBFInterpolateVectorFloat
// Struct Size::0x0020
struct FMathRBFInterpolateVectorFloat
{
    FVector                                       Target;                                                       // 0x0000(0x0018)
    float                                         Value;                                                        // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00E0
struct FRigUnit : public FRigUnit
{
    TArray<FMathRBFInterpolateVectorFloat>        Targets;                                                      // 0x00C0(0x0010)
    float                                         Output;                                                       // 0x00D0(0x0004)
    char                                          pa_00D4[0x000C]                                               // 0x00D4(0x000C)
};


// ScriptStruct  ControlRig.MathRBFInterpolateVectorVector
// Struct Size::0x0030
struct FMathRBFInterpolateVectorVector
{
    FVector                                       Target;                                                       // 0x0000(0x0018)
    FVector                                       Value;                                                        // 0x0018(0x0018)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00F0
struct FRigUnit : public FRigUnit
{
    TArray<FMathRBFInterpolateVectorVector>       Targets;                                                      // 0x00C0(0x0010)
    FVector                                       Output;                                                       // 0x00D0(0x0018)
    char                                          pa_00E8[0x0008]                                               // 0x00E8(0x0008)
};


// ScriptStruct  ControlRig.MathRBFInterpolateVectorColor
// Struct Size::0x0028
struct FMathRBFInterpolateVectorColor
{
    FVector                                       Target;                                                       // 0x0000(0x0018)
    FLinearColor                                  Value;                                                        // 0x0018(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00E0
struct FRigUnit : public FRigUnit
{
    TArray<FMathRBFInterpolateVectorColor>        Targets;                                                      // 0x00C0(0x0010)
    FLinearColor                                  Output;                                                       // 0x00D0(0x0010)
};


// ScriptStruct  ControlRig.MathRBFInterpolateVectorQuat
// Struct Size::0x0040
struct FMathRBFInterpolateVectorQuat
{
    FVector                                       Target;                                                       // 0x0000(0x0018)
    char                                          pa_0018[0x0008]                                               // 0x0018(0x0008)
    FQuat                                         Value;                                                        // 0x0020(0x0020)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00F0
struct FRigUnit : public FRigUnit
{
    TArray<FMathRBFInterpolateVectorQuat>         Targets;                                                      // 0x00C0(0x0010)
    FQuat                                         Output;                                                       // 0x00D0(0x0020)
};


// ScriptStruct  ControlRig.MathRBFInterpolateVectorXform
// Struct Size::0x0080
struct FMathRBFInterpolateVectorXform
{
    FVector                                       Target;                                                       // 0x0000(0x0018)
    char                                          pa_0018[0x0008]                                               // 0x0018(0x0008)
    FTransform                                    Value;                                                        // 0x0020(0x0060)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0130
struct FRigUnit : public FRigUnit
{
    TArray<FMathRBFInterpolateVectorXform>        Targets;                                                      // 0x00C0(0x0010)
    FTransform                                    Output;                                                       // 0x00D0(0x0060)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0008
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0040
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00D0
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FTransform                                    Value;                                                        // 0x0010(0x0060)
    FTransform                                    Result;                                                       // 0x0070(0x0060)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0130
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FTransform                                    A;                                                            // 0x0010(0x0060)
    FTransform                                    B;                                                            // 0x0070(0x0060)
    FTransform                                    Result;                                                       // 0x00D0(0x0060)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0130
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FTransform                                    A;                                                            // 0x0010(0x0060)
    FTransform                                    B;                                                            // 0x0070(0x0060)
    FTransform                                    Result;                                                       // 0x00D0(0x0060)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00B0
struct FRigUnit : public FRigUnit
{
    FEulerTransform                               EulerTransform;                                               // 0x0008(0x0048)
    FTransform                                    Result;                                                       // 0x0050(0x0060)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00B0
struct FRigUnit : public FRigUnit
{
    FEulerTransform                               Value;                                                        // 0x0008(0x0048)
    FTransform                                    Result;                                                       // 0x0050(0x0060)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00C0
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FTransform                                    Value;                                                        // 0x0010(0x0060)
    FEulerTransform                               Result;                                                       // 0x0070(0x0048)
    char                                          pa_00B8[0x0008]                                               // 0x00B8(0x0008)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0130
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0130
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FTransform                                    Global;                                                       // 0x0010(0x0060)
    FTransform                                    Parent;                                                       // 0x0070(0x0060)
    FTransform                                    Local;                                                        // 0x00D0(0x0060)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0130
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FTransform                                    Local;                                                        // 0x0010(0x0060)
    FTransform                                    Parent;                                                       // 0x0070(0x0060)
    FTransform                                    Global;                                                       // 0x00D0(0x0060)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00D0
struct FRigUnit : public FRigUnit
{
    TArray<FTransform>                            Transforms;                                                   // 0x0040(0x0010)
    enum class EBoneGetterSetterMode              TargetSpace;                                                  // 0x0050(0x0001)
    char                                          pa_0051[0x000F]                                               // 0x0051(0x000F)
    FTransform                                    Root;                                                         // 0x0060(0x0060)
    TArray<int32_t>                               ParentIndices;                                                // 0x00C0(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00D0
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0140
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FTransform                                    A;                                                            // 0x0010(0x0060)
    FTransform                                    B;                                                            // 0x0070(0x0060)
    float                                         T;                                                            // 0x00D0(0x0004)
    char                                          pa_00D4[0x000C]                                               // 0x00D4(0x000C)
    FTransform                                    Result;                                                       // 0x00E0(0x0060)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0130
struct FRigUnit : public FRigUnit
{
    bool                                          Condition;                                                    // 0x0008(0x0001)
    char                                          pa_0009[0x0007]                                               // 0x0009(0x0007)
    FTransform                                    IfTrue;                                                       // 0x0010(0x0060)
    FTransform                                    IfFalse;                                                      // 0x0070(0x0060)
    FTransform                                    Result;                                                       // 0x00D0(0x0060)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00A0
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FTransform                                    Transform;                                                    // 0x0010(0x0060)
    FVector                                       Vector;                                                       // 0x0070(0x0018)
    FVector                                       Result;                                                       // 0x0088(0x0018)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00A0
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FTransform                                    Transform;                                                    // 0x0010(0x0060)
    FVector                                       Location;                                                     // 0x0070(0x0018)
    FVector                                       Result;                                                       // 0x0088(0x0018)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0110
struct FRigUnit : public FRigUnit
{
    FVector                                       Location;                                                     // 0x0008(0x0018)
    FVector                                       Rotation;                                                     // 0x0020(0x0018)
    enum class EEulerRotationOrder                RotationOrder;                                                // 0x0038(0x0001)
    char                                          pa_0039[0x0007]                                               // 0x0039(0x0007)
    FVector                                       Scale;                                                        // 0x0040(0x0018)
    char                                          pa_0058[0x0008]                                               // 0x0058(0x0008)
    FTransform                                    Transform;                                                    // 0x0060(0x0060)
    FEulerTransform                               EulerTransform;                                               // 0x00C0(0x0048)
    char                                          pa_0108[0x0008]                                               // 0x0108(0x0008)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0048
struct FRigUnit : public FRigUnit
{
    TArray<FTransform>                            Transforms;                                                   // 0x0008(0x0010)
    TArray<FVector>                               Translations;                                                 // 0x0018(0x0010)
    TArray<FQuat>                                 Rotations;                                                    // 0x0028(0x0010)
    TArray<FVector>                               Scales;                                                       // 0x0038(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0160
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FTransform                                    Value;                                                        // 0x0010(0x0060)
    enum class EAxis                              Axis;                                                         // 0x0070(0x0001)
    enum class EControlRigClampSpatialMode        Type;                                                         // 0x0071(0x0001)
    char                                          pa_0072[0x0002]                                               // 0x0072(0x0002)
    float                                         Minimum;                                                      // 0x0074(0x0004)
    float                                         Maximum;                                                      // 0x0078(0x0004)
    char                                          pa_007C[0x0004]                                               // 0x007C(0x0004)
    FTransform                                    Space;                                                        // 0x0080(0x0060)
    bool                                          bDrawDebug;                                                   // 0x00E0(0x0001)
    char                                          pa_00E1[0x0003]                                               // 0x00E1(0x0003)
    FLinearColor                                  DebugColor;                                                   // 0x00E4(0x0010)
    float                                         DebugThickness;                                               // 0x00F4(0x0004)
    char                                          pa_00F8[0x0008]                                               // 0x00F8(0x0008)
    FTransform                                    Result;                                                       // 0x0100(0x0060)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0140
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FTransform                                    Value;                                                        // 0x0010(0x0060)
    enum class EAxis                              MirrorAxis;                                                   // 0x0070(0x0001)
    enum class EAxis                              AxisToFlip;                                                   // 0x0071(0x0001)
    char                                          pa_0072[0x000E]                                               // 0x0072(0x000E)
    FTransform                                    CentralTransform;                                             // 0x0080(0x0060)
    FTransform                                    Result;                                                       // 0x00E0(0x0060)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0008
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0038
struct FRigUnit : public FRigUnit
{
    FVector                                       Value;                                                        // 0x0008(0x0018)
    FVector                                       Result;                                                       // 0x0020(0x0018)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0050
struct FRigUnit : public FRigUnit
{
    FVector                                       A;                                                            // 0x0008(0x0018)
    FVector                                       B;                                                            // 0x0020(0x0018)
    FVector                                       Result;                                                       // 0x0038(0x0018)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0050
struct FRigUnit : public FRigUnit
{
    FVector                                       A;                                                            // 0x0008(0x0018)
    FVector                                       B;                                                            // 0x0020(0x0018)
    FVector                                       Result;                                                       // 0x0038(0x0018)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0028
struct FRigUnit : public FRigUnit
{
    float                                         Value;                                                        // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FVector                                       Result;                                                       // 0x0010(0x0018)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0050
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0050
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0050
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0040
struct FRigUnit : public FRigUnit
{
    FVector                                       Value;                                                        // 0x0008(0x0018)
    float                                         Factor;                                                       // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
    FVector                                       Result;                                                       // 0x0028(0x0018)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0050
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0050
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0050
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0050
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0038
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0038
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0038
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0038
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0038
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0038
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0068
struct FRigUnit : public FRigUnit
{
    FVector                                       Value;                                                        // 0x0008(0x0018)
    FVector                                       Minimum;                                                      // 0x0020(0x0018)
    FVector                                       Maximum;                                                      // 0x0038(0x0018)
    FVector                                       Result;                                                       // 0x0050(0x0018)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0058
struct FRigUnit : public FRigUnit
{
    FVector                                       A;                                                            // 0x0008(0x0018)
    FVector                                       B;                                                            // 0x0020(0x0018)
    float                                         T;                                                            // 0x0038(0x0004)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
    FVector                                       Result;                                                       // 0x0040(0x0018)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00A0
struct FRigUnit : public FRigUnit
{
    FVector                                       Value;                                                        // 0x0008(0x0018)
    FVector                                       SourceMinimum;                                                // 0x0020(0x0018)
    FVector                                       SourceMaximum;                                                // 0x0038(0x0018)
    FVector                                       TargetMinimum;                                                // 0x0050(0x0018)
    FVector                                       TargetMaximum;                                                // 0x0068(0x0018)
    bool                                          bClamp;                                                       // 0x0080(0x0001)
    char                                          pa_0081[0x0007]                                               // 0x0081(0x0007)
    FVector                                       Result;                                                       // 0x0088(0x0018)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0040
struct FRigUnit : public FRigUnit
{
    FVector                                       A;                                                            // 0x0008(0x0018)
    FVector                                       B;                                                            // 0x0020(0x0018)
    bool                                          Result;                                                       // 0x0038(0x0001)
    char                                          pa_0039[0x0007]                                               // 0x0039(0x0007)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0040
struct FRigUnit : public FRigUnit
{
    FVector                                       A;                                                            // 0x0008(0x0018)
    FVector                                       B;                                                            // 0x0020(0x0018)
    bool                                          Result;                                                       // 0x0038(0x0001)
    char                                          pa_0039[0x0007]                                               // 0x0039(0x0007)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0028
struct FRigUnit : public FRigUnit
{
    FVector                                       Value;                                                        // 0x0008(0x0018)
    float                                         Tolerance;                                                    // 0x0020(0x0004)
    bool                                          Result;                                                       // 0x0024(0x0001)
    char                                          pa_0025[0x0003]                                               // 0x0025(0x0003)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0040
struct FRigUnit : public FRigUnit
{
    FVector                                       A;                                                            // 0x0008(0x0018)
    FVector                                       B;                                                            // 0x0020(0x0018)
    float                                         Tolerance;                                                    // 0x0038(0x0004)
    bool                                          Result;                                                       // 0x003C(0x0001)
    char                                          pa_003D[0x0003]                                               // 0x003D(0x0003)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0058
struct FRigUnit : public FRigUnit
{
    bool                                          Condition;                                                    // 0x0008(0x0001)
    char                                          pa_0009[0x0007]                                               // 0x0009(0x0007)
    FVector                                       IfTrue;                                                       // 0x0010(0x0018)
    FVector                                       IfFalse;                                                      // 0x0028(0x0018)
    FVector                                       Result;                                                       // 0x0040(0x0018)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0038
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0038
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0028
struct FRigUnit : public FRigUnit
{
    FVector                                       Value;                                                        // 0x0008(0x0018)
    float                                         Result;                                                       // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0028
struct FRigUnit : public FRigUnit
{
    FVector                                       Value;                                                        // 0x0008(0x0018)
    float                                         Result;                                                       // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0040
struct FRigUnit : public FRigUnit
{
    FVector                                       A;                                                            // 0x0008(0x0018)
    FVector                                       B;                                                            // 0x0020(0x0018)
    float                                         Result;                                                       // 0x0038(0x0004)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0050
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0040
struct FRigUnit : public FRigUnit
{
    FVector                                       A;                                                            // 0x0008(0x0018)
    FVector                                       B;                                                            // 0x0020(0x0018)
    float                                         Result;                                                       // 0x0038(0x0004)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0038
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0040
struct FRigUnit : public FRigUnit
{
    FVector                                       Value;                                                        // 0x0008(0x0018)
    float                                         Length;                                                       // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
    FVector                                       Result;                                                       // 0x0028(0x0018)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0040
struct FRigUnit : public FRigUnit
{
    FVector                                       Value;                                                        // 0x0008(0x0018)
    float                                         MinimumLength;                                                // 0x0020(0x0004)
    float                                         MaximumLength;                                                // 0x0024(0x0004)
    FVector                                       Result;                                                       // 0x0028(0x0018)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0050
struct FRigUnit : public FRigUnit
{
    FVector                                       Value;                                                        // 0x0008(0x0018)
    FVector                                       Normal;                                                       // 0x0020(0x0018)
    FVector                                       Result;                                                       // 0x0038(0x0018)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0040
struct FRigUnit : public FRigUnit
{
    FVector                                       A;                                                            // 0x0008(0x0018)
    FVector                                       B;                                                            // 0x0020(0x0018)
    float                                         Result;                                                       // 0x0038(0x0004)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0040
struct FRigUnit : public FRigUnit
{
    FVector                                       A;                                                            // 0x0008(0x0018)
    FVector                                       B;                                                            // 0x0020(0x0018)
    bool                                          Result;                                                       // 0x0038(0x0001)
    char                                          pa_0039[0x0007]                                               // 0x0039(0x0007)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0040
struct FRigUnit : public FRigUnit
{
    FVector                                       A;                                                            // 0x0008(0x0018)
    FVector                                       B;                                                            // 0x0020(0x0018)
    bool                                          Result;                                                       // 0x0038(0x0001)
    char                                          pa_0039[0x0007]                                               // 0x0039(0x0007)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00A0
struct FRigUnit : public FRigUnit
{
    FCRFourPointBezier                            Bezier;                                                       // 0x0008(0x0060)
    float                                         T;                                                            // 0x0068(0x0004)
    char                                          pa_006C[0x0004]                                               // 0x006C(0x0004)
    FVector                                       Result;                                                       // 0x0070(0x0018)
    FVector                                       Tangent;                                                      // 0x0088(0x0018)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0068
struct FRigUnit : public FRigUnit
{
    FCRFourPointBezier                            Bezier;                                                       // 0x0008(0x0060)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00C0
struct FRigUnit : public FRigUnit
{
    FVector                                       Value;                                                        // 0x0008(0x0018)
    enum class EAxis                              Axis;                                                         // 0x0020(0x0001)
    enum class EControlRigClampSpatialMode        Type;                                                         // 0x0021(0x0001)
    char                                          pa_0022[0x0002]                                               // 0x0022(0x0002)
    float                                         Minimum;                                                      // 0x0024(0x0004)
    float                                         Maximum;                                                      // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
    FTransform                                    Space;                                                        // 0x0030(0x0060)
    bool                                          bDrawDebug;                                                   // 0x0090(0x0001)
    char                                          pa_0091[0x0003]                                               // 0x0091(0x0003)
    FLinearColor                                  DebugColor;                                                   // 0x0094(0x0010)
    float                                         DebugThickness;                                               // 0x00A4(0x0004)
    FVector                                       Result;                                                       // 0x00A8(0x0018)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0088
struct FRigUnit : public FRigUnit
{
    FVector                                       Start;                                                        // 0x0008(0x0018)
    FVector                                       Direction;                                                    // 0x0020(0x0018)
    FVector                                       PlanePoint;                                                   // 0x0038(0x0018)
    FVector                                       PlaneNormal;                                                  // 0x0050(0x0018)
    FVector                                       Result;                                                       // 0x0068(0x0018)
    float                                         Distance;                                                     // 0x0080(0x0004)
    char                                          pa_0084[0x0004]                                               // 0x0084(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0070
struct FRigUnit : public FRigUnit
{
    FVector                                       Point;                                                        // 0x0008(0x0018)
    FVector                                       PlanePoint;                                                   // 0x0020(0x0018)
    FVector                                       PlaneNormal;                                                  // 0x0038(0x0018)
    FVector                                       ClosestPointOnPlane;                                          // 0x0050(0x0018)
    float                                         SignedDistance;                                               // 0x0068(0x0004)
    char                                          pa_006C[0x0004]                                               // 0x006C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0050
struct FRigUnit : public FRigUnit
{
    FVector                                       Global;                                                       // 0x0008(0x0018)
    FVector                                       Parent;                                                       // 0x0020(0x0018)
    FVector                                       Local;                                                        // 0x0038(0x0018)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0050
struct FRigUnit : public FRigUnit
{
    FVector                                       Local;                                                        // 0x0008(0x0018)
    FVector                                       Parent;                                                       // 0x0020(0x0018)
    FVector                                       Global;                                                       // 0x0038(0x0018)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00B0
struct FRigUnit : public FRigUnit
{
    FVector                                       Value;                                                        // 0x0008(0x0018)
    enum class EAxis                              MirrorAxis;                                                   // 0x0020(0x0001)
    enum class EAxis                              AxisToFlip;                                                   // 0x0021(0x0001)
    char                                          pa_0022[0x000E]                                               // 0x0022(0x000E)
    FTransform                                    CentralTransform;                                             // 0x0030(0x0060)
    FVector                                       Result;                                                       // 0x0090(0x0018)
    char                                          pa_00A8[0x0008]                                               // 0x00A8(0x0008)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0028
struct FRigUnit : public FRigUnit
{
    float                                         Value;                                                        // 0x0008(0x0004)
    float                                         Speed;                                                        // 0x000C(0x0004)
    float                                         Frequency;                                                    // 0x0010(0x0004)
    float                                         Minimum;                                                      // 0x0014(0x0004)
    float                                         Maximum;                                                      // 0x0018(0x0004)
    float                                         Result;                                                       // 0x001C(0x0004)
    float                                         Time;                                                         // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0040
struct FRigUnit : public FRigUnit
{
    double                                        Value;                                                        // 0x0008(0x0008)
    double                                        Speed;                                                        // 0x0010(0x0008)
    double                                        Frequency;                                                    // 0x0018(0x0008)
    double                                        Minimum;                                                      // 0x0020(0x0008)
    double                                        Maximum;                                                      // 0x0028(0x0008)
    double                                        Result;                                                       // 0x0030(0x0008)
    double                                        Time;                                                         // 0x0038(0x0008)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0088
struct FRigUnit : public FRigUnit
{
    FVector                                       position;                                                     // 0x0008(0x0018)
    FVector                                       Speed;                                                        // 0x0020(0x0018)
    FVector                                       Frequency;                                                    // 0x0038(0x0018)
    float                                         Minimum;                                                      // 0x0050(0x0004)
    float                                         Maximum;                                                      // 0x0054(0x0004)
    FVector                                       Result;                                                       // 0x0058(0x0018)
    FVector                                       Time;                                                         // 0x0070(0x0018)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0090
struct FRigUnit : public FRigUnit
{
    FVector                                       Value;                                                        // 0x0008(0x0018)
    FVector                                       Speed;                                                        // 0x0020(0x0018)
    FVector                                       Frequency;                                                    // 0x0038(0x0018)
    double                                        Minimum;                                                      // 0x0050(0x0008)
    double                                        Maximum;                                                      // 0x0058(0x0008)
    FVector                                       Result;                                                       // 0x0060(0x0018)
    FVector                                       Time;                                                         // 0x0078(0x0018)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0030
struct FRigUnit : public FRigUnit
{
    int32_t                                       Seed;                                                         // 0x0008(0x0004)
    float                                         Minimum;                                                      // 0x000C(0x0004)
    float                                         Maximum;                                                      // 0x0010(0x0004)
    float                                         Duration;                                                     // 0x0014(0x0004)
    float                                         Result;                                                       // 0x0018(0x0004)
    float                                         LastResult;                                                   // 0x001C(0x0004)
    int32_t                                       LastSeed;                                                     // 0x0020(0x0004)
    int32_t                                       BaseSeed;                                                     // 0x0024(0x0004)
    float                                         TimeLeft;                                                     // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0058
struct FRigUnit : public FRigUnit
{
    int32_t                                       Seed;                                                         // 0x0008(0x0004)
    float                                         Minimum;                                                      // 0x000C(0x0004)
    float                                         Maximum;                                                      // 0x0010(0x0004)
    float                                         Duration;                                                     // 0x0014(0x0004)
    FVector                                       Result;                                                       // 0x0018(0x0018)
    FVector                                       LastResult;                                                   // 0x0030(0x0018)
    int32_t                                       LastSeed;                                                     // 0x0048(0x0004)
    int32_t                                       BaseSeed;                                                     // 0x004C(0x0004)
    float                                         TimeLeft;                                                     // 0x0050(0x0004)
    char                                          pa_0054[0x0004]                                               // 0x0054(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0008
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0020
struct FRigUnit : public FRigUnit
{
    float                                         Increment;                                                    // 0x0008(0x0004)
    float                                         InitialValue;                                                 // 0x000C(0x0004)
    bool                                          bIntegrateDeltaTime;                                          // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
    float                                         Result;                                                       // 0x0014(0x0004)
    float                                         AccumulatedValue;                                             // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0070
struct FRigUnit : public FRigUnit
{
    FVector                                       Increment;                                                    // 0x0008(0x0018)
    FVector                                       InitialValue;                                                 // 0x0020(0x0018)
    bool                                          bIntegrateDeltaTime;                                          // 0x0038(0x0001)
    char                                          pa_0039[0x0007]                                               // 0x0039(0x0007)
    FVector                                       Result;                                                       // 0x0040(0x0018)
    FVector                                       AccumulatedValue;                                             // 0x0058(0x0018)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0020
struct FRigUnit : public FRigUnit
{
    float                                         Multiplier;                                                   // 0x0008(0x0004)
    float                                         InitialValue;                                                 // 0x000C(0x0004)
    bool                                          bIntegrateDeltaTime;                                          // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
    float                                         Result;                                                       // 0x0014(0x0004)
    float                                         AccumulatedValue;                                             // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0070
struct FRigUnit : public FRigUnit
{
    FVector                                       Multiplier;                                                   // 0x0008(0x0018)
    FVector                                       InitialValue;                                                 // 0x0020(0x0018)
    bool                                          bIntegrateDeltaTime;                                          // 0x0038(0x0001)
    char                                          pa_0039[0x0007]                                               // 0x0039(0x0007)
    FVector                                       Result;                                                       // 0x0040(0x0018)
    FVector                                       AccumulatedValue;                                             // 0x0058(0x0018)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00A0
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FQuat                                         Multiplier;                                                   // 0x0010(0x0020)
    FQuat                                         InitialValue;                                                 // 0x0030(0x0020)
    bool                                          bFlipOrder;                                                   // 0x0050(0x0001)
    bool                                          bIntegrateDeltaTime;                                          // 0x0051(0x0001)
    char                                          pa_0052[0x000E]                                               // 0x0052(0x000E)
    FQuat                                         Result;                                                       // 0x0060(0x0020)
    FQuat                                         AccumulatedValue;                                             // 0x0080(0x0020)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x01A0
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FTransform                                    Multiplier;                                                   // 0x0010(0x0060)
    FTransform                                    InitialValue;                                                 // 0x0070(0x0060)
    bool                                          bFlipOrder;                                                   // 0x00D0(0x0001)
    bool                                          bIntegrateDeltaTime;                                          // 0x00D1(0x0001)
    char                                          pa_00D2[0x000E]                                               // 0x00D2(0x000E)
    FTransform                                    Result;                                                       // 0x00E0(0x0060)
    FTransform                                    AccumulatedValue;                                             // 0x0140(0x0060)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0020
struct FRigUnit : public FRigUnit
{
    float                                         TargetValue;                                                  // 0x0008(0x0004)
    float                                         InitialValue;                                                 // 0x000C(0x0004)
    float                                         Blend;                                                        // 0x0010(0x0004)
    bool                                          bIntegrateDeltaTime;                                          // 0x0014(0x0001)
    char                                          pa_0015[0x0003]                                               // 0x0015(0x0003)
    float                                         Result;                                                       // 0x0018(0x0004)
    float                                         AccumulatedValue;                                             // 0x001C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0070
struct FRigUnit : public FRigUnit
{
    FVector                                       TargetValue;                                                  // 0x0008(0x0018)
    FVector                                       InitialValue;                                                 // 0x0020(0x0018)
    float                                         Blend;                                                        // 0x0038(0x0004)
    bool                                          bIntegrateDeltaTime;                                          // 0x003C(0x0001)
    char                                          pa_003D[0x0003]                                               // 0x003D(0x0003)
    FVector                                       Result;                                                       // 0x0040(0x0018)
    FVector                                       AccumulatedValue;                                             // 0x0058(0x0018)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00A0
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FQuat                                         TargetValue;                                                  // 0x0010(0x0020)
    FQuat                                         InitialValue;                                                 // 0x0030(0x0020)
    float                                         Blend;                                                        // 0x0050(0x0004)
    bool                                          bIntegrateDeltaTime;                                          // 0x0054(0x0001)
    char                                          pa_0055[0x000B]                                               // 0x0055(0x000B)
    FQuat                                         Result;                                                       // 0x0060(0x0020)
    FQuat                                         AccumulatedValue;                                             // 0x0080(0x0020)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x01A0
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FTransform                                    TargetValue;                                                  // 0x0010(0x0060)
    FTransform                                    InitialValue;                                                 // 0x0070(0x0060)
    float                                         Blend;                                                        // 0x00D0(0x0004)
    bool                                          bIntegrateDeltaTime;                                          // 0x00D4(0x0001)
    char                                          pa_00D5[0x000B]                                               // 0x00D5(0x000B)
    FTransform                                    Result;                                                       // 0x00E0(0x0060)
    FTransform                                    AccumulatedValue;                                             // 0x0140(0x0060)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0020
struct FRigUnit : public FRigUnit
{
    float                                         Value;                                                        // 0x0008(0x0004)
    float                                         Minimum;                                                      // 0x000C(0x0004)
    float                                         Maximum;                                                      // 0x0010(0x0004)
    float                                         AccumulatedMinimum;                                           // 0x0014(0x0004)
    float                                         AccumulatedMaximum;                                           // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0080
struct FRigUnit : public FRigUnit
{
    FVector                                       Value;                                                        // 0x0008(0x0018)
    FVector                                       Minimum;                                                      // 0x0020(0x0018)
    FVector                                       Maximum;                                                      // 0x0038(0x0018)
    FVector                                       AccumulatedMinimum;                                           // 0x0050(0x0018)
    FVector                                       AccumulatedMaximum;                                           // 0x0068(0x0018)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0078
struct FRigUnit : public FRigUnit
{
    float                                         Value;                                                        // 0x0008(0x0004)
    float                                         Scale;                                                        // 0x000C(0x0004)
    float                                         Bias;                                                         // 0x0010(0x0004)
    bool                                          bMapRange;                                                    // 0x0014(0x0001)
    char                                          pa_0015[0x0003]                                               // 0x0015(0x0003)
    FInputRange                                   InRange;                                                      // 0x0018(0x0008)
    FInputRange                                   OutRange;                                                     // 0x0020(0x0008)
    bool                                          bClampResult;                                                 // 0x0028(0x0001)
    char                                          pa_0029[0x0003]                                               // 0x0029(0x0003)
    float                                         ClampMin;                                                     // 0x002C(0x0004)
    float                                         ClampMax;                                                     // 0x0030(0x0004)
    bool                                          bInterpResult;                                                // 0x0034(0x0001)
    char                                          pa_0035[0x0003]                                               // 0x0035(0x0003)
    float                                         InterpSpeedIncreasing;                                        // 0x0038(0x0004)
    float                                         InterpSpeedDecreasing;                                        // 0x003C(0x0004)
    float                                         Result;                                                       // 0x0040(0x0004)
    FInputScaleBiasClamp                          ScaleBiasClamp;                                               // 0x0044(0x0030)
    char                                          pa_0074[0x0004]                                               // 0x0074(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00A0
struct FRigUnit : public FRigUnit
{
    FVector                                       Value;                                                        // 0x0008(0x0018)
    float                                         Scale;                                                        // 0x0020(0x0004)
    float                                         Bias;                                                         // 0x0024(0x0004)
    bool                                          bMapRange;                                                    // 0x0028(0x0001)
    char                                          pa_0029[0x0003]                                               // 0x0029(0x0003)
    FInputRange                                   InRange;                                                      // 0x002C(0x0008)
    FInputRange                                   OutRange;                                                     // 0x0034(0x0008)
    bool                                          bClampResult;                                                 // 0x003C(0x0001)
    char                                          pa_003D[0x0003]                                               // 0x003D(0x0003)
    float                                         ClampMin;                                                     // 0x0040(0x0004)
    float                                         ClampMax;                                                     // 0x0044(0x0004)
    bool                                          bInterpResult;                                                // 0x0048(0x0001)
    char                                          pa_0049[0x0003]                                               // 0x0049(0x0003)
    float                                         InterpSpeedIncreasing;                                        // 0x004C(0x0004)
    float                                         InterpSpeedDecreasing;                                        // 0x0050(0x0004)
    char                                          pa_0054[0x0004]                                               // 0x0054(0x0004)
    FVector                                       Result;                                                       // 0x0058(0x0018)
    FInputScaleBiasClamp                          ScaleBiasClamp;                                               // 0x0070(0x0030)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00C0
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FQuat                                         Value;                                                        // 0x0010(0x0020)
    float                                         Scale;                                                        // 0x0030(0x0004)
    float                                         Bias;                                                         // 0x0034(0x0004)
    bool                                          bMapRange;                                                    // 0x0038(0x0001)
    char                                          pa_0039[0x0003]                                               // 0x0039(0x0003)
    FInputRange                                   InRange;                                                      // 0x003C(0x0008)
    FInputRange                                   OutRange;                                                     // 0x0044(0x0008)
    bool                                          bClampResult;                                                 // 0x004C(0x0001)
    char                                          pa_004D[0x0003]                                               // 0x004D(0x0003)
    float                                         ClampMin;                                                     // 0x0050(0x0004)
    float                                         ClampMax;                                                     // 0x0054(0x0004)
    bool                                          bInterpResult;                                                // 0x0058(0x0001)
    char                                          pa_0059[0x0003]                                               // 0x0059(0x0003)
    float                                         InterpSpeedIncreasing;                                        // 0x005C(0x0004)
    float                                         InterpSpeedDecreasing;                                        // 0x0060(0x0004)
    char                                          pa_0064[0x000C]                                               // 0x0064(0x000C)
    FQuat                                         Result;                                                       // 0x0070(0x0020)
    FInputScaleBiasClamp                          ScaleBiasClamp;                                               // 0x0090(0x0030)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
    float                                         Value;                                                        // 0x0008(0x0004)
    float                                         Delta;                                                        // 0x000C(0x0004)
    float                                         PreviousValue;                                                // 0x0010(0x0004)
    float                                         Cache;                                                        // 0x0014(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0068
struct FRigUnit : public FRigUnit
{
    FVector                                       Value;                                                        // 0x0008(0x0018)
    FVector                                       Delta;                                                        // 0x0020(0x0018)
    FVector                                       PreviousValue;                                                // 0x0038(0x0018)
    FVector                                       Cache;                                                        // 0x0050(0x0018)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0090
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FQuat                                         Value;                                                        // 0x0010(0x0020)
    FQuat                                         Delta;                                                        // 0x0030(0x0020)
    FQuat                                         PreviousValue;                                                // 0x0050(0x0020)
    FQuat                                         Cache;                                                        // 0x0070(0x0020)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0190
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FTransform                                    Value;                                                        // 0x0010(0x0060)
    FTransform                                    Delta;                                                        // 0x0070(0x0060)
    FTransform                                    PreviousValue;                                                // 0x00D0(0x0060)
    FTransform                                    Cache;                                                        // 0x0130(0x0060)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0030
struct FRigUnit : public FRigUnit
{
    float                                         Value;                                                        // 0x0008(0x0004)
    int32_t                                       BufferSize;                                                   // 0x000C(0x0004)
    float                                         Result;                                                       // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    TArray<float>                                 Buffer;                                                       // 0x0018(0x0010)
    int32_t                                       LastInsertIndex;                                              // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0058
struct FRigUnit : public FRigUnit
{
    FVector                                       Value;                                                        // 0x0008(0x0018)
    int32_t                                       BufferSize;                                                   // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
    FVector                                       Result;                                                       // 0x0028(0x0018)
    TArray<FVector>                               Buffer;                                                       // 0x0040(0x0010)
    int32_t                                       LastInsertIndex;                                              // 0x0050(0x0004)
    char                                          pa_0054[0x0004]                                               // 0x0054(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0100
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FTransform                                    Value;                                                        // 0x0010(0x0060)
    int32_t                                       BufferSize;                                                   // 0x0070(0x0004)
    char                                          pa_0074[0x000C]                                               // 0x0074(0x000C)
    FTransform                                    Result;                                                       // 0x0080(0x0060)
    TArray<FTransform>                            Buffer;                                                       // 0x00E0(0x0010)
    int32_t                                       LastInsertIndex;                                              // 0x00F0(0x0004)
    char                                          pa_00F4[0x000C]                                               // 0x00F4(0x000C)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0080
struct FRigUnit
{
    bool                                          bEnabled;                                                     // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         Scale;                                                        // 0x0004(0x0004)
    float                                         CollisionScale;                                               // 0x0008(0x0004)
    bool                                          bDrawPointsAsSpheres;                                         // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
    FLinearColor                                  Color;                                                        // 0x0010(0x0010)
    FTransform                                    WorldOffset;                                                  // 0x0020(0x0060)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0014
struct FRigUnit
{
    FName                                         bone;                                                         // 0x0000(0x0008)
    int32_t                                       TranslationPoint;                                             // 0x0008(0x0004)
    int32_t                                       PrimaryAimPoint;                                              // 0x000C(0x0004)
    int32_t                                       SecondaryAimPoint;                                            // 0x0010(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0088
struct FRigUnit
{
    FCRSimPointContainer                          Simulation;                                                   // 0x0000(0x0078)
    TArray<FCachedRigElement>                     BoneIndices;                                                  // 0x0078(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0250
struct FRigUnit : public FRigUnit
{
    TArray<FCRSimPoint>                           Points;                                                       // 0x0040(0x0010)
    TArray<FCRSimLinearSpring>                    Links;                                                        // 0x0050(0x0010)
    TArray<FCRSimPointForce>                      Forces;                                                       // 0x0060(0x0010)
    TArray<FCRSimSoftCollision>                   CollisionVolumes;                                             // 0x0070(0x0010)
    float                                         SimulatedStepsPerSecond;                                      // 0x0080(0x0004)
    enum class ECRSimPointIntegrateType           IntegratorType;                                               // 0x0084(0x0001)
    char                                          pa_0085[0x0003]                                               // 0x0085(0x0003)
    float                                         VerletBlend;                                                  // 0x0088(0x0004)
    char                                          pa_008C[0x0004]                                               // 0x008C(0x0004)
    TArray<FRigUnit>                              BoneTargets;                                                  // 0x0090(0x0010)
    bool                                          bLimitLocalPosition;                                          // 0x00A0(0x0001)
    bool                                          bPropagateToChildren;                                         // 0x00A1(0x0001)
    char                                          pa_00A2[0x0006]                                               // 0x00A2(0x0006)
    FVector                                       PrimaryAimAxis;                                               // 0x00A8(0x0018)
    FVector                                       SecondaryAimAxis;                                             // 0x00C0(0x0018)
    char                                          pa_00D8[0x0008]                                               // 0x00D8(0x0008)
    FRigUnit                                      DebugSettings;                                                // 0x00E0(0x0080)
    FCRFourPointBezier                            Bezier;                                                       // 0x0160(0x0060)
    FRigUnit                                      WorkData;                                                     // 0x01C0(0x0088)
    char                                          pa_0248[0x0008]                                               // 0x0248(0x0008)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0030
struct FRigUnit : public FRigUnit
{
    float                                         Current;                                                      // 0x0008(0x0004)
    float                                         Target;                                                       // 0x000C(0x0004)
    float                                         Stiffness;                                                    // 0x0010(0x0004)
    float                                         CriticalDamping;                                              // 0x0014(0x0004)
    float                                         Mass;                                                         // 0x0018(0x0004)
    float                                         Result;                                                       // 0x001C(0x0004)
    FFloatSpringState                             SpringState;                                                  // 0x0020(0x000C)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
};


// ScriptStruct  Engine.FloatSpringState
// Struct Size::0x000C
struct FFloatSpringState
{
    char                                          pa_0000[0x000C]                                               // 0x0000(0x000C)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0098
struct FRigUnit : public FRigUnit
{
    FVector                                       Current;                                                      // 0x0008(0x0018)
    FVector                                       Target;                                                       // 0x0020(0x0018)
    float                                         Stiffness;                                                    // 0x0038(0x0004)
    float                                         CriticalDamping;                                              // 0x003C(0x0004)
    float                                         Mass;                                                         // 0x0040(0x0004)
    char                                          pa_0044[0x0004]                                               // 0x0044(0x0004)
    FVector                                       Result;                                                       // 0x0048(0x0018)
    FVectorSpringState                            SpringState;                                                  // 0x0060(0x0038)
};


// ScriptStruct  Engine.VectorSpringState
// Struct Size::0x0038
struct FVectorSpringState
{
    char                                          pa_0000[0x0038]                                               // 0x0000(0x0038)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0040
struct FRigUnit : public FRigUnit
{
    float                                         Target;                                                       // 0x0008(0x0004)
    float                                         Strength;                                                     // 0x000C(0x0004)
    float                                         CriticalDamping;                                              // 0x0010(0x0004)
    float                                         Force;                                                        // 0x0014(0x0004)
    bool                                          bUseCurrentInput;                                             // 0x0018(0x0001)
    char                                          pa_0019[0x0003]                                               // 0x0019(0x0003)
    float                                         Current;                                                      // 0x001C(0x0004)
    float                                         TargetVelocityAmount;                                         // 0x0020(0x0004)
    bool                                          bInitializeFromTarget;                                        // 0x0024(0x0001)
    char                                          pa_0025[0x0003]                                               // 0x0025(0x0003)
    float                                         Result;                                                       // 0x0028(0x0004)
    float                                         Velocity;                                                     // 0x002C(0x0004)
    float                                         SimulatedResult;                                              // 0x0030(0x0004)
    FFloatSpringState                             SpringState;                                                  // 0x0034(0x000C)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00E8
struct FRigUnit : public FRigUnit
{
    FVector                                       Target;                                                       // 0x0008(0x0018)
    float                                         Strength;                                                     // 0x0020(0x0004)
    float                                         CriticalDamping;                                              // 0x0024(0x0004)
    FVector                                       Force;                                                        // 0x0028(0x0018)
    bool                                          bUseCurrentInput;                                             // 0x0040(0x0001)
    char                                          pa_0041[0x0007]                                               // 0x0041(0x0007)
    FVector                                       Current;                                                      // 0x0048(0x0018)
    float                                         TargetVelocityAmount;                                         // 0x0060(0x0004)
    bool                                          bInitializeFromTarget;                                        // 0x0064(0x0001)
    char                                          pa_0065[0x0003]                                               // 0x0065(0x0003)
    FVector                                       Result;                                                       // 0x0068(0x0018)
    FVector                                       Velocity;                                                     // 0x0080(0x0018)
    FVector                                       SimulatedResult;                                              // 0x0098(0x0018)
    FVectorSpringState                            SpringState;                                                  // 0x00B0(0x0038)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0130
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FQuat                                         Target;                                                       // 0x0010(0x0020)
    float                                         Strength;                                                     // 0x0030(0x0004)
    float                                         CriticalDamping;                                              // 0x0034(0x0004)
    FVector                                       Torque;                                                       // 0x0038(0x0018)
    bool                                          bUseCurrentInput;                                             // 0x0050(0x0001)
    char                                          pa_0051[0x000F]                                               // 0x0051(0x000F)
    FQuat                                         Current;                                                      // 0x0060(0x0020)
    float                                         TargetVelocityAmount;                                         // 0x0080(0x0004)
    bool                                          bInitializeFromTarget;                                        // 0x0084(0x0001)
    char                                          pa_0085[0x000B]                                               // 0x0085(0x000B)
    FQuat                                         Result;                                                       // 0x0090(0x0020)
    FVector                                       AngularVelocity;                                              // 0x00B0(0x0018)
    char                                          pa_00C8[0x0008]                                               // 0x00C8(0x0008)
    FQuat                                         SimulatedResult;                                              // 0x00D0(0x0020)
    FQuaternionSpringState                        SpringState;                                                  // 0x00F0(0x0040)
};


// ScriptStruct  Engine.QuaternionSpringState
// Struct Size::0x0040
struct FQuaternionSpringState
{
    char                                          pa_0000[0x0040]                                               // 0x0000(0x0040)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
    float                                         Speed;                                                        // 0x0008(0x0004)
    float                                         Time;                                                         // 0x000C(0x0004)
    float                                         AccumulatedValue;                                             // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0030
struct FRigUnit : public FRigUnit
{
    float                                         Speed;                                                        // 0x0008(0x0004)
    float                                         Duration;                                                     // 0x000C(0x0004)
    bool                                          Normalize;                                                    // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
    float                                         Absolute;                                                     // 0x0014(0x0004)
    float                                         Relative;                                                     // 0x0018(0x0004)
    float                                         FlipFlop;                                                     // 0x001C(0x0004)
    bool                                          Even;                                                         // 0x0020(0x0001)
    char                                          pa_0021[0x0003]                                               // 0x0021(0x0003)
    float                                         AccumulatedAbsolute;                                          // 0x0024(0x0004)
    float                                         AccumulatedRelative;                                          // 0x0028(0x0004)
    int32_t                                       NumIterations;                                                // 0x002C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0048
struct FRigUnit : public FRigUnit
{
    float                                         Value;                                                        // 0x0008(0x0004)
    float                                         SecondsAgo;                                                   // 0x000C(0x0004)
    int32_t                                       BufferSize;                                                   // 0x0010(0x0004)
    float                                         TimeRange;                                                    // 0x0014(0x0004)
    float                                         Result;                                                       // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    TArray<float>                                 Buffer;                                                       // 0x0020(0x0010)
    TArray<float>                                 DeltaTimes;                                                   // 0x0030(0x0010)
    int32_t                                       LastInsertIndex;                                              // 0x0040(0x0004)
    int32_t                                       UpperBound;                                                   // 0x0044(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0070
struct FRigUnit : public FRigUnit
{
    FVector                                       Value;                                                        // 0x0008(0x0018)
    float                                         SecondsAgo;                                                   // 0x0020(0x0004)
    int32_t                                       BufferSize;                                                   // 0x0024(0x0004)
    float                                         TimeRange;                                                    // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
    FVector                                       Result;                                                       // 0x0030(0x0018)
    TArray<FVector>                               Buffer;                                                       // 0x0048(0x0010)
    TArray<float>                                 DeltaTimes;                                                   // 0x0058(0x0010)
    int32_t                                       LastInsertIndex;                                              // 0x0068(0x0004)
    int32_t                                       UpperBound;                                                   // 0x006C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0110
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FTransform                                    Value;                                                        // 0x0010(0x0060)
    float                                         SecondsAgo;                                                   // 0x0070(0x0004)
    int32_t                                       BufferSize;                                                   // 0x0074(0x0004)
    float                                         TimeRange;                                                    // 0x0078(0x0004)
    char                                          pa_007C[0x0004]                                               // 0x007C(0x0004)
    FTransform                                    Result;                                                       // 0x0080(0x0060)
    TArray<FTransform>                            Buffer;                                                       // 0x00E0(0x0010)
    TArray<float>                                 DeltaTimes;                                                   // 0x00F0(0x0010)
    int32_t                                       LastInsertIndex;                                              // 0x0100(0x0004)
    int32_t                                       UpperBound;                                                   // 0x0104(0x0004)
    char                                          pa_0108[0x0008]                                               // 0x0108(0x0008)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00D8
struct FRigUnit : public FRigUnit
{
    FVector                                       Target;                                                       // 0x0008(0x0018)
    float                                         Strength;                                                     // 0x0020(0x0004)
    float                                         Damp;                                                         // 0x0024(0x0004)
    float                                         Blend;                                                        // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
    FVector                                       Force;                                                        // 0x0030(0x0018)
    FVector                                       position;                                                     // 0x0048(0x0018)
    FVector                                       Velocity;                                                     // 0x0060(0x0018)
    FVector                                       Acceleration;                                                 // 0x0078(0x0018)
    FCRSimPoint                                   Point;                                                        // 0x0090(0x0040)
    bool                                          bInitialized;                                                 // 0x00D0(0x0001)
    char                                          pa_00D1[0x0007]                                               // 0x00D1(0x0007)
};


// ScriptStruct  LiveLink.LiveLinkRetargetAssetReference
// Struct Size::0x0001
struct FLiveLinkRetargetAssetReference
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  LiveLink.ProviderPollResult
// Struct Size::0x0040
struct FProviderPollResult
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
    FString                                       Name;                                                         // 0x0010(0x0010)
    FString                                       MachineName;                                                  // 0x0020(0x0010)
    double                                        MachineTimeOffset;                                            // 0x0030(0x0008)
    bool                                          bIsValidProvider;                                             // 0x0038(0x0001)
    char                                          pa_0039[0x0007]                                               // 0x0039(0x0007)
};


// ScriptStruct  LiveLink.LiveLinkRoleProjectSetting
// Struct Size::0x0028
struct FLiveLinkRoleProjectSetting
{
    ULiveLinkRole*                                Role;                                                         // 0x0000(0x0008)
    ULiveLinkSubjectSettings*                     SettingClass;                                                 // 0x0008(0x0008)
    ULiveLinkFrameInterpolationProcessor*         FrameInterpolationProcessor;                                  // 0x0010(0x0008)
    TArray<ULiveLinkFramePreProcessor*>           FramePreProcessors;                                           // 0x0018(0x0010)
};


// ScriptStruct  LiveLinkComponents.LiveLinkTransformControllerData
// Struct Size::0x0006
struct FLiveLinkTransformControllerData
{
    bool                                          bWorldTransform;                                              // 0x0000(0x0001)
    bool                                          bUseLocation;                                                 // 0x0001(0x0001)
    bool                                          bUseRotation;                                                 // 0x0002(0x0001)
    bool                                          bUseScale;                                                    // 0x0003(0x0001)
    bool                                          bSweep;                                                       // 0x0004(0x0001)
    bool                                          bTeleport;                                                    // 0x0005(0x0001)
};


// ScriptStruct  MovieScene.MovieScenePropertySectionTemplate
// Struct Size::0x0038
struct FMovieScenePropertySectionTemplate : public FMovieSceneEvalTemplate
{
    FMovieScenePropertySectionData                PropertyData;                                                 // 0x0020(0x0018)
};


// ScriptStruct  MovieScene.MovieScenePropertySectionData
// Struct Size::0x0018
struct FMovieScenePropertySectionData
{
    FName                                         PropertyName;                                                 // 0x0000(0x0008)
    FString                                       PropertyPath;                                                 // 0x0008(0x0010)
};


// ScriptStruct  LiveLinkMovieScene.MovieSceneLiveLinkSectionTemplate
// Struct Size::0x00B8
struct FMovieSceneLiveLinkSectionTemplate : public FMovieScenePropertySectionTemplate
{
    FLiveLinkSubjectPreset                        SubjectPreset;                                                // 0x0038(0x0038)
    TArray<bool>                                  ChannelMask;                                                  // 0x0070(0x0010)
    TArray<FLiveLinkSubSectionData>               SubSectionsData;                                              // 0x0080(0x0010)
    char                                          pa_0090[0x0028]                                               // 0x0090(0x0028)
};


// ScriptStruct  LiveLinkMovieScene.LiveLinkSubSectionData
// Struct Size::0x0010
struct FLiveLinkSubSectionData
{
    TArray<FLiveLinkPropertyData>                 Properties;                                                   // 0x0000(0x0010)
};


// ScriptStruct  LiveLinkMovieScene.LiveLinkPropertyData
// Struct Size::0x0058
struct FLiveLinkPropertyData
{
    FName                                         PropertyName;                                                 // 0x0000(0x0008)
    TArray<FMovieSceneFloatChannel>               FloatChannel;                                                 // 0x0008(0x0010)
    TArray<FMovieSceneStringChannel>              StringChannel;                                                // 0x0018(0x0010)
    TArray<FMovieSceneIntegerChannel>             IntegerChannel;                                               // 0x0028(0x0010)
    TArray<FMovieSceneBoolChannel>                BoolChannel;                                                  // 0x0038(0x0010)
    TArray<FMovieSceneByteChannel>                ByteChannel;                                                  // 0x0048(0x0010)
};


// ScriptStruct  MovieSceneTracks.MovieSceneStringChannel
// Struct Size::0x0110
struct FMovieSceneStringChannel : public FMovieSceneChannel
{
    TArray<FFrameNumber>                          Times;                                                        // 0x0050(0x0010)
    TArray<FString>                               Values;                                                       // 0x0060(0x0010)
    FString                                       DefaultValue;                                                 // 0x0070(0x0010)
    bool                                          bHasDefaultValue;                                             // 0x0080(0x0001)
    char                                          pa_0081[0x008F]                                               // 0x0081(0x008F)
};


// ScriptStruct  LiveLinkInterface.LiveLinkSubjectPreset
// Struct Size::0x0038
struct FLiveLinkSubjectPreset
{
    FLiveLinkSubjectKey                           Key;                                                          // 0x0000(0x0018)
    ULiveLinkRole*                                Role;                                                         // 0x0018(0x0008)
    ULiveLinkSubjectSettings*                     Settings;                                                     // 0x0020(0x0008)
    ULiveLinkVirtualSubject*                      VirtualSubject;                                               // 0x0028(0x0008)
    bool                                          bEnabled;                                                     // 0x0030(0x0001)
    char                                          pa_0031[0x0007]                                               // 0x0031(0x0007)
};


// ScriptStruct  LiveLinkInterface.LiveLinkSubjectKey
// Struct Size::0x0018
struct FLiveLinkSubjectKey
{
    FGuid                                         Source;                                                       // 0x0000(0x0010)
    FLiveLinkSubjectName                          SubjectName;                                                  // 0x0010(0x0008)
};


// ScriptStruct  LiveLinkInterface.LiveLinkSubjectName
// Struct Size::0x0008
struct FLiveLinkSubjectName
{
    FName                                         Name;                                                         // 0x0000(0x0008)
};


// ScriptStruct  LiveLinkControlRig.RigUnit
// Struct Size::0x0008
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  LiveLinkControlRig.RigUnit
// Struct Size::0x00B0
struct FRigUnit : public FRigUnit
{
    FName                                         SubjectName;                                                  // 0x0008(0x0008)
    bool                                          bDrawDebug;                                                   // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
    FLinearColor                                  DebugColor;                                                   // 0x0014(0x0010)
    char                                          pa_0024[0x000C]                                               // 0x0024(0x000C)
    FTransform                                    DebugDrawOffset;                                              // 0x0030(0x0060)
    FSubjectFrameHandle                           SubjectFrame;                                                 // 0x0090(0x0018)
    char                                          pa_00A8[0x0008]                                               // 0x00A8(0x0008)
};


// ScriptStruct  LiveLinkInterface.LiveLinkBaseBlueprintData
// Struct Size::0x0008
struct FLiveLinkBaseBlueprintData
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
};


// ScriptStruct  LiveLinkInterface.SubjectFrameHandle
// Struct Size::0x0018
struct FSubjectFrameHandle : public FLiveLinkBaseBlueprintData
{
    char                                          pa_0008[0x0010]                                               // 0x0008(0x0010)
};


// ScriptStruct  LiveLinkControlRig.RigUnit
// Struct Size::0x0090
struct FRigUnit : public FRigUnit
{
    FSubjectFrameHandle                           SubjectFrame;                                                 // 0x0008(0x0018)
    FName                                         TransformName;                                                // 0x0020(0x0008)
    enum class EBoneGetterSetterMode              Space;                                                        // 0x0028(0x0001)
    char                                          pa_0029[0x0007]                                               // 0x0029(0x0007)
    FTransform                                    Transform;                                                    // 0x0030(0x0060)
};


// ScriptStruct  LiveLinkControlRig.RigUnit
// Struct Size::0x0030
struct FRigUnit : public FRigUnit
{
    FSubjectFrameHandle                           SubjectFrame;                                                 // 0x0008(0x0018)
    FName                                         ParameterName;                                                // 0x0020(0x0008)
    float                                         Value;                                                        // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
};


// ScriptStruct  LiveLinkControlRig.RigUnit
// Struct Size::0x00F0
struct FRigUnit : public FRigUnit
{
    FName                                         SubjectName;                                                  // 0x0008(0x0008)
    bool                                          bDrawDebug;                                                   // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
    FLinearColor                                  DebugColor;                                                   // 0x0014(0x0010)
    char                                          pa_0024[0x000C]                                               // 0x0024(0x000C)
    FTransform                                    DebugDrawOffset;                                              // 0x0030(0x0060)
    FTransform                                    Transform;                                                    // 0x0090(0x0060)
};


// ScriptStruct  HairStrandsCore.GroomCacheImportSettings
// Struct Size::0x0030
struct FGroomCacheImportSettings
{
    bool                                          bImportGroomCache;                                            // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    int32_t                                       FrameStart;                                                   // 0x0004(0x0004)
    int32_t                                       FrameEnd;                                                     // 0x0008(0x0004)
    bool                                          bSkipEmptyFrames;                                             // 0x000C(0x0001)
    bool                                          bImportGroomAsset;                                            // 0x000D(0x0001)
    char                                          pa_000E[0x0002]                                               // 0x000E(0x0002)
    FSoftObjectPath                               GroomAsset;                                                   // 0x0010(0x0020)
};


// ScriptStruct  HairStrandsCore.HairGroupDesc
// Struct Size::0x0040
struct FHairGroupDesc
{
    float                                         HairLength;                                                   // 0x0000(0x0004)
    float                                         HairWidth;                                                    // 0x0004(0x0004)
    bool                                          HairWidth;                                                    // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
    float                                         HairRootScale;                                                // 0x000C(0x0004)
    bool                                          HairRootScale;                                                // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
    float                                         HairTipScale;                                                 // 0x0014(0x0004)
    bool                                          HairTipScale;                                                 // 0x0018(0x0001)
    char                                          pa_0019[0x0003]                                               // 0x0019(0x0003)
    float                                         HairShadowDensity;                                            // 0x001C(0x0004)
    bool                                          HairShadowDensity;                                            // 0x0020(0x0001)
    char                                          pa_0021[0x0003]                                               // 0x0021(0x0003)
    float                                         HairRaytracingRadiusScale;                                    // 0x0024(0x0004)
    bool                                          HairRaytracingRadiusScale;                                    // 0x0028(0x0001)
    bool                                          bUseHairRaytracingGeometry;                                   // 0x0029(0x0001)
    bool                                          bUseHairRaytracingGeometry;                                   // 0x002A(0x0001)
    char                                          pa_002B[0x0001]                                               // 0x002B(0x0001)
    float                                         LODBias;                                                      // 0x002C(0x0004)
    bool                                          bUseStableRasterization;                                      // 0x0030(0x0001)
    bool                                          bUseStableRasterization;                                      // 0x0031(0x0001)
    bool                                          bScatterSceneLighting;                                        // 0x0032(0x0001)
    bool                                          bScatterSceneLighting;                                        // 0x0033(0x0001)
    bool                                          bSupportVoxelization;                                         // 0x0034(0x0001)
    bool                                          bSupportVoxelization;                                         // 0x0035(0x0001)
    char                                          pa_0036[0x0002]                                               // 0x0036(0x0002)
    float                                         HairLengthScale;                                              // 0x0038(0x0004)
    bool                                          HairLengthScale;                                              // 0x003C(0x0001)
    char                                          pa_003D[0x0003]                                               // 0x003D(0x0003)
};


// ScriptStruct  HairStrandsCore.HairGroupInfo
// Struct Size::0x0028
struct FHairGroupInfo
{
    int32_t                                       GroupID;                                                      // 0x0000(0x0004)
    FName                                         GroupName;                                                    // 0x0004(0x0008)
    int32_t                                       NumCurves;                                                    // 0x000C(0x0004)
    int32_t                                       NumGuides;                                                    // 0x0010(0x0004)
    int32_t                                       NumCurveVertices;                                             // 0x0014(0x0004)
    int32_t                                       NumGuideVertices;                                             // 0x0018(0x0004)
    float                                         MaxCurveLength;                                               // 0x001C(0x0004)
    float                                         MaxImportedWidth;                                             // 0x0020(0x0004)
    int32_t                                       GroupCardsID;                                                 // 0x0024(0x0004)
};


// ScriptStruct  HairStrandsCore.HairGroupsMaterial
// Struct Size::0x0010
struct FHairGroupsMaterial
{
    UMaterialInterface*                           Material;                                                     // 0x0000(0x0008)
    FName                                         SlotName;                                                     // 0x0008(0x0008)
};


// ScriptStruct  HairStrandsCore.HairGroupInfoWithVisibility
// Struct Size::0x002C
struct FHairGroupInfoWithVisibility : public FHairGroupInfo
{
    bool                                          bIsVisible;                                                   // 0x0028(0x0001)
    char                                          pa_0029[0x0003]                                               // 0x0029(0x0003)
};


// ScriptStruct  HairStrandsCore.HairCardsClusterSettings
// Struct Size::0x0008
struct FHairCardsClusterSettings
{
    float                                         ClusterDecimation;                                            // 0x0000(0x0004)
    enum class EHairCardsClusterType              Type;                                                         // 0x0004(0x0001)
    bool                                          bUseGuide;                                                    // 0x0005(0x0001)
    char                                          pa_0006[0x0002]                                               // 0x0006(0x0002)
};


// ScriptStruct  HairStrandsCore.HairCardsGeometrySettings
// Struct Size::0x001C
struct FHairCardsGeometrySettings
{
    enum class EHairCardsGenerationType           GenerationType;                                               // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    int32_t                                       CardsCount;                                                   // 0x0004(0x0004)
    enum class EHairCardsClusterType              ClusterType;                                                  // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
    float                                         MinSegmentLength;                                             // 0x000C(0x0004)
    float                                         AngularThreshold;                                             // 0x0010(0x0004)
    float                                         MinCardsLength;                                               // 0x0014(0x0004)
    float                                         MaxCardsLength;                                               // 0x0018(0x0004)
};


// ScriptStruct  HairStrandsCore.HairCardsTextureSettings
// Struct Size::0x0010
struct FHairCardsTextureSettings
{
    int32_t                                       AtlasMaxResolution;                                           // 0x0000(0x0004)
    int32_t                                       PixelPerCentimeters;                                          // 0x0004(0x0004)
    int32_t                                       LengthTextureCount;                                           // 0x0008(0x0004)
    int32_t                                       DensityTextureCount;                                          // 0x000C(0x0004)
};


// ScriptStruct  HairStrandsCore.HairGroupsProceduralCards
// Struct Size::0x0038
struct FHairGroupsProceduralCards
{
    FHairCardsClusterSettings                     ClusterSettings;                                              // 0x0000(0x0008)
    FHairCardsGeometrySettings                    GeometrySettings;                                             // 0x0008(0x001C)
    FHairCardsTextureSettings                     TextureSettings;                                              // 0x0024(0x0010)
    int32_t                                       Version;                                                      // 0x0034(0x0004)
};


// ScriptStruct  HairStrandsCore.HairGroupCardsInfo
// Struct Size::0x0008
struct FHairGroupCardsInfo
{
    int32_t                                       NumCards;                                                     // 0x0000(0x0004)
    int32_t                                       NumCardVertices;                                              // 0x0004(0x0004)
};


// ScriptStruct  HairStrandsCore.HairGroupCardsTextures
// Struct Size::0x0038
struct FHairGroupCardsTextures
{
    UTexture2D*                                   DepthTexture;                                                 // 0x0000(0x0008)
    UTexture2D*                                   CoverageTexture;                                              // 0x0008(0x0008)
    UTexture2D*                                   TangentTexture;                                               // 0x0010(0x0008)
    UTexture2D*                                   AttributeTexture;                                             // 0x0018(0x0008)
    UTexture2D*                                   AuxilaryDataTexture;                                          // 0x0020(0x0008)
    UTexture2D*                                   MaterialTexture;                                              // 0x0028(0x0008)
    char                                          pa_0030[0x0008]                                               // 0x0030(0x0008)
};


// ScriptStruct  HairStrandsCore.HairGroupsCardsSourceDescription
// Struct Size::0x00C8
struct FHairGroupsCardsSourceDescription
{
    UMaterialInterface*                           Material;                                                     // 0x0000(0x0008)
    FName                                         MaterialSlotName;                                             // 0x0008(0x0008)
    enum class EHairCardsSourceType               SourceType;                                                   // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
    UStaticMesh*                                  ProceduralMesh;                                               // 0x0018(0x0008)
    FString                                       ProceduralMeshKey;                                            // 0x0020(0x0010)
    UStaticMesh*                                  ImportedMesh;                                                 // 0x0030(0x0008)
    FHairGroupsProceduralCards                    ProceduralSettings;                                           // 0x0038(0x0038)
    FHairGroupCardsTextures                       Textures;                                                     // 0x0070(0x0038)
    int32_t                                       GroupIndex;                                                   // 0x00A8(0x0004)
    int32_t                                       LODIndex;                                                     // 0x00AC(0x0004)
    FHairGroupCardsInfo                           CardsInfo;                                                    // 0x00B0(0x0008)
    FString                                       ImportedMeshKey;                                              // 0x00B8(0x0010)
};


// ScriptStruct  HairStrandsCore.HairLODSettings
// Struct Size::0x001C
struct FHairLODSettings
{
    float                                         CurveDecimation;                                              // 0x0000(0x0004)
    float                                         VertexDecimation;                                             // 0x0004(0x0004)
    float                                         AngularThreshold;                                             // 0x0008(0x0004)
    float                                         ScreenSize;                                                   // 0x000C(0x0004)
    float                                         ThicknessScale;                                               // 0x0010(0x0004)
    bool                                          bVisible;                                                     // 0x0014(0x0001)
    enum class EGroomGeometryType                 GeometryType;                                                 // 0x0015(0x0001)
    enum class EGroomBindingType                  BindingType;                                                  // 0x0016(0x0001)
    enum class EGroomOverrideType                 Simulation;                                                   // 0x0017(0x0001)
    enum class EGroomOverrideType                 GlobalInterpolation;                                          // 0x0018(0x0001)
    char                                          pa_0019[0x0003]                                               // 0x0019(0x0003)
};


// ScriptStruct  HairStrandsCore.HairDecimationSettings
// Struct Size::0x0008
struct FHairDecimationSettings
{
    float                                         CurveDecimation;                                              // 0x0000(0x0004)
    float                                         VertexDecimation;                                             // 0x0004(0x0004)
};


// ScriptStruct  HairStrandsCore.HairInterpolationSettings
// Struct Size::0x000C
struct FHairInterpolationSettings
{
    bool                                          bOverrideGuides;                                              // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         HairToGuideDensity;                                           // 0x0004(0x0004)
    enum class EHairInterpolationQuality          InterpolationQuality;                                         // 0x0008(0x0001)
    enum class EHairInterpolationWeight           InterpolationDistance;                                        // 0x0009(0x0001)
    bool                                          bRandomizeGuide;                                              // 0x000A(0x0001)
    bool                                          bUseUniqueGuide;                                              // 0x000B(0x0001)
};


// ScriptStruct  HairStrandsCore.HairDeformationSettings
// Struct Size::0x000C
struct FHairDeformationSettings
{
    bool                                          bCanEditRigging;                                              // 0x0000(0x0001)
    bool                                          bEnableRigging;                                               // 0x0001(0x0001)
    char                                          pa_0002[0x0002]                                               // 0x0002(0x0002)
    int32_t                                       NumCurves;                                                    // 0x0004(0x0004)
    int32_t                                       NumPoints;                                                    // 0x0008(0x0004)
};


// ScriptStruct  HairStrandsCore.HairGroupsInterpolation
// Struct Size::0x0020
struct FHairGroupsInterpolation
{
    FHairDecimationSettings                       DecimationSettings;                                           // 0x0000(0x0008)
    FHairInterpolationSettings                    InterpolationSettings;                                        // 0x0008(0x000C)
    FHairDeformationSettings                      RiggingSettings;                                              // 0x0014(0x000C)
};


// ScriptStruct  HairStrandsCore.HairGroupsLOD
// Struct Size::0x0018
struct FHairGroupsLOD
{
    TArray<FHairLODSettings>                      LODs;                                                         // 0x0000(0x0010)
    float                                         ClusterWorldSize;                                             // 0x0010(0x0004)
    float                                         ClusterScreenSizeScale;                                       // 0x0014(0x0004)
};


// ScriptStruct  HairStrandsCore.HairGroupsMeshesSourceDescription
// Struct Size::0x0068
struct FHairGroupsMeshesSourceDescription
{
    UMaterialInterface*                           Material;                                                     // 0x0000(0x0008)
    FName                                         MaterialSlotName;                                             // 0x0008(0x0008)
    UStaticMesh*                                  ImportedMesh;                                                 // 0x0010(0x0008)
    FHairGroupCardsTextures                       Textures;                                                     // 0x0018(0x0038)
    int32_t                                       GroupIndex;                                                   // 0x0050(0x0004)
    int32_t                                       LODIndex;                                                     // 0x0054(0x0004)
    FString                                       ImportedMeshKey;                                              // 0x0058(0x0010)
};


// ScriptStruct  HairStrandsCore.HairSolverSettings
// Struct Size::0x0048
struct FHairSolverSettings
{
    bool                                          EnableSimulation;                                             // 0x0000(0x0001)
    enum class EGroomNiagaraSolvers               NiagaraSolver;                                                // 0x0001(0x0001)
    char                                          pa_0002[0x0006]                                               // 0x0002(0x0006)
    TSoftObjectPtr<UNiagaraSystem>                CustomSystem;                                                 // 0x0008(0x0030)
    float                                         GravityPreloading;                                            // 0x0038(0x0004)
    int32_t                                       SubSteps;                                                     // 0x003C(0x0004)
    int32_t                                       IterationCount;                                               // 0x0040(0x0004)
    char                                          pa_0044[0x0004]                                               // 0x0044(0x0004)
};


// ScriptStruct  HairStrandsCore.HairExternalForces
// Struct Size::0x0038
struct FHairExternalForces
{
    FVector                                       GravityVector;                                                // 0x0000(0x0018)
    float                                         AirDrag;                                                      // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    FVector                                       AirVelocity;                                                  // 0x0020(0x0018)
};


// ScriptStruct  HairStrandsCore.HairBendConstraint
// Struct Size::0x0098
struct FHairBendConstraint
{
    bool                                          SolveBend;                                                    // 0x0000(0x0001)
    bool                                          ProjectBend;                                                  // 0x0001(0x0001)
    char                                          pa_0002[0x0002]                                               // 0x0002(0x0002)
    float                                         BendDamping;                                                  // 0x0004(0x0004)
    float                                         BendStiffness;                                                // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FRuntimeFloatCurve                            BendScale;                                                    // 0x0010(0x0088)
};


// ScriptStruct  HairStrandsCore.HairStretchConstraint
// Struct Size::0x0098
struct FHairStretchConstraint
{
    bool                                          SolveStretch;                                                 // 0x0000(0x0001)
    bool                                          ProjectStretch;                                               // 0x0001(0x0001)
    char                                          pa_0002[0x0002]                                               // 0x0002(0x0002)
    float                                         StretchDamping;                                               // 0x0004(0x0004)
    float                                         StretchStiffness;                                             // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FRuntimeFloatCurve                            StretchScale;                                                 // 0x0010(0x0088)
};


// ScriptStruct  HairStrandsCore.HairCollisionConstraint
// Struct Size::0x00A8
struct FHairCollisionConstraint
{
    bool                                          SolveCollision;                                               // 0x0000(0x0001)
    bool                                          ProjectCollision;                                             // 0x0001(0x0001)
    char                                          pa_0002[0x0002]                                               // 0x0002(0x0002)
    float                                         StaticFriction;                                               // 0x0004(0x0004)
    float                                         KineticFriction;                                              // 0x0008(0x0004)
    float                                         StrandsViscosity;                                             // 0x000C(0x0004)
    FIntVector                                    GridDimension;                                                // 0x0010(0x000C)
    float                                         CollisionRadius;                                              // 0x001C(0x0004)
    FRuntimeFloatCurve                            RadiusScale;                                                  // 0x0020(0x0088)
};


// ScriptStruct  HairStrandsCore.HairMaterialConstraints
// Struct Size::0x01D8
struct FHairMaterialConstraints
{
    FHairBendConstraint                           BendConstraint;                                               // 0x0000(0x0098)
    FHairStretchConstraint                        StretchConstraint;                                            // 0x0098(0x0098)
    FHairCollisionConstraint                      CollisionConstraint;                                          // 0x0130(0x00A8)
};


// ScriptStruct  HairStrandsCore.HairStrandsParameters
// Struct Size::0x0098
struct FHairStrandsParameters
{
    enum class EGroomStrandsSize                  StrandsSize;                                                  // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         StrandsDensity;                                               // 0x0004(0x0004)
    float                                         StrandsSmoothing;                                             // 0x0008(0x0004)
    float                                         StrandsThickness;                                             // 0x000C(0x0004)
    FRuntimeFloatCurve                            ThicknessScale;                                               // 0x0010(0x0088)
};


// ScriptStruct  HairStrandsCore.HairGroupsPhysics
// Struct Size::0x02F0
struct FHairGroupsPhysics
{
    FHairSolverSettings                           SolverSettings;                                               // 0x0000(0x0048)
    FHairExternalForces                           ExternalForces;                                               // 0x0048(0x0038)
    FHairMaterialConstraints                      MaterialConstraints;                                          // 0x0080(0x01D8)
    FHairStrandsParameters                        StrandsParameters;                                            // 0x0258(0x0098)
};


// ScriptStruct  HairStrandsCore.HairSimulationSolver
// Struct Size::0x0001
struct FHairSimulationSolver
{
    bool                                          bEnableSimulation;                                            // 0x0000(0x0001)
};


// ScriptStruct  HairStrandsCore.HairSimulationForces
// Struct Size::0x0038
struct FHairSimulationForces
{
    FVector                                       GravityVector;                                                // 0x0000(0x0018)
    float                                         AirDrag;                                                      // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    FVector                                       AirVelocity;                                                  // 0x0020(0x0018)
};


// ScriptStruct  HairStrandsCore.HairSimulationConstraints
// Struct Size::0x0020
struct FHairSimulationConstraints
{
    float                                         BendDamping;                                                  // 0x0000(0x0004)
    float                                         BendStiffness;                                                // 0x0004(0x0004)
    float                                         StretchDamping;                                               // 0x0008(0x0004)
    float                                         StretchStiffness;                                             // 0x000C(0x0004)
    float                                         StaticFriction;                                               // 0x0010(0x0004)
    float                                         KineticFriction;                                              // 0x0014(0x0004)
    float                                         StrandsViscosity;                                             // 0x0018(0x0004)
    float                                         CollisionRadius;                                              // 0x001C(0x0004)
};


// ScriptStruct  HairStrandsCore.HairSimulationSetup
// Struct Size::0x0028
struct FHairSimulationSetup
{
    bool                                          bResetSimulation;                                             // 0x0000(0x0001)
    bool                                          bDebugSimulation;                                             // 0x0001(0x0001)
    bool                                          bLocalSimulation;                                             // 0x0002(0x0001)
    char                                          pa_0003[0x0001]                                               // 0x0003(0x0001)
    float                                         LinearVelocityScale;                                          // 0x0004(0x0004)
    float                                         AngularVelocityScale;                                         // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FString                                       LocalBone;                                                    // 0x0010(0x0010)
    float                                         TeleportDistance;                                             // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
};


// ScriptStruct  HairStrandsCore.HairSimulationSettings
// Struct Size::0x0090
struct FHairSimulationSettings
{
    bool                                          bOverrideSettings;                                            // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    FHairSimulationSetup                          SimulationSetup;                                              // 0x0008(0x0028)
    FHairSimulationSolver                         SolverSettings;                                               // 0x0030(0x0001)
    char                                          pa_0031[0x0007]                                               // 0x0031(0x0007)
    FHairSimulationForces                         ExternalForces;                                               // 0x0038(0x0038)
    FHairSimulationConstraints                    MaterialConstraints;                                          // 0x0070(0x0020)
};


// ScriptStruct  HairStrandsCore.HairGeometrySettings
// Struct Size::0x000C
struct FHairGeometrySettings
{
    float                                         HairWidth;                                                    // 0x0000(0x0004)
    float                                         HairRootScale;                                                // 0x0004(0x0004)
    float                                         HairTipScale;                                                 // 0x0008(0x0004)
};


// ScriptStruct  HairStrandsCore.HairShadowSettings
// Struct Size::0x000C
struct FHairShadowSettings
{
    float                                         HairShadowDensity;                                            // 0x0000(0x0004)
    float                                         HairRaytracingRadiusScale;                                    // 0x0004(0x0004)
    bool                                          bUseHairRaytracingGeometry;                                   // 0x0008(0x0001)
    bool                                          bVoxelize;                                                    // 0x0009(0x0001)
    char                                          pa_000A[0x0002]                                               // 0x000A(0x0002)
};


// ScriptStruct  HairStrandsCore.HairAdvancedRenderingSettings
// Struct Size::0x0002
struct FHairAdvancedRenderingSettings
{
    bool                                          bUseStableRasterization;                                      // 0x0000(0x0001)
    bool                                          bScatterSceneLighting;                                        // 0x0001(0x0001)
};


// ScriptStruct  HairStrandsCore.HairGroupsRendering
// Struct Size::0x0030
struct FHairGroupsRendering
{
    FName                                         MaterialSlotName;                                             // 0x0000(0x0008)
    UMaterialInterface*                           Material;                                                     // 0x0008(0x0008)
    FHairGeometrySettings                         GeometrySettings;                                             // 0x0010(0x000C)
    FHairShadowSettings                           ShadowSettings;                                               // 0x001C(0x000C)
    FHairAdvancedRenderingSettings                AdvancedSettings;                                             // 0x0028(0x0002)
    char                                          pa_002A[0x0006]                                               // 0x002A(0x0006)
};


// ScriptStruct  HairStrandsCore.GoomBindingGroupInfo
// Struct Size::0x0010
struct FGoomBindingGroupInfo
{
    int32_t                                       RenRootCount;                                                 // 0x0000(0x0004)
    int32_t                                       RenLODCount;                                                  // 0x0004(0x0004)
    int32_t                                       SimRootCount;                                                 // 0x0008(0x0004)
    int32_t                                       SimLODCount;                                                  // 0x000C(0x0004)
};


// ScriptStruct  HairStrandsCore.GroomAnimationInfo
// Struct Size::0x0020
struct FGroomAnimationInfo
{
    uint32_t                                      NumFrames;                                                    // 0x0000(0x0004)
    float                                         SecondsPerFrame;                                              // 0x0004(0x0004)
    float                                         Duration;                                                     // 0x0008(0x0004)
    float                                         StartTime;                                                    // 0x000C(0x0004)
    float                                         EndTime;                                                      // 0x0010(0x0004)
    int32_t                                       StartFrame;                                                   // 0x0014(0x0004)
    int32_t                                       EndFrame;                                                     // 0x0018(0x0004)
    enum class EGroomCacheAttributes              Attributes;                                                   // 0x001C(0x0001)
    char                                          pa_001D[0x0003]                                               // 0x001D(0x0003)
};


// ScriptStruct  HairStrandsCore.GroomCacheInfo
// Struct Size::0x0028
struct FGroomCacheInfo
{
    int32_t                                       Version;                                                      // 0x0000(0x0004)
    enum class EGroomCacheType                    Type;                                                         // 0x0004(0x0001)
    char                                          pa_0005[0x0003]                                               // 0x0005(0x0003)
    FGroomAnimationInfo                           AnimationInfo;                                                // 0x0008(0x0020)
};


// ScriptStruct  HairStrandsCore.FollicleMaskOptions
// Struct Size::0x0010
struct FFollicleMaskOptions
{
    UGroomAsset*                                  Groom;                                                        // 0x0000(0x0008)
    enum class EFollicleMaskChannel               Channel;                                                      // 0x0008(0x0001)
    char                                          pa_0009[0x0007]                                               // 0x0009(0x0007)
};


// ScriptStruct  HairStrandsCore.GroomHairGroupPreview
// Struct Size::0x0038
struct FGroomHairGroupPreview
{
    FName                                         GroupName;                                                    // 0x0000(0x0008)
    int32_t                                       GroupID;                                                      // 0x0008(0x0004)
    int32_t                                       CurveCount;                                                   // 0x000C(0x0004)
    int32_t                                       GuideCount;                                                   // 0x0010(0x0004)
    bool                                          bHasRootUV;                                                   // 0x0014(0x0001)
    bool                                          bHasColorAttributes;                                          // 0x0015(0x0001)
    bool                                          bHasRoughnessAttributes;                                      // 0x0016(0x0001)
    bool                                          bHasPrecomputedWeights;                                       // 0x0017(0x0001)
    FHairGroupsInterpolation                      InterpolationSettings;                                        // 0x0018(0x0020)
};


// ScriptStruct  HairStrandsCore.GroomConversionSettings
// Struct Size::0x0030
struct FGroomConversionSettings
{
    FVector                                       Rotation;                                                     // 0x0000(0x0018)
    FVector                                       Scale;                                                        // 0x0018(0x0018)
};


// ScriptStruct  HairStrandsCore.GroomBuildSettings
// Struct Size::0x000C
struct FGroomBuildSettings
{
    bool                                          bOverrideGuides;                                              // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         HairToGuideDensity;                                           // 0x0004(0x0004)
    enum class EGroomInterpolationQuality         InterpolationQuality;                                         // 0x0008(0x0001)
    enum class EGroomInterpolationWeight          InterpolationDistance;                                        // 0x0009(0x0001)
    bool                                          bRandomizeGuide;                                              // 0x000A(0x0001)
    bool                                          bUseUniqueGuide;                                              // 0x000B(0x0001)
};


// ScriptStruct  HairStrandsCore.MovieSceneGroomCacheParams
// Struct Size::0x0020
struct FMovieSceneGroomCacheParams
{
    UGroomCache*                                  GroomCache;                                                   // 0x0000(0x0008)
    FFrameNumber                                  FirstLoopStartFrameOffset;                                    // 0x0008(0x0004)
    FFrameNumber                                  StartFrameOffset;                                             // 0x000C(0x0004)
    FFrameNumber                                  EndFrameOffset;                                               // 0x0010(0x0004)
    float                                         PlayRate;                                                     // 0x0014(0x0004)
    char                                          bReverse;                                                     // 0x0018(0x0001)
    char                                          pa_0019[0x0007]                                               // 0x0019(0x0007)
};


// ScriptStruct  HairStrandsCore.MovieSceneGroomCacheSectionTemplateParameters
// Struct Size::0x0028
struct FMovieSceneGroomCacheSectionTemplateParameters : public FMovieSceneGroomCacheParams
{
    FFrameNumber                                  SectionStartTime;                                             // 0x0020(0x0004)
    FFrameNumber                                  SectionEndTime;                                               // 0x0024(0x0004)
};


// ScriptStruct  HairStrandsCore.MovieSceneGroomCacheSectionTemplate
// Struct Size::0x0048
struct FMovieSceneGroomCacheSectionTemplate : public FMovieSceneEvalTemplate
{
    FMovieSceneGroomCacheSectionTemplateParametersParams;                                                       // 0x0020(0x0028)
};


// ScriptStruct  GeometryCache.TrackRenderData
// Struct Size::0x00C0
struct FTrackRenderData
{
    char                                          pa_0000[0x00C0]                                               // 0x0000(0x00C0)
};


// ScriptStruct  GeometryCache.GeometryCacheMeshBatchInfo
// Struct Size::0x000C
struct FGeometryCacheMeshBatchInfo
{
    char                                          pa_0000[0x000C]                                               // 0x0000(0x000C)
};


// ScriptStruct  GeometryCache.GeometryCacheVertexInfo
// Struct Size::0x0009
struct FGeometryCacheVertexInfo
{
    char                                          pa_0000[0x0009]                                               // 0x0000(0x0009)
};


// ScriptStruct  GeometryCache.GeometryCacheMeshData
// Struct Size::0x00C8
struct FGeometryCacheMeshData
{
    char                                          pa_0000[0x00C8]                                               // 0x0000(0x00C8)
};


// ScriptStruct  GeometryCache.NiagaraGeometryCacheReference
// Struct Size::0x0038
struct FNiagaraGeometryCacheReference
{
    UGeometryCache*                               GeometryCache;                                                // 0x0000(0x0008)
    FNiagaraUserParameterBinding                  GeometryCacheUserParamBinding;                                // 0x0008(0x0020)
    TArray<UMaterialInterface*>                   OverrideMaterials;                                            // 0x0028(0x0010)
};


// ScriptStruct  GeometryCacheTracks.MovieSceneGeometryCacheParams
// Struct Size::0x0048
struct FMovieSceneGeometryCacheParams
{
    UGeometryCache*                               GeometryCacheAsset;                                           // 0x0000(0x0008)
    FFrameNumber                                  FirstLoopStartFrameOffset;                                    // 0x0008(0x0004)
    FFrameNumber                                  StartFrameOffset;                                             // 0x000C(0x0004)
    FFrameNumber                                  EndFrameOffset;                                               // 0x0010(0x0004)
    float                                         PlayRate;                                                     // 0x0014(0x0004)
    char                                          bReverse;                                                     // 0x0018(0x0001)
    char                                          pa_0019[0x0003]                                               // 0x0019(0x0003)
    float                                         StartOffset;                                                  // 0x001C(0x0004)
    float                                         EndOffset;                                                    // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
    FSoftObjectPath                               GeometryCache;                                                // 0x0028(0x0020)
};


// ScriptStruct  GeometryCacheTracks.MovieSceneGeometryCacheSectionTemplateParameters
// Struct Size::0x0050
struct FMovieSceneGeometryCacheSectionTemplateParameters : public FMovieSceneGeometryCacheParams
{
    FFrameNumber                                  SectionStartTime;                                             // 0x0048(0x0004)
    FFrameNumber                                  SectionEndTime;                                               // 0x004C(0x0004)
};


// ScriptStruct  GeometryCacheTracks.MovieSceneGeometryCacheSectionTemplate
// Struct Size::0x0070
struct FMovieSceneGeometryCacheSectionTemplate : public FMovieSceneEvalTemplate
{
    FMovieSceneGeometryCacheSectionTemplateParametersParams;                                                    // 0x0020(0x0050)
};


// ScriptStruct  AppleARKitFaceSupport.NetQuantizeFaceCurve
// Struct Size::0x0002
struct FNetQuantizeFaceCurve
{
    char                                          pa_0000[0x0002]                                               // 0x0000(0x0002)
};


// ScriptStruct  AppleARKit.AppleARKitCamera
// Struct Size::0x00E0
struct FAppleARKitCamera
{
    enum class EARTrackingQuality                 TrackingQuality;                                              // 0x0000(0x0001)
    enum class EARTrackingQualityReason           TrackingQualityReason;                                        // 0x0001(0x0001)
    char                                          pa_0002[0x000E]                                               // 0x0002(0x000E)
    FTransform                                    Transform;                                                    // 0x0010(0x0060)
    FQuat                                         Orientation;                                                  // 0x0070(0x0020)
    FVector                                       Translation;                                                  // 0x0090(0x0018)
    FVector2D                                     ImageResolution;                                              // 0x00A8(0x0010)
    FVector2D                                     FocalLength;                                                  // 0x00B8(0x0010)
    FVector2D                                     PrincipalPoint;                                               // 0x00C8(0x0010)
    char                                          pa_00D8[0x0008]                                               // 0x00D8(0x0008)
};


// ScriptStruct  AppleARKit.AppleARKitFrame
// Struct Size::0x0160
struct FAppleARKitFrame
{
    char                                          pa_0000[0x0160]                                               // 0x0000(0x0160)
};


// ScriptStruct  AppleARKit.AppleARKitLightEstimate
// Struct Size::0x000C
struct FAppleARKitLightEstimate
{
    bool                                          bIsValid;                                                     // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         AmbientIntensity;                                             // 0x0004(0x0004)
    float                                         AmbientColorTemperatureKelvin;                                // 0x0008(0x0004)
};


// ScriptStruct  ARUtilities.ARKitPoseTrackingConfig
// Struct Size::0x0030
struct FARKitPoseTrackingConfig
{
    FVector                                       HumanForward;                                                 // 0x0000(0x0018)
    FVector                                       MeshForward;                                                  // 0x0018(0x0018)
};


// ScriptStruct  ProceduralMeshComponent.ProcMeshTangent
// Struct Size::0x0020
struct FProcMeshTangent
{
    FVector                                       TangentX;                                                     // 0x0000(0x0018)
    bool                                          bFlipTangentY;                                                // 0x0018(0x0001)
    char                                          pa_0019[0x0007]                                               // 0x0019(0x0007)
};


// ScriptStruct  ProceduralMeshComponent.ProcMeshVertex
// Struct Size::0x0098
struct FProcMeshVertex
{
    FVector                                       position;                                                     // 0x0000(0x0018)
    FVector                                       Normal;                                                       // 0x0018(0x0018)
    FProcMeshTangent                              Tangent;                                                      // 0x0030(0x0020)
    FColor                                        Color;                                                        // 0x0050(0x0004)
    char                                          pa_0054[0x0004]                                               // 0x0054(0x0004)
    FVector2D                                     UV0;                                                          // 0x0058(0x0010)
    FVector2D                                     UV1;                                                          // 0x0068(0x0010)
    FVector2D                                     UV2;                                                          // 0x0078(0x0010)
    FVector2D                                     UV3;                                                          // 0x0088(0x0010)
};


// ScriptStruct  ProceduralMeshComponent.ProcMeshSection
// Struct Size::0x0060
struct FProcMeshSection
{
    TArray<FProcMeshVertex>                       ProcVertexBuffer;                                             // 0x0000(0x0010)
    TArray<uint32_t>                              ProcIndexBuffer;                                              // 0x0010(0x0010)
    FBox                                          SectionLocalBox;                                              // 0x0020(0x0038)
    bool                                          bEnableCollision;                                             // 0x0058(0x0001)
    bool                                          bSectionVisible;                                              // 0x0059(0x0001)
    char                                          pa_005A[0x0006]                                               // 0x005A(0x0006)
};


// ScriptStruct  AGRPRO.AGRDebuggerSettingsKey
// Struct Size::0x0020
struct FAGRDebuggerSettingsKey
{
    FKey                                          InputKey;                                                     // 0x0000(0x0018)
    bool                                          bControl;                                                     // 0x0018(0x0001)
    bool                                          bAlt;                                                         // 0x0019(0x0001)
    bool                                          bShift;                                                       // 0x001A(0x0001)
    bool                                          bCommand;                                                     // 0x001B(0x0001)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  AGRPRO.Equipment
// Struct Size::0x0030
struct FEquipment
{
    FName                                         ID;                                                           // 0x0000(0x0008)
    FGameplayTagContainer                         AcceptableSlots;                                              // 0x0008(0x0020)
    AActor*                                       ItemActor;                                                    // 0x0028(0x0008)
};


// ScriptStruct  AGRPRO.AGRDebugProp
// Struct Size::0x0018
struct FAGRDebugProp
{
    char                                          pa_0000[0x0018]                                               // 0x0000(0x0018)
};


// ScriptStruct  AGRPRO.AGRPropContainer
// Struct Size::0x0018
struct FAGRPropContainer
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
    UVerticalBox*                                 Container;                                                    // 0x0010(0x0008)
};


// ScriptStruct  AGRPRO.AGRAttackNotifyStateDataExtra
// Struct Size::0x0028
struct FAGRAttackNotifyStateDataExtra
{
    bool                                          UseExtraData;                                                 // 0x0000(0x0001)
    bool                                          CenterOverrideStart;                                          // 0x0001(0x0001)
    char                                          pa_0002[0x0006]                                               // 0x0002(0x0006)
    TArray<float>                                 ZOffsets;                                                     // 0x0008(0x0010)
    bool                                          CheckChildFirst;                                              // 0x0018(0x0001)
    char                                          pa_0019[0x0003]                                               // 0x0019(0x0003)
    float                                         StartOffset;                                                  // 0x001C(0x0004)
    float                                         EndOffset;                                                    // 0x0020(0x0004)
    bool                                          ForceUseOldHit;                                               // 0x0024(0x0001)
    char                                          pa_0025[0x0003]                                               // 0x0025(0x0003)
};


// ScriptStruct  AGRPRO.AGRTraceData
// Struct Size::0x0140
struct FAGRTraceData
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
    bool                                          UseConfig;                                                    // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
    FName                                         StartSocketTraceName;                                         // 0x0014(0x0008)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    FTransform                                    StartSocketOffset;                                            // 0x0020(0x0060)
    FName                                         EndSocketTraceName;                                           // 0x0080(0x0008)
    char                                          pa_0088[0x0008]                                               // 0x0088(0x0008)
    FTransform                                    EndSocketOffset;                                              // 0x0090(0x0060)
    FName                                         SocketAttachParentName;                                       // 0x00F0(0x0008)
    enum class EAGR                               CollisionHandling;                                            // 0x00F8(0x0001)
    char                                          pa_00F9[0x0017]                                               // 0x00F9(0x0017)
    bool                                          NeedExtraSocketOffset;                                        // 0x0110(0x0001)
    char                                          pa_0111[0x002F]                                               // 0x0111(0x002F)
};


// ScriptStruct  TGFBattleProtocol.TGFPbDataGoogleProtobufAny
// Struct Size::0x0010
struct FTGFPbDataGoogleProtobufAny
{
    FString                                       TypeUrl;                                                      // 0x0000(0x0010)
};


// ScriptStruct  TGFBattleProtocol.TGFPbDataTgfDBattleAffixDisplayDataMinorAffixDefaultRule
// Struct Size::0x0018
struct FTGFPbDataTgfDBattleAffixDisplayDataMinorAffixDefaultRule
{
    FString                                       Text;                                                         // 0x0000(0x0010)
    int32_t                                       GroupOrder;                                                   // 0x0010(0x0004)
    bool                                          Init;                                                         // 0x0014(0x0001)
    char                                          pa_0015[0x0003]                                               // 0x0015(0x0003)
};


// ScriptStruct  TGFBattleProtocol.TGFPbDataTgfDBattleAffixDisplayDataRandomFloat
// Struct Size::0x000C
struct FTGFPbDataTgfDBattleAffixDisplayDataRandomFloat
{
    float                                         CurrentValue;                                                 // 0x0000(0x0004)
    float                                         RandomValueMin;                                               // 0x0004(0x0004)
    float                                         RandomValueMax;                                               // 0x0008(0x0004)
};


// ScriptStruct  TGFBattleProtocol.TGFPbDataTgfDBattleAffixDisplayDataAttribute
// Struct Size::0x0040
struct FTGFPbDataTgfDBattleAffixDisplayDataAttribute
{
    enum class ETGFProtoTgfDBattleAffixDisplayDataAttributeValueValue;                                          // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    int32_t                                       ID;                                                           // 0x0004(0x0004)
    int32_t                                       DisplayOrder;                                                 // 0x0008(0x0004)
    int32_t                                       RoleDisplayOrder;                                             // 0x000C(0x0004)
    FString                                       Name;                                                         // 0x0010(0x0010)
    bool                                          DisplayPercentage;                                            // 0x0020(0x0001)
    char                                          pa_0021[0x0003]                                               // 0x0021(0x0003)
    int32_t                                       GroupOrder;                                                   // 0x0024(0x0004)
    FTGFPbDataTgfDBattleAffixDisplayDataRandomFloatRandom;                                                      // 0x0028(0x000C)
    float                                         Fixed;                                                        // 0x0034(0x0004)
    bool                                          IsCorruption;                                                 // 0x0038(0x0001)
    bool                                          Init;                                                         // 0x0039(0x0001)
    char                                          pa_003A[0x0006]                                               // 0x003A(0x0006)
};


// ScriptStruct  TGFBattleProtocol.TGFPbDataTgfDBattleAffixDisplayDataRandomInt
// Struct Size::0x000C
struct FTGFPbDataTgfDBattleAffixDisplayDataRandomInt
{
    int32_t                                       CurrentValue;                                                 // 0x0000(0x0004)
    int32_t                                       RandomValueMin;                                               // 0x0004(0x0004)
    int32_t                                       RandomValueMax;                                               // 0x0008(0x0004)
};


// ScriptStruct  TGFBattleProtocol.TGFPbDataTgfDBattleAffixDisplayDataGearSet
// Struct Size::0x0038
struct FTGFPbDataTgfDBattleAffixDisplayDataGearSet
{
    enum class ETGFProtoTgfDBattleAffixDisplayDataGearSetValueValue;                                            // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    int32_t                                       ID;                                                           // 0x0004(0x0004)
    int32_t                                       DisplayOrder;                                                 // 0x0008(0x0004)
    int32_t                                       RoleDisplayOrder;                                             // 0x000C(0x0004)
    FString                                       Name;                                                         // 0x0010(0x0010)
    int32_t                                       GroupOrder;                                                   // 0x0020(0x0004)
    FTGFPbDataTgfDBattleAffixDisplayDataRandomInt Random;                                                       // 0x0024(0x000C)
    int32_t                                       Fixed;                                                        // 0x0030(0x0004)
    bool                                          Init;                                                         // 0x0034(0x0001)
    char                                          pa_0035[0x0003]                                               // 0x0035(0x0003)
};


// ScriptStruct  TGFBattleProtocol.TGFPbDataTgfDBattleAffixDisplayDataAttrGearSet
// Struct Size::0x0080
struct FTGFPbDataTgfDBattleAffixDisplayDataAttrGearSet
{
    enum class ETGFProtoTgfDBattleAffixDisplayDataAttrGearSetAffixAffix;                                        // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    FTGFPbDataTgfDBattleAffixDisplayDataAttribute Attribute;                                                    // 0x0008(0x0040)
    FTGFPbDataTgfDBattleAffixDisplayDataGearSet   GearSet;                                                      // 0x0048(0x0038)
};


// ScriptStruct  TGFBattleProtocol.TGFPbDataTgfDBattleAffixDisplayDataGemSlot
// Struct Size::0x0028
struct FTGFPbDataTgfDBattleAffixDisplayDataGemSlot
{
    int32_t                                       GemShapeType;                                                 // 0x0000(0x0004)
    int32_t                                       GemId;                                                        // 0x0004(0x0004)
    int32_t                                       SlotId;                                                       // 0x0008(0x0004)
    bool                                          GemDisable;                                                   // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
    TArray<FTGFPbDataTgfDBattleAffixDisplayDataAttrGearSet>GemAttributeDisplay;                                 // 0x0010(0x0010)
    bool                                          Init;                                                         // 0x0020(0x0001)
    char                                          pa_0021[0x0007]                                               // 0x0021(0x0007)
};


// ScriptStruct  TGFBattleProtocol.TGFPbDataTgfDBattleAffixDisplayDataAbilitySet
// Struct Size::0x0038
struct FTGFPbDataTgfDBattleAffixDisplayDataAbilitySet
{
    enum class ETGFProtoTgfDBattleAffixDisplayDataAbilitySetValueValue;                                         // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    int32_t                                       ID;                                                           // 0x0004(0x0004)
    int32_t                                       DisplayOrder;                                                 // 0x0008(0x0004)
    int32_t                                       RoleDisplayOrder;                                             // 0x000C(0x0004)
    FString                                       Name;                                                         // 0x0010(0x0010)
    int32_t                                       GroupOrder;                                                   // 0x0020(0x0004)
    FTGFPbDataTgfDBattleAffixDisplayDataRandomInt Random;                                                       // 0x0024(0x000C)
    int32_t                                       Fixed;                                                        // 0x0030(0x0004)
    bool                                          Init;                                                         // 0x0034(0x0001)
    char                                          pa_0035[0x0003]                                               // 0x0035(0x0003)
};


// ScriptStruct  TGFBattleProtocol.TGFPbDataTgfDBattleAffixDisplayData
// Struct Size::0x0100
struct FTGFPbDataTgfDBattleAffixDisplayData
{
    enum class ETGFProtoTgfDBattleAffixDisplayDataDataData;                                                     // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    int32_t                                       Location;                                                     // 0x0004(0x0004)
    int32_t                                       AffixType;                                                    // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FTGFPbDataTgfDBattleAffixDisplayDataAbilitySetAbilitySet;                                                   // 0x0010(0x0038)
    FTGFPbDataTgfDBattleAffixDisplayDataAttribute Attribute;                                                    // 0x0048(0x0040)
    FTGFPbDataTgfDBattleAffixDisplayDataMinorAffixDefaultRuleMinorAffixDefaultRule;                             // 0x0088(0x0018)
    FTGFPbDataTgfDBattleAffixDisplayDataGemSlot   GemSlot;                                                      // 0x00A0(0x0028)
    FTGFPbDataTgfDBattleAffixDisplayDataGearSet   GearSet;                                                      // 0x00C8(0x0038)
};


// ScriptStruct  TGFBattleProtocol.TGFPbDataTgfDItemGemSlot
// Struct Size::0x000C
struct FTGFPbDataTgfDItemGemSlot
{
    int32_t                                       SlotId;                                                       // 0x0000(0x0004)
    int32_t                                       GemId;                                                        // 0x0004(0x0004)
    int32_t                                       AffixLocation;                                                // 0x0008(0x0004)
};


// ScriptStruct  TGFBattleProtocol.TGFPbDataTgfDItemGem
// Struct Size::0x0010
struct FTGFPbDataTgfDItemGem
{
    TArray<FTGFPbDataTgfDItemGemSlot>             SlotData;                                                     // 0x0000(0x0010)
};


// ScriptStruct  TGFBattleProtocol.TGFPbDataGoogleProtobufGeneratedCodeInfoAnnotation
// Struct Size::0x0030
struct FTGFPbDataGoogleProtobufGeneratedCodeInfoAnnotation
{
    TArray<int32_t>                               Path;                                                         // 0x0000(0x0010)
    FString                                       SourceFile;                                                   // 0x0010(0x0010)
    int32_t                                       Begin;                                                        // 0x0020(0x0004)
    int32_t                                       End;                                                          // 0x0024(0x0004)
    int32_t                                       Semantic;                                                     // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
};


// ScriptStruct  TGFBattleProtocol.TGFPbDataGoogleProtobufGeneratedCodeInfo
// Struct Size::0x0010
struct FTGFPbDataGoogleProtobufGeneratedCodeInfo
{
    TArray<FTGFPbDataGoogleProtobufGeneratedCodeInfoAnnotation>Annotation;                                      // 0x0000(0x0010)
};


// ScriptStruct  TGFBattleProtocol.TGFPbDataGoogleProtobufSourceCodeInfoLocation
// Struct Size::0x0050
struct FTGFPbDataGoogleProtobufSourceCodeInfoLocation
{
    TArray<int32_t>                               Path;                                                         // 0x0000(0x0010)
    TArray<int32_t>                               Span;                                                         // 0x0010(0x0010)
    FString                                       LeadingComments;                                              // 0x0020(0x0010)
    FString                                       TrailingComments;                                             // 0x0030(0x0010)
    TArray<FString>                               LeadingDetachedComments;                                      // 0x0040(0x0010)
};


// ScriptStruct  TGFBattleProtocol.TGFPbDataGoogleProtobufSourceCodeInfo
// Struct Size::0x0010
struct FTGFPbDataGoogleProtobufSourceCodeInfo
{
    TArray<FTGFPbDataGoogleProtobufSourceCodeInfoLocation>Location;                                             // 0x0000(0x0010)
};


// ScriptStruct  TGFBattleProtocol.TGFPbDataGoogleProtobufFeatureSet
// Struct Size::0x0018
struct FTGFPbDataGoogleProtobufFeatureSet
{
    int32_t                                       FieldPresence;                                                // 0x0000(0x0004)
    int32_t                                       EnumType;                                                     // 0x0004(0x0004)
    int32_t                                       RepeatedFieldEncoding;                                        // 0x0008(0x0004)
    int32_t                                       Utf8Validation;                                               // 0x000C(0x0004)
    int32_t                                       MessageEncoding;                                              // 0x0010(0x0004)
    int32_t                                       JsonFormat;                                                   // 0x0014(0x0004)
};


// ScriptStruct  TGFBattleProtocol.TGFPbDataGoogleProtobufFeatureSetDefaultsFeatureSetEditionDefault
// Struct Size::0x001C
struct FTGFPbDataGoogleProtobufFeatureSetDefaultsFeatureSetEditionDefault
{
    int32_t                                       Edition;                                                      // 0x0000(0x0004)
    FTGFPbDataGoogleProtobufFeatureSet            Features;                                                     // 0x0004(0x0018)
};


// ScriptStruct  TGFBattleProtocol.TGFPbDataGoogleProtobufFeatureSetDefaults
// Struct Size::0x0018
struct FTGFPbDataGoogleProtobufFeatureSetDefaults
{
    TArray<FTGFPbDataGoogleProtobufFeatureSetDefaultsFeatureSetEditionDefault>Defaults;                         // 0x0000(0x0010)
    int32_t                                       MinimumEdition;                                               // 0x0010(0x0004)
    int32_t                                       MaximumEdition;                                               // 0x0014(0x0004)
};


// ScriptStruct  TGFBattleProtocol.TGFPbDataGoogleProtobufUninterpretedOptionNamePart
// Struct Size::0x0018
struct FTGFPbDataGoogleProtobufUninterpretedOptionNamePart
{
    FString                                       NamePart;                                                     // 0x0000(0x0010)
    bool                                          IsExtension;                                                  // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
};


// ScriptStruct  TGFBattleProtocol.TGFPbDataGoogleProtobufUninterpretedOption
// Struct Size::0x0048
struct FTGFPbDataGoogleProtobufUninterpretedOption
{
    TArray<FTGFPbDataGoogleProtobufUninterpretedOptionNamePart>Name;                                            // 0x0000(0x0010)
    FString                                       IdentifierValue;                                              // 0x0010(0x0010)
    int64_t                                       PositiveIntValue;                                             // 0x0020(0x0008)
    int64_t                                       NegativeIntValue;                                             // 0x0028(0x0008)
    float                                         DoubleValue;                                                  // 0x0030(0x0004)
    char                                          pa_0034[0x0004]                                               // 0x0034(0x0004)
    FString                                       AggregateValue;                                               // 0x0038(0x0010)
};


// ScriptStruct  TGFBattleProtocol.TGFPbDataGoogleProtobufOneofOptions
// Struct Size::0x0028
struct FTGFPbDataGoogleProtobufOneofOptions
{
    FTGFPbDataGoogleProtobufFeatureSet            Features;                                                     // 0x0000(0x0018)
    TArray<FTGFPbDataGoogleProtobufUninterpretedOption>UninterpretedOption;                                     // 0x0018(0x0010)
};


// ScriptStruct  TGFBattleProtocol.TGFPbDataGoogleProtobufOneofDescriptorProto
// Struct Size::0x0038
struct FTGFPbDataGoogleProtobufOneofDescriptorProto
{
    FString                                       Name;                                                         // 0x0000(0x0010)
    FTGFPbDataGoogleProtobufOneofOptions          Options;                                                      // 0x0010(0x0028)
};


// ScriptStruct  TGFBattleProtocol.TGFPbDataGoogleProtobufMessageOptions
// Struct Size::0x0030
struct FTGFPbDataGoogleProtobufMessageOptions
{
    bool                                          MessageSetWireFormat;                                         // 0x0000(0x0001)
    bool                                          NoStandardDescriptorAccessor;                                 // 0x0001(0x0001)
    bool                                          Deprecated;                                                   // 0x0002(0x0001)
    bool                                          MapEntry;                                                     // 0x0003(0x0001)
    bool                                          DeprecatedLegacyJsonFieldConflicts;                           // 0x0004(0x0001)
    char                                          pa_0005[0x0003]                                               // 0x0005(0x0003)
    FTGFPbDataGoogleProtobufFeatureSet            Features;                                                     // 0x0008(0x0018)
    TArray<FTGFPbDataGoogleProtobufUninterpretedOption>UninterpretedOption;                                     // 0x0020(0x0010)
};


// ScriptStruct  TGFBattleProtocol.TGFPbDataGoogleProtobufServiceOptions
// Struct Size::0x0030
struct FTGFPbDataGoogleProtobufServiceOptions
{
    FTGFPbDataGoogleProtobufFeatureSet            Features;                                                     // 0x0000(0x0018)
    bool                                          Deprecated;                                                   // 0x0018(0x0001)
    char                                          pa_0019[0x0007]                                               // 0x0019(0x0007)
    TArray<FTGFPbDataGoogleProtobufUninterpretedOption>UninterpretedOption;                                     // 0x0020(0x0010)
};


// ScriptStruct  TGFBattleProtocol.TGFPbDataGoogleProtobufMethodOptions
// Struct Size::0x0030
struct FTGFPbDataGoogleProtobufMethodOptions
{
    bool                                          Deprecated;                                                   // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    int32_t                                       IdempotencyLevel;                                             // 0x0004(0x0004)
    FTGFPbDataGoogleProtobufFeatureSet            Features;                                                     // 0x0008(0x0018)
    TArray<FTGFPbDataGoogleProtobufUninterpretedOption>UninterpretedOption;                                     // 0x0020(0x0010)
};


// ScriptStruct  TGFBattleProtocol.TGFPbDataGoogleProtobufMethodDescriptorProto
// Struct Size::0x0068
struct FTGFPbDataGoogleProtobufMethodDescriptorProto
{
    FString                                       Name;                                                         // 0x0000(0x0010)
    FString                                       InputType;                                                    // 0x0010(0x0010)
    FString                                       OutputType;                                                   // 0x0020(0x0010)
    FTGFPbDataGoogleProtobufMethodOptions         Options;                                                      // 0x0030(0x0030)
    bool                                          ClientStreaming;                                              // 0x0060(0x0001)
    bool                                          ServerStreaming;                                              // 0x0061(0x0001)
    char                                          pa_0062[0x0006]                                               // 0x0062(0x0006)
};


// ScriptStruct  TGFBattleProtocol.TGFPbDataGoogleProtobufServiceDescriptorProto
// Struct Size::0x0050
struct FTGFPbDataGoogleProtobufServiceDescriptorProto
{
    FString                                       Name;                                                         // 0x0000(0x0010)
    TArray<FTGFPbDataGoogleProtobufMethodDescriptorProto>Method;                                                // 0x0010(0x0010)
    FTGFPbDataGoogleProtobufServiceOptions        Options;                                                      // 0x0020(0x0030)
};


// ScriptStruct  TGFBattleProtocol.TGFPbDataGoogleProtobufEnumOptions
// Struct Size::0x0030
struct FTGFPbDataGoogleProtobufEnumOptions
{
    bool                                          AllowAlias;                                                   // 0x0000(0x0001)
    bool                                          Deprecated;                                                   // 0x0001(0x0001)
    bool                                          DeprecatedLegacyJsonFieldConflicts;                           // 0x0002(0x0001)
    char                                          pa_0003[0x0001]                                               // 0x0003(0x0001)
    FTGFPbDataGoogleProtobufFeatureSet            Features;                                                     // 0x0004(0x0018)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    TArray<FTGFPbDataGoogleProtobufUninterpretedOption>UninterpretedOption;                                     // 0x0020(0x0010)
};


// ScriptStruct  TGFBattleProtocol.TGFPbDataGoogleProtobufEnumValueOptions
// Struct Size::0x0030
struct FTGFPbDataGoogleProtobufEnumValueOptions
{
    bool                                          Deprecated;                                                   // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FTGFPbDataGoogleProtobufFeatureSet            Features;                                                     // 0x0004(0x0018)
    bool                                          DebugRedact;                                                  // 0x001C(0x0001)
    char                                          pa_001D[0x0003]                                               // 0x001D(0x0003)
    TArray<FTGFPbDataGoogleProtobufUninterpretedOption>UninterpretedOption;                                     // 0x0020(0x0010)
};


// ScriptStruct  TGFBattleProtocol.TGFPbDataGoogleProtobufEnumValueDescriptorProto
// Struct Size::0x0048
struct FTGFPbDataGoogleProtobufEnumValueDescriptorProto
{
    FString                                       Name;                                                         // 0x0000(0x0010)
    int32_t                                       Number;                                                       // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FTGFPbDataGoogleProtobufEnumValueOptions      Options;                                                      // 0x0018(0x0030)
};


// ScriptStruct  TGFBattleProtocol.TGFPbDataGoogleProtobufFileOptions
// Struct Size::0x00D8
struct FTGFPbDataGoogleProtobufFileOptions
{
    FString                                       JavaPackage;                                                  // 0x0000(0x0010)
    FString                                       JavaOuterClassname;                                           // 0x0010(0x0010)
    bool                                          JavaMultipleFiles;                                            // 0x0020(0x0001)
    bool                                          JavaGenerateEqualsAndHash;                                    // 0x0021(0x0001)
    bool                                          JavaStringCheckUtf8;                                          // 0x0022(0x0001)
    char                                          pa_0023[0x0001]                                               // 0x0023(0x0001)
    int32_t                                       OptimizeFor;                                                  // 0x0024(0x0004)
    FString                                       GoPackage;                                                    // 0x0028(0x0010)
    bool                                          CcGenericServices;                                            // 0x0038(0x0001)
    bool                                          JavaGenericServices;                                          // 0x0039(0x0001)
    bool                                          PyGenericServices;                                            // 0x003A(0x0001)
    bool                                          Deprecated;                                                   // 0x003B(0x0001)
    bool                                          CcEnableArenas;                                               // 0x003C(0x0001)
    char                                          pa_003D[0x0003]                                               // 0x003D(0x0003)
    FString                                       ObjcClassPrefix;                                              // 0x0040(0x0010)
    FString                                       CsharpNamespace;                                              // 0x0050(0x0010)
    FString                                       SwiftPrefix;                                                  // 0x0060(0x0010)
    FString                                       PhpClassPrefix;                                               // 0x0070(0x0010)
    FString                                       PhpNamespace;                                                 // 0x0080(0x0010)
    FString                                       PhpMetadataNamespace;                                         // 0x0090(0x0010)
    FString                                       RubyPackage;                                                  // 0x00A0(0x0010)
    FTGFPbDataGoogleProtobufFeatureSet            Features;                                                     // 0x00B0(0x0018)
    TArray<FTGFPbDataGoogleProtobufUninterpretedOption>UninterpretedOption;                                     // 0x00C8(0x0010)
};


// ScriptStruct  TGFBattleProtocol.TGFPbDataGoogleProtobufFieldOptionsEditionDefault
// Struct Size::0x0018
struct FTGFPbDataGoogleProtobufFieldOptionsEditionDefault
{
    int32_t                                       Edition;                                                      // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FString                                       Value;                                                        // 0x0008(0x0010)
};


// ScriptStruct  TGFBattleProtocol.TGFPbDataGoogleProtobufFieldOptions
// Struct Size::0x0060
struct FTGFPbDataGoogleProtobufFieldOptions
{
    int32_t                                       Ctype;                                                        // 0x0000(0x0004)
    bool                                          Packed;                                                       // 0x0004(0x0001)
    char                                          pa_0005[0x0003]                                               // 0x0005(0x0003)
    int32_t                                       Jstype;                                                       // 0x0008(0x0004)
    bool                                          Lazy;                                                         // 0x000C(0x0001)
    bool                                          UnverifiedLazy;                                               // 0x000D(0x0001)
    bool                                          Deprecated;                                                   // 0x000E(0x0001)
    bool                                          Weak;                                                         // 0x000F(0x0001)
    bool                                          DebugRedact;                                                  // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
    int32_t                                       Retention;                                                    // 0x0014(0x0004)
    TArray<int32_t>                               Targets;                                                      // 0x0018(0x0010)
    TArray<FTGFPbDataGoogleProtobufFieldOptionsEditionDefault>EditionDefaults;                                  // 0x0028(0x0010)
    FTGFPbDataGoogleProtobufFeatureSet            Features;                                                     // 0x0038(0x0018)
    TArray<FTGFPbDataGoogleProtobufUninterpretedOption>UninterpretedOption;                                     // 0x0050(0x0010)
};


// ScriptStruct  TGFBattleProtocol.TGFPbDataGoogleProtobufFieldDescriptorProto
// Struct Size::0x00D0
struct FTGFPbDataGoogleProtobufFieldDescriptorProto
{
    FString                                       Name;                                                         // 0x0000(0x0010)
    int32_t                                       Number;                                                       // 0x0010(0x0004)
    int32_t                                       Label;                                                        // 0x0014(0x0004)
    int32_t                                       Type;                                                         // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    FString                                       TypeName;                                                     // 0x0020(0x0010)
    FString                                       Extendee;                                                     // 0x0030(0x0010)
    FString                                       DefaultValue;                                                 // 0x0040(0x0010)
    int32_t                                       OneofIndex;                                                   // 0x0050(0x0004)
    char                                          pa_0054[0x0004]                                               // 0x0054(0x0004)
    FString                                       JsonName;                                                     // 0x0058(0x0010)
    FTGFPbDataGoogleProtobufFieldOptions          Options;                                                      // 0x0068(0x0060)
    bool                                          Proto3Optional;                                               // 0x00C8(0x0001)
    char                                          pa_00C9[0x0007]                                               // 0x00C9(0x0007)
};


// ScriptStruct  TGFBattleProtocol.TGFPbDataGoogleProtobufEnumDescriptorProtoEnumReservedRange
// Struct Size::0x0008
struct FTGFPbDataGoogleProtobufEnumDescriptorProtoEnumReservedRange
{
    int32_t                                       Start;                                                        // 0x0000(0x0004)
    int32_t                                       End;                                                          // 0x0004(0x0004)
};


// ScriptStruct  TGFBattleProtocol.TGFPbDataGoogleProtobufEnumDescriptorProto
// Struct Size::0x0070
struct FTGFPbDataGoogleProtobufEnumDescriptorProto
{
    FString                                       Name;                                                         // 0x0000(0x0010)
    TArray<FTGFPbDataGoogleProtobufEnumValueDescriptorProto>Value;                                              // 0x0010(0x0010)
    FTGFPbDataGoogleProtobufEnumOptions           Options;                                                      // 0x0020(0x0030)
    TArray<FTGFPbDataGoogleProtobufEnumDescriptorProtoEnumReservedRange>ReservedRange;                          // 0x0050(0x0010)
    TArray<FString>                               ReservedName;                                                 // 0x0060(0x0010)
};


// ScriptStruct  TGFBattleProtocol.TGFPbDataGoogleProtobufExtensionRangeOptionsDeclaration
// Struct Size::0x0030
struct FTGFPbDataGoogleProtobufExtensionRangeOptionsDeclaration
{
    int32_t                                       Number;                                                       // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FString                                       FullName;                                                     // 0x0008(0x0010)
    FString                                       Type;                                                         // 0x0018(0x0010)
    bool                                          Reserved;                                                     // 0x0028(0x0001)
    bool                                          Repeated;                                                     // 0x0029(0x0001)
    char                                          pa_002A[0x0006]                                               // 0x002A(0x0006)
};


// ScriptStruct  TGFBattleProtocol.TGFPbDataGoogleProtobufExtensionRangeOptions
// Struct Size::0x0040
struct FTGFPbDataGoogleProtobufExtensionRangeOptions
{
    TArray<FTGFPbDataGoogleProtobufUninterpretedOption>UninterpretedOption;                                     // 0x0000(0x0010)
    TArray<FTGFPbDataGoogleProtobufExtensionRangeOptionsDeclaration>Declaration;                                // 0x0010(0x0010)
    FTGFPbDataGoogleProtobufFeatureSet            Features;                                                     // 0x0020(0x0018)
    int32_t                                       Verification;                                                 // 0x0038(0x0004)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
};


// ScriptStruct  TGFBattleProtocol.TGFPbDataGoogleProtobufDescriptorProtoExtensionRange
// Struct Size::0x0048
struct FTGFPbDataGoogleProtobufDescriptorProtoExtensionRange
{
    int32_t                                       Start;                                                        // 0x0000(0x0004)
    int32_t                                       End;                                                          // 0x0004(0x0004)
    FTGFPbDataGoogleProtobufExtensionRangeOptions Options;                                                      // 0x0008(0x0040)
};


// ScriptStruct  TGFBattleProtocol.TGFPbDataGoogleProtobufDescriptorProtoReservedRange
// Struct Size::0x0008
struct FTGFPbDataGoogleProtobufDescriptorProtoReservedRange
{
    int32_t                                       Start;                                                        // 0x0000(0x0004)
    int32_t                                       End;                                                          // 0x0004(0x0004)
};


// ScriptStruct  TGFBattleProtocol.TGFPbDataGoogleProtobufDescriptorProto
// Struct Size::0x00B0
struct FTGFPbDataGoogleProtobufDescriptorProto
{
    FString                                       Name;                                                         // 0x0000(0x0010)
    TArray<FTGFPbDataGoogleProtobufFieldDescriptorProto>Field;                                                  // 0x0010(0x0010)
    TArray<FTGFPbDataGoogleProtobufFieldDescriptorProto>Extension;                                              // 0x0020(0x0010)
    TArray<FTGFPbDataGoogleProtobufEnumDescriptorProto>EnumType;                                                // 0x0030(0x0010)
    TArray<FTGFPbDataGoogleProtobufDescriptorProtoExtensionRange>ExtensionRange;                                // 0x0040(0x0010)
    TArray<FTGFPbDataGoogleProtobufOneofDescriptorProto>OneofDecl;                                              // 0x0050(0x0010)
    FTGFPbDataGoogleProtobufMessageOptions        Options;                                                      // 0x0060(0x0030)
    TArray<FTGFPbDataGoogleProtobufDescriptorProtoReservedRange>ReservedRange;                                  // 0x0090(0x0010)
    TArray<FString>                               ReservedName;                                                 // 0x00A0(0x0010)
};


// ScriptStruct  TGFBattleProtocol.TGFPbDataGoogleProtobufFileDescriptorProto
// Struct Size::0x0190
struct FTGFPbDataGoogleProtobufFileDescriptorProto
{
    FString                                       Name;                                                         // 0x0000(0x0010)
    FString                                       Package;                                                      // 0x0010(0x0010)
    TArray<FString>                               Dependency;                                                   // 0x0020(0x0010)
    TArray<int32_t>                               PublicDependency;                                             // 0x0030(0x0010)
    TArray<int32_t>                               WeakDependency;                                               // 0x0040(0x0010)
    TArray<FTGFPbDataGoogleProtobufDescriptorProto>MessageType;                                                 // 0x0050(0x0010)
    TArray<FTGFPbDataGoogleProtobufEnumDescriptorProto>EnumType;                                                // 0x0060(0x0010)
    TArray<FTGFPbDataGoogleProtobufServiceDescriptorProto>Service;                                              // 0x0070(0x0010)
    TArray<FTGFPbDataGoogleProtobufFieldDescriptorProto>Extension;                                              // 0x0080(0x0010)
    FTGFPbDataGoogleProtobufFileOptions           Options;                                                      // 0x0090(0x00D8)
    FTGFPbDataGoogleProtobufSourceCodeInfo        SourceCodeInfo;                                               // 0x0168(0x0010)
    FString                                       Syntax;                                                       // 0x0178(0x0010)
    int32_t                                       Edition;                                                      // 0x0188(0x0004)
    char                                          pa_018C[0x0004]                                               // 0x018C(0x0004)
};


// ScriptStruct  TGFBattleProtocol.TGFPbDataGoogleProtobufFileDescriptorSet
// Struct Size::0x0010
struct FTGFPbDataGoogleProtobufFileDescriptorSet
{
    TArray<FTGFPbDataGoogleProtobufFileDescriptorProto>File;                                                    // 0x0000(0x0010)
};


// ScriptStruct  TGFBattleProtocol.TGFPbDataGoogleProtobufDuration
// Struct Size::0x0010
struct FTGFPbDataGoogleProtobufDuration
{
    int64_t                                       Seconds;                                                      // 0x0000(0x0008)
    int32_t                                       Nanos;                                                        // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
};


// ScriptStruct  TGFBattleProtocol.TGFPbDataGoogleProtobufEmpty
// Struct Size::0x0001
struct FTGFPbDataGoogleProtobufEmpty
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  TGFBattleProtocol.TGFPbDataGoogleProtobufTimestamp
// Struct Size::0x0010
struct FTGFPbDataGoogleProtobufTimestamp
{
    int64_t                                       Seconds;                                                      // 0x0000(0x0008)
    int32_t                                       Nanos;                                                        // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
};


// ScriptStruct  Text3D.GlyphMeshParameters
// Struct Size::0x0018
struct FGlyphMeshParameters
{
    float                                         Extrude;                                                      // 0x0000(0x0004)
    float                                         Bevel;                                                        // 0x0004(0x0004)
    enum class EText3DBevelType                   BevelType;                                                    // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
    int32_t                                       BevelSegments;                                                // 0x000C(0x0004)
    bool                                          bOutline;                                                     // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
    float                                         OutlineExpand;                                                // 0x0014(0x0004)
};


// ScriptStruct  Text3D.CachedFontMeshes
// Struct Size::0x0060
struct FCachedFontMeshes
{
    TMap<uint32_t,UStaticMesh*>                   Glyphs;                                                       // 0x0000(0x0050)
    char                                          pa_0050[0x0010]                                               // 0x0050(0x0010)
};


// ScriptStruct  Text3D.CachedFontData
// Struct Size::0x00E8
struct FCachedFontData
{
    UFont*                                        Font;                                                         // 0x0000(0x0008)
    TMap<uint32_t,FCachedFontMeshes>              Meshes;                                                       // 0x0008(0x0050)
    char                                          pa_0058[0x0090]                                               // 0x0058(0x0090)
};


// ScriptStruct  SkeletalMerging.SkeletalMeshMergeParams
// Struct Size::0x0040
struct FSkeletalMeshMergeParams
{
    TArray<FSkelMeshMergeSectionMapping>          MeshSectionMappings;                                          // 0x0000(0x0010)
    TArray<FSkelMeshMergeMeshUVTransforms>        UVTransformsPerMesh;                                          // 0x0010(0x0010)
    TArray<USkeletalMesh*>                        MeshesToMerge;                                                // 0x0020(0x0010)
    int32_t                                       StripTopLODS;                                                 // 0x0030(0x0004)
    char                                          bNeedsCpuAccess;                                              // 0x0034(0x0001)
    char                                          bSkeletonBefore;                                              // 0x0034(0x0001)
    char                                          pa_0035[0x0003]                                               // 0x0035(0x0003)
    USkeleton*                                    Skeleton;                                                     // 0x0038(0x0008)
};


// ScriptStruct  Engine.SkelMeshMergeMeshUVTransforms
// Struct Size::0x0010
struct FSkelMeshMergeMeshUVTransforms
{
    TArray<FTransform>                            UVTransforms;                                                 // 0x0000(0x0010)
};


// ScriptStruct  Engine.SkelMeshMergeSectionMapping
// Struct Size::0x0010
struct FSkelMeshMergeSectionMapping
{
    TArray<int32_t>                               SectionIDs;                                                   // 0x0000(0x0010)
};


// ScriptStruct  SkeletalMerging.SkeletonMergeParams
// Struct Size::0x0018
struct FSkeletonMergeParams
{
    TArray<USkeleton*>                            SkeletonsToMerge;                                             // 0x0000(0x0010)
    bool                                          bMergeSockets;                                                // 0x0010(0x0001)
    bool                                          bMergeVirtualBones;                                           // 0x0011(0x0001)
    bool                                          bMergeCurveNames;                                             // 0x0012(0x0001)
    bool                                          bMergeBlendProfiles;                                          // 0x0013(0x0001)
    bool                                          bMergeAnimSlotGroups;                                         // 0x0014(0x0001)
    bool                                          bCheckSkeletonsCompatibility;                                 // 0x0015(0x0001)
    char                                          pa_0016[0x0002]                                               // 0x0016(0x0002)
};


// ScriptStruct  PortalSystem.PortalZonesGridCell
// Struct Size::0x0010
struct FPortalZonesGridCell
{
    TArray<APortalSystemZone*>                    Zones;                                                        // 0x0000(0x0010)
};


// ScriptStruct  PortalSystem.PortalZonesGrid
// Struct Size::0x0020
struct FPortalZonesGrid
{
    int32_t                                       HalfWidth;                                                    // 0x0000(0x0004)
    int32_t                                       HalfLength;                                                   // 0x0004(0x0004)
    float                                         CellSize;                                                     // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    TArray<FPortalZonesGridCell>                  Cells;                                                        // 0x0010(0x0010)
};


// ScriptStruct  PortalSystem.BasicLine
// Struct Size::0x0030
struct FBasicLine
{
    FVector                                       Start;                                                        // 0x0000(0x0018)
    FVector                                       End;                                                          // 0x0018(0x0018)
};


// ScriptStruct  KawaiiPhysics.CollisionLimitBase
// Struct Size::0x0090
struct FCollisionLimitBase
{
    FBoneReference                                DrivingBone;                                                  // 0x0000(0x0010)
    FVector                                       OffsetLocation;                                               // 0x0010(0x0018)
    FRotator                                      OffsetRotation;                                               // 0x0028(0x0018)
    FVector                                       Location;                                                     // 0x0040(0x0018)
    char                                          pa_0058[0x0008]                                               // 0x0058(0x0008)
    FQuat                                         Rotation;                                                     // 0x0060(0x0020)
    bool                                          bEnable;                                                      // 0x0080(0x0001)
    char                                          pa_0081[0x000F]                                               // 0x0081(0x000F)
};


// ScriptStruct  KawaiiPhysics.SphericalLimit
// Struct Size::0x0090
struct FSphericalLimit : public FCollisionLimitBase
{
    float                                         Radius;                                                       // 0x0088(0x0004)
    enum class ESphericalLimitType                LimitType;                                                    // 0x008C(0x0001)
    char                                          pa_008D[0x0003]                                               // 0x008D(0x0003)
};


// ScriptStruct  KawaiiPhysics.CapsuleLimit
// Struct Size::0x0090
struct FCapsuleLimit : public FCollisionLimitBase
{
    float                                         Radius;                                                       // 0x0088(0x0004)
    float                                         Length;                                                       // 0x008C(0x0004)
};


// ScriptStruct  KawaiiPhysics.PlanarLimit
// Struct Size::0x00B0
struct FPlanarLimit : public FCollisionLimitBase
{
    FPlane                                        Plane;                                                        // 0x0090(0x0020)
};


// ScriptStruct  KawaiiPhysics.KawaiiPhysicsSettings
// Struct Size::0x0018
struct FKawaiiPhysicsSettings
{
    float                                         Damping;                                                      // 0x0000(0x0004)
    float                                         WorldDampingLocation;                                         // 0x0004(0x0004)
    float                                         WorldDampingRotation;                                         // 0x0008(0x0004)
    float                                         Stiffness;                                                    // 0x000C(0x0004)
    float                                         Radius;                                                       // 0x0010(0x0004)
    float                                         LimitAngle;                                                   // 0x0014(0x0004)
};


// ScriptStruct  KawaiiPhysics.KawaiiPhysicsModifyBone
// Struct Size::0x00F0
struct FKawaiiPhysicsModifyBone
{
    FBoneReference                                BoneRef;                                                      // 0x0000(0x0010)
    int32_t                                       ParentIndex;                                                  // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    TArray<int32_t>                               ChildIndexs;                                                  // 0x0018(0x0010)
    FKawaiiPhysicsSettings                        PhysicsSettings;                                              // 0x0028(0x0018)
    FVector                                       Location;                                                     // 0x0040(0x0018)
    FVector                                       PrevLocation;                                                 // 0x0058(0x0018)
    FQuat                                         PrevRotation;                                                 // 0x0070(0x0020)
    FVector                                       PoseLocation;                                                 // 0x0090(0x0018)
    char                                          pa_00A8[0x0008]                                               // 0x00A8(0x0008)
    FQuat                                         PoseRotation;                                                 // 0x00B0(0x0020)
    FVector                                       PoseScale;                                                    // 0x00D0(0x0018)
    float                                         LengthFromRoot;                                               // 0x00E8(0x0004)
    bool                                          bDummy;                                                       // 0x00EC(0x0001)
    char                                          pa_00ED[0x0003]                                               // 0x00ED(0x0003)
};


// ScriptStruct  KawaiiPhysics.AnimNode
// Struct Size::0x0790
struct FAnimNode : public FAnimNode
{
    FBoneReference                                RootBone;                                                     // 0x00C8(0x0010)
    TArray<FBoneReference>                        ExcludeBones;                                                 // 0x00D8(0x0010)
    int32_t                                       TargetFrameRate;                                              // 0x00E8(0x0004)
    bool                                          OverrideTargetFramerate;                                      // 0x00EC(0x0001)
    char                                          pa_00ED[0x0003]                                               // 0x00ED(0x0003)
    FKawaiiPhysicsSettings                        PhysicsSettings;                                              // 0x00F0(0x0018)
    UCurveFloat*                                  DampingCurve;                                                 // 0x0108(0x0008)
    UCurveFloat*                                  WorldDampingLocationCurve;                                    // 0x0110(0x0008)
    UCurveFloat*                                  WorldDampingRotationCurve;                                    // 0x0118(0x0008)
    UCurveFloat*                                  StiffnessCurve;                                               // 0x0120(0x0008)
    UCurveFloat*                                  RadiusCurve;                                                  // 0x0128(0x0008)
    UCurveFloat*                                  LimitAngleCurve;                                              // 0x0130(0x0008)
    FRuntimeFloatCurve                            DampingCurveData;                                             // 0x0138(0x0088)
    FRuntimeFloatCurve                            WorldDampingLocationCurveData;                                // 0x01C0(0x0088)
    FRuntimeFloatCurve                            WorldDampingRotationCurveData;                                // 0x0248(0x0088)
    FRuntimeFloatCurve                            StiffnessCurveData;                                           // 0x02D0(0x0088)
    FRuntimeFloatCurve                            RadiusCurveData;                                              // 0x0358(0x0088)
    FRuntimeFloatCurve                            LimitAngleCurveData;                                          // 0x03E0(0x0088)
    bool                                          bUpdatePhysicsSettingsInGame;                                 // 0x0468(0x0001)
    char                                          pa_0469[0x0003]                                               // 0x0469(0x0003)
    float                                         DummyBoneLength;                                              // 0x046C(0x0004)
    enum class EBoneForwardAxis                   BoneForwardAxis;                                              // 0x0470(0x0001)
    enum class EPlanarConstraint                  PlanarConstraint;                                             // 0x0471(0x0001)
    bool                                          ResetBoneTransformWhenBoneNotFound;                           // 0x0472(0x0001)
    char                                          pa_0473[0x0005]                                               // 0x0473(0x0005)
    TArray<FSphericalLimit>                       SphericalLimits;                                              // 0x0478(0x0010)
    TArray<FCapsuleLimit>                         CapsuleLimits;                                                // 0x0488(0x0010)
    TArray<FPlanarLimit>                          PlanarLimits;                                                 // 0x0498(0x0010)
    UKawaiiPhysicsLimitsDataAsset*                LimitsDataAsset;                                              // 0x04A8(0x0008)
    TArray<FSphericalLimit>                       SphericalLimitsData;                                          // 0x04B0(0x0010)
    TArray<FCapsuleLimit>                         CapsuleLimitsData;                                            // 0x04C0(0x0010)
    TArray<FPlanarLimit>                          PlanarLimitsData;                                             // 0x04D0(0x0010)
    float                                         TeleportDistanceThreshold;                                    // 0x04E0(0x0004)
    float                                         TeleportRotationThreshold;                                    // 0x04E4(0x0004)
    FVector                                       Gravity;                                                      // 0x04E8(0x0018)
    bool                                          bEnableWind;                                                  // 0x0500(0x0001)
    char                                          pa_0501[0x0003]                                               // 0x0501(0x0003)
    float                                         WindScale;                                                    // 0x0504(0x0004)
    bool                                          bAllowWorldCollision;                                         // 0x0508(0x0001)
    bool                                          bOverrideCollisionParams;                                     // 0x0509(0x0001)
    char                                          pa_050A[0x0006]                                               // 0x050A(0x0006)
    FBodyInstance                                 CollisionChannelSettings;                                     // 0x0510(0x0190)
    bool                                          bIgnoreSelfComponent;                                         // 0x06A0(0x0001)
    char                                          pa_06A1[0x0007]                                               // 0x06A1(0x0007)
    TArray<FBoneReference>                        IgnoreBones;                                                  // 0x06A8(0x0010)
    TArray<FName>                                 IgnoreBoneNamePrefix;                                         // 0x06B8(0x0010)
    TArray<FKawaiiPhysicsModifyBone>              ModifyBones;                                                  // 0x06C8(0x0010)
    float                                         TotalBoneLength;                                              // 0x06D8(0x0004)
    char                                          pa_06DC[0x0004]                                               // 0x06DC(0x0004)
    FTransform                                    PreSkelCompTransform;                                         // 0x06E0(0x0060)
    bool                                          bInitPhysicsSettings;                                         // 0x0740(0x0001)
    char                                          pa_0741[0x004F]                                               // 0x0741(0x004F)
};


// ScriptStruct  KawaiiPhysics.CollisionLimitDataBase
// Struct Size::0x0080
struct FCollisionLimitDataBase
{
    FName                                         DrivingBoneName;                                              // 0x0000(0x0008)
    FVector                                       OffsetLocation;                                               // 0x0008(0x0018)
    FRotator                                      OffsetRotation;                                               // 0x0020(0x0018)
    FVector                                       Location;                                                     // 0x0038(0x0018)
    FQuat                                         Rotation;                                                     // 0x0050(0x0020)
    FGuid                                         Guid;                                                         // 0x0070(0x0010)
};


// ScriptStruct  KawaiiPhysics.SphericalLimitData
// Struct Size::0x0090
struct FSphericalLimitData : public FCollisionLimitDataBase
{
    float                                         Radius;                                                       // 0x0080(0x0004)
    enum class ESphericalLimitType                LimitType;                                                    // 0x0084(0x0001)
    char                                          pa_0085[0x000B]                                               // 0x0085(0x000B)
};


// ScriptStruct  KawaiiPhysics.CapsuleLimitData
// Struct Size::0x0090
struct FCapsuleLimitData : public FCollisionLimitDataBase
{
    float                                         Radius;                                                       // 0x0080(0x0004)
    float                                         Length;                                                       // 0x0084(0x0004)
    char                                          pa_0088[0x0008]                                               // 0x0088(0x0008)
};


// ScriptStruct  KawaiiPhysics.PlanarLimitData
// Struct Size::0x00A0
struct FPlanarLimitData : public FCollisionLimitDataBase
{
    FPlane                                        Plane;                                                        // 0x0080(0x0020)
};


// ScriptStruct  KantanChartsDatasource.KantanCartesianDatapoint
// Struct Size::0x0010
struct FKantanCartesianDatapoint
{
    FVector2D                                     Coords;                                                       // 0x0000(0x0010)
};


// ScriptStruct  KantanChartsSlate.CartesianAxisInstanceConfig
// Struct Size::0x0004
struct FCartesianAxisInstanceConfig
{
    bool                                          bEnabled;                                                     // 0x0000(0x0001)
    bool                                          bShowTitle;                                                   // 0x0001(0x0001)
    bool                                          bShowMarkers;                                                 // 0x0002(0x0001)
    bool                                          bShowLabels;                                                  // 0x0003(0x0001)
};


// ScriptStruct  KantanChartsSlate.CartesianAxisConfig
// Struct Size::0x0048
struct FCartesianAxisConfig
{
    FText                                         Title;                                                        // 0x0000(0x0018)
    FText                                         Unit;                                                         // 0x0018(0x0018)
    float                                         MarkerSpacing;                                                // 0x0030(0x0004)
    int32_t                                       MaxValueDigits;                                               // 0x0034(0x0004)
    FCartesianAxisInstanceConfig                  LeftBottomAxis;                                               // 0x0038(0x0004)
    FCartesianAxisInstanceConfig                  RightTopAxis;                                                 // 0x003C(0x0004)
    FCartesianAxisInstanceConfig                  FloatingAxis;                                                 // 0x0040(0x0004)
    char                                          pa_0044[0x0004]                                               // 0x0044(0x0004)
};


// ScriptStruct  KantanChartsSlate.KantanChartStyle
// Struct Size::0x0170
struct FKantanChartStyle : public FSlateWidgetStyle
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FSlateBrush                                   Background;                                                   // 0x0010(0x00D0)
    FLinearColor                                  ChartLineColor;                                               // 0x00E0(0x0010)
    float                                         ChartLineThickness;                                           // 0x00F0(0x0004)
    char                                          pa_00F4[0x0004]                                               // 0x00F4(0x0004)
    FSlateFontInfo                                BaseFont;                                                     // 0x00F8(0x0058)
    int32_t                                       TitleFontSize;                                                // 0x0150(0x0004)
    int32_t                                       AxisDescriptionFontSize;                                      // 0x0154(0x0004)
    int32_t                                       AxisValueFontSize;                                            // 0x0158(0x0004)
    FLinearColor                                  FontColor;                                                    // 0x015C(0x0010)
    char                                          pa_016C[0x0004]                                               // 0x016C(0x0004)
};


// ScriptStruct  KantanChartsSlate.KantanBarChartStyle
// Struct Size::0x0180
struct FKantanBarChartStyle : public FKantanChartStyle
{
    float                                         BarOpacity;                                                   // 0x0170(0x0004)
    float                                         BarOutlineOpacity;                                            // 0x0174(0x0004)
    float                                         BarOutlineThickness;                                          // 0x0178(0x0004)
    char                                          pa_017C[0x0004]                                               // 0x017C(0x0004)
};


// ScriptStruct  KantanChartsSlate.KantanCartesianChartStyle
// Struct Size::0x0180
struct FKantanCartesianChartStyle : public FKantanChartStyle
{
    float                                         DataOpacity;                                                  // 0x0170(0x0004)
    float                                         DataLineThickness;                                            // 0x0174(0x0004)
    char                                          pa_0178[0x0008]                                               // 0x0178(0x0008)
};


// ScriptStruct  KantanChartsSlate.CartesianAxisRange
// Struct Size::0x0008
struct FCartesianAxisRange
{
    float                                         Min;                                                          // 0x0000(0x0004)
    float                                         Max;                                                          // 0x0004(0x0004)
};


// ScriptStruct  KantanChartsSlate.KantanCartesianPlotScale
// Struct Size::0x0038
struct FKantanCartesianPlotScale
{
    enum class ECartesianScalingType              Type;                                                         // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    FVector2D                                     Scale;                                                        // 0x0008(0x0010)
    FVector2D                                     FocalCoordinates;                                             // 0x0018(0x0010)
    FCartesianAxisRange                           RangeX;                                                       // 0x0028(0x0008)
    FCartesianAxisRange                           RangeY;                                                       // 0x0030(0x0008)
};


// ScriptStruct  KantanChartsSlate.CartesianRangeBound
// Struct Size::0x0008
struct FCartesianRangeBound
{
    enum class ECartesianRangeBoundType           Type;                                                         // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         FixedBoundValue;                                              // 0x0004(0x0004)
};


// ScriptStruct  KantanChartsSlate.KantanCategoryStyle
// Struct Size::0x0018
struct FKantanCategoryStyle
{
    FName                                         CategoryStyleId;                                              // 0x0000(0x0008)
    FLinearColor                                  Color;                                                        // 0x0008(0x0010)
};


// ScriptStruct  KantanChartsSlate.KantanSeriesStyle
// Struct Size::0x0020
struct FKantanSeriesStyle
{
    FName                                         StyleId;                                                      // 0x0000(0x0008)
    UKantanPointStyle*                            PointStyle;                                                   // 0x0008(0x0008)
    FLinearColor                                  Color;                                                        // 0x0010(0x0010)
};


// ScriptStruct  KantanChartsUMG.SeriesStyleManualMapping
// Struct Size::0x0028
struct FSeriesStyleManualMapping
{
    FName                                         SeriesId;                                                     // 0x0000(0x0008)
    FKantanSeriesStyle                            Style;                                                        // 0x0008(0x0020)
};


// ScriptStruct  KantanChartsUMG.CategoryStyleManualMapping
// Struct Size::0x0020
struct FCategoryStyleManualMapping
{
    FName                                         CategoryId;                                                   // 0x0000(0x0008)
    FKantanCategoryStyle                          Style;                                                        // 0x0008(0x0018)
};


// ScriptStruct  AkAudio.AkAdvancedInitializationSettings
// Struct Size::0x002C
struct FAkAdvancedInitializationSettings
{
    uint32_t                                      IO;                                                           // 0x0000(0x0004)
    uint32_t                                      IO;                                                           // 0x0004(0x0004)
    float                                         TargetAutoStreamBufferLength;                                 // 0x0008(0x0004)
    bool                                          UseStreamCache;                                               // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
    uint32_t                                      MaximumPinnedBytesInCache;                                    // 0x0010(0x0004)
    bool                                          EnableGameSyncPreparation;                                    // 0x0014(0x0001)
    char                                          pa_0015[0x0003]                                               // 0x0015(0x0003)
    uint32_t                                      ContinuousPlaybackLookAhead;                                  // 0x0018(0x0004)
    uint32_t                                      MonitorQueuePoolSize;                                         // 0x001C(0x0004)
    uint32_t                                      MaximumHardwareTimeoutMs;                                     // 0x0020(0x0004)
    bool                                          DebugOutOfRangeCheckEnabled;                                  // 0x0024(0x0001)
    char                                          pa_0025[0x0003]                                               // 0x0025(0x0003)
    float                                         DebugOutOfRangeLimit;                                         // 0x0028(0x0004)
};


// ScriptStruct  AkAudio.AkAdvancedInitializationSettingsWithMultiCoreRendering
// Struct Size::0x0038
struct FAkAdvancedInitializationSettingsWithMultiCoreRendering : public FAkAdvancedInitializationSettings
{
    bool                                          EnableMultiCoreRendering;                                     // 0x002C(0x0001)
    char                                          pa_002D[0x0003]                                               // 0x002D(0x0003)
    uint32_t                                      MaxNumJobWorkers;                                             // 0x0030(0x0004)
    uint32_t                                      JobWorkerMaxExecutionTimeUSec;                                // 0x0034(0x0004)
};


// ScriptStruct  AkAudio.AkAndroidAdvancedInitializationSettings
// Struct Size::0x0040
struct FAkAndroidAdvancedInitializationSettings : public FAkAdvancedInitializationSettingsWithMultiCoreRendering
{
    uint32_t                                      AudioAPI;                                                     // 0x0038(0x0004)
    bool                                          RoundFrameSizeToHardwareSize;                                 // 0x003C(0x0001)
    char                                          pa_003D[0x0003]                                               // 0x003D(0x0003)
};


// ScriptStruct  AkAudio.AkAudioSession
// Struct Size::0x000C
struct FAkAudioSession
{
    enum class EAkAudioSessionCategory            AudioSessionCategory;                                         // 0x0000(0x0004)
    uint32_t                                      AudioSessionCategoryOptions;                                  // 0x0004(0x0004)
    enum class EAkAudioSessionMode                AudioSessionMode;                                             // 0x0008(0x0004)
};


// ScriptStruct  AkAudio.AkChannelMask
// Struct Size::0x0004
struct FAkChannelMask
{
    int32_t                                       ChannelMask;                                                  // 0x0000(0x0004)
};


// ScriptStruct  AkAudio.AkOutputSettings
// Struct Size::0x0018
struct FAkOutputSettings
{
    FString                                       AudioDeviceShareSetName;                                      // 0x0000(0x0010)
    int32_t                                       IdDevice;                                                     // 0x0010(0x0004)
    enum class PanningRule                        PanRule;                                                      // 0x0014(0x0001)
    enum class AkChannelConfiguration             ChannelConfig;                                                // 0x0015(0x0001)
    char                                          pa_0016[0x0002]                                               // 0x0016(0x0002)
};


// ScriptStruct  AkAudio.AkMidiEventBase
// Struct Size::0x0002
struct FAkMidiEventBase
{
    enum class EAkMidiEventType                   Type;                                                         // 0x0000(0x0001)
    char                                          Chan;                                                         // 0x0001(0x0001)
};


// ScriptStruct  AkAudio.AkMidiGeneric
// Struct Size::0x0004
struct FAkMidiGeneric : public FAkMidiEventBase
{
    char                                          Param1;                                                       // 0x0002(0x0001)
    char                                          Param2;                                                       // 0x0003(0x0001)
};


// ScriptStruct  AkAudio.AkMidiNoteOnOff
// Struct Size::0x0004
struct FAkMidiNoteOnOff : public FAkMidiEventBase
{
    char                                          Note;                                                         // 0x0002(0x0001)
    char                                          Velocity;                                                     // 0x0003(0x0001)
};


// ScriptStruct  AkAudio.AkMidiCc
// Struct Size::0x0004
struct FAkMidiCc : public FAkMidiEventBase
{
    enum class EAkMidiCcValues                    Cc;                                                           // 0x0002(0x0001)
    char                                          Value;                                                        // 0x0003(0x0001)
};


// ScriptStruct  AkAudio.AkMidiPitchBend
// Struct Size::0x0008
struct FAkMidiPitchBend : public FAkMidiEventBase
{
    char                                          ValueLsb;                                                     // 0x0002(0x0001)
    char                                          ValueMsb;                                                     // 0x0003(0x0001)
    int32_t                                       FullValue;                                                    // 0x0004(0x0004)
};


// ScriptStruct  AkAudio.AkMidiNoteAftertouch
// Struct Size::0x0004
struct FAkMidiNoteAftertouch : public FAkMidiEventBase
{
    char                                          Note;                                                         // 0x0002(0x0001)
    char                                          Value;                                                        // 0x0003(0x0001)
};


// ScriptStruct  AkAudio.AkMidiChannelAftertouch
// Struct Size::0x0003
struct FAkMidiChannelAftertouch : public FAkMidiEventBase
{
    char                                          Value;                                                        // 0x0002(0x0001)
};


// ScriptStruct  AkAudio.AkMidiProgramChange
// Struct Size::0x0003
struct FAkMidiProgramChange : public FAkMidiEventBase
{
    char                                          ProgramNum;                                                   // 0x0002(0x0001)
};


// ScriptStruct  AkAudio.AkSegmentInfo
// Struct Size::0x0024
struct FAkSegmentInfo
{
    int32_t                                       CurrentPosition;                                              // 0x0000(0x0004)
    int32_t                                       PreEntryDuration;                                             // 0x0004(0x0004)
    int32_t                                       ActiveDuration;                                               // 0x0008(0x0004)
    int32_t                                       PostExitDuration;                                             // 0x000C(0x0004)
    int32_t                                       RemainingLookAheadTime;                                       // 0x0010(0x0004)
    float                                         BeatDuration;                                                 // 0x0014(0x0004)
    float                                         BarDuration;                                                  // 0x0018(0x0004)
    float                                         GridDuration;                                                 // 0x001C(0x0004)
    float                                         GridOffset;                                                   // 0x0020(0x0004)
};


// ScriptStruct  AkAudio.AkExternalSourceInfo
// Struct Size::0x0038
struct FAkExternalSourceInfo
{
    FString                                       ExternalSrcName;                                              // 0x0000(0x0010)
    enum class AkCodecId                          CodecID;                                                      // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
    FString                                       Filename;                                                     // 0x0018(0x0010)
    UAkExternalMediaAsset*                        ExternalSourceAsset;                                          // 0x0028(0x0008)
    bool                                          IsStreamed;                                                   // 0x0030(0x0001)
    char                                          pa_0031[0x0007]                                               // 0x0031(0x0007)
};


// ScriptStruct  AkAudio.AkGeometrySurfaceOverride
// Struct Size::0x0018
struct FAkGeometrySurfaceOverride
{
    UAkAcousticTexture*                           AcousticTexture;                                              // 0x0000(0x0008)
    bool                                          bEnableOcclusionOverride;                                     // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
    float                                         OcclusionValue;                                               // 0x000C(0x0004)
    float                                         SurfaceArea;                                                  // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  AkAudio.AkAcousticSurface
// Struct Size::0x0018
struct FAkAcousticSurface
{
    uint32_t                                      Texture;                                                      // 0x0000(0x0004)
    float                                         Occlusion;                                                    // 0x0004(0x0004)
    FString                                       Name;                                                         // 0x0008(0x0010)
};


// ScriptStruct  AkAudio.AkTriangle
// Struct Size::0x0008
struct FAkTriangle
{
    uint16_t                                      Point0;                                                       // 0x0000(0x0002)
    uint16_t                                      Point1;                                                       // 0x0002(0x0002)
    uint16_t                                      Point2;                                                       // 0x0004(0x0002)
    uint16_t                                      Surface;                                                      // 0x0006(0x0002)
};


// ScriptStruct  AkAudio.AkGeometryData
// Struct Size::0x0050
struct FAkGeometryData
{
    TArray<FVector>                               Vertices;                                                     // 0x0000(0x0010)
    TArray<FAkAcousticSurface>                    Surfaces;                                                     // 0x0010(0x0010)
    TArray<FAkTriangle>                           Triangles;                                                    // 0x0020(0x0010)
    TArray<UPhysicalMaterial*>                    ToOverrideAcousticTexture;                                    // 0x0030(0x0010)
    TArray<UPhysicalMaterial*>                    ToOverrideOcclusion;                                          // 0x0040(0x0010)
};


// ScriptStruct  AkAudio.AkHololensAdvancedInitializationSettings
// Struct Size::0x003C
struct FAkHololensAdvancedInitializationSettings : public FAkAdvancedInitializationSettingsWithMultiCoreRendering
{
    bool                                          UseHeadMountedDisplayAudioDevice;                             // 0x0038(0x0001)
    char                                          pa_0039[0x0003]                                               // 0x0039(0x0003)
};


// ScriptStruct  AkAudio.AkMainOutputSettings
// Struct Size::0x0028
struct FAkMainOutputSettings
{
    FString                                       AudioDeviceShareSet;                                          // 0x0000(0x0010)
    uint32_t                                      DeviceID;                                                     // 0x0010(0x0004)
    enum class EAkPanningRule                     PanningRule;                                                  // 0x0014(0x0004)
    enum class EAkChannelConfigType               ChannelConfigType;                                            // 0x0018(0x0004)
    uint32_t                                      ChannelMask;                                                  // 0x001C(0x0004)
    uint32_t                                      NumberOfChannels;                                             // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
};


// ScriptStruct  AkAudio.AkSpatialAudioSettings
// Struct Size::0x0028
struct FAkSpatialAudioSettings
{
    uint32_t                                      MaxSoundPropagationDepth;                                     // 0x0000(0x0004)
    float                                         MovementThreshold;                                            // 0x0004(0x0004)
    uint32_t                                      NumberOfPrimaryRays;                                          // 0x0008(0x0004)
    uint32_t                                      ReflectionOrder;                                              // 0x000C(0x0004)
    uint32_t                                      DiffractionOrder;                                             // 0x0010(0x0004)
    uint32_t                                      DiffractionOnReflectionsOrder;                                // 0x0014(0x0004)
    float                                         MaximumPathLength;                                            // 0x0018(0x0004)
    float                                         CPULimitPercentage;                                           // 0x001C(0x0004)
    uint32_t                                      LoadBalancingSpread;                                          // 0x0020(0x0004)
    bool                                          EnableGeometricDiffractionAndTransmission;                    // 0x0024(0x0001)
    bool                                          CalcEmitterVirtualPosition;                                   // 0x0025(0x0001)
    char                                          pa_0026[0x0002]                                               // 0x0026(0x0002)
};


// ScriptStruct  AkAudio.AkCommunicationSettings
// Struct Size::0x0018
struct FAkCommunicationSettings
{
    uint32_t                                      PoolSize;                                                     // 0x0000(0x0004)
    uint16_t                                      DiscoveryBroadcastPort;                                       // 0x0004(0x0002)
    uint16_t                                      CommandPort;                                                  // 0x0006(0x0002)
    FString                                       NetworkName;                                                  // 0x0008(0x0010)
};


// ScriptStruct  AkAudio.AkCommunicationSettingsWithSystemInitialization
// Struct Size::0x0020
struct FAkCommunicationSettingsWithSystemInitialization : public FAkCommunicationSettings
{
    bool                                          InitializeSystemComms;                                        // 0x0018(0x0001)
    char                                          pa_0019[0x0007]                                               // 0x0019(0x0007)
};


// ScriptStruct  AkAudio.AkCommunicationSettingsWithCommSelection
// Struct Size::0x0020
struct FAkCommunicationSettingsWithCommSelection : public FAkCommunicationSettings
{
    enum class EAkCommSystem                      CommunicationSystem;                                          // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  AkAudio.AkCommonInitializationSettings
// Struct Size::0x0068
struct FAkCommonInitializationSettings
{
    uint32_t                                      MaximumNumberOfMemoryPools;                                   // 0x0000(0x0004)
    uint32_t                                      MaximumNumberOfPositioningPaths;                              // 0x0004(0x0004)
    uint32_t                                      CommandQueueSize;                                             // 0x0008(0x0004)
    uint32_t                                      SamplesPerFrame;                                              // 0x000C(0x0004)
    FAkMainOutputSettings                         MainOutputSettings;                                           // 0x0010(0x0028)
    float                                         StreamingLookAheadRatio;                                      // 0x0038(0x0004)
    uint16_t                                      NumberOfRefillsInVoice;                                       // 0x003C(0x0002)
    char                                          pa_003E[0x0002]                                               // 0x003E(0x0002)
    FAkSpatialAudioSettings                       SpatialAudioSettings;                                         // 0x0040(0x0028)
};


// ScriptStruct  AkAudio.AkCommonInitializationSettingsWithSampleRate
// Struct Size::0x0070
struct FAkCommonInitializationSettingsWithSampleRate : public FAkCommonInitializationSettings
{
    uint32_t                                      SampleRate;                                                   // 0x0068(0x0004)
    char                                          pa_006C[0x0004]                                               // 0x006C(0x0004)
};


// ScriptStruct  AkAudio.AkBoolPropertyToControl
// Struct Size::0x0010
struct FAkBoolPropertyToControl
{
    FString                                       ItemProperty;                                                 // 0x0000(0x0010)
};


// ScriptStruct  AkAudio.AkPropertyToControl
// Struct Size::0x0010
struct FAkPropertyToControl
{
    FString                                       ItemProperty;                                                 // 0x0000(0x0010)
};


// ScriptStruct  AkAudio.AkReverbDescriptor
// Struct Size::0x0028
struct FAkReverbDescriptor
{
    char                                          pa_0000[0x0018]                                               // 0x0000(0x0018)
    UPrimitiveComponent*                          Primitive;                                                    // 0x0018(0x0008)
    char                                          pa_0020[0x0008]                                               // 0x0020(0x0008)
};


// ScriptStruct  AkAudio.AkGeometrySurfacePropertiesToMap
// Struct Size::0x0038
struct FAkGeometrySurfacePropertiesToMap
{
    TSoftObjectPtr<UAkAcousticTexture>            AcousticTexture;                                              // 0x0000(0x0030)
    float                                         OcclusionValue;                                               // 0x0030(0x0004)
    char                                          pa_0034[0x0004]                                               // 0x0034(0x0004)
};


// ScriptStruct  AkAudio.AkAcousticTextureParams
// Struct Size::0x0030
struct FAkAcousticTextureParams
{
    FVector4                                      AbsorptionValues;                                             // 0x0000(0x0020)
    char                                          pa_0020[0x0010]                                               // 0x0020(0x0010)
};


// ScriptStruct  AkAudio.AkWwiseObjectDetails
// Struct Size::0x0030
struct FAkWwiseObjectDetails
{
    FString                                       ItemName;                                                     // 0x0000(0x0010)
    FString                                       ItemPath;                                                     // 0x0010(0x0010)
    FString                                       ItemId;                                                       // 0x0020(0x0010)
};


// ScriptStruct  AkAudio.AkWwiseItemToControl
// Struct Size::0x0040
struct FAkWwiseItemToControl
{
    FAkWwiseObjectDetails                         ItemPicked;                                                   // 0x0000(0x0030)
    FString                                       ItemPath;                                                     // 0x0030(0x0010)
};


// ScriptStruct  AkAudio.AkSurfaceEdgeVerts
// Struct Size::0x0030
struct FAkSurfaceEdgeVerts
{
    char                                          pa_0000[0x0030]                                               // 0x0000(0x0030)
};


// ScriptStruct  AkAudio.AkSurfaceEdgeInfo
// Struct Size::0x0050
struct FAkSurfaceEdgeInfo
{
    char                                          pa_0000[0x0050]                                               // 0x0000(0x0050)
};


// ScriptStruct  AkAudio.AkSurfacePoly
// Struct Size::0x0018
struct FAkSurfacePoly
{
    UAkAcousticTexture*                           Texture;                                                      // 0x0000(0x0008)
    float                                         Occlusion;                                                    // 0x0008(0x0004)
    bool                                          EnableSurface;                                                // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
    float                                         SurfaceArea;                                                  // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  AkAudio.AkWaapiFieldNames
// Struct Size::0x0010
struct FAkWaapiFieldNames
{
    FString                                       FieldName;                                                    // 0x0000(0x0010)
};


// ScriptStruct  AkAudio.AkWaapiUri
// Struct Size::0x0010
struct FAkWaapiUri
{
    FString                                       Uri;                                                          // 0x0000(0x0010)
};


// ScriptStruct  AkAudio.AkWindowsAdvancedInitializationSettings
// Struct Size::0x0040
struct FAkWindowsAdvancedInitializationSettings : public FAkAdvancedInitializationSettingsWithMultiCoreRendering
{
    bool                                          UseHeadMountedDisplayAudioDevice;                             // 0x0038(0x0001)
    char                                          pa_0039[0x0003]                                               // 0x0039(0x0003)
    uint32_t                                      MaxSystemAudioObjects;                                        // 0x003C(0x0004)
};


// ScriptStruct  AkAudio.AkWinGDKAdvancedInitializationSettings
// Struct Size::0x0040
struct FAkWinGDKAdvancedInitializationSettings : public FAkAdvancedInitializationSettingsWithMultiCoreRendering
{
    bool                                          UseHeadMountedDisplayAudioDevice;                             // 0x0038(0x0001)
    char                                          pa_0039[0x0003]                                               // 0x0039(0x0003)
    uint32_t                                      uMaxSystemAudioObjects;                                       // 0x003C(0x0004)
};


// ScriptStruct  AkAudio.MovieSceneAkAudioEventTemplate
// Struct Size::0x0028
struct FMovieSceneAkAudioEventTemplate : public FMovieSceneEvalTemplate
{
    UMovieSceneAkAudioEventSection*               Section;                                                      // 0x0020(0x0008)
};


// ScriptStruct  AkAudio.MovieSceneAkAudioRTPCTemplate
// Struct Size::0x0028
struct FMovieSceneAkAudioRTPCTemplate : public FMovieSceneEvalTemplate
{
    UMovieSceneAkAudioRTPCSection*                Section;                                                      // 0x0020(0x0008)
};


// ScriptStruct  AkAudio.MovieSceneTangentDataSerializationHelper
// Struct Size::0x0014
struct FMovieSceneTangentDataSerializationHelper
{
    float                                         ArriveTangent;                                                // 0x0000(0x0004)
    float                                         LeaveTangent;                                                 // 0x0004(0x0004)
    enum class ERichCurveTangentWeightMode        TangentWeightMode;                                            // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
    float                                         ArriveTangentWeight;                                          // 0x000C(0x0004)
    float                                         LeaveTangentWeight;                                           // 0x0010(0x0004)
};


// ScriptStruct  AkAudio.MovieSceneFloatValueSerializationHelper
// Struct Size::0x001C
struct FMovieSceneFloatValueSerializationHelper
{
    float                                         Value;                                                        // 0x0000(0x0004)
    enum class ERichCurveInterpMode               InterpMode;                                                   // 0x0004(0x0001)
    enum class ERichCurveTangentMode              TangentMode;                                                  // 0x0005(0x0001)
    char                                          pa_0006[0x0002]                                               // 0x0006(0x0002)
    FMovieSceneTangentDataSerializationHelper     Tangent;                                                      // 0x0008(0x0014)
};


// ScriptStruct  AkAudio.MovieSceneFloatChannelSerializationHelper
// Struct Size::0x0030
struct FMovieSceneFloatChannelSerializationHelper
{
    enum class ERichCurveExtrapolation            PreInfinityExtrap;                                            // 0x0000(0x0001)
    enum class ERichCurveExtrapolation            PostInfinityExtrap;                                           // 0x0001(0x0001)
    char                                          pa_0002[0x0006]                                               // 0x0002(0x0006)
    TArray<int32_t>                               Times;                                                        // 0x0008(0x0010)
    TArray<FMovieSceneFloatValueSerializationHelper>Values;                                                     // 0x0018(0x0010)
    float                                         DefaultValue;                                                 // 0x0028(0x0004)
    bool                                          bHasDefaultValue;                                             // 0x002C(0x0001)
    char                                          pa_002D[0x0003]                                               // 0x002D(0x0003)
};


// ScriptStruct  WwiseFileHandler.WwiseExternalSourceCookedData
// Struct Size::0x000C
struct FWwiseExternalSourceCookedData
{
    int32_t                                       Cookie;                                                       // 0x0000(0x0004)
    FName                                         DebugName;                                                    // 0x0004(0x0008)
};


// ScriptStruct  WwiseFileHandler.WwiseLanguageCookedData
// Struct Size::0x0010
struct FWwiseLanguageCookedData
{
    int32_t                                       LanguageId;                                                   // 0x0000(0x0004)
    FName                                         LanguageName;                                                 // 0x0004(0x0008)
    enum class EWwiseLanguageRequirement          LanguageRequirement;                                          // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
};


// ScriptStruct  WwiseFileHandler.WwiseMediaCookedData
// Struct Size::0x0020
struct FWwiseMediaCookedData
{
    int32_t                                       MediaId;                                                      // 0x0000(0x0004)
    FName                                         MediaPathName;                                                // 0x0004(0x0008)
    int32_t                                       PrefetchSize;                                                 // 0x000C(0x0004)
    int32_t                                       MemoryAlignment;                                              // 0x0010(0x0004)
    bool                                          bDeviceMemory;                                                // 0x0014(0x0001)
    bool                                          bStreaming;                                                   // 0x0015(0x0001)
    char                                          pa_0016[0x0002]                                               // 0x0016(0x0002)
    FName                                         DebugName;                                                    // 0x0018(0x0008)
};


// ScriptStruct  WwiseFileHandler.WwiseSoundBankCookedData
// Struct Size::0x001C
struct FWwiseSoundBankCookedData
{
    int32_t                                       SoundBankId;                                                  // 0x0000(0x0004)
    FName                                         SoundBankPathName;                                            // 0x0004(0x0008)
    int32_t                                       MemoryAlignment;                                              // 0x000C(0x0004)
    bool                                          bDeviceMemory;                                                // 0x0010(0x0001)
    bool                                          bContainsMedia;                                               // 0x0011(0x0001)
    enum class EWwiseSoundBankType                SoundBankType;                                                // 0x0012(0x0001)
    char                                          pa_0013[0x0001]                                               // 0x0013(0x0001)
    FName                                         DebugName;                                                    // 0x0014(0x0008)
};


// ScriptStruct  WwiseObjectUtils.AkUInt64Wrapper
// Struct Size::0x0008
struct FAkUInt64Wrapper
{
    uint64_t                                      UInt64Value;                                                  // 0x0000(0x0008)
};


// ScriptStruct  WwiseObjectUtils.AkUInt32Wrapper
// Struct Size::0x0004
struct FAkUInt32Wrapper
{
    uint32_t                                      UInt32Value;                                                  // 0x0000(0x0004)
};


// ScriptStruct  WwiseObjectUtils.AkOutputDeviceID
// Struct Size::0x0008
struct FAkOutputDeviceID : public FAkUInt64Wrapper
{
};


// ScriptStruct  WwiseObjectUtils.AkUniqueID
// Struct Size::0x0004
struct FAkUniqueID : public FAkUInt32Wrapper
{
};


// ScriptStruct  WwiseResourceLoader.WwiseAcousticTextureCookedData
// Struct Size::0x000C
struct FWwiseAcousticTextureCookedData
{
    int32_t                                       ShortId;                                                      // 0x0000(0x0004)
    FName                                         DebugName;                                                    // 0x0004(0x0008)
};


// ScriptStruct  WwiseResourceLoader.WwiseAuxBusCookedData
// Struct Size::0x0030
struct FWwiseAuxBusCookedData
{
    int32_t                                       AuxBusId;                                                     // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    TArray<FWwiseSoundBankCookedData>             SoundBanks;                                                   // 0x0008(0x0010)
    TArray<FWwiseMediaCookedData>                 Media;                                                        // 0x0018(0x0010)
    FName                                         DebugName;                                                    // 0x0028(0x0008)
};


// ScriptStruct  WwiseResourceLoader.WwiseEventCookedData
// Struct Size::0x00A8
struct FWwiseEventCookedData
{
    int32_t                                       EventId;                                                      // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    TArray<FWwiseSoundBankCookedData>             SoundBanks;                                                   // 0x0008(0x0010)
    TArray<FWwiseMediaCookedData>                 Media;                                                        // 0x0018(0x0010)
    TArray<FWwiseExternalSourceCookedData>        ExternalSources;                                              // 0x0028(0x0010)
    TArray<FWwiseSwitchContainerLeafCookedData>   SwitchContainerLeaves;                                        // 0x0038(0x0010)
    TSet<FWwiseGroupValueCookedData>              RequiredGroupValueSet;                                        // 0x0048(0x0050)
    enum class EWwiseEventDestroyOptions          DestroyOptions;                                               // 0x0098(0x0001)
    char                                          pa_0099[0x0003]                                               // 0x0099(0x0003)
    FName                                         DebugName;                                                    // 0x009C(0x0008)
    char                                          pa_00A4[0x0004]                                               // 0x00A4(0x0004)
};


// ScriptStruct  WwiseResourceLoader.WwiseGroupValueCookedData
// Struct Size::0x0014
struct FWwiseGroupValueCookedData
{
    enum class EWwiseGroupType                    Type;                                                         // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    int32_t                                       GroupID;                                                      // 0x0004(0x0004)
    int32_t                                       ID;                                                           // 0x0008(0x0004)
    FName                                         DebugName;                                                    // 0x000C(0x0008)
};


// ScriptStruct  WwiseResourceLoader.WwiseSwitchContainerLeafCookedData
// Struct Size::0x0080
struct FWwiseSwitchContainerLeafCookedData
{
    TSet<FWwiseGroupValueCookedData>              GroupValueSet;                                                // 0x0000(0x0050)
    TArray<FWwiseSoundBankCookedData>             SoundBanks;                                                   // 0x0050(0x0010)
    TArray<FWwiseMediaCookedData>                 Media;                                                        // 0x0060(0x0010)
    TArray<FWwiseExternalSourceCookedData>        ExternalSources;                                              // 0x0070(0x0010)
};


// ScriptStruct  WwiseResourceLoader.WwiseObjectInfo
// Struct Size::0x0020
struct FWwiseObjectInfo
{
    FGuid                                         WwiseGuid;                                                    // 0x0000(0x0010)
    uint32_t                                      WwiseShortId;                                                 // 0x0010(0x0004)
    FName                                         WwiseName;                                                    // 0x0014(0x0008)
    uint32_t                                      HardCodedSoundBankShortId;                                    // 0x001C(0x0004)
};


// ScriptStruct  WwiseResourceLoader.WwiseEventInfo
// Struct Size::0x0024
struct FWwiseEventInfo : public FWwiseObjectInfo
{
    enum class EWwiseEventSwitchContainerLoading  SwitchContainerLoading;                                       // 0x0020(0x0001)
    enum class EWwiseEventDestroyOptions          DestroyOptions;                                               // 0x0021(0x0001)
    char                                          pa_0022[0x0002]                                               // 0x0022(0x0002)
};


// ScriptStruct  WwiseResourceLoader.WwiseGameParameterCookedData
// Struct Size::0x000C
struct FWwiseGameParameterCookedData
{
    int32_t                                       ShortId;                                                      // 0x0000(0x0004)
    FName                                         DebugName;                                                    // 0x0004(0x0008)
};


// ScriptStruct  WwiseResourceLoader.WwiseGroupValueInfo
// Struct Size::0x0024
struct FWwiseGroupValueInfo : public FWwiseObjectInfo
{
    uint32_t                                      GroupShortId;                                                 // 0x0020(0x0004)
};


// ScriptStruct  WwiseResourceLoader.WwiseInitBankCookedData
// Struct Size::0x0050
struct FWwiseInitBankCookedData : public FWwiseSoundBankCookedData
{
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    TArray<FWwiseSoundBankCookedData>             SoundBanks;                                                   // 0x0020(0x0010)
    TArray<FWwiseMediaCookedData>                 Media;                                                        // 0x0030(0x0010)
    TArray<FWwiseLanguageCookedData>              Language;                                                     // 0x0040(0x0010)
};


// ScriptStruct  WwiseResourceLoader.WwiseLanguageId
// Struct Size::0x000C
struct FWwiseLanguageId
{
    int32_t                                       LanguageId;                                                   // 0x0000(0x0004)
    FName                                         LanguageName;                                                 // 0x0004(0x0008)
};


// ScriptStruct  WwiseResourceLoader.WwiseLocalizedAuxBusCookedData
// Struct Size::0x0060
struct FWwiseLocalizedAuxBusCookedData
{
    TMap<FWwiseLanguageCookedData,FWwiseAuxBusCookedData>AuxBusLanguageMap;                                     // 0x0000(0x0050)
    FName                                         DebugName;                                                    // 0x0050(0x0008)
    int32_t                                       AuxBusId;                                                     // 0x0058(0x0004)
    char                                          pa_005C[0x0004]                                               // 0x005C(0x0004)
};


// ScriptStruct  WwiseResourceLoader.WwiseLocalizedEventCookedData
// Struct Size::0x0060
struct FWwiseLocalizedEventCookedData
{
    TMap<FWwiseLanguageCookedData,FWwiseEventCookedData>EventLanguageMap;                                       // 0x0000(0x0050)
    FName                                         DebugName;                                                    // 0x0050(0x0008)
    int32_t                                       EventId;                                                      // 0x0058(0x0004)
    char                                          pa_005C[0x0004]                                               // 0x005C(0x0004)
};


// ScriptStruct  WwiseResourceLoader.WwiseLocalizedShareSetCookedData
// Struct Size::0x0060
struct FWwiseLocalizedShareSetCookedData
{
    TMap<FWwiseLanguageCookedData,FWwiseShareSetCookedData>ShareSetLanguageMap;                                 // 0x0000(0x0050)
    FName                                         DebugName;                                                    // 0x0050(0x0008)
    int32_t                                       ShareSetId;                                                   // 0x0058(0x0004)
    char                                          pa_005C[0x0004]                                               // 0x005C(0x0004)
};


// ScriptStruct  WwiseResourceLoader.WwiseShareSetCookedData
// Struct Size::0x0030
struct FWwiseShareSetCookedData
{
    int32_t                                       ShareSetId;                                                   // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    TArray<FWwiseSoundBankCookedData>             SoundBanks;                                                   // 0x0008(0x0010)
    TArray<FWwiseMediaCookedData>                 Media;                                                        // 0x0018(0x0010)
    FName                                         DebugName;                                                    // 0x0028(0x0008)
};


// ScriptStruct  WwiseResourceLoader.WwiseLocalizedSoundBankCookedData
// Struct Size::0x0060
struct FWwiseLocalizedSoundBankCookedData
{
    TMap<FWwiseLanguageCookedData,FWwiseSoundBankCookedData>SoundBankLanguageMap;                               // 0x0000(0x0050)
    FName                                         DebugName;                                                    // 0x0050(0x0008)
    int32_t                                       SoundBankId;                                                  // 0x0058(0x0004)
    char                                          pa_005C[0x0004]                                               // 0x005C(0x0004)
};


// ScriptStruct  WwiseResourceLoader.WwisePlatformId
// Struct Size::0x0018
struct FWwisePlatformId
{
    FGuid                                         PlatformGuid;                                                 // 0x0000(0x0010)
    FName                                         PlatformName;                                                 // 0x0010(0x0008)
};


// ScriptStruct  WwiseResourceLoader.WwiseSharedGroupValueKey
// Struct Size::0x0010
struct FWwiseSharedGroupValueKey
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
};


// ScriptStruct  WwiseResourceLoader.WwiseSharedLanguageId
// Struct Size::0x0018
struct FWwiseSharedLanguageId
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
    enum class EWwiseLanguageRequirement          LanguageRequirement;                                          // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
};


// ScriptStruct  WwiseResourceLoader.WwiseSharedPlatformId
// Struct Size::0x0010
struct FWwiseSharedPlatformId
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
};


// ScriptStruct  WwiseResourceLoader.WwiseTriggerCookedData
// Struct Size::0x000C
struct FWwiseTriggerCookedData
{
    int32_t                                       TriggerId;                                                    // 0x0000(0x0004)
    FName                                         DebugName;                                                    // 0x0004(0x0008)
};


// ScriptStruct  WwiseSimpleExternalSource.WwiseExternalSourceCookieDefaultMedia
// Struct Size::0x0038
struct FWwiseExternalSourceCookieDefaultMedia : public FTableRowBase
{
    int32_t                                       ExternalSourceCookie;                                         // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FString                                       ExternalSourceName;                                           // 0x0010(0x0010)
    int32_t                                       MediaInfoId;                                                  // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
    FString                                       MediaName;                                                    // 0x0028(0x0010)
};


// ScriptStruct  WwiseSimpleExternalSource.WwiseExternalSourceMediaInfo
// Struct Size::0x0028
struct FWwiseExternalSourceMediaInfo : public FTableRowBase
{
    int32_t                                       ExternalSourceMediaInfoId;                                    // 0x0008(0x0004)
    FName                                         MediaName;                                                    // 0x000C(0x0008)
    int32_t                                       CodecID;                                                      // 0x0014(0x0004)
    bool                                          bIsStreamed;                                                  // 0x0018(0x0001)
    bool                                          bUseDeviceMemory;                                             // 0x0019(0x0001)
    char                                          pa_001A[0x0002]                                               // 0x001A(0x0002)
    int32_t                                       MemoryAlignment;                                              // 0x001C(0x0004)
    int32_t                                       PrefetchSize;                                                 // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
};


// ScriptStruct  MovieSceneTracks.MovieSceneBaseCacheParams
// Struct Size::0x0020
struct FMovieSceneBaseCacheParams
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    FFrameNumber                                  FirstLoopStartFrameOffset;                                    // 0x0008(0x0004)
    FFrameNumber                                  StartFrameOffset;                                             // 0x000C(0x0004)
    FFrameNumber                                  EndFrameOffset;                                               // 0x0010(0x0004)
    float                                         PlayRate;                                                     // 0x0014(0x0004)
    char                                          bReverse;                                                     // 0x0018(0x0001)
    char                                          pa_0019[0x0007]                                               // 0x0019(0x0007)
};


// ScriptStruct  NiagaraSimCaching.MovieSceneNiagaraCacheParams
// Struct Size::0x0060
struct FMovieSceneNiagaraCacheParams : public FMovieSceneBaseCacheParams
{
    FNiagaraSimCacheCreateParameters              CacheParameters;                                              // 0x0020(0x0038)
    UNiagaraSimCache*                             SimCache;                                                     // 0x0058(0x0008)
};


// ScriptStruct  MovieSceneTracks.MovieSceneBaseCacheSectionTemplateParameters
// Struct Size::0x0008
struct FMovieSceneBaseCacheSectionTemplateParameters
{
    FFrameNumber                                  SectionStartTime;                                             // 0x0000(0x0004)
    FFrameNumber                                  SectionEndTime;                                               // 0x0004(0x0004)
};


// ScriptStruct  NiagaraSimCaching.MovieSceneNiagaraCacheSectionTemplateParameters
// Struct Size::0x0068
struct FMovieSceneNiagaraCacheSectionTemplateParameters : public FMovieSceneBaseCacheSectionTemplateParameters
{
    FMovieSceneNiagaraCacheParams                 NiagaraCacheParams;                                           // 0x0008(0x0060)
};


// ScriptStruct  NiagaraSimCaching.MovieSceneNiagaraCacheSectionTemplate
// Struct Size::0x0088
struct FMovieSceneNiagaraCacheSectionTemplate : public FMovieSceneEvalTemplate
{
    FMovieSceneNiagaraCacheSectionTemplateParametersParams;                                                     // 0x0020(0x0068)
};


// ScriptStruct  StreamlineBlueprint.StreamlineVersion
// Struct Size::0x000C
struct FStreamlineVersion
{
    int32_t                                       Major;                                                        // 0x0000(0x0004)
    int32_t                                       Minor;                                                        // 0x0004(0x0004)
    int32_t                                       Build;                                                        // 0x0008(0x0004)
};


// ScriptStruct  StreamlineBlueprint.StreamlineFeatureRequirements
// Struct Size::0x0034
struct FStreamlineFeatureRequirements
{
    enum class UStreamlineFeatureSupport          Support;                                                      // 0x0000(0x0001)
    enum class UStreamlineFeatureRequirementsFlagsRequirements;                                                 // 0x0001(0x0001)
    char                                          pa_0002[0x0002]                                               // 0x0002(0x0002)
    FStreamlineVersion                            RequiredOperatingSystemVersion;                               // 0x0004(0x000C)
    FStreamlineVersion                            DetectedOperatingSystemVersion;                               // 0x0010(0x000C)
    FStreamlineVersion                            RequiredDriverVersion;                                        // 0x001C(0x000C)
    FStreamlineVersion                            DetectedDriverVersion;                                        // 0x0028(0x000C)
};


// ScriptStruct  INTLCore.INTLDeleteAccountParams
// Struct Size::0x000C
struct FINTLDeleteAccountParams
{
    int32_t                                       AreaId;                                                       // 0x0000(0x0004)
    int32_t                                       ZoneId;                                                       // 0x0004(0x0004)
    bool                                          AllowDeletion;                                                // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
};


// ScriptStruct  INTLCore.INTLBaseResult
// Struct Size::0x0040
struct FINTLBaseResult
{
    int32_t                                       MethodId;                                                     // 0x0000(0x0004)
    int32_t                                       RetCode;                                                      // 0x0004(0x0004)
    FString                                       RetMsg;                                                       // 0x0008(0x0010)
    int32_t                                       ThirdCode;                                                    // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    FString                                       ThirdMsg;                                                     // 0x0020(0x0010)
    FString                                       ExtraJson;                                                    // 0x0030(0x0010)
};


// ScriptStruct  INTLCore.INTLGroupReqInfo
// Struct Size::0x0060
struct FINTLGroupReqInfo : public FINTLBaseResult
{
    FString                                       worldId;                                                      // 0x0040(0x0010)
    FString                                       guildId;                                                      // 0x0050(0x0010)
};


// ScriptStruct  INTLCore.INTLWebSocketResult
// Struct Size::0x0080
struct FINTLWebSocketResult : public FINTLBaseResult
{
    FString                                       URL;                                                          // 0x0040(0x0010)
    int32_t                                       Status;                                                       // 0x0050(0x0004)
    char                                          pa_0054[0x0004]                                               // 0x0054(0x0004)
    FString                                       headers;                                                      // 0x0058(0x0010)
    FString                                       Payload;                                                      // 0x0068(0x0010)
    int32_t                                       code;                                                         // 0x0078(0x0004)
    char                                          pa_007C[0x0004]                                               // 0x007C(0x0004)
};


// ScriptStruct  INTLCore.INTLAuthResult
// Struct Size::0x0170
struct FINTLAuthResult : public FINTLBaseResult
{
    FString                                       OpenID;                                                       // 0x0040(0x0010)
    FString                                       Token;                                                        // 0x0050(0x0010)
    int32_t                                       TokenExpireTime;                                              // 0x0060(0x0004)
    int32_t                                       FirstLogin;                                                   // 0x0064(0x0004)
    FString                                       RegChannelDis;                                                // 0x0068(0x0010)
    FString                                       UserName;                                                     // 0x0078(0x0010)
    int32_t                                       Gender;                                                       // 0x0088(0x0004)
    char                                          pa_008C[0x0004]                                               // 0x008C(0x0004)
    FString                                       Birthday;                                                     // 0x0090(0x0010)
    FString                                       PicUrl;                                                       // 0x00A0(0x0010)
    FString                                       Pf;                                                           // 0x00B0(0x0010)
    FString                                       PfKey;                                                        // 0x00C0(0x0010)
    bool                                          NeedRealNameAuth;                                             // 0x00D0(0x0001)
    char                                          pa_00D1[0x0003]                                               // 0x00D1(0x0003)
    int32_t                                       ChannelID;                                                    // 0x00D4(0x0004)
    enum class EINTLLoginChannel                  ChannelName;                                                  // 0x00D8(0x0001)
    char                                          pa_00D9[0x0007]                                               // 0x00D9(0x0007)
    FString                                       ChannelInfo;                                                  // 0x00E0(0x0010)
    FString                                       ConfirmCode;                                                  // 0x00F0(0x0010)
    int32_t                                       ConfirmCodeExpireTime;                                        // 0x0100(0x0004)
    char                                          pa_0104[0x0004]                                               // 0x0104(0x0004)
    FString                                       BindList;                                                     // 0x0108(0x0010)
    FString                                       LegalDocumentsAcceptedVersion;                                // 0x0118(0x0010)
    int32_t                                       DeleteAccountStatus;                                          // 0x0128(0x0004)
    char                                          pa_012C[0x0004]                                               // 0x012C(0x0004)
    FString                                       DeleteAccountInfo;                                            // 0x0130(0x0010)
    int32_t                                       DeleteLIAccountStatus;                                        // 0x0140(0x0004)
    char                                          pa_0144[0x0004]                                               // 0x0144(0x0004)
    FString                                       TransferCode;                                                 // 0x0148(0x0010)
    int32_t                                       TransferCodeExpireTime;                                       // 0x0158(0x0004)
    char                                          pa_015C[0x0004]                                               // 0x015C(0x0004)
    FString                                       Email;                                                        // 0x0160(0x0010)
};


// ScriptStruct  INTLCore.INTLIDTokenResult
// Struct Size::0x0050
struct FINTLIDTokenResult : public FINTLBaseResult
{
    FString                                       IdToken;                                                      // 0x0040(0x0010)
};


// ScriptStruct  INTLCore.INTLDeviceLevelResult
// Struct Size::0x0048
struct FINTLDeviceLevelResult : public FINTLBaseResult
{
    int32_t                                       DeviceLevel;                                                  // 0x0040(0x0004)
    char                                          pa_0044[0x0004]                                               // 0x0044(0x0004)
};


// ScriptStruct  INTLCore.INTLAccountProfile
// Struct Size::0x00D8
struct FINTLAccountProfile
{
    FString                                       UserName;                                                     // 0x0000(0x0010)
    FString                                       Birthday;                                                     // 0x0010(0x0010)
    int32_t                                       BirthdayYear;                                                 // 0x0020(0x0004)
    int32_t                                       BirthdayMonth;                                                // 0x0024(0x0004)
    int32_t                                       BirthdayDay;                                                  // 0x0028(0x0004)
    int32_t                                       IsReceiveEmail;                                               // 0x002C(0x0004)
    FString                                       Region;                                                       // 0x0030(0x0010)
    FString                                       LangType;                                                     // 0x0040(0x0010)
    FString                                       ExtraJson;                                                    // 0x0050(0x0010)
    FString                                       Email;                                                        // 0x0060(0x0010)
    FString                                       Phone;                                                        // 0x0070(0x0010)
    FString                                       PhoneAreaCode;                                                // 0x0080(0x0010)
    int32_t                                       AccountType;                                                  // 0x0090(0x0004)
    char                                          pa_0094[0x0004]                                               // 0x0094(0x0004)
    FString                                       NickName;                                                     // 0x0098(0x0010)
    FString                                       PrivacyPolicy;                                                // 0x00A8(0x0010)
    FString                                       TermsOfService;                                               // 0x00B8(0x0010)
    int32_t                                       PrivacyUpdateTime;                                            // 0x00C8(0x0004)
    int32_t                                       TermsUpdateTime;                                              // 0x00CC(0x0004)
    int32_t                                       UsernamePassVerify;                                           // 0x00D0(0x0004)
    char                                          pa_00D4[0x0004]                                               // 0x00D4(0x0004)
};


// ScriptStruct  INTLCore.INTLAccountResult
// Struct Size::0x0278
struct FINTLAccountResult : public FINTLBaseResult
{
    int32_t                                       ChannelID;                                                    // 0x0040(0x0004)
    char                                          pa_0044[0x0004]                                               // 0x0044(0x0004)
    FString                                       Channel;                                                      // 0x0048(0x0010)
    FString                                       SeqID;                                                        // 0x0058(0x0010)
    FString                                       UserName;                                                     // 0x0068(0x0010)
    FString                                       Uid;                                                          // 0x0078(0x0010)
    FString                                       Token;                                                        // 0x0088(0x0010)
    int32_t                                       Expiretime;                                                   // 0x0098(0x0004)
    int32_t                                       IsRegister;                                                   // 0x009C(0x0004)
    int32_t                                       IsSetPassword;                                                // 0x00A0(0x0004)
    int32_t                                       IsReceiveEmail;                                               // 0x00A4(0x0004)
    int32_t                                       VerifyCodeExpireTime;                                         // 0x00A8(0x0004)
    bool                                          RequestIsLogin;                                               // 0x00AC(0x0001)
    char                                          pa_00AD[0x0003]                                               // 0x00AD(0x0003)
    int32_t                                       CanBind;                                                      // 0x00B0(0x0004)
    int32_t                                       LoginDays;                                                    // 0x00B4(0x0004)
    FString                                       PpAcceptanceVersion;                                          // 0x00B8(0x0010)
    FString                                       TosAcceptanceVersion;                                         // 0x00C8(0x0010)
    FDateTime                                     PpAcceptanceTime;                                             // 0x00D8(0x0008)
    FDateTime                                     TosAcceptanceTime;                                            // 0x00E0(0x0008)
    FINTLAccountProfile                           Profile;                                                      // 0x00E8(0x00D8)
    int32_t                                       IsUserNameAvailable;                                          // 0x01C0(0x0004)
    bool                                          HasGameSaccUid;                                               // 0x01C4(0x0001)
    char                                          pa_01C5[0x0003]                                               // 0x01C5(0x0003)
    FString                                       GameSaccUid;                                                  // 0x01C8(0x0010)
    bool                                          HasGameSaccOpenId;                                            // 0x01D8(0x0001)
    char                                          pa_01D9[0x0007]                                               // 0x01D9(0x0007)
    FString                                       GameSaccOpenId;                                               // 0x01E0(0x0010)
    bool                                          HasLiUid;                                                     // 0x01F0(0x0001)
    char                                          pa_01F1[0x0007]                                               // 0x01F1(0x0007)
    FString                                       LiUid;                                                        // 0x01F8(0x0010)
    bool                                          HasLiOpenId;                                                  // 0x0208(0x0001)
    char                                          pa_0209[0x0007]                                               // 0x0209(0x0007)
    FString                                       LiOpenId;                                                     // 0x0210(0x0010)
    bool                                          NeedNotify;                                                   // 0x0220(0x0001)
    char                                          pa_0221[0x0007]                                               // 0x0221(0x0007)
    FString                                       UserAgreedGameTos;                                            // 0x0228(0x0010)
    FString                                       UserAgreedGamePP;                                             // 0x0238(0x0010)
    FString                                       UserAgreedLiPP;                                               // 0x0248(0x0010)
    FString                                       UserAgreedLiDt;                                               // 0x0258(0x0010)
    FString                                       UserAgreedLiTos;                                              // 0x0268(0x0010)
};


// ScriptStruct  INTLCore.INTLNoticePicture
// Struct Size::0x0040
struct FINTLNoticePicture
{
    FString                                       URL;                                                          // 0x0000(0x0010)
    FString                                       Hash;                                                         // 0x0010(0x0010)
    FString                                       RedirectUrl;                                                  // 0x0020(0x0010)
    FString                                       ExtraData;                                                    // 0x0030(0x0010)
};


// ScriptStruct  INTLCore.INTLNoticeContent
// Struct Size::0x0070
struct FINTLNoticeContent
{
    int32_t                                       ContentId;                                                    // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FString                                       AppContentId;                                                 // 0x0008(0x0010)
    FString                                       Title;                                                        // 0x0018(0x0010)
    FString                                       Content;                                                      // 0x0028(0x0010)
    FString                                       LangType;                                                     // 0x0038(0x0010)
    int32_t                                       UpdateTime;                                                   // 0x0048(0x0004)
    char                                          pa_004C[0x0004]                                               // 0x004C(0x0004)
    FString                                       ExtraData;                                                    // 0x0050(0x0010)
    TArray<FINTLNoticePicture>                    PictureList;                                                  // 0x0060(0x0010)
};


// ScriptStruct  INTLCore.INTLNoticeInfo
// Struct Size::0x0078
struct FINTLNoticeInfo
{
    int32_t                                       NoticeId;                                                     // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FString                                       AppId;                                                        // 0x0008(0x0010)
    FString                                       AppNoticeId;                                                  // 0x0018(0x0010)
    int32_t                                       Status;                                                       // 0x0028(0x0004)
    int32_t                                       StartTime;                                                    // 0x002C(0x0004)
    int32_t                                       EndTime;                                                      // 0x0030(0x0004)
    int32_t                                       UpdateTime;                                                   // 0x0034(0x0004)
    FString                                       AreaList;                                                     // 0x0038(0x0010)
    TArray<FINTLNoticePicture>                    PictureList;                                                  // 0x0048(0x0010)
    FString                                       ExtraData;                                                    // 0x0058(0x0010)
    TArray<FINTLNoticeContent>                    ContentList;                                                  // 0x0068(0x0010)
};


// ScriptStruct  INTLCore.INTLNoticeResult
// Struct Size::0x0060
struct FINTLNoticeResult : public FINTLBaseResult
{
    FString                                       SeqID;                                                        // 0x0040(0x0010)
    TArray<FINTLNoticeInfo>                       NoticeInfoList;                                               // 0x0050(0x0010)
};


// ScriptStruct  INTLCore.INTLPersonInfo
// Struct Size::0x0088
struct FINTLPersonInfo
{
    FString                                       OpenID;                                                       // 0x0000(0x0010)
    FString                                       UserName;                                                     // 0x0010(0x0010)
    int32_t                                       Gender;                                                       // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
    FString                                       PictureUrl;                                                   // 0x0028(0x0010)
    FString                                       Country;                                                      // 0x0038(0x0010)
    FString                                       Province;                                                     // 0x0048(0x0010)
    FString                                       City;                                                         // 0x0058(0x0010)
    FString                                       Language;                                                     // 0x0068(0x0010)
    FString                                       ExtraJson;                                                    // 0x0078(0x0010)
};


// ScriptStruct  INTLCore.INTLFriendResult
// Struct Size::0x0050
struct FINTLFriendResult : public FINTLBaseResult
{
    TArray<FINTLPersonInfo>                       FriendInfoList;                                               // 0x0040(0x0010)
};


// ScriptStruct  INTLCore.INTLFriendReqInfo
// Struct Size::0x0088
struct FINTLFriendReqInfo
{
    int32_t                                       Type;                                                         // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FString                                       User;                                                         // 0x0008(0x0010)
    FString                                       Title;                                                        // 0x0018(0x0010)
    FString                                       Description;                                                  // 0x0028(0x0010)
    FString                                       ImagePath;                                                    // 0x0038(0x0010)
    FString                                       ThumbPath;                                                    // 0x0048(0x0010)
    FString                                       MediaPath;                                                    // 0x0058(0x0010)
    FString                                       Link;                                                         // 0x0068(0x0010)
    FString                                       ExtraJson;                                                    // 0x0078(0x0010)
};


// ScriptStruct  INTLCore.INTLLocalNotification
// Struct Size::0x0078
struct FINTLLocalNotification
{
    int32_t                                       NotificationID;                                               // 0x0000(0x0004)
    int32_t                                       ActionType;                                                   // 0x0004(0x0004)
    int32_t                                       SoundEnabled;                                                 // 0x0008(0x0004)
    int32_t                                       Lights;                                                       // 0x000C(0x0004)
    int32_t                                       Vibrate;                                                      // 0x0010(0x0004)
    int32_t                                       FireTime;                                                     // 0x0014(0x0004)
    FString                                       Title;                                                        // 0x0018(0x0010)
    FString                                       Content;                                                      // 0x0028(0x0010)
    FString                                       TickerText;                                                   // 0x0038(0x0010)
    FString                                       ActionParameter;                                              // 0x0048(0x0010)
    FString                                       RingUri;                                                      // 0x0058(0x0010)
    FString                                       SmallIcon;                                                    // 0x0068(0x0010)
};


// ScriptStruct  INTLCore.INTLLocalNotificationIOS
// Struct Size::0x00A0
struct FINTLLocalNotificationIOS
{
    int32_t                                       RepeatType;                                                   // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FString                                       AlertTitle;                                                   // 0x0008(0x0010)
    int32_t                                       FireTime;                                                     // 0x0018(0x0004)
    int32_t                                       Badge;                                                        // 0x001C(0x0004)
    FString                                       AlertBody;                                                    // 0x0020(0x0010)
    FString                                       AlertAction;                                                  // 0x0030(0x0010)
    FString                                       NotificationID;                                               // 0x0040(0x0010)
    TMap<FString,FString>                         UserInfo;                                                     // 0x0050(0x0050)
};


// ScriptStruct  INTLCore.INTLPushResult
// Struct Size::0x0058
struct FINTLPushResult : public FINTLBaseResult
{
    int32_t                                       Type;                                                         // 0x0040(0x0004)
    char                                          pa_0044[0x0004]                                               // 0x0044(0x0004)
    FString                                       Notification;                                                 // 0x0048(0x0010)
};


// ScriptStruct  INTLCore.INTLWebViewResult
// Struct Size::0x0058
struct FINTLWebViewResult : public FINTLBaseResult
{
    int32_t                                       MsgType;                                                      // 0x0040(0x0004)
    char                                          pa_0044[0x0004]                                               // 0x0044(0x0004)
    FString                                       MsgJsonData;                                                  // 0x0048(0x0010)
};


// ScriptStruct  INTLCore.INTLComplianceResult
// Struct Size::0x00F8
struct FINTLComplianceResult : public FINTLBaseResult
{
    int32_t                                       AdultStatus;                                                  // 0x0040(0x0004)
    int32_t                                       ParentCertificateStatus;                                      // 0x0044(0x0004)
    FString                                       ParentCertificateStatusExpiration;                            // 0x0048(0x0010)
    int32_t                                       EUUserAgreeStatus;                                            // 0x0058(0x0004)
    char                                          pa_005C[0x0004]                                               // 0x005C(0x0004)
    FString                                       CountryCode;                                                  // 0x0060(0x0010)
    int32_t                                       AdultAge;                                                     // 0x0070(0x0004)
    int32_t                                       GameGrade;                                                    // 0x0074(0x0004)
    int32_t                                       CertificateType;                                              // 0x0078(0x0004)
    char                                          pa_007C[0x0004]                                               // 0x007C(0x0004)
    FString                                       AdultStatusExpiration;                                        // 0x0080(0x0010)
    FString                                       TS;                                                           // 0x0090(0x0010)
    bool                                          IsEEA;                                                        // 0x00A0(0x0001)
    bool                                          IsDMA;                                                        // 0x00A1(0x0001)
    char                                          pa_00A2[0x0006]                                               // 0x00A2(0x0006)
    FString                                       Region;                                                       // 0x00A8(0x0010)
    FString                                       Email;                                                        // 0x00B8(0x0010)
    int32_t                                       RealNameAuthStatus;                                           // 0x00C8(0x0004)
    int32_t                                       NeedRealNameAuth;                                             // 0x00CC(0x0004)
    bool                                          NeedLICertification;                                          // 0x00D0(0x0001)
    char                                          pa_00D1[0x0007]                                               // 0x00D1(0x0007)
    FString                                       AdultAgeMap;                                                  // 0x00D8(0x0010)
    FString                                       GameGradeMap;                                                 // 0x00E8(0x0010)
};


// ScriptStruct  INTLCore.INTLCustomerResult
// Struct Size::0x0048
struct FINTLCustomerResult : public FINTLBaseResult
{
    int32_t                                       MsgType;                                                      // 0x0040(0x0004)
    char                                          pa_0044[0x0004]                                               // 0x0044(0x0004)
};


// ScriptStruct  INTLCore.INTLCustomerUserProfile
// Struct Size::0x0100
struct FINTLCustomerUserProfile
{
    FString                                       LangType;                                                     // 0x0000(0x0010)
    FString                                       Sign;                                                         // 0x0010(0x0010)
    FString                                       OpenID;                                                       // 0x0020(0x0010)
    FString                                       GameLevel;                                                    // 0x0030(0x0010)
    FString                                       NickName;                                                     // 0x0040(0x0010)
    FString                                       RoleID;                                                       // 0x0050(0x0010)
    FString                                       AreaId;                                                       // 0x0060(0x0010)
    FString                                       ZoneId;                                                       // 0x0070(0x0010)
    FString                                       GameSvrId;                                                    // 0x0080(0x0010)
    FString                                       Region;                                                       // 0x0090(0x0010)
    FString                                       PictureUrl;                                                   // 0x00A0(0x0010)
    FString                                       CustomParam1;                                                 // 0x00B0(0x0010)
    FString                                       CustomParam2;                                                 // 0x00C0(0x0010)
    FString                                       CustomParam3;                                                 // 0x00D0(0x0010)
    FString                                       CustomParam4;                                                 // 0x00E0(0x0010)
    FString                                       CustomParam5;                                                 // 0x00F0(0x0010)
};


// ScriptStruct  INTLCore.INTLUpdateStartRepoNewVersionInfo
// Struct Size::0x0040
struct FINTLUpdateStartRepoNewVersionInfo
{
    int32_t                                       MethodId;                                                     // 0x0000(0x0004)
    enum class EINTLUpdateActionType              ActionType;                                                   // 0x0004(0x0001)
    char                                          pa_0005[0x0003]                                               // 0x0005(0x0003)
    int32_t                                       NewVersionType;                                               // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FString                                       Version;                                                      // 0x0010(0x0010)
    FString                                       NeedDownloadSize;                                             // 0x0020(0x0010)
    FString                                       GameDefinedStr;                                               // 0x0030(0x0010)
};


// ScriptStruct  INTLCore.INTLUpdateProgress
// Struct Size::0x0068
struct FINTLUpdateProgress
{
    int32_t                                       MethodId;                                                     // 0x0000(0x0004)
    enum class EINTLUpdateActionType              ActionType;                                                   // 0x0004(0x0001)
    char                                          pa_0005[0x0003]                                               // 0x0005(0x0003)
    int32_t                                       UpdateStep;                                                   // 0x0008(0x0004)
    int32_t                                       RepoID;                                                       // 0x000C(0x0004)
    int32_t                                       TaskId;                                                       // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FString                                       FinishedSize;                                                 // 0x0018(0x0010)
    FString                                       TotalSize;                                                    // 0x0028(0x0010)
    FString                                       Speed;                                                        // 0x0038(0x0010)
    int32_t                                       RemainTime;                                                   // 0x0048(0x0004)
    float                                         StepProgress;                                                 // 0x004C(0x0004)
    float                                         TotalProgress;                                                // 0x0050(0x0004)
    char                                          pa_0054[0x0004]                                               // 0x0054(0x0004)
    FString                                       ErrorMsg;                                                     // 0x0058(0x0010)
};


// ScriptStruct  INTLCore.INTLUpdateResult
// Struct Size::0x0050
struct FINTLUpdateResult : public FINTLBaseResult
{
    enum class EINTLUpdateActionType              ActionType;                                                   // 0x0040(0x0001)
    char                                          pa_0041[0x0003]                                               // 0x0041(0x0003)
    int32_t                                       RepoID;                                                       // 0x0044(0x0004)
    int32_t                                       TaskId;                                                       // 0x0048(0x0004)
    char                                          pa_004C[0x0004]                                               // 0x004C(0x0004)
};


// ScriptStruct  INTLCore.INTLUpdateOptionalRepoInitResult
// Struct Size::0x0048
struct FINTLUpdateOptionalRepoInitResult : public FINTLBaseResult
{
    enum class EINTLUpdateActionType              ActionType;                                                   // 0x0040(0x0001)
    char                                          pa_0041[0x0003]                                               // 0x0041(0x0003)
    int32_t                                       RepoID;                                                       // 0x0044(0x0004)
};


// ScriptStruct  INTLCore.INTLUpdateInitInfo
// Struct Size::0x0030
struct FINTLUpdateInitInfo
{
    enum class EINTLUpdateActionType              ActionType;                                                   // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    int32_t                                       RepoID;                                                       // 0x0004(0x0004)
    int32_t                                       ResourceCopyType;                                             // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FString                                       ResourceSavePath;                                             // 0x0010(0x0010)
    FString                                       FirstResourceDirPath;                                         // 0x0020(0x0010)
};


// ScriptStruct  INTLCore.INTLUpdateOptionalRepoFilesStatus
// Struct Size::0x0028
struct FINTLUpdateOptionalRepoFilesStatus
{
    FString                                       FilePath;                                                     // 0x0000(0x0010)
    int32_t                                       TotalFileNum;                                                 // 0x0010(0x0004)
    int32_t                                       ValidFileNum;                                                 // 0x0014(0x0004)
    FString                                       NeedDownloadSize;                                             // 0x0018(0x0010)
};


// ScriptStruct  INTLCore.INTLDirTreeResult
// Struct Size::0x0070
struct FINTLDirTreeResult : public FINTLBaseResult
{
    int32_t                                       TreeId;                                                       // 0x0040(0x0004)
    int32_t                                       NodeID;                                                       // 0x0044(0x0004)
    FString                                       TreeInfo;                                                     // 0x0048(0x0010)
    FString                                       RoleInfo;                                                     // 0x0058(0x0010)
    int32_t                                       Expiretime;                                                   // 0x0068(0x0004)
    char                                          pa_006C[0x0004]                                               // 0x006C(0x0004)
};


// ScriptStruct  INTLCore.INTLDirTreeNode
// Struct Size::0x0060
struct FINTLDirTreeNode
{
    int32_t                                       NodeID;                                                       // 0x0000(0x0004)
    int32_t                                       ParentId;                                                     // 0x0004(0x0004)
    bool                                          IsLeaf;                                                       // 0x0008(0x0001)
    char                                          pa_0009[0x0007]                                               // 0x0009(0x0007)
    FString                                       Name;                                                         // 0x0010(0x0010)
    FString                                       URL;                                                          // 0x0020(0x0010)
    int32_t                                       Status;                                                       // 0x0030(0x0004)
    int32_t                                       Tag;                                                          // 0x0034(0x0004)
    int32_t                                       CustomInt1;                                                   // 0x0038(0x0004)
    int32_t                                       CustomInt2;                                                   // 0x003C(0x0004)
    FString                                       CustomStr;                                                    // 0x0040(0x0010)
    TArray<int32_t>                               ChildrenIdSet;                                                // 0x0050(0x0010)
};


// ScriptStruct  INTLCore.INTLLBSIPInfoResult
// Struct Size::0x0068
struct FINTLLBSIPInfoResult : public FINTLBaseResult
{
    FString                                       Region;                                                       // 0x0040(0x0010)
    FString                                       Alpha2;                                                       // 0x0050(0x0010)
    int32_t                                       Timestamp;                                                    // 0x0060(0x0004)
    char                                          pa_0064[0x0004]                                               // 0x0064(0x0004)
};


// ScriptStruct  INTLCore.INTLDetectNetworkResult
// Struct Size::0x0050
struct FINTLDetectNetworkResult : public FINTLBaseResult
{
    float                                         LocalRouterTime;                                              // 0x0040(0x0004)
    float                                         InternetRouterTime;                                           // 0x0044(0x0004)
    int32_t                                       InternetDelay;                                                // 0x0048(0x0004)
    char                                          pa_004C[0x0004]                                               // 0x004C(0x0004)
};


// ScriptStruct  INTLCore.INTLStartUdpSocketResult
// Struct Size::0x0058
struct FINTLStartUdpSocketResult : public FINTLBaseResult
{
    FString                                       Ip;                                                           // 0x0040(0x0010)
    int32_t                                       Net;                                                          // 0x0050(0x0004)
    int32_t                                       Port;                                                         // 0x0054(0x0004)
};


// ScriptStruct  INTLCore.INTLToolsResult
// Struct Size::0x0060
struct FINTLToolsResult : public FINTLBaseResult
{
    FString                                       DeepLinkUrl;                                                  // 0x0040(0x0010)
    FString                                       ShortLinkUrl;                                                 // 0x0050(0x0010)
};


// ScriptStruct  INTLCore.INTLDNSResult
// Struct Size::0x0070
struct FINTLDNSResult : public FINTLBaseResult
{
    FString                                       V4;                                                           // 0x0040(0x0010)
    FString                                       V6;                                                           // 0x0050(0x0010)
    FString                                       Host;                                                         // 0x0060(0x0010)
};


// ScriptStruct  INTLCore.INTLExtendResult
// Struct Size::0x0058
struct FINTLExtendResult : public FINTLBaseResult
{
    enum class EINTLLoginChannel                  Channel;                                                      // 0x0040(0x0001)
    char                                          pa_0041[0x0007]                                               // 0x0041(0x0007)
    FString                                       ExtendMethodName;                                             // 0x0048(0x0010)
};


// ScriptStruct  INTLCore.CutoutRect
// Struct Size::0x0010
struct FCutoutRect
{
    int32_t                                       Top;                                                          // 0x0000(0x0004)
    int32_t                                       Bottom;                                                       // 0x0004(0x0004)
    int32_t                                       Left;                                                         // 0x0008(0x0004)
    int32_t                                       Right;                                                        // 0x000C(0x0004)
};


// ScriptStruct  INTLCore.CutoutInfoResult
// Struct Size::0x0070
struct FCutoutInfoResult : public FINTLBaseResult
{
    bool                                          HasCutout;                                                    // 0x0040(0x0001)
    bool                                          IsCutoutHidden;                                               // 0x0041(0x0001)
    char                                          pa_0042[0x0002]                                               // 0x0042(0x0002)
    int32_t                                       ScreenHeight;                                                 // 0x0044(0x0004)
    int32_t                                       ScreenWidth;                                                  // 0x0048(0x0004)
    int32_t                                       StatusBarHeight;                                              // 0x004C(0x0004)
    TArray<FCutoutRect>                           CutoutRects;                                                  // 0x0050(0x0010)
    FCutoutRect                                   SafeArea;                                                     // 0x0060(0x0010)
};


// ScriptStruct  INTLCore.INTLPermissionResult
// Struct Size::0x0050
struct FINTLPermissionResult : public FINTLBaseResult
{
    FString                                       permission;                                                   // 0x0040(0x0010)
};


// ScriptStruct  INTLCore.INTLRewardItem
// Struct Size::0x0028
struct FINTLRewardItem
{
    FString                                       desc;                                                         // 0x0000(0x0010)
    FString                                       Icon;                                                         // 0x0010(0x0010)
    int32_t                                       ID;                                                           // 0x0020(0x0004)
    int32_t                                       Num;                                                          // 0x0024(0x0004)
};


// ScriptStruct  INTLCore.INTLEventsInfoItem
// Struct Size::0x0040
struct FINTLEventsInfoItem
{
    char                                          CanSend;                                                      // 0x0000(0x0001)
    char                                          IsSent;                                                       // 0x0001(0x0001)
    char                                          pa_0002[0x0006]                                               // 0x0002(0x0006)
    FString                                       Image;                                                        // 0x0008(0x0010)
    FString                                       Content;                                                      // 0x0018(0x0010)
    int32_t                                       EventId;                                                      // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
    TArray<FINTLRewardItem>                       rewards;                                                      // 0x0030(0x0010)
};


// ScriptStruct  INTLCore.INTLLIBindRewardResult
// Struct Size::0x0080
struct FINTLLIBindRewardResult : public FINTLBaseResult
{
    FString                                       Image;                                                        // 0x0040(0x0010)
    FString                                       Content;                                                      // 0x0050(0x0010)
    int32_t                                       CanSend;                                                      // 0x0060(0x0004)
    int32_t                                       IsSent;                                                       // 0x0064(0x0004)
    bool                                          FromNetwork;                                                  // 0x0068(0x0001)
    char                                          pa_0069[0x0003]                                               // 0x0069(0x0003)
    int32_t                                       EventId;                                                      // 0x006C(0x0004)
    TArray<FINTLEventsInfoItem>                   Events;                                                       // 0x0070(0x0010)
};


// ScriptStruct  INTLCore.INTLTabExpEntity
// Struct Size::0x0120
struct FINTLTabExpEntity
{
    FString                                       ExpName;                                                      // 0x0000(0x0010)
    FString                                       Assignment;                                                   // 0x0010(0x0010)
    FString                                       ExpGrayId;                                                    // 0x0020(0x0010)
    FString                                       LayerName;                                                    // 0x0030(0x0010)
    TMap<FString,FString>                         ExpParams;                                                    // 0x0040(0x0050)
    int32_t                                       ExpId;                                                        // 0x0090(0x0004)
    int32_t                                       Bucket;                                                       // 0x0094(0x0004)
    int32_t                                       ModuleBucketNum;                                              // 0x0098(0x0004)
    float                                         Percentage;                                                   // 0x009C(0x0004)
    FString                                       ExpKey;                                                       // 0x00A0(0x0010)
    FString                                       ExpGroupKey;                                                  // 0x00B0(0x0010)
    FString                                       ModuleCode;                                                   // 0x00C0(0x0010)
    TMap<FString,FString>                         Params;                                                       // 0x00D0(0x0050)
};


// ScriptStruct  INTLCore.INTLAdjustAttrsChangedResult
// Struct Size::0x0050
struct FINTLAdjustAttrsChangedResult : public FINTLBaseResult
{
    FString                                       AdjustAttribution;                                            // 0x0040(0x0010)
};


// ScriptStruct  LevelInfinite.GNPanelReadyEventExtraParam
// Struct Size::0x0018
struct FGNPanelReadyEventExtraParam
{
    FString                                       asset;                                                        // 0x0000(0x0010)
    bool                                          is;                                                           // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
};


// ScriptStruct  LevelInfinite.GNPanelReadyEventParam
// Struct Size::0x0030
struct FGNPanelReadyEventParam
{
    FString                                       Module;                                                       // 0x0000(0x0010)
    bool                                          isPopPanel;                                                   // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
    FGNPanelReadyEventExtraParam                  extraParams;                                                  // 0x0018(0x0018)
};


// ScriptStruct  LevelInfinite.LIPBindCompleteEventParam
// Struct Size::0x0028
struct FLIPBindCompleteEventParam
{
    FString                                       Email;                                                        // 0x0000(0x0010)
    bool                                          sucess;                                                       // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
    FString                                       msg;                                                          // 0x0018(0x0010)
};


// ScriptStruct  LevelInfinite.LIBaseEvent
// Struct Size::0x0018
struct FLIBaseEvent
{
    enum class ELIEventType                       EventType;                                                    // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    FString                                       ExtraJson;                                                    // 0x0008(0x0010)
};


// ScriptStruct  LevelInfinite.LIUserData
// Struct Size::0x00B0
struct FLIUserData
{
    int32_t                                       GameId;                                                       // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FString                                       ChannelID;                                                    // 0x0008(0x0010)
    FString                                       OpenID;                                                       // 0x0018(0x0010)
    FString                                       Token;                                                        // 0x0028(0x0010)
    FString                                       RoleID;                                                       // 0x0038(0x0010)
    FString                                       Region;                                                       // 0x0048(0x0010)
    int32_t                                       AreaId;                                                       // 0x0058(0x0004)
    int32_t                                       ZoneId;                                                       // 0x005C(0x0004)
    FString                                       LangType;                                                     // 0x0060(0x0010)
    FString                                       DefLangType;                                                  // 0x0070(0x0010)
    FString                                       RoleName;                                                     // 0x0080(0x0010)
    FString                                       AppVersion;                                                   // 0x0090(0x0010)
    FString                                       ExtraJson;                                                    // 0x00A0(0x0010)
};


// ScriptStruct  GameNative.INTLFrameInfo
// Struct Size::0x0028
struct FINTLFrameInfo
{
    FString                                       Path;                                                         // 0x0000(0x0010)
    FString                                       Md5;                                                          // 0x0010(0x0010)
    int32_t                                       Size;                                                         // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
};


// ScriptStruct  GameNative.INTLUserData
// Struct Size::0x00E8
struct FINTLUserData
{
    int32_t                                       GameId;                                                       // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FString                                       ChannelID;                                                    // 0x0008(0x0010)
    FString                                       OpenID;                                                       // 0x0018(0x0010)
    FString                                       Token;                                                        // 0x0028(0x0010)
    FString                                       RoleID;                                                       // 0x0038(0x0010)
    FString                                       Region;                                                       // 0x0048(0x0010)
    int32_t                                       AreaId;                                                       // 0x0058(0x0004)
    int32_t                                       ZoneId;                                                       // 0x005C(0x0004)
    int32_t                                       Os;                                                           // 0x0060(0x0004)
    char                                          pa_0064[0x0004]                                               // 0x0064(0x0004)
    FString                                       LangType;                                                     // 0x0068(0x0010)
    FString                                       DefLangType;                                                  // 0x0078(0x0010)
    FString                                       RoleName;                                                     // 0x0088(0x0010)
    FString                                       PayToken;                                                     // 0x0098(0x0010)
    FString                                       HeadUrl;                                                      // 0x00A8(0x0010)
    FString                                       PlayerLevel;                                                  // 0x00B8(0x0010)
    FString                                       AppVersion;                                                   // 0x00C8(0x0010)
    FString                                       ExtraJson;                                                    // 0x00D8(0x0010)
};


// ScriptStruct  Paper2D.IntMargin
// Struct Size::0x0010
struct FIntMargin
{
    int32_t                                       Left;                                                         // 0x0000(0x0004)
    int32_t                                       Top;                                                          // 0x0004(0x0004)
    int32_t                                       Right;                                                        // 0x0008(0x0004)
    int32_t                                       Bottom;                                                       // 0x000C(0x0004)
};


// ScriptStruct  Paper2D.SpriteDrawCallRecord
// Struct Size::0x0140
struct FSpriteDrawCallRecord
{
    FVector                                       Destination;                                                  // 0x0000(0x0018)
    UTexture*                                     BaseTexture;                                                  // 0x0018(0x0008)
    char                                          pa_0020[0x0030]                                               // 0x0020(0x0030)
    FColor                                        Color;                                                        // 0x0050(0x0004)
    char                                          pa_0054[0x00EC]                                               // 0x0054(0x00EC)
};


// ScriptStruct  Paper2D.SpriteGeometryShape
// Struct Size::0x0040
struct FSpriteGeometryShape
{
    enum class ESpriteShapeType                   ShapeType;                                                    // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    TArray<FVector2D>                             Vertices;                                                     // 0x0008(0x0010)
    FVector2D                                     BoxSize;                                                      // 0x0018(0x0010)
    FVector2D                                     BoxPosition;                                                  // 0x0028(0x0010)
    float                                         Rotation;                                                     // 0x0038(0x0004)
    bool                                          bNegativeWinding;                                             // 0x003C(0x0001)
    char                                          pa_003D[0x0003]                                               // 0x003D(0x0003)
};


// ScriptStruct  Paper2D.SpriteGeometryCollection
// Struct Size::0x0030
struct FSpriteGeometryCollection
{
    TArray<FSpriteGeometryShape>                  Shapes;                                                       // 0x0000(0x0010)
    enum class ESpritePolygonMode                 GeometryType;                                                 // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
    int32_t                                       PixelsPerSubdivisionX;                                        // 0x0014(0x0004)
    int32_t                                       PixelsPerSubdivisionY;                                        // 0x0018(0x0004)
    bool                                          bAvoidVertexMerging;                                          // 0x001C(0x0001)
    char                                          pa_001D[0x0003]                                               // 0x001D(0x0003)
    float                                         AlphaThreshold;                                               // 0x0020(0x0004)
    float                                         DetailAmount;                                                 // 0x0024(0x0004)
    float                                         SimplifyEpsilon;                                              // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
};


// ScriptStruct  Paper2D.SpriteAssetInitParameters
// Struct Size::0x0040
struct FSpriteAssetInitParameters
{
    char                                          pa_0000[0x0040]                                               // 0x0000(0x0040)
};


// ScriptStruct  Paper2D.PaperFlipbookKeyFrame
// Struct Size::0x0010
struct FPaperFlipbookKeyFrame
{
    UPaperSprite*                                 Sprite;                                                       // 0x0000(0x0008)
    int32_t                                       FrameRun;                                                     // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
};


// ScriptStruct  Paper2D.SpriteInstanceData
// Struct Size::0x0090
struct FSpriteInstanceData
{
    FMatrix                                       Transform;                                                    // 0x0000(0x0080)
    UPaperSprite*                                 SourceSprite;                                                 // 0x0080(0x0008)
    FColor                                        VertexColor;                                                  // 0x0088(0x0004)
    int32_t                                       MaterialIndex;                                                // 0x008C(0x0004)
};


// ScriptStruct  Paper2D.PaperSpriteSocket
// Struct Size::0x0070
struct FPaperSpriteSocket
{
    FTransform                                    LocalTransform;                                               // 0x0000(0x0060)
    FName                                         SocketName;                                                   // 0x0060(0x0008)
    char                                          pa_0068[0x0008]                                               // 0x0068(0x0008)
};


// ScriptStruct  Paper2D.PaperSpriteAtlasSlot
// Struct Size::0x0048
struct FPaperSpriteAtlasSlot
{
    TSoftObjectPtr<UPaperSprite>                  SpriteRef;                                                    // 0x0000(0x0030)
    int32_t                                       AtlasIndex;                                                   // 0x0030(0x0004)
    int32_t                                       X;                                                            // 0x0034(0x0004)
    int32_t                                       Y;                                                            // 0x0038(0x0004)
    int32_t                                       Width;                                                        // 0x003C(0x0004)
    int32_t                                       Height;                                                       // 0x0040(0x0004)
    char                                          pa_0044[0x0004]                                               // 0x0044(0x0004)
};


// ScriptStruct  Paper2D.PaperTileInfo
// Struct Size::0x0010
struct FPaperTileInfo
{
    UPaperTileSet*                                TileSet;                                                      // 0x0000(0x0008)
    int32_t                                       PackedTileIndex;                                              // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
};


// ScriptStruct  Paper2D.PaperTileMetadata
// Struct Size::0x0040
struct FPaperTileMetadata
{
    FName                                         UserDataName;                                                 // 0x0000(0x0008)
    FSpriteGeometryCollection                     CollisionData;                                                // 0x0008(0x0030)
    char                                          TerrainMembership;                                            // 0x0038(0x0001)
    char                                          pa_0039[0x0007]                                               // 0x0039(0x0007)
};


// ScriptStruct  Paper2D.PaperTileSetTerrain
// Struct Size::0x0018
struct FPaperTileSetTerrain
{
    FString                                       TerrainName;                                                  // 0x0000(0x0010)
    int32_t                                       CenterTileIndex;                                              // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  Paper2D.PaperTerrainMaterialRule
// Struct Size::0x0038
struct FPaperTerrainMaterialRule
{
    UPaperSprite*                                 StartCap;                                                     // 0x0000(0x0008)
    TArray<UPaperSprite*>                         Body;                                                         // 0x0008(0x0010)
    UPaperSprite*                                 EndCap;                                                       // 0x0018(0x0008)
    float                                         MinimumAngle;                                                 // 0x0020(0x0004)
    float                                         MaximumAngle;                                                 // 0x0024(0x0004)
    bool                                          bEnableCollision;                                             // 0x0028(0x0001)
    char                                          pa_0029[0x0003]                                               // 0x0029(0x0003)
    float                                         CollisionOffset;                                              // 0x002C(0x0004)
    int32_t                                       DrawOrder;                                                    // 0x0030(0x0004)
    char                                          pa_0034[0x0004]                                               // 0x0034(0x0004)
};


// ScriptStruct  TencentGME.TencentGmeMessage
// Struct Size::0x0030
struct FTencentGmeMessage
{
    FDateTime                                     LocalUTCTime;                                                 // 0x0000(0x0008)
    enum class UTencentGME                        MessageType;                                                  // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
    int32_t                                       code;                                                         // 0x000C(0x0004)
    FString                                       Message1;                                                     // 0x0010(0x0010)
    FString                                       Message2;                                                     // 0x0020(0x0010)
};


// ScriptStruct  TgfGraphics.TgfInteractableLightEntry
// Struct Size::0x0014
struct FTgfInteractableLightEntry : public FFastArraySerializerItem
{
    uint32_t                                      PathHash;                                                     // 0x000C(0x0004)
    bool                                          bLightOn;                                                     // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
};


// ScriptStruct  TgfGraphics.TgfInteractableLightArray
// Struct Size::0x0118
struct FTgfInteractableLightArray : public FFastArraySerializer
{
    TArray<FTgfInteractableLightEntry>            Items;                                                        // 0x0108(0x0010)
};


// ScriptStruct  ControlRigSpline.ControlRigSplineImpl
// Struct Size::0x0058
struct FControlRigSplineImpl
{
    char                                          pa_0000[0x0058]                                               // 0x0000(0x0058)
};


// ScriptStruct  ControlRigSpline.ControlRigSpline
// Struct Size::0x0018
struct FControlRigSpline
{
    char                                          pa_0000[0x0018]                                               // 0x0000(0x0018)
};


// ScriptStruct  ControlRigSpline.RigUnit
// Struct Size::0x0008
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRigSpline.RigUnit
// Struct Size::0x0040
struct FRigUnit : public FRigUnit
{
    TArray<FVector>                               Points;                                                       // 0x0008(0x0010)
    enum class ESplineType                        SplineMode;                                                   // 0x0018(0x0001)
    char                                          pa_0019[0x0003]                                               // 0x0019(0x0003)
    int32_t                                       SamplesPerSegment;                                            // 0x001C(0x0004)
    float                                         Compression;                                                  // 0x0020(0x0004)
    float                                         Stretch;                                                      // 0x0024(0x0004)
    FControlRigSpline                             Spline;                                                       // 0x0028(0x0018)
};


// ScriptStruct  ControlRigSpline.RigUnit
// Struct Size::0x0068
struct FRigUnit : public FRigUnitMutable
{
    TArray<FVector>                               Points;                                                       // 0x0040(0x0010)
    FControlRigSpline                             Spline;                                                       // 0x0050(0x0018)
};


// ScriptStruct  ControlRigSpline.RigUnit
// Struct Size::0x0040
struct FRigUnit : public FRigUnit
{
    FControlRigSpline                             Spline;                                                       // 0x0008(0x0018)
    float                                         U;                                                            // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
    FVector                                       position;                                                     // 0x0028(0x0018)
};


// ScriptStruct  ControlRigSpline.RigUnit
// Struct Size::0x00A0
struct FRigUnit : public FRigUnit
{
    FControlRigSpline                             Spline;                                                       // 0x0008(0x0018)
    FVector                                       UpVector;                                                     // 0x0020(0x0018)
    float                                         Roll;                                                         // 0x0038(0x0004)
    float                                         U;                                                            // 0x003C(0x0004)
    FTransform                                    Transform;                                                    // 0x0040(0x0060)
};


// ScriptStruct  ControlRigSpline.RigUnit
// Struct Size::0x0040
struct FRigUnit : public FRigUnit
{
    FControlRigSpline                             Spline;                                                       // 0x0008(0x0018)
    float                                         U;                                                            // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
    FVector                                       Tangent;                                                      // 0x0028(0x0018)
};


// ScriptStruct  ControlRigSpline.RigUnit
// Struct Size::0x0070
struct FRigUnit : public FRigUnitMutable
{
    FControlRigSpline                             Spline;                                                       // 0x0040(0x0018)
    FLinearColor                                  Color;                                                        // 0x0058(0x0010)
    float                                         Thickness;                                                    // 0x0068(0x0004)
    int32_t                                       Detail;                                                       // 0x006C(0x0004)
};


// ScriptStruct  ControlRigSpline.RigUnit
// Struct Size::0x0028
struct FRigUnit : public FRigUnit
{
    FControlRigSpline                             Spline;                                                       // 0x0008(0x0018)
    float                                         Length;                                                       // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
};


// ScriptStruct  ControlRigSpline.RigUnit
// Struct Size::0x0210
struct FRigUnit : public FRigUnit
{
    FRigElementKeyCollection                      Items;                                                        // 0x0040(0x0010)
    FControlRigSpline                             Spline;                                                       // 0x0050(0x0018)
    enum class EControlRigCurveAlignment          Alignment;                                                    // 0x0068(0x0001)
    char                                          pa_0069[0x0003]                                               // 0x0069(0x0003)
    float                                         Minimum;                                                      // 0x006C(0x0004)
    float                                         Maximum;                                                      // 0x0070(0x0004)
    int32_t                                       SamplingPrecision;                                            // 0x0074(0x0004)
    FVector                                       PrimaryAxis;                                                  // 0x0078(0x0018)
    FVector                                       SecondaryAxis;                                                // 0x0090(0x0018)
    FVector                                       PoleVectorPosition;                                           // 0x00A8(0x0018)
    TArray<FRigUnit>                              Rotations;                                                    // 0x00C0(0x0010)
    enum class EControlRigAnimEasingType          RotationEaseType;                                             // 0x00D0(0x0001)
    char                                          pa_00D1[0x0003]                                               // 0x00D1(0x0003)
    float                                         Weight;                                                       // 0x00D4(0x0004)
    bool                                          bPropagateToChildren;                                         // 0x00D8(0x0001)
    char                                          pa_00D9[0x0007]                                               // 0x00D9(0x0007)
    FRigUnit                                      DebugSettings;                                                // 0x00E0(0x0090)
    FRigUnit                                      WorkData;                                                     // 0x0170(0x0098)
    char                                          pa_0208[0x0008]                                               // 0x0208(0x0008)
};


// ScriptStruct  ControlRigSpline.RigUnit
// Struct Size::0x0210
struct FRigUnit : public FRigUnit
{
    TArray<FRigElementKey>                        Items;                                                        // 0x0040(0x0010)
    FControlRigSpline                             Spline;                                                       // 0x0050(0x0018)
    enum class EControlRigCurveAlignment          Alignment;                                                    // 0x0068(0x0001)
    char                                          pa_0069[0x0003]                                               // 0x0069(0x0003)
    float                                         Minimum;                                                      // 0x006C(0x0004)
    float                                         Maximum;                                                      // 0x0070(0x0004)
    int32_t                                       SamplingPrecision;                                            // 0x0074(0x0004)
    FVector                                       PrimaryAxis;                                                  // 0x0078(0x0018)
    FVector                                       SecondaryAxis;                                                // 0x0090(0x0018)
    FVector                                       PoleVectorPosition;                                           // 0x00A8(0x0018)
    TArray<FRigUnit>                              Rotations;                                                    // 0x00C0(0x0010)
    enum class EControlRigAnimEasingType          RotationEaseType;                                             // 0x00D0(0x0001)
    char                                          pa_00D1[0x0003]                                               // 0x00D1(0x0003)
    float                                         Weight;                                                       // 0x00D4(0x0004)
    bool                                          bPropagateToChildren;                                         // 0x00D8(0x0001)
    char                                          pa_00D9[0x0007]                                               // 0x00D9(0x0007)
    FRigUnit                                      DebugSettings;                                                // 0x00E0(0x0090)
    FRigUnit                                      WorkData;                                                     // 0x0170(0x0098)
    char                                          pa_0208[0x0008]                                               // 0x0208(0x0008)
};


// ScriptStruct  ControlRigSpline.RigUnit
// Struct Size::0x0068
struct FRigUnit : public FRigUnit
{
    FRigElementKeyCollection                      Items;                                                        // 0x0040(0x0010)
    FControlRigSpline                             Spline;                                                       // 0x0050(0x0018)
};


// ScriptStruct  ControlRigSpline.RigUnit
// Struct Size::0x0068
struct FRigUnit : public FRigUnit
{
    TArray<FRigElementKey>                        Items;                                                        // 0x0040(0x0010)
    FControlRigSpline                             Spline;                                                       // 0x0050(0x0018)
};


// ScriptStruct  ControlRigSpline.RigUnit
// Struct Size::0x0040
struct FRigUnit : public FRigUnit
{
    FControlRigSpline                             Spline;                                                       // 0x0008(0x0018)
    FVector                                       position;                                                     // 0x0020(0x0018)
    float                                         U;                                                            // 0x0038(0x0004)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
};


// ScriptStruct  ControlRigSpline.RigUnit
// Struct Size::0x0028
struct FRigUnit : public FRigUnit
{
    FControlRigSpline                             Spline;                                                       // 0x0008(0x0018)
    float                                         Percentage;                                                   // 0x0020(0x0004)
    float                                         U;                                                            // 0x0024(0x0004)
};


// ScriptStruct  IKRig.RetargetProfile
// Struct Size::0x0108
struct FRetargetProfile
{
    bool                                          bApplyTargetRetargetPose;                                     // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FName                                         TargetRetargetPoseName;                                       // 0x0004(0x0008)
    bool                                          bApplySourceRetargetPose;                                     // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
    FName                                         SourceRetargetPoseName;                                       // 0x0010(0x0008)
    bool                                          bApplyChainSettings;                                          // 0x0018(0x0001)
    char                                          pa_0019[0x0007]                                               // 0x0019(0x0007)
    TMap<FName,FTargetChainSettings>              ChainSettings;                                                // 0x0020(0x0050)
    bool                                          bApplyRootSettings;                                           // 0x0070(0x0001)
    char                                          pa_0071[0x0007]                                               // 0x0071(0x0007)
    FTargetRootSettings                           RootSettings;                                                 // 0x0078(0x0068)
    bool                                          bApplyGlobalSettings;                                         // 0x00E0(0x0001)
    char                                          pa_00E1[0x0003]                                               // 0x00E1(0x0003)
    FRetargetGlobalSettings                       GlobalSettings;                                               // 0x00E4(0x0020)
    char                                          pa_0104[0x0004]                                               // 0x0104(0x0004)
};


// ScriptStruct  IKRig.RetargetGlobalSettings
// Struct Size::0x0020
struct FRetargetGlobalSettings
{
    bool                                          bEnableRoot;                                                  // 0x0000(0x0001)
    bool                                          bEnableFK;                                                    // 0x0001(0x0001)
    bool                                          bEnableIK;                                                    // 0x0002(0x0001)
    bool                                          bWarping;                                                     // 0x0003(0x0001)
    enum class EWarpingDirectionSource            DirectionSource;                                              // 0x0004(0x0004)
    enum class EBasicAxis                         ForwardDirection;                                             // 0x0008(0x0004)
    FName                                         DirectionChain;                                               // 0x000C(0x0008)
    float                                         WarpForwards;                                                 // 0x0014(0x0004)
    float                                         SidewaysOffset;                                               // 0x0018(0x0004)
    float                                         WarpSplay;                                                    // 0x001C(0x0004)
};


// ScriptStruct  IKRig.TargetRootSettings
// Struct Size::0x0068
struct FTargetRootSettings
{
    float                                         RotationAlpha;                                                // 0x0000(0x0004)
    float                                         TranslationAlpha;                                             // 0x0004(0x0004)
    float                                         BlendToSource;                                                // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FVector                                       BlendToSourceWeights;                                         // 0x0010(0x0018)
    float                                         ScaleHorizontal;                                              // 0x0028(0x0004)
    float                                         ScaleVertical;                                                // 0x002C(0x0004)
    FVector                                       TranslationOffset;                                            // 0x0030(0x0018)
    FRotator                                      RotationOffset;                                               // 0x0048(0x0018)
    float                                         AffectIKHorizontal;                                           // 0x0060(0x0004)
    float                                         AffectIKVertical;                                             // 0x0064(0x0004)
};


// ScriptStruct  IKRig.TargetChainSettings
// Struct Size::0x00A0
struct FTargetChainSettings
{
    FTargetChainFKSettings                        FK;                                                           // 0x0000(0x0018)
    FTargetChainIKSettings                        IK;                                                           // 0x0018(0x0070)
    FTargetChainSpeedPlantSettings                SpeedPlanting;                                                // 0x0088(0x0018)
};


// ScriptStruct  IKRig.TargetChainSpeedPlantSettings
// Struct Size::0x0018
struct FTargetChainSpeedPlantSettings
{
    bool                                          EnableSpeedPlanting;                                          // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FName                                         SpeedCurveName;                                               // 0x0004(0x0008)
    float                                         SpeedThreshold;                                               // 0x000C(0x0004)
    float                                         UnplantStiffness;                                             // 0x0010(0x0004)
    float                                         UnplantCriticalDamping;                                       // 0x0014(0x0004)
};


// ScriptStruct  IKRig.TargetChainIKSettings
// Struct Size::0x0070
struct FTargetChainIKSettings
{
    bool                                          EnableIK;                                                     // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         BlendToSource;                                                // 0x0004(0x0004)
    FVector                                       BlendToSourceWeights;                                         // 0x0008(0x0018)
    FVector                                       StaticOffset;                                                 // 0x0020(0x0018)
    FVector                                       StaticLocalOffset;                                            // 0x0038(0x0018)
    FRotator                                      StaticRotationOffset;                                         // 0x0050(0x0018)
    float                                         Extension;                                                    // 0x0068(0x0004)
    bool                                          bAffectedByIKWarping;                                         // 0x006C(0x0001)
    char                                          pa_006D[0x0003]                                               // 0x006D(0x0003)
};


// ScriptStruct  IKRig.TargetChainFKSettings
// Struct Size::0x0018
struct FTargetChainFKSettings
{
    bool                                          EnableFK;                                                     // 0x0000(0x0001)
    enum class ERetargetRotationMode              RotationMode;                                                 // 0x0001(0x0001)
    char                                          pa_0002[0x0002]                                               // 0x0002(0x0002)
    float                                         RotationAlpha;                                                // 0x0004(0x0004)
    enum class ERetargetTranslationMode           TranslationMode;                                              // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
    float                                         TranslationAlpha;                                             // 0x000C(0x0004)
    float                                         PoleVectorMatching;                                           // 0x0010(0x0004)
    float                                         PoleVectorOffset;                                             // 0x0014(0x0004)
};


// ScriptStruct  IKRig.AnimNode
// Struct Size::0x01E0
struct FAnimNode : public FAnimNode
{
    FPoseLink                                     Source;                                                       // 0x0058(0x0010)
    UIKRigDefinition*                             RigDefinitionAsset;                                           // 0x0068(0x0008)
    TArray<FIKRigGoal>                            Goals;                                                        // 0x0070(0x0010)
    bool                                          bStartFromRefPose;                                            // 0x0080(0x0001)
    enum class EAnimAlphaInputType                AlphaInputType;                                               // 0x0081(0x0001)
    bool                                          bAlphaBoolEnabled;                                            // 0x0082(0x0001)
    char                                          pa_0083[0x0001]                                               // 0x0083(0x0001)
    float                                         Alpha;                                                        // 0x0084(0x0004)
    FInputScaleBias                               AlphaScaleBias;                                               // 0x0088(0x0008)
    FInputAlphaBoolBlend                          AlphaBoolBlend;                                               // 0x0090(0x0048)
    FName                                         AlphaCurveName;                                               // 0x00D8(0x0008)
    FInputScaleBiasClamp                          AlphaScaleBiasClamp;                                          // 0x00E0(0x0030)
    UIKRigProcessor*                              IKRigProcessor;                                               // 0x0110(0x0008)
    char                                          pa_0118[0x00C0]                                               // 0x0118(0x00C0)
    float                                         ActualAlpha;                                                  // 0x01D8(0x0004)
    char                                          pa_01DC[0x0004]                                               // 0x01DC(0x0004)
};


// ScriptStruct  IKRig.IKRigGoal
// Struct Size::0x00A0
struct FIKRigGoal
{
    FName                                         Name;                                                         // 0x0000(0x0008)
    enum class EIKRigGoalTransformSource          TransformSource;                                              // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
    FBoneReference                                SourceBone;                                                   // 0x000C(0x0010)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    FVector                                       position;                                                     // 0x0020(0x0018)
    FRotator                                      Rotation;                                                     // 0x0038(0x0018)
    float                                         PositionAlpha;                                                // 0x0050(0x0004)
    float                                         RotationAlpha;                                                // 0x0054(0x0004)
    enum class EIKRigGoalSpace                    PositionSpace;                                                // 0x0058(0x0001)
    enum class EIKRigGoalSpace                    RotationSpace;                                                // 0x0059(0x0001)
    char                                          pa_005A[0x0006]                                               // 0x005A(0x0006)
    FVector                                       FinalBlendedPosition;                                         // 0x0060(0x0018)
    char                                          pa_0078[0x0008]                                               // 0x0078(0x0008)
    FQuat                                         FinalBlendedRotation;                                         // 0x0080(0x0020)
};


// ScriptStruct  IKRig.AnimNode
// Struct Size::0x0258
struct FAnimNode : public FAnimNode
{
    TWeakObjectPtr<USkeletalMeshComponent>        SourceMeshComponent;                                          // 0x0010(0x0008)
    bool                                          bUseAttachedParent;                                           // 0x0018(0x0001)
    char                                          pa_0019[0x0007]                                               // 0x0019(0x0007)
    UIKRetargeter*                                IKRetargeterAsset;                                            // 0x0020(0x0008)
    FRetargetProfile                              CustomRetargetProfile;                                        // 0x0028(0x0108)
    bool                                          bSuppressWarnings;                                            // 0x0130(0x0001)
    bool                                          bCopyCurves;                                                  // 0x0131(0x0001)
    char                                          pa_0132[0x0006]                                               // 0x0132(0x0006)
    UIKRetargetProcessor*                         Processor;                                                    // 0x0138(0x0008)
    char                                          pa_0140[0x0118]                                               // 0x0140(0x0118)
};


// ScriptStruct  IKRig.IKRigGoalContainer
// Struct Size::0x0010
struct FIKRigGoalContainer
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
};


// ScriptStruct  IKRig.BoneChain
// Struct Size::0x0030
struct FBoneChain
{
    FName                                         ChainName;                                                    // 0x0000(0x0008)
    FBoneReference                                StartBone;                                                    // 0x0008(0x0010)
    FBoneReference                                EndBone;                                                      // 0x0018(0x0010)
    FName                                         IKGoalName;                                                   // 0x0028(0x0008)
};


// ScriptStruct  IKRig.RetargetDefinition
// Struct Size::0x0018
struct FRetargetDefinition
{
    FName                                         RootBone;                                                     // 0x0000(0x0008)
    TArray<FBoneChain>                            BoneChains;                                                   // 0x0008(0x0010)
};


// ScriptStruct  IKRig.GoalBone
// Struct Size::0x0010
struct FGoalBone
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
};


// ScriptStruct  IKRig.IKRigInputSkeleton
// Struct Size::0x0038
struct FIKRigInputSkeleton
{
    char                                          pa_0000[0x0038]                                               // 0x0000(0x0038)
};


// ScriptStruct  IKRig.IKRigSkeleton
// Struct Size::0x0070
struct FIKRigSkeleton
{
    TArray<FName>                                 BoneNames;                                                    // 0x0000(0x0010)
    TArray<int32_t>                               ParentIndices;                                                // 0x0010(0x0010)
    TArray<FName>                                 ExcludedBones;                                                // 0x0020(0x0010)
    TArray<FTransform>                            CurrentPoseGlobal;                                            // 0x0030(0x0010)
    TArray<FTransform>                            CurrentPoseLocal;                                             // 0x0040(0x0010)
    TArray<FTransform>                            RefPoseGlobal;                                                // 0x0050(0x0010)
    char                                          pa_0060[0x0010]                                               // 0x0060(0x0010)
};


// ScriptStruct  IKRig.RetargetChainMap
// Struct Size::0x0010
struct FRetargetChainMap
{
    FName                                         SourceChain;                                                  // 0x0000(0x0008)
    FName                                         TargetChain;                                                  // 0x0008(0x0008)
};


// ScriptStruct  IKRig.IKRetargetPose
// Struct Size::0x0068
struct FIKRetargetPose
{
    FVector                                       RootTranslationOffset;                                        // 0x0000(0x0018)
    TMap<FName,FQuat>                             BoneRotationOffsets;                                          // 0x0018(0x0050)
};


// ScriptStruct  IKRig.LimbSolverSettings
// Struct Size::0x0024
struct FLimbSolverSettings
{
    float                                         ReachPrecision;                                               // 0x0000(0x0004)
    enum class EAxis                              HingeRotationAxis;                                            // 0x0004(0x0001)
    char                                          pa_0005[0x0003]                                               // 0x0005(0x0003)
    int32_t                                       MaxIterations;                                                // 0x0008(0x0004)
    bool                                          bEnableLimit;                                                 // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
    float                                         MinRotationAngle;                                             // 0x0010(0x0004)
    bool                                          bAveragePull;                                                 // 0x0014(0x0001)
    char                                          pa_0015[0x0003]                                               // 0x0015(0x0003)
    float                                         PullDistribution;                                             // 0x0018(0x0004)
    float                                         ReachStepAlpha;                                               // 0x001C(0x0004)
    bool                                          bEnableTwistCorrection;                                       // 0x0020(0x0001)
    enum class EAxis                              EndBoneForwardAxis;                                           // 0x0021(0x0001)
    char                                          pa_0022[0x0002]                                               // 0x0022(0x0002)
};


// ScriptStruct  IKRig.LimbLink
// Struct Size::0x0068
struct FLimbLink
{
    char                                          pa_0000[0x0068]                                               // 0x0000(0x0068)
};


// ScriptStruct  IKRig.LimbSolver
// Struct Size::0x0018
struct FLimbSolver
{
    char                                          pa_0000[0x0018]                                               // 0x0000(0x0018)
};


// ScriptStruct  FullBodyIK.FBIKBoneLimit
// Struct Size::0x0020
struct FFBIKBoneLimit
{
    enum class EFBIKBoneLimitType                 LimitType;                                                    // 0x0000(0x0001)
    enum class EFBIKBoneLimitType                 LimitType;                                                    // 0x0001(0x0001)
    enum class EFBIKBoneLimitType                 LimitType;                                                    // 0x0002(0x0001)
    char                                          pa_0003[0x0005]                                               // 0x0003(0x0005)
    FVector                                       Limit;                                                        // 0x0008(0x0018)
};


// ScriptStruct  FullBodyIK.FBIKConstraintOption
// Struct Size::0x00A0
struct FFBIKConstraintOption
{
    FRigElementKey                                Item;                                                         // 0x0000(0x000C)
    bool                                          bEnabled;                                                     // 0x000C(0x0001)
    bool                                          bUseStiffness;                                                // 0x000D(0x0001)
    char                                          pa_000E[0x0002]                                               // 0x000E(0x0002)
    FVector                                       LinearStiffness;                                              // 0x0010(0x0018)
    FVector                                       AngularStiffness;                                             // 0x0028(0x0018)
    bool                                          bUseAngularLimit;                                             // 0x0040(0x0001)
    char                                          pa_0041[0x0007]                                               // 0x0041(0x0007)
    FFBIKBoneLimit                                AngularLimit;                                                 // 0x0048(0x0020)
    bool                                          bUsePoleVector;                                               // 0x0068(0x0001)
    enum class EPoleVectorOption                  PoleVectorOption;                                             // 0x0069(0x0001)
    char                                          pa_006A[0x0006]                                               // 0x006A(0x0006)
    FVector                                       PoleVector;                                                   // 0x0070(0x0018)
    FRotator                                      OffsetRotation;                                               // 0x0088(0x0018)
};


// ScriptStruct  FullBodyIK.MotionProcessInput
// Struct Size::0x0002
struct FMotionProcessInput
{
    bool                                          bForceEffectorRotationTarget;                                 // 0x0000(0x0001)
    bool                                          bOnlyApplyWhenReachedToTarget;                                // 0x0001(0x0001)
};


// ScriptStruct  FullBodyIK.FBIKDebugOption
// Struct Size::0x0080
struct FFBIKDebugOption
{
    bool                                          bDrawDebugHierarchy;                                          // 0x0000(0x0001)
    bool                                          bColorAngularMotionStrength;                                  // 0x0001(0x0001)
    bool                                          bColorLinearMotionStrength;                                   // 0x0002(0x0001)
    bool                                          bDrawDebugAxes;                                               // 0x0003(0x0001)
    bool                                          bDrawDebugEffector;                                           // 0x0004(0x0001)
    bool                                          bDrawDebugConstraints;                                        // 0x0005(0x0001)
    char                                          pa_0006[0x000A]                                               // 0x0006(0x000A)
    FTransform                                    DrawWorldOffset;                                              // 0x0010(0x0060)
    float                                         DrawSize;                                                     // 0x0070(0x0004)
    char                                          pa_0074[0x000C]                                               // 0x0074(0x000C)
};


// ScriptStruct  FullBodyIK.SolverInput
// Struct Size::0x0024
struct FSolverInput
{
    float                                         LinearMotionStrength;                                         // 0x0000(0x0004)
    float                                         MinLinearMotionStrength;                                      // 0x0004(0x0004)
    float                                         AngularMotionStrength;                                        // 0x0008(0x0004)
    float                                         MinAngularMotionStrength;                                     // 0x000C(0x0004)
    float                                         DefaultTargetClamp;                                           // 0x0010(0x0004)
    float                                         Precision;                                                    // 0x0014(0x0004)
    float                                         Damping;                                                      // 0x0018(0x0004)
    int32_t                                       MaxIterations;                                                // 0x001C(0x0004)
    bool                                          bUseJacobianTranspose;                                        // 0x0020(0x0001)
    char                                          pa_0021[0x0003]                                               // 0x0021(0x0003)
};


// ScriptStruct  FullBodyIK.FBIKEndEffector
// Struct Size::0x0060
struct FFBIKEndEffector
{
    FRigElementKey                                Item;                                                         // 0x0000(0x000C)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FVector                                       position;                                                     // 0x0010(0x0018)
    float                                         PositionAlpha;                                                // 0x0028(0x0004)
    int32_t                                       PositionDepth;                                                // 0x002C(0x0004)
    FQuat                                         Rotation;                                                     // 0x0030(0x0020)
    float                                         RotationAlpha;                                                // 0x0050(0x0004)
    int32_t                                       RotationDepth;                                                // 0x0054(0x0004)
    float                                         Pull;                                                         // 0x0058(0x0004)
    char                                          pa_005C[0x0004]                                               // 0x005C(0x0004)
};


// ScriptStruct  FullBodyIK.RigUnit
// Struct Size::0x0198
struct FRigUnit
{
    char                                          pa_0000[0x0198]                                               // 0x0000(0x0198)
};


// ScriptStruct  FullBodyIK.RigUnit
// Struct Size::0x02C0
struct FRigUnit : public FRigUnit
{
    FRigElementKey                                Root;                                                         // 0x0040(0x000C)
    char                                          pa_004C[0x0004]                                               // 0x004C(0x0004)
    TArray<FFBIKEndEffector>                      Effectors;                                                    // 0x0050(0x0010)
    TArray<FFBIKConstraintOption>                 Constraints;                                                  // 0x0060(0x0010)
    FSolverInput                                  SolverProperty;                                               // 0x0070(0x0024)
    FMotionProcessInput                           MotionProperty;                                               // 0x0094(0x0002)
    bool                                          bPropagateToChildren;                                         // 0x0096(0x0001)
    char                                          pa_0097[0x0009]                                               // 0x0097(0x0009)
    FFBIKDebugOption                              DebugOption;                                                  // 0x00A0(0x0080)
    FRigUnit                                      WorkData;                                                     // 0x0120(0x0198)
    char                                          pa_02B8[0x0008]                                               // 0x02B8(0x0008)
};


// ScriptStruct  PBIK.PBIKBoneSetting
// Struct Size::0x0050
struct FPBIKBoneSetting
{
    FName                                         bone;                                                         // 0x0000(0x0008)
    float                                         RotationStiffness;                                            // 0x0008(0x0004)
    float                                         PositionStiffness;                                            // 0x000C(0x0004)
    enum class EPBIKLimitType                     X;                                                            // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
    float                                         MinX;                                                         // 0x0014(0x0004)
    float                                         MaxX;                                                         // 0x0018(0x0004)
    enum class EPBIKLimitType                     Y;                                                            // 0x001C(0x0001)
    char                                          pa_001D[0x0003]                                               // 0x001D(0x0003)
    float                                         MinY;                                                         // 0x0020(0x0004)
    float                                         MaxY;                                                         // 0x0024(0x0004)
    enum class EPBIKLimitType                     Z;                                                            // 0x0028(0x0001)
    char                                          pa_0029[0x0003]                                               // 0x0029(0x0003)
    float                                         MinZ;                                                         // 0x002C(0x0004)
    float                                         MaxZ;                                                         // 0x0030(0x0004)
    bool                                          bUsePreferredAngles;                                          // 0x0034(0x0001)
    char                                          pa_0035[0x0003]                                               // 0x0035(0x0003)
    FVector                                       PreferredAngles;                                              // 0x0038(0x0018)
};


// ScriptStruct  PBIK.PBIKSolverSettings
// Struct Size::0x0010
struct FPBIKSolverSettings
{
    int32_t                                       Iterations;                                                   // 0x0000(0x0004)
    float                                         MassMultiplier;                                               // 0x0004(0x0004)
    float                                         MinMassMultiplier;                                            // 0x0008(0x0004)
    bool                                          bAllowStretch;                                                // 0x000C(0x0001)
    enum class EPBIKRootBehavior                  RootBehavior;                                                 // 0x000D(0x0001)
    bool                                          bStartSolveFromInputPose;                                     // 0x000E(0x0001)
    char                                          pa_000F[0x0001]                                               // 0x000F(0x0001)
};


// ScriptStruct  PBIK.PBIKSolver
// Struct Size::0x0068
struct FPBIKSolver
{
    char                                          pa_0000[0x0068]                                               // 0x0000(0x0068)
};


// ScriptStruct  PBIK.PBIKDebug
// Struct Size::0x0008
struct FPBIKDebug
{
    float                                         DrawScale;                                                    // 0x0000(0x0004)
    bool                                          bDrawDebug;                                                   // 0x0004(0x0001)
    char                                          pa_0005[0x0003]                                               // 0x0005(0x0003)
};


// ScriptStruct  PBIK.PBIKEffector
// Struct Size::0x0090
struct FPBIKEffector
{
    FName                                         bone;                                                         // 0x0000(0x0008)
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FTransform                                    Transform;                                                    // 0x0010(0x0060)
    float                                         PositionAlpha;                                                // 0x0070(0x0004)
    float                                         RotationAlpha;                                                // 0x0074(0x0004)
    float                                         StrengthAlpha;                                                // 0x0078(0x0004)
    float                                         PullChainAlpha;                                               // 0x007C(0x0004)
    float                                         PinRotation;                                                  // 0x0080(0x0004)
    char                                          pa_0084[0x000C]                                               // 0x0084(0x000C)
};


// ScriptStruct  PBIK.RigUnit
// Struct Size::0x0130
struct FRigUnit : public FRigUnit
{
    FName                                         Root;                                                         // 0x0040(0x0008)
    TArray<FPBIKEffector>                         Effectors;                                                    // 0x0048(0x0010)
    TArray<int32_t>                               EffectorSolverIndices;                                        // 0x0058(0x0010)
    TArray<FPBIKBoneSetting>                      BoneSettings;                                                 // 0x0068(0x0010)
    TArray<FName>                                 ExcludedBones;                                                // 0x0078(0x0010)
    FPBIKSolverSettings                           Settings;                                                     // 0x0088(0x0010)
    FPBIKDebug                                    Debug;                                                        // 0x0098(0x0008)
    TArray<int32_t>                               BoneSettingToSolverBoneIndex;                                 // 0x00A0(0x0010)
    TArray<int32_t>                               SolverBoneToElementIndex;                                     // 0x00B0(0x0010)
    FPBIKSolver                                   Solver;                                                       // 0x00C0(0x0068)
    bool                                          bNeedsInit;                                                   // 0x0128(0x0001)
    char                                          pa_0129[0x0007]                                               // 0x0129(0x0007)
};


// ScriptStruct  GameplayCameras.FOscillator
// Struct Size::0x000C
struct FFOscillator
{
    float                                         Amplitude;                                                    // 0x0000(0x0004)
    float                                         Frequency;                                                    // 0x0004(0x0004)
    enum class EInitialOscillatorOffset           InitialOffset;                                                // 0x0008(0x0001)
    enum class EOscillatorWaveform                Waveform;                                                     // 0x0009(0x0001)
    char                                          pa_000A[0x0002]                                               // 0x000A(0x0002)
};


// ScriptStruct  GameplayCameras.ROscillator
// Struct Size::0x0024
struct FROscillator
{
    FFOscillator                                  Pitch;                                                        // 0x0000(0x000C)
    FFOscillator                                  Yaw;                                                          // 0x000C(0x000C)
    FFOscillator                                  Roll;                                                         // 0x0018(0x000C)
};


// ScriptStruct  GameplayCameras.VOscillator
// Struct Size::0x0024
struct FVOscillator
{
    FFOscillator                                  X;                                                            // 0x0000(0x000C)
    FFOscillator                                  Y;                                                            // 0x000C(0x000C)
    FFOscillator                                  Z;                                                            // 0x0018(0x000C)
};


// ScriptStruct  GameplayCameras.CameraAnimationParams
// Struct Size::0x0040
struct FCameraAnimationParams
{
    float                                         PlayRate;                                                     // 0x0000(0x0004)
    float                                         Scale;                                                        // 0x0004(0x0004)
    enum class ECameraAnimationEasingType         EaseInType;                                                   // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
    float                                         EaseInDuration;                                               // 0x000C(0x0004)
    enum class ECameraAnimationEasingType         EaseOutType;                                                  // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
    float                                         EaseOutDuration;                                              // 0x0014(0x0004)
    bool                                          bLoop;                                                        // 0x0018(0x0001)
    bool                                          bRandomStartTime;                                             // 0x0019(0x0001)
    char                                          pa_001A[0x0002]                                               // 0x001A(0x0002)
    float                                         DurationOverride;                                             // 0x001C(0x0004)
    enum class ECameraAnimationPlaySpace          PlaySpace;                                                    // 0x0020(0x0001)
    char                                          pa_0021[0x0007]                                               // 0x0021(0x0007)
    FRotator                                      UserPlaySpaceRot;                                             // 0x0028(0x0018)
};


// ScriptStruct  GameplayCameras.CameraAnimationHandle
// Struct Size::0x0004
struct FCameraAnimationHandle
{
    char                                          pa_0000[0x0004]                                               // 0x0000(0x0004)
};


// ScriptStruct  GameplayCameras.ActiveCameraAnimationInfo
// Struct Size::0x0070
struct FActiveCameraAnimationInfo
{
    UCameraAnimationSequence*                     Sequence;                                                     // 0x0000(0x0008)
    FCameraAnimationParams                        Params;                                                       // 0x0008(0x0040)
    FCameraAnimationHandle                        Handle;                                                       // 0x0048(0x0004)
    char                                          pa_004C[0x0004]                                               // 0x004C(0x0004)
    UCameraAnimationSequencePlayer*               Player;                                                       // 0x0050(0x0008)
    UCameraAnimationSequenceCameraStandIn*        CameraStandIn;                                                // 0x0058(0x0008)
    float                                         EaseInCurrentTime;                                            // 0x0060(0x0004)
    float                                         EaseOutCurrentTime;                                           // 0x0064(0x0004)
    bool                                          bIsEasingIn;                                                  // 0x0068(0x0001)
    bool                                          bIsEasingOut;                                                 // 0x0069(0x0001)
    char                                          pa_006A[0x0006]                                               // 0x006A(0x0006)
};


// ScriptStruct  GameplayCameras.PerlinNoiseShaker
// Struct Size::0x0008
struct FPerlinNoiseShaker
{
    float                                         Amplitude;                                                    // 0x0000(0x0004)
    float                                         Frequency;                                                    // 0x0004(0x0004)
};


// ScriptStruct  GameplayCameras.WaveOscillator
// Struct Size::0x0010
struct FWaveOscillator
{
    float                                         Amplitude;                                                    // 0x0000(0x0004)
    float                                         Frequency;                                                    // 0x0004(0x0004)
    enum class EInitialWaveOscillatorOffsetType   InitialOffsetType;                                            // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
    float                                         FixedOffset;                                                  // 0x000C(0x0004)
};


// ScriptStruct  TemplateSequence.TemplateSectionPropertyScale
// Struct Size::0x0138
struct FTemplateSectionPropertyScale
{
    FGuid                                         ObjectBinding;                                                // 0x0000(0x0010)
    FMovieScenePropertyBinding                    PropertyBinding;                                              // 0x0010(0x0014)
    enum class ETemplateSectionPropertyScaleType  PropertyScaleType;                                            // 0x0024(0x0004)
    FMovieSceneFloatChannel                       FloatChannel;                                                 // 0x0028(0x0110)
};


// ScriptStruct  MovieScene.MovieScenePropertyBinding
// Struct Size::0x0014
struct FMovieScenePropertyBinding
{
    FName                                         PropertyName;                                                 // 0x0000(0x0008)
    FName                                         PropertyPath;                                                 // 0x0008(0x0008)
    bool                                          bCanUseClassLookup;                                           // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
};


// ScriptStruct  TemplateSequence.TemplateSequenceBindingOverrideData
// Struct Size::0x000C
struct FTemplateSequenceBindingOverrideData
{
    TWeakObjectPtr<UObject>                       Object;                                                       // 0x0000(0x0008)
    bool                                          bOverridesDefault;                                            // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
};


// ScriptStruct  AnimationSharing.AnimationSetup
// Struct Size::0x0018
struct FAnimationSetup
{
    UAnimSequence*                                AnimSequence;                                                 // 0x0000(0x0008)
    UAnimSharingStateInstance*                    AnimBlueprint;                                                // 0x0008(0x0008)
    FPerPlatformInt                               NumRandomizedInstances;                                       // 0x0010(0x0004)
    FPerPlatformBool                              Enabled;                                                      // 0x0014(0x0001)
    char                                          pa_0015[0x0003]                                               // 0x0015(0x0003)
};


// ScriptStruct  Engine.PerPlatformBool
// Struct Size::0x0001
struct FPerPlatformBool
{
    bool                                          Default;                                                      // 0x0000(0x0001)
};


// ScriptStruct  Engine.PerPlatformInt
// Struct Size::0x0004
struct FPerPlatformInt
{
    int32_t                                       Default;                                                      // 0x0000(0x0004)
};


// ScriptStruct  AnimationSharing.AnimationStateEntry
// Struct Size::0x0030
struct FAnimationStateEntry
{
    char                                          State;                                                        // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    TArray<FAnimationSetup>                       AnimationSetups;                                              // 0x0008(0x0010)
    bool                                          bOnDemand;                                                    // 0x0018(0x0001)
    bool                                          bAdditive;                                                    // 0x0019(0x0001)
    char                                          pa_001A[0x0002]                                               // 0x001A(0x0002)
    float                                         BlendTime;                                                    // 0x001C(0x0004)
    bool                                          bReturnToPreviousState;                                       // 0x0020(0x0001)
    bool                                          bSetNextState;                                                // 0x0021(0x0001)
    char                                          NextState;                                                    // 0x0022(0x0001)
    char                                          pa_0023[0x0001]                                               // 0x0023(0x0001)
    FPerPlatformInt                               MaximumNumberOfConcurrentInstances;                           // 0x0024(0x0004)
    float                                         WiggleTimePercentage;                                         // 0x0028(0x0004)
    bool                                          bRequiresCurves;                                              // 0x002C(0x0001)
    char                                          pa_002D[0x0003]                                               // 0x002D(0x0003)
};


// ScriptStruct  AnimationSharing.PerSkeletonAnimationSharingSetup
// Struct Size::0x0038
struct FPerSkeletonAnimationSharingSetup
{
    USkeleton*                                    Skeleton;                                                     // 0x0000(0x0008)
    USkeletalMesh*                                SkeletalMesh;                                                 // 0x0008(0x0008)
    UAnimSharingTransitionInstance*               BlendAnimBlueprint;                                           // 0x0010(0x0008)
    UAnimSharingAdditiveInstance*                 AdditiveAnimBlueprint;                                        // 0x0018(0x0008)
    UAnimationSharingStateProcessor*              StateProcessorClass;                                          // 0x0020(0x0008)
    TArray<FAnimationStateEntry>                  AnimationStates;                                              // 0x0028(0x0010)
};


// ScriptStruct  AnimationSharing.AnimationSharingScalability
// Struct Size::0x0010
struct FAnimationSharingScalability
{
    FPerPlatformBool                              UseBlendTransitions;                                          // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FPerPlatformFloat                             BlendSignificanceValue;                                       // 0x0004(0x0004)
    FPerPlatformInt                               MaximumNumberConcurrentBlends;                                // 0x0008(0x0004)
    FPerPlatformFloat                             TickSignificanceValue;                                        // 0x000C(0x0004)
};


// ScriptStruct  Engine.PerPlatformFloat
// Struct Size::0x0004
struct FPerPlatformFloat
{
    float                                         Default;                                                      // 0x0000(0x0004)
};


// ScriptStruct  AnimationSharing.TickAnimationSharingFunction
// Struct Size::0x0030
struct FTickAnimationSharingFunction : public FTickFunction
{
    char                                          pa_0028[0x0008]                                               // 0x0028(0x0008)
};


// ScriptStruct  UObjectPlugin.MyPluginStruct
// Struct Size::0x0010
struct FMyPluginStruct
{
    FString                                       TestString;                                                   // 0x0000(0x0010)
};


// ScriptStruct  DatasmithContent.DatasmithImportInfo
// Struct Size::0x0001
struct FDatasmithImportInfo
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  DatasmithContent.DatasmithCameraLookatTrackingSettingsTemplate
// Struct Size::0x0038
struct FDatasmithCameraLookatTrackingSettingsTemplate
{
    char                                          bEnableLookAtTracking;                                        // 0x0000(0x0001)
    char                                          bAllowRoll;                                                   // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    TSoftObjectPtr<AActor>                        ActorToTrack;                                                 // 0x0008(0x0030)
};


// ScriptStruct  DatasmithContent.DatasmithCameraFilmbackSettingsTemplate
// Struct Size::0x0008
struct FDatasmithCameraFilmbackSettingsTemplate
{
    float                                         SensorWidth;                                                  // 0x0000(0x0004)
    float                                         SensorHeight;                                                 // 0x0004(0x0004)
};


// ScriptStruct  DatasmithContent.DatasmithCameraLensSettingsTemplate
// Struct Size::0x0004
struct FDatasmithCameraLensSettingsTemplate
{
    float                                         MaxFStop;                                                     // 0x0000(0x0004)
};


// ScriptStruct  DatasmithContent.DatasmithCameraFocusSettingsTemplate
// Struct Size::0x0008
struct FDatasmithCameraFocusSettingsTemplate
{
    enum class ECameraFocusMethod                 FocusMethod;                                                  // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         ManualFocusDistance;                                          // 0x0004(0x0004)
};


// ScriptStruct  DatasmithContent.DatasmithPostProcessSettingsTemplate
// Struct Size::0x0040
struct FDatasmithPostProcessSettingsTemplate
{
    char                                          bOverride;                                                    // 0x0000(0x0001)
    char                                          bOverride;                                                    // 0x0000(0x0001)
    char                                          bOverride;                                                    // 0x0000(0x0001)
    char                                          bOverride;                                                    // 0x0000(0x0001)
    char                                          bOverride;                                                    // 0x0000(0x0001)
    char                                          bOverride;                                                    // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    char                                          bOverride;                                                    // 0x0004(0x0001)
    char                                          pa_0005[0x0003]                                               // 0x0005(0x0003)
    float                                         WhiteTemp;                                                    // 0x0008(0x0004)
    float                                         VignetteIntensity;                                            // 0x000C(0x0004)
    FVector4                                      ColorSaturation;                                              // 0x0010(0x0020)
    enum class EAutoExposureMethod                AutoExposureMethod;                                           // 0x0030(0x0001)
    char                                          pa_0031[0x0003]                                               // 0x0031(0x0003)
    float                                         CameraISO;                                                    // 0x0034(0x0004)
    float                                         CameraShutterSpeed;                                           // 0x0038(0x0004)
    float                                         DepthOfFieldFstop;                                            // 0x003C(0x0004)
};


// ScriptStruct  DatasmithContent.DatasmithAssetImportOptions
// Struct Size::0x0008
struct FDatasmithAssetImportOptions
{
    FName                                         PackagePath;                                                  // 0x0000(0x0008)
};


// ScriptStruct  DatasmithContent.DatasmithStaticMeshImportOptions
// Struct Size::0x0004
struct FDatasmithStaticMeshImportOptions
{
    enum class EDatasmithImportLightmapMin        MinLightmapResolution;                                        // 0x0000(0x0001)
    enum class EDatasmithImportLightmapMax        MaxLightmapResolution;                                        // 0x0001(0x0001)
    bool                                          bGenerateLightmapUVs;                                         // 0x0002(0x0001)
    bool                                          bRemoveDegenerates;                                           // 0x0003(0x0001)
};


// ScriptStruct  DatasmithContent.DatasmithReimportOptions
// Struct Size::0x0002
struct FDatasmithReimportOptions
{
    bool                                          bUpdateActors;                                                // 0x0000(0x0001)
    bool                                          bRespawnDeletedActors;                                        // 0x0001(0x0001)
};


// ScriptStruct  DatasmithContent.DatasmithImportBaseOptions
// Struct Size::0x0014
struct FDatasmithImportBaseOptions
{
    enum class EDatasmithImportScene              SceneHandling;                                                // 0x0000(0x0001)
    bool                                          bIncludeGeometry;                                             // 0x0001(0x0001)
    bool                                          bIncludeMaterial;                                             // 0x0002(0x0001)
    bool                                          bIncludeLight;                                                // 0x0003(0x0001)
    bool                                          bIncludeCamera;                                               // 0x0004(0x0001)
    bool                                          bIncludeAnimation;                                            // 0x0005(0x0001)
    char                                          pa_0006[0x0002]                                               // 0x0006(0x0002)
    FDatasmithAssetImportOptions                  AssetOptions;                                                 // 0x0008(0x0008)
    FDatasmithStaticMeshImportOptions             StaticMeshOptions;                                            // 0x0010(0x0004)
};


// ScriptStruct  DatasmithContent.DatasmithTessellationOptions
// Struct Size::0x0010
struct FDatasmithTessellationOptions
{
    float                                         ChordTolerance;                                               // 0x0000(0x0004)
    float                                         MaxEdgeLength;                                                // 0x0004(0x0004)
    float                                         NormalTolerance;                                              // 0x0008(0x0004)
    enum class EDatasmithCADStitchingTechnique    StitchingTechnique;                                           // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
};


// ScriptStruct  DatasmithContent.DatasmithRetessellationOptions
// Struct Size::0x0014
struct FDatasmithRetessellationOptions : public FDatasmithTessellationOptions
{
    enum class EDatasmithCADRetessellationRule    RetessellationRule;                                           // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
};


// ScriptStruct  DatasmithContent.DatasmithStaticParameterSetTemplate
// Struct Size::0x0050
struct FDatasmithStaticParameterSetTemplate
{
    TMap<FName,bool>                              StaticSwitchParameters;                                       // 0x0000(0x0050)
};


// ScriptStruct  DatasmithContent.DatasmithMeshBuildSettingsTemplate
// Struct Size::0x0010
struct FDatasmithMeshBuildSettingsTemplate
{
    char                                          bUseMikkTSpace;                                               // 0x0000(0x0001)
    char                                          bRecomputeNormals;                                            // 0x0000(0x0001)
    char                                          bRecomputeTangents;                                           // 0x0000(0x0001)
    char                                          bRemoveDegenerates;                                           // 0x0000(0x0001)
    char                                          bUseHighPrecisionTangentBasis;                                // 0x0000(0x0001)
    char                                          bUseFullPrecisionUVs;                                         // 0x0000(0x0001)
    char                                          bGenerateLightmapUVs;                                         // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    int32_t                                       MinLightmapResolution;                                        // 0x0004(0x0004)
    int32_t                                       SrcLightmapIndex;                                             // 0x0008(0x0004)
    int32_t                                       DstLightmapIndex;                                             // 0x000C(0x0004)
};


// ScriptStruct  DatasmithContent.DatasmithStaticMaterialTemplate
// Struct Size::0x0010
struct FDatasmithStaticMaterialTemplate
{
    FName                                         MaterialSlotName;                                             // 0x0000(0x0008)
    UMaterialInterface*                           MaterialInterface;                                            // 0x0008(0x0008)
};


// ScriptStruct  DatasmithContent.DatasmithMeshSectionInfoTemplate
// Struct Size::0x0004
struct FDatasmithMeshSectionInfoTemplate
{
    int32_t                                       MaterialIndex;                                                // 0x0000(0x0004)
};


// ScriptStruct  DatasmithContent.DatasmithMeshSectionInfoMapTemplate
// Struct Size::0x0050
struct FDatasmithMeshSectionInfoMapTemplate
{
    TMap<uint32_t,FDatasmithMeshSectionInfoTemplate>Map;                                                        // 0x0000(0x0050)
};


// ScriptStruct  VariantManagerContent.FunctionCaller
// Struct Size::0x0008
struct FFunctionCaller
{
    FName                                         FunctionName;                                                 // 0x0000(0x0008)
};


// ScriptStruct  VariantManagerContent.CapturedPropSegment
// Struct Size::0x0028
struct FCapturedPropSegment
{
    FString                                       PropertyName;                                                 // 0x0000(0x0010)
    int32_t                                       PropertyIndex;                                                // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FString                                       ComponentName;                                                // 0x0018(0x0010)
};


// ScriptStruct  VariantManagerContent.VariantDependency
// Struct Size::0x0068
struct FVariantDependency
{
    TSoftObjectPtr<UVariantSet>                   VariantSet;                                                   // 0x0000(0x0030)
    TSoftObjectPtr<UVariant>                      Variant;                                                      // 0x0030(0x0030)
    bool                                          bEnabled;                                                     // 0x0060(0x0001)
    char                                          pa_0061[0x0007]                                               // 0x0061(0x0007)
};


// ScriptStruct  GLTFExporter.GLTFExportMessages
// Struct Size::0x0030
struct FGLTFExportMessages
{
    TArray<FString>                               Suggestions;                                                  // 0x0000(0x0010)
    TArray<FString>                               Warnings;                                                     // 0x0010(0x0010)
    TArray<FString>                               Errors;                                                       // 0x0020(0x0010)
};


// ScriptStruct  GLTFExporter.GLTFOverrideMaterialBakeSettings
// Struct Size::0x0006
struct FGLTFOverrideMaterialBakeSettings
{
    bool                                          bOverrideSize;                                                // 0x0000(0x0001)
    enum class EGLTFMaterialBakeSizePOT           Size;                                                         // 0x0001(0x0001)
    bool                                          bOverrideFilter;                                              // 0x0002(0x0001)
    enum class TextureFilter                      Filter;                                                       // 0x0003(0x0001)
    bool                                          bOverrideTiling;                                              // 0x0004(0x0001)
    enum class TextureAddress                     Tiling;                                                       // 0x0005(0x0001)
};


// ScriptStruct  ChaosCloth.ChaosClothWeightedValue
// Struct Size::0x0008
struct FChaosClothWeightedValue
{
    float                                         Low;                                                          // 0x0000(0x0004)
    float                                         High;                                                         // 0x0004(0x0004)
};


// ScriptStruct  ChaosCaching.CacheEventBase
// Struct Size::0x0008
struct FCacheEventBase
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
};


// ScriptStruct  ChaosCaching.CacheEventTrack
// Struct Size::0x0038
struct FCacheEventTrack
{
    FName                                         Name;                                                         // 0x0000(0x0008)
    UScriptStruct*                                Struct;                                                       // 0x0008(0x0008)
    TArray<float>                                 TimeStamps;                                                   // 0x0010(0x0010)
    char                                          pa_0020[0x0018]                                               // 0x0020(0x0018)
};


// ScriptStruct  ChaosCaching.ObservedComponent
// Struct Size::0x0170
struct FObservedComponent
{
    FName                                         CacheName;                                                    // 0x0000(0x0008)
    FComponentReference                           ComponentRef;                                                 // 0x0008(0x0028)
    FSoftComponentReference                       SoftComponentRef;                                             // 0x0030(0x0050)
    bool                                          bIsSimulating;                                                // 0x0080(0x0001)
    char                                          pa_0081[0x00EF]                                               // 0x0081(0x00EF)
};


// ScriptStruct  Engine.SoftComponentReference
// Struct Size::0x0050
struct FSoftComponentReference : public FBaseComponentReference
{
    TSoftObjectPtr<AActor>                        OtherActor;                                                   // 0x0020(0x0030)
};


// ScriptStruct  ChaosCaching.ParticleTransformTrack
// Struct Size::0x0048
struct FParticleTransformTrack
{
    FRawAnimSequenceTrack                         RawTransformTrack;                                            // 0x0000(0x0030)
    float                                         BeginOffset;                                                  // 0x0030(0x0004)
    bool                                          bDeactivateOnEnd;                                             // 0x0034(0x0001)
    char                                          pa_0035[0x0003]                                               // 0x0035(0x0003)
    TArray<float>                                 KeyTimestamps;                                                // 0x0038(0x0010)
};


// ScriptStruct  Engine.RawAnimSequenceTrack
// Struct Size::0x0030
struct FRawAnimSequenceTrack
{
    TArray<FVector3f>                             PosKeys;                                                      // 0x0000(0x0010)
    TArray<FQuat4f>                               RotKeys;                                                      // 0x0010(0x0010)
    TArray<FVector3f>                             ScaleKeys;                                                    // 0x0020(0x0010)
};


// ScriptStruct  ChaosCaching.PerParticleCacheData
// Struct Size::0x0098
struct FPerParticleCacheData
{
    FParticleTransformTrack                       TransformData;                                                // 0x0000(0x0048)
    TMap<FName,FRichCurve>                        CurveData;                                                    // 0x0048(0x0050)
};


// ScriptStruct  ChaosCaching.CacheSpawnableTemplate
// Struct Size::0x00D0
struct FCacheSpawnableTemplate
{
    UObject*                                      DuplicatedTemplate;                                           // 0x0000(0x0008)
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FTransform                                    InitialTransform;                                             // 0x0010(0x0060)
    FTransform                                    ComponentTransform;                                           // 0x0070(0x0060)
};


// ScriptStruct  ChaosCaching.RichCurves
// Struct Size::0x0010
struct FRichCurves
{
    TArray<FRichCurve>                            RichCurves;                                                   // 0x0000(0x0010)
};


// ScriptStruct  ChaosCaching.EnableStateEvent
// Struct Size::0x0010
struct FEnableStateEvent : public FCacheEventBase
{
    int32_t                                       Index;                                                        // 0x0008(0x0004)
    bool                                          bEnable;                                                      // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
};


// ScriptStruct  ChaosCaching.BreakingEvent
// Struct Size::0x0090
struct FBreakingEvent : public FCacheEventBase
{
    int32_t                                       Index;                                                        // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FVector                                       Location;                                                     // 0x0010(0x0018)
    FVector                                       Velocity;                                                     // 0x0028(0x0018)
    FVector                                       AngularVelocity;                                              // 0x0040(0x0018)
    float                                         Mass;                                                         // 0x0058(0x0004)
    char                                          pa_005C[0x0004]                                               // 0x005C(0x0004)
    FVector                                       BoundingBoxMin;                                               // 0x0060(0x0018)
    FVector                                       BoundingBoxMax;                                               // 0x0078(0x0018)
};


// ScriptStruct  ChaosCaching.CollisionEvent
// Struct Size::0x00F0
struct FCollisionEvent : public FCacheEventBase
{
    FVector                                       Location;                                                     // 0x0008(0x0018)
    FVector                                       AccumulatedImpulse;                                           // 0x0020(0x0018)
    FVector                                       Normal;                                                       // 0x0038(0x0018)
    FVector                                       Velocity1;                                                    // 0x0050(0x0018)
    FVector                                       Velocity2;                                                    // 0x0068(0x0018)
    FVector                                       DeltaVelocity1;                                               // 0x0080(0x0018)
    FVector                                       DeltaVelocity2;                                               // 0x0098(0x0018)
    FVector                                       AngularVelocity1;                                             // 0x00B0(0x0018)
    FVector                                       AngularVelocity2;                                             // 0x00C8(0x0018)
    float                                         Mass1;                                                        // 0x00E0(0x0004)
    float                                         Mass2;                                                        // 0x00E4(0x0004)
    float                                         PenetrationDepth;                                             // 0x00E8(0x0004)
    char                                          pa_00EC[0x0004]                                               // 0x00EC(0x0004)
};


// ScriptStruct  ChaosCaching.TrailingEvent
// Struct Size::0x0088
struct FTrailingEvent : public FCacheEventBase
{
    int32_t                                       Index;                                                        // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FVector                                       Location;                                                     // 0x0010(0x0018)
    FVector                                       Velocity;                                                     // 0x0028(0x0018)
    FVector                                       AngularVelocity;                                              // 0x0040(0x0018)
    FVector                                       BoundingBoxMin;                                               // 0x0058(0x0018)
    FVector                                       BoundingBoxMax;                                               // 0x0070(0x0018)
};


// ScriptStruct  ChaosCaching.MovieSceneChaosCacheParams
// Struct Size::0x0028
struct FMovieSceneChaosCacheParams : public FMovieSceneBaseCacheParams
{
    UChaosCacheCollection*                        CacheCollection;                                              // 0x0020(0x0008)
};


// ScriptStruct  ChaosCaching.MovieSceneChaosCacheSectionTemplateParameters
// Struct Size::0x0030
struct FMovieSceneChaosCacheSectionTemplateParameters : public FMovieSceneBaseCacheSectionTemplateParameters
{
    FMovieSceneChaosCacheParams                   ChaosCacheParams;                                             // 0x0008(0x0028)
};


// ScriptStruct  ChaosCaching.MovieSceneChaosCacheSectionTemplate
// Struct Size::0x0050
struct FMovieSceneChaosCacheSectionTemplate : public FMovieSceneEvalTemplate
{
    FMovieSceneChaosCacheSectionTemplateParametersParams;                                                       // 0x0020(0x0030)
};


// ScriptStruct  GeometryCollectionTracks.MovieSceneGeometryCollectionParams
// Struct Size::0x0038
struct FMovieSceneGeometryCollectionParams
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    FSoftObjectPath                               GeometryCollectionCache;                                      // 0x0008(0x0020)
    FFrameNumber                                  StartFrameOffset;                                             // 0x0028(0x0004)
    FFrameNumber                                  EndFrameOffset;                                               // 0x002C(0x0004)
    float                                         PlayRate;                                                     // 0x0030(0x0004)
    char                                          pa_0034[0x0004]                                               // 0x0034(0x0004)
};


// ScriptStruct  GeometryCollectionTracks.MovieSceneGeometryCollectionSectionTemplateParameters
// Struct Size::0x0040
struct FMovieSceneGeometryCollectionSectionTemplateParameters : public FMovieSceneGeometryCollectionParams
{
    FFrameNumber                                  SectionStartTime;                                             // 0x0038(0x0004)
    FFrameNumber                                  SectionEndTime;                                               // 0x003C(0x0004)
};


// ScriptStruct  GeometryCollectionTracks.MovieSceneGeometryCollectionSectionTemplate
// Struct Size::0x0060
struct FMovieSceneGeometryCollectionSectionTemplate : public FMovieSceneEvalTemplate
{
    FMovieSceneGeometryCollectionSectionTemplateParametersParams;                                               // 0x0020(0x0040)
};


// ScriptStruct  DataflowCore.DataflowNode
// Struct Size::0x00D0
struct FDataflowNode
{
    char                                          pa_0000[0x00C8]                                               // 0x0000(0x00C8)
    bool                                          bActive;                                                      // 0x00C8(0x0001)
    char                                          pa_00C9[0x0007]                                               // 0x00C9(0x0007)
};


// ScriptStruct  GeometryCollectionNodes.CloseGeometryOnCollectionDataflowNode
// Struct Size::0x0180
struct FCloseGeometryOnCollectionDataflowNode : public FDataflowNode
{
    FManagedArrayCollection                       Collection;                                                   // 0x00D0(0x00B0)
};


// ScriptStruct  Chaos.ManagedArrayCollection
// Struct Size::0x00B0
struct FManagedArrayCollection
{
    char                                          pa_0000[0x00B0]                                               // 0x0000(0x00B0)
};


// ScriptStruct  GeometryCollectionNodes.SkeletalMeshToCollectionDataflowNode
// Struct Size::0x0188
struct FSkeletalMeshToCollectionDataflowNode : public FDataflowNode
{
    USkeletalMesh*                                SkeletalMesh;                                                 // 0x00D0(0x0008)
    FManagedArrayCollection                       Collection;                                                   // 0x00D8(0x00B0)
};


// ScriptStruct  GeometryCollectionNodes.GenerateTetrahedralCollectionDataflowNodes
// Struct Size::0x0180
struct FGenerateTetrahedralCollectionDataflowNodes : public FDataflowNode
{
    FManagedArrayCollection                       Collection;                                                   // 0x00D0(0x00B0)
};


// ScriptStruct  GeometryCollectionNodes.GetCollectionAssetDataflowNode
// Struct Size::0x0180
struct FGetCollectionAssetDataflowNode : public FDataflowNode
{
    FManagedArrayCollection                       Output;                                                       // 0x00D0(0x00B0)
};


// ScriptStruct  GeometryCollectionNodes.ExampleCollectionEditDataflowNode
// Struct Size::0x0188
struct FExampleCollectionEditDataflowNode : public FDataflowNode
{
    float                                         Scale;                                                        // 0x00D0(0x0004)
    char                                          pa_00D4[0x0004]                                               // 0x00D4(0x0004)
    FManagedArrayCollection                       Collection;                                                   // 0x00D8(0x00B0)
};


// ScriptStruct  GeometryCollectionNodes.SetCollectionAssetDataflowNode
// Struct Size::0x0180
struct FSetCollectionAssetDataflowNode : public FDataflowNode
{
    FManagedArrayCollection                       Collection;                                                   // 0x00D0(0x00B0)
};


// ScriptStruct  GeometryCollectionNodes.ResetGeometryCollectionDataflowNode
// Struct Size::0x0180
struct FResetGeometryCollectionDataflowNode : public FDataflowNode
{
    FManagedArrayCollection                       Collection;                                                   // 0x00D0(0x00B0)
};


// ScriptStruct  GeometryCollectionNodes.PrintStringDataflowNode
// Struct Size::0x00F0
struct FPrintStringDataflowNode : public FDataflowNode
{
    bool                                          PrintToScreen;                                                // 0x00D0(0x0001)
    bool                                          PrintToLog;                                                   // 0x00D1(0x0001)
    char                                          pa_00D2[0x0002]                                               // 0x00D2(0x0002)
    FColor                                        Color;                                                        // 0x00D4(0x0004)
    float                                         Duration;                                                     // 0x00D8(0x0004)
    char                                          pa_00DC[0x0004]                                               // 0x00DC(0x0004)
    FString                                       String;                                                       // 0x00E0(0x0010)
};


// ScriptStruct  GeometryCollectionNodes.LogStringDataflowNode
// Struct Size::0x00E8
struct FLogStringDataflowNode : public FDataflowNode
{
    bool                                          PrintToLog;                                                   // 0x00D0(0x0001)
    char                                          pa_00D1[0x0007]                                               // 0x00D1(0x0007)
    FString                                       String;                                                       // 0x00D8(0x0010)
};


// ScriptStruct  GeometryCollectionNodes.MakeLiteralStringDataflowNode
// Struct Size::0x00F0
struct FMakeLiteralStringDataflowNode : public FDataflowNode
{
    FString                                       Value;                                                        // 0x00D0(0x0010)
    FString                                       String;                                                       // 0x00E0(0x0010)
};


// ScriptStruct  GeometryCollectionNodes.BoundingBoxDataflowNode
// Struct Size::0x01B8
struct FBoundingBoxDataflowNode : public FDataflowNode
{
    FManagedArrayCollection                       Collection;                                                   // 0x00D0(0x00B0)
    FBox                                          BoundingBox;                                                  // 0x0180(0x0038)
};


// ScriptStruct  GeometryCollectionNodes.ExpandBoundingBoxDataflowNode
// Struct Size::0x0170
struct FExpandBoundingBoxDataflowNode : public FDataflowNode
{
    FBox                                          BoundingBox;                                                  // 0x00D0(0x0038)
    FVector                                       Min;                                                          // 0x0108(0x0018)
    FVector                                       Max;                                                          // 0x0120(0x0018)
    FVector                                       Center;                                                       // 0x0138(0x0018)
    FVector                                       HalfExtents;                                                  // 0x0150(0x0018)
    float                                         Volume;                                                       // 0x0168(0x0004)
    char                                          pa_016C[0x0004]                                               // 0x016C(0x0004)
};


// ScriptStruct  GeometryCollectionNodes.VectorToStringDataflowNode
// Struct Size::0x00F8
struct FVectorToStringDataflowNode : public FDataflowNode
{
    FVector                                       Vector;                                                       // 0x00D0(0x0018)
    FString                                       String;                                                       // 0x00E8(0x0010)
};


// ScriptStruct  GeometryCollectionNodes.FloatToStringDataflowNode
// Struct Size::0x00E8
struct FFloatToStringDataflowNode : public FDataflowNode
{
    float                                         float;                                                        // 0x00D0(0x0004)
    char                                          pa_00D4[0x0004]                                               // 0x00D4(0x0004)
    FString                                       String;                                                       // 0x00D8(0x0010)
};


// ScriptStruct  GeometryCollectionNodes.MakePointsDataflowNode
// Struct Size::0x00F0
struct FMakePointsDataflowNode : public FDataflowNode
{
    TArray<FVector>                               Point;                                                        // 0x00D0(0x0010)
    TArray<FVector>                               Points;                                                       // 0x00E0(0x0010)
};


// ScriptStruct  GeometryCollectionNodes.MakeBoxDataflowNode
// Struct Size::0x0170
struct FMakeBoxDataflowNode : public FDataflowNode
{
    enum class EMakeBoxDataTypeEnum               DataType;                                                     // 0x00D0(0x0001)
    char                                          pa_00D1[0x0007]                                               // 0x00D1(0x0007)
    FVector                                       Min;                                                          // 0x00D8(0x0018)
    FVector                                       Max;                                                          // 0x00F0(0x0018)
    FVector                                       Center;                                                       // 0x0108(0x0018)
    FVector                                       Size;                                                         // 0x0120(0x0018)
    FBox                                          Box;                                                          // 0x0138(0x0038)
};


// ScriptStruct  GeometryCollectionNodes.UniformScatterPointsDataflowNode
// Struct Size::0x0128
struct FUniformScatterPointsDataflowNode : public FDataflowNode
{
    int32_t                                       MinNumberOfPoints;                                            // 0x00D0(0x0004)
    int32_t                                       MaxNumberOfPoints;                                            // 0x00D4(0x0004)
    float                                         RandomSeed;                                                   // 0x00D8(0x0004)
    char                                          pa_00DC[0x0004]                                               // 0x00DC(0x0004)
    FBox                                          BoundingBox;                                                  // 0x00E0(0x0038)
    TArray<FVector>                               Points;                                                       // 0x0118(0x0010)
};


// ScriptStruct  GeometryCollectionNodes.RadialScatterPointsDataflowNode
// Struct Size::0x0128
struct FRadialScatterPointsDataflowNode : public FDataflowNode
{
    FVector                                       Center;                                                       // 0x00D0(0x0018)
    FVector                                       Normal;                                                       // 0x00E8(0x0018)
    float                                         Radius;                                                       // 0x0100(0x0004)
    int32_t                                       AngularSteps;                                                 // 0x0104(0x0004)
    int32_t                                       RadialSteps;                                                  // 0x0108(0x0004)
    float                                         AngleOffset;                                                  // 0x010C(0x0004)
    float                                         Variability;                                                  // 0x0110(0x0004)
    float                                         RandomSeed;                                                   // 0x0114(0x0004)
    TArray<FVector>                               Points;                                                       // 0x0118(0x0010)
};


// ScriptStruct  GeometryCollectionNodes.MakeLiteralFloatDataflowNode
// Struct Size::0x00D8
struct FMakeLiteralFloatDataflowNode : public FDataflowNode
{
    float                                         Value;                                                        // 0x00D0(0x0004)
    float                                         float;                                                        // 0x00D4(0x0004)
};


// ScriptStruct  GeometryCollectionNodes.MakeLiteralIntDataflowNode
// Struct Size::0x00D8
struct FMakeLiteralIntDataflowNode : public FDataflowNode
{
    int32_t                                       Value;                                                        // 0x00D0(0x0004)
    int32_t                                       Int;                                                          // 0x00D4(0x0004)
};


// ScriptStruct  GeometryCollectionNodes.MakeLiteralBoolDataflowNode
// Struct Size::0x00D8
struct FMakeLiteralBoolDataflowNode : public FDataflowNode
{
    bool                                          Value;                                                        // 0x00D0(0x0001)
    bool                                          bool;                                                         // 0x00D1(0x0001)
    char                                          pa_00D2[0x0006]                                               // 0x00D2(0x0006)
};


// ScriptStruct  GeometryCollectionNodes.MakeLiteralVectorDataflowNode
// Struct Size::0x0100
struct FMakeLiteralVectorDataflowNode : public FDataflowNode
{
    FVector                                       Value;                                                        // 0x00D0(0x0018)
    FVector                                       Vector;                                                       // 0x00E8(0x0018)
};


// ScriptStruct  GeometryCollectionNodes.IntToStringDataflowNode
// Struct Size::0x00E8
struct FIntToStringDataflowNode : public FDataflowNode
{
    int32_t                                       Int;                                                          // 0x00D0(0x0004)
    char                                          pa_00D4[0x0004]                                               // 0x00D4(0x0004)
    FString                                       String;                                                       // 0x00D8(0x0010)
};


// ScriptStruct  GeometryCollectionNodes.BoolToStringDataflowNode
// Struct Size::0x00E8
struct FBoolToStringDataflowNode : public FDataflowNode
{
    bool                                          bool;                                                         // 0x00D0(0x0001)
    char                                          pa_00D1[0x0007]                                               // 0x00D1(0x0007)
    FString                                       String;                                                       // 0x00D8(0x0010)
};


// ScriptStruct  GeometryCollectionNodes.ExpandVectorDataflowNode
// Struct Size::0x00F8
struct FExpandVectorDataflowNode : public FDataflowNode
{
    FVector                                       Vector;                                                       // 0x00D0(0x0018)
    float                                         X;                                                            // 0x00E8(0x0004)
    float                                         Y;                                                            // 0x00EC(0x0004)
    float                                         Z;                                                            // 0x00F0(0x0004)
    char                                          pa_00F4[0x0004]                                               // 0x00F4(0x0004)
};


// ScriptStruct  GeometryCollectionNodes.IntToFloatDataflowNode
// Struct Size::0x00D8
struct FIntToFloatDataflowNode : public FDataflowNode
{
    int32_t                                       Int;                                                          // 0x00D0(0x0004)
    float                                         float;                                                        // 0x00D4(0x0004)
};


// ScriptStruct  GeometryCollectionNodes.VoronoiFractureDataflowNode
// Struct Size::0x01C0
struct FVoronoiFractureDataflowNode : public FDataflowNode
{
    FManagedArrayCollection                       Collection;                                                   // 0x00D0(0x00B0)
    TArray<FVector>                               Points;                                                       // 0x0180(0x0010)
    float                                         RandomSeed;                                                   // 0x0190(0x0004)
    float                                         ChanceToFracture;                                             // 0x0194(0x0004)
    bool                                          GroupFracture;                                                // 0x0198(0x0001)
    char                                          pa_0199[0x0003]                                               // 0x0199(0x0003)
    float                                         Grout;                                                        // 0x019C(0x0004)
    float                                         Amplitude;                                                    // 0x01A0(0x0004)
    float                                         Frequency;                                                    // 0x01A4(0x0004)
    float                                         Persistence;                                                  // 0x01A8(0x0004)
    float                                         Lacunarity;                                                   // 0x01AC(0x0004)
    int32_t                                       OctaveNumber;                                                 // 0x01B0(0x0004)
    float                                         PointSpacing;                                                 // 0x01B4(0x0004)
    bool                                          AddSamplesForCollision;                                       // 0x01B8(0x0001)
    char                                          pa_01B9[0x0003]                                               // 0x01B9(0x0003)
    float                                         CollisionSampleSpacing;                                       // 0x01BC(0x0004)
};


// ScriptStruct  GeometryCollectionNodes.StringAppendDataflowNode
// Struct Size::0x0100
struct FStringAppendDataflowNode : public FDataflowNode
{
    FString                                       String1;                                                      // 0x00D0(0x0010)
    FString                                       String2;                                                      // 0x00E0(0x0010)
    FString                                       String;                                                       // 0x00F0(0x0010)
};


// ScriptStruct  GeometryCollectionNodes.RandomFloatDataflowNode
// Struct Size::0x00E0
struct FRandomFloatDataflowNode : public FDataflowNode
{
    bool                                          Deterministic;                                                // 0x00D0(0x0001)
    char                                          pa_00D1[0x0003]                                               // 0x00D1(0x0003)
    float                                         RandomSeed;                                                   // 0x00D4(0x0004)
    float                                         float;                                                        // 0x00D8(0x0004)
    char                                          pa_00DC[0x0004]                                               // 0x00DC(0x0004)
};


// ScriptStruct  GeometryCollectionNodes.RandomFloatInRangeDataflowNode
// Struct Size::0x00E8
struct FRandomFloatInRangeDataflowNode : public FDataflowNode
{
    bool                                          Deterministic;                                                // 0x00D0(0x0001)
    char                                          pa_00D1[0x0003]                                               // 0x00D1(0x0003)
    float                                         RandomSeed;                                                   // 0x00D4(0x0004)
    float                                         Min;                                                          // 0x00D8(0x0004)
    float                                         Max;                                                          // 0x00DC(0x0004)
    float                                         float;                                                        // 0x00E0(0x0004)
    char                                          pa_00E4[0x0004]                                               // 0x00E4(0x0004)
};


// ScriptStruct  GeometryCollectionNodes.RandomUnitVectorDataflowNode
// Struct Size::0x00F0
struct FRandomUnitVectorDataflowNode : public FDataflowNode
{
    bool                                          Deterministic;                                                // 0x00D0(0x0001)
    char                                          pa_00D1[0x0003]                                               // 0x00D1(0x0003)
    float                                         RandomSeed;                                                   // 0x00D4(0x0004)
    FVector                                       Vector;                                                       // 0x00D8(0x0018)
};


// ScriptStruct  GeometryCollectionNodes.RandomUnitVectorInConeDataflowNode
// Struct Size::0x0110
struct FRandomUnitVectorInConeDataflowNode : public FDataflowNode
{
    bool                                          Deterministic;                                                // 0x00D0(0x0001)
    char                                          pa_00D1[0x0003]                                               // 0x00D1(0x0003)
    float                                         RandomSeed;                                                   // 0x00D4(0x0004)
    FVector                                       ConeDirection;                                                // 0x00D8(0x0018)
    float                                         ConeHalfAngle;                                                // 0x00F0(0x0004)
    char                                          pa_00F4[0x0004]                                               // 0x00F4(0x0004)
    FVector                                       Vector;                                                       // 0x00F8(0x0018)
};


// ScriptStruct  GeometryCollectionNodes.RadiansToDegreesDataflowNode
// Struct Size::0x00D8
struct FRadiansToDegreesDataflowNode : public FDataflowNode
{
    float                                         Radians;                                                      // 0x00D0(0x0004)
    float                                         Degrees;                                                      // 0x00D4(0x0004)
};


// ScriptStruct  GeometryCollectionNodes.DegreesToRadiansDataflowNode
// Struct Size::0x00D8
struct FDegreesToRadiansDataflowNode : public FDataflowNode
{
    float                                         Degrees;                                                      // 0x00D0(0x0004)
    float                                         Radians;                                                      // 0x00D4(0x0004)
};


// ScriptStruct  GeometryCollectionNodes.ExplodedViewDataflowNode
// Struct Size::0x01A0
struct FExplodedViewDataflowNode : public FDataflowNode
{
    FManagedArrayCollection                       Collection;                                                   // 0x00D0(0x00B0)
    float                                         UniformScale;                                                 // 0x0180(0x0004)
    char                                          pa_0184[0x0004]                                               // 0x0184(0x0004)
    FVector                                       Scale;                                                        // 0x0188(0x0018)
};


// ScriptStruct  GeometryCollectionNodes.CreateNonOverlappingConvexHullsDataflowNode
// Struct Size::0x0190
struct FCreateNonOverlappingConvexHullsDataflowNode : public FDataflowNode
{
    FManagedArrayCollection                       Collection;                                                   // 0x00D0(0x00B0)
    float                                         CanRemoveFraction;                                            // 0x0180(0x0004)
    float                                         CanExceedFraction;                                            // 0x0184(0x0004)
    float                                         SimplificationDistanceThreshold;                              // 0x0188(0x0004)
    char                                          pa_018C[0x0004]                                               // 0x018C(0x0004)
};


// ScriptStruct  GeometryCollectionNodes.PlaneCutterDataflowNode
// Struct Size::0x01E8
struct FPlaneCutterDataflowNode : public FDataflowNode
{
    FManagedArrayCollection                       Collection;                                                   // 0x00D0(0x00B0)
    FBox                                          BoundingBox;                                                  // 0x0180(0x0038)
    int32_t                                       NumPlanes;                                                    // 0x01B8(0x0004)
    float                                         RandomSeed;                                                   // 0x01BC(0x0004)
    float                                         Grout;                                                        // 0x01C0(0x0004)
    float                                         Amplitude;                                                    // 0x01C4(0x0004)
    float                                         Frequency;                                                    // 0x01C8(0x0004)
    float                                         Persistence;                                                  // 0x01CC(0x0004)
    float                                         Lacunarity;                                                   // 0x01D0(0x0004)
    int32_t                                       OctaveNumber;                                                 // 0x01D4(0x0004)
    float                                         PointSpacing;                                                 // 0x01D8(0x0004)
    bool                                          AddSamplesForCollision;                                       // 0x01DC(0x0001)
    char                                          pa_01DD[0x0003]                                               // 0x01DD(0x0003)
    float                                         CollisionSampleSpacing;                                       // 0x01E0(0x0004)
    char                                          pa_01E4[0x0004]                                               // 0x01E4(0x0004)
};


// ScriptStruct  GeometryCollectionNodes.HashStringDataflowNode
// Struct Size::0x00E8
struct FHashStringDataflowNode : public FDataflowNode
{
    FString                                       String;                                                       // 0x00D0(0x0010)
    int32_t                                       Hash;                                                         // 0x00E0(0x0004)
    char                                          pa_00E4[0x0004]                                               // 0x00E4(0x0004)
};


// ScriptStruct  GeometryCollectionNodes.HashVectorDataflowNode
// Struct Size::0x00F0
struct FHashVectorDataflowNode : public FDataflowNode
{
    FVector                                       Vector;                                                       // 0x00D0(0x0018)
    int32_t                                       Hash;                                                         // 0x00E8(0x0004)
    char                                          pa_00EC[0x0004]                                               // 0x00EC(0x0004)
};


// ScriptStruct  GeometryCollectionNodes.FloatToIntDataflowNode
// Struct Size::0x00E0
struct FFloatToIntDataflowNode : public FDataflowNode
{
    enum class EFloatToIntFunctionEnum            Function;                                                     // 0x00D0(0x0001)
    char                                          pa_00D1[0x0003]                                               // 0x00D1(0x0003)
    float                                         float;                                                        // 0x00D4(0x0004)
    int32_t                                       Int;                                                          // 0x00D8(0x0004)
    char                                          pa_00DC[0x0004]                                               // 0x00DC(0x0004)
};


// ScriptStruct  GeometryCollectionNodes.MathConstantsDataflowNode
// Struct Size::0x00D8
struct FMathConstantsDataflowNode : public FDataflowNode
{
    enum class EMathConstantsEnum                 Constant;                                                     // 0x00D0(0x0001)
    char                                          pa_00D1[0x0003]                                               // 0x00D1(0x0003)
    float                                         float;                                                        // 0x00D4(0x0004)
};


// ScriptStruct  DataflowNodes.GetSkeletalMeshDataflowNode
// Struct Size::0x00E0
struct FGetSkeletalMeshDataflowNode : public FDataflowNode
{
    USkeletalMesh*                                SkeletalMesh;                                                 // 0x00D0(0x0008)
    FName                                         PropertyName;                                                 // 0x00D8(0x0008)
};


// ScriptStruct  DataflowNodes.SkeletalMeshBoneDataflowNode
// Struct Size::0x00E8
struct FSkeletalMeshBoneDataflowNode : public FDataflowNode
{
    FName                                         BoneName;                                                     // 0x00D0(0x0008)
    USkeletalMesh*                                SkeletalMesh;                                                 // 0x00D8(0x0008)
    int32_t                                       BoneIndexOut;                                                 // 0x00E0(0x0004)
    char                                          pa_00E4[0x0004]                                               // 0x00E4(0x0004)
};


// ScriptStruct  DataflowNodes.GetStaticMeshDataflowNode
// Struct Size::0x00E0
struct FGetStaticMeshDataflowNode : public FDataflowNode
{
    UStaticMesh*                                  StaticMesh;                                                   // 0x00D0(0x0008)
    FName                                         PropertyName;                                                 // 0x00D8(0x0008)
};


// ScriptStruct  ChaosNiagara.ChaosDestructionEvent
// Struct Size::0x0078
struct FChaosDestructionEvent
{
    FVector                                       position;                                                     // 0x0000(0x0018)
    FVector                                       Normal;                                                       // 0x0018(0x0018)
    FVector                                       Velocity;                                                     // 0x0030(0x0018)
    FVector                                       AngularVelocity;                                              // 0x0048(0x0018)
    float                                         ExtentMin;                                                    // 0x0060(0x0004)
    float                                         ExtentMax;                                                    // 0x0064(0x0004)
    int32_t                                       ParticleID;                                                   // 0x0068(0x0004)
    float                                         Time;                                                         // 0x006C(0x0004)
    int32_t                                       Type;                                                         // 0x0070(0x0004)
    char                                          pa_0074[0x0004]                                               // 0x0074(0x0004)
};


// ScriptStruct  ImgMedia.ImgMediaSourceCustomizationSequenceProxy
// Struct Size::0x0001
struct FImgMediaSourceCustomizationSequenceProxy
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  MediaCompositing.MovieSceneMediaPlayerPropertySectionTemplate
// Struct Size::0x0048
struct FMovieSceneMediaPlayerPropertySectionTemplate : public FMovieScenePropertySectionTemplate
{
    UMediaSource*                                 MediaSource;                                                  // 0x0038(0x0008)
    FFrameNumber                                  SectionStartFrame;                                            // 0x0040(0x0004)
    bool                                          bLoop;                                                        // 0x0044(0x0001)
    char                                          pa_0045[0x0003]                                               // 0x0045(0x0003)
};


// ScriptStruct  MediaCompositing.MovieSceneMediaSectionParams
// Struct Size::0x0030
struct FMovieSceneMediaSectionParams
{
    UMediaSoundComponent*                         MediaSoundComponent;                                          // 0x0000(0x0008)
    UMediaSource*                                 MediaSource;                                                  // 0x0008(0x0008)
    UMediaTexture*                                MediaTexture;                                                 // 0x0010(0x0008)
    UMediaPlayer*                                 MediaPlayer;                                                  // 0x0018(0x0008)
    FFrameNumber                                  SectionStartFrame;                                            // 0x0020(0x0004)
    FFrameNumber                                  SectionEndFrame;                                              // 0x0024(0x0004)
    bool                                          bLooping;                                                     // 0x0028(0x0001)
    char                                          pa_0029[0x0003]                                               // 0x0029(0x0003)
    FFrameNumber                                  StartFrameOffset;                                             // 0x002C(0x0004)
};


// ScriptStruct  MediaCompositing.MovieSceneMediaSectionTemplate
// Struct Size::0x0050
struct FMovieSceneMediaSectionTemplate : public FMovieSceneEvalTemplate
{
    FMovieSceneMediaSectionParams                 Params;                                                       // 0x0020(0x0030)
};


// ScriptStruct  UdpMessaging.UdpMockMessage
// Struct Size::0x0010
struct FUdpMockMessage
{
    TArray<char>                                  Data;                                                         // 0x0000(0x0010)
};


// ScriptStruct  ActorSequence.ActorSequenceObjectReference
// Struct Size::0x0028
struct FActorSequenceObjectReference
{
    enum class EActorSequenceObjectReferenceType  Type;                                                         // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FGuid                                         ActorId;                                                      // 0x0004(0x0010)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FString                                       PathToComponent;                                              // 0x0018(0x0010)
};


// ScriptStruct  ActorSequence.ActorSequenceObjectReferences
// Struct Size::0x0010
struct FActorSequenceObjectReferences
{
    TArray<FActorSequenceObjectReference>         Array;                                                        // 0x0000(0x0010)
};


// ScriptStruct  ActorSequence.ActorSequenceObjectReferenceMap
// Struct Size::0x0020
struct FActorSequenceObjectReferenceMap
{
    TArray<FGuid>                                 BindingIds;                                                   // 0x0000(0x0010)
    TArray<FActorSequenceObjectReferences>        References;                                                   // 0x0010(0x0010)
};


// ScriptStruct  AudioCapture.AudioInputDeviceInfo
// Struct Size::0x0030
struct FAudioInputDeviceInfo
{
    FString                                       DeviceName;                                                   // 0x0000(0x0010)
    FString                                       DeviceID;                                                     // 0x0010(0x0010)
    int32_t                                       InputChannels;                                                // 0x0020(0x0004)
    int32_t                                       PreferredSampleRate;                                          // 0x0024(0x0004)
    char                                          bSupportsHardwareAEC;                                         // 0x0028(0x0001)
    char                                          pa_0029[0x0007]                                               // 0x0029(0x0007)
};


// ScriptStruct  AudioCapture.AudioCaptureDeviceInfo
// Struct Size::0x0010
struct FAudioCaptureDeviceInfo
{
    FName                                         DeviceName;                                                   // 0x0000(0x0008)
    int32_t                                       NumInputChannels;                                             // 0x0008(0x0004)
    int32_t                                       SampleRate;                                                   // 0x000C(0x0004)
};


// ScriptStruct  CustomMeshComponent.CustomMeshTriangle
// Struct Size::0x0048
struct FCustomMeshTriangle
{
    FVector                                       Vertex0;                                                      // 0x0000(0x0018)
    FVector                                       Vertex1;                                                      // 0x0018(0x0018)
    FVector                                       Vertex2;                                                      // 0x0030(0x0018)
};


// ScriptStruct  Synthesis.Synth1PatchCable
// Struct Size::0x0008
struct FSynth1PatchCable
{
    float                                         Depth;                                                        // 0x0000(0x0004)
    enum class ESynth1PatchDestination            Destination;                                                  // 0x0004(0x0001)
    char                                          pa_0005[0x0003]                                               // 0x0005(0x0003)
};


// ScriptStruct  Synthesis.PatchId
// Struct Size::0x0004
struct FPatchId
{
    int32_t                                       ID;                                                           // 0x0000(0x0004)
};


// ScriptStruct  Synthesis.EpicSynth1Patch
// Struct Size::0x0018
struct FEpicSynth1Patch
{
    enum class ESynth1PatchSource                 PatchSource;                                                  // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    TArray<FSynth1PatchCable>                     PatchCables;                                                  // 0x0008(0x0010)
};


// ScriptStruct  Synthesis.ModularSynthPreset
// Struct Size::0x00E0
struct FModularSynthPreset : public FTableRowBase
{
    char                                          bEnablePolyphony;                                             // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
    enum class ESynth1OscType                     Osc1Type;                                                     // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
    float                                         Osc1Gain;                                                     // 0x0010(0x0004)
    float                                         Osc1Octave;                                                   // 0x0014(0x0004)
    float                                         Osc1Semitones;                                                // 0x0018(0x0004)
    float                                         Osc1Cents;                                                    // 0x001C(0x0004)
    float                                         Osc1PulseWidth;                                               // 0x0020(0x0004)
    enum class ESynth1OscType                     Osc2Type;                                                     // 0x0024(0x0001)
    char                                          pa_0025[0x0003]                                               // 0x0025(0x0003)
    float                                         Osc2Gain;                                                     // 0x0028(0x0004)
    float                                         Osc2Octave;                                                   // 0x002C(0x0004)
    float                                         Osc2Semitones;                                                // 0x0030(0x0004)
    float                                         Osc2Cents;                                                    // 0x0034(0x0004)
    float                                         Osc2PulseWidth;                                               // 0x0038(0x0004)
    float                                         Portamento;                                                   // 0x003C(0x0004)
    char                                          bEnableUnison;                                                // 0x0040(0x0001)
    char                                          bEnableOscillatorSync;                                        // 0x0040(0x0001)
    char                                          pa_0041[0x0003]                                               // 0x0041(0x0003)
    float                                         Spread;                                                       // 0x0044(0x0004)
    float                                         Pan;                                                          // 0x0048(0x0004)
    float                                         LFO1Frequency;                                                // 0x004C(0x0004)
    float                                         LFO1Gain;                                                     // 0x0050(0x0004)
    enum class ESynthLFOType                      LFO1Type;                                                     // 0x0054(0x0001)
    enum class ESynthLFOMode                      LFO1Mode;                                                     // 0x0055(0x0001)
    enum class ESynthLFOPatchType                 LFO1PatchType;                                                // 0x0056(0x0001)
    char                                          pa_0057[0x0001]                                               // 0x0057(0x0001)
    float                                         LFO2Frequency;                                                // 0x0058(0x0004)
    float                                         LFO2Gain;                                                     // 0x005C(0x0004)
    enum class ESynthLFOType                      LFO2Type;                                                     // 0x0060(0x0001)
    enum class ESynthLFOMode                      LFO2Mode;                                                     // 0x0061(0x0001)
    enum class ESynthLFOPatchType                 LFO2PatchType;                                                // 0x0062(0x0001)
    char                                          pa_0063[0x0001]                                               // 0x0063(0x0001)
    float                                         GainDb;                                                       // 0x0064(0x0004)
    float                                         AttackTime;                                                   // 0x0068(0x0004)
    float                                         DecayTime;                                                    // 0x006C(0x0004)
    float                                         SustainGain;                                                  // 0x0070(0x0004)
    float                                         ReleaseTime;                                                  // 0x0074(0x0004)
    enum class ESynthModEnvPatch                  ModEnvPatchType;                                              // 0x0078(0x0001)
    enum class ESynthModEnvBiasPatch              ModEnvBiasPatchType;                                          // 0x0079(0x0001)
    char                                          pa_007A[0x0002]                                               // 0x007A(0x0002)
    char                                          bInvertModulationEnvelope;                                    // 0x007C(0x0001)
    char                                          bInvertModulationEnvelopeBias;                                // 0x007C(0x0001)
    char                                          pa_007D[0x0003]                                               // 0x007D(0x0003)
    float                                         ModulationEnvelopeDepth;                                      // 0x0080(0x0004)
    float                                         ModulationEnvelopeAttackTime;                                 // 0x0084(0x0004)
    float                                         ModulationEnvelopeDecayTime;                                  // 0x0088(0x0004)
    float                                         ModulationEnvelopeSustainGain;                                // 0x008C(0x0004)
    float                                         ModulationEnvelopeReleaseTime;                                // 0x0090(0x0004)
    char                                          bLegato;                                                      // 0x0094(0x0001)
    char                                          bRetrigger;                                                   // 0x0094(0x0001)
    char                                          pa_0095[0x0003]                                               // 0x0095(0x0003)
    float                                         FilterFrequency;                                              // 0x0098(0x0004)
    float                                         FilterQ;                                                      // 0x009C(0x0004)
    enum class ESynthFilterType                   FilterType;                                                   // 0x00A0(0x0001)
    enum class ESynthFilterAlgorithm              FilterAlgorithm;                                              // 0x00A1(0x0001)
    char                                          pa_00A2[0x0002]                                               // 0x00A2(0x0002)
    char                                          bStereoDelayEnabled;                                          // 0x00A4(0x0001)
    char                                          pa_00A5[0x0003]                                               // 0x00A5(0x0003)
    enum class ESynthStereoDelayMode              StereoDelayMode;                                              // 0x00A8(0x0001)
    char                                          pa_00A9[0x0003]                                               // 0x00A9(0x0003)
    float                                         StereoDelayTime;                                              // 0x00AC(0x0004)
    float                                         StereoDelayFeedback;                                          // 0x00B0(0x0004)
    float                                         StereoDelayWetlevel;                                          // 0x00B4(0x0004)
    float                                         StereoDelayRatio;                                             // 0x00B8(0x0004)
    char                                          bChorusEnabled;                                               // 0x00BC(0x0001)
    char                                          pa_00BD[0x0003]                                               // 0x00BD(0x0003)
    float                                         ChorusDepth;                                                  // 0x00C0(0x0004)
    float                                         ChorusFeedback;                                               // 0x00C4(0x0004)
    float                                         ChorusFrequency;                                              // 0x00C8(0x0004)
    char                                          pa_00CC[0x0004]                                               // 0x00CC(0x0004)
    TArray<FEpicSynth1Patch>                      Patches;                                                      // 0x00D0(0x0010)
};


// ScriptStruct  Synthesis.ModularSynthPresetBankEntry
// Struct Size::0x00F0
struct FModularSynthPresetBankEntry
{
    FString                                       PresetName;                                                   // 0x0000(0x0010)
    FModularSynthPreset                           Preset;                                                       // 0x0010(0x00E0)
};


// ScriptStruct  Synthesis.SourceEffectBitCrusherBaseSettings
// Struct Size::0x0008
struct FSourceEffectBitCrusherBaseSettings
{
    float                                         SampleRate;                                                   // 0x0000(0x0004)
    float                                         BitDepth;                                                     // 0x0004(0x0004)
};


// ScriptStruct  Synthesis.SourceEffectBitCrusherSettings
// Struct Size::0x00D0
struct FSourceEffectBitCrusherSettings
{
    float                                         CrushedSampleRate;                                            // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FSoundModulationDestinationSettings           SampleRateModulation;                                         // 0x0008(0x0060)
    float                                         CrushedBits;                                                  // 0x0068(0x0004)
    char                                          pa_006C[0x0004]                                               // 0x006C(0x0004)
    FSoundModulationDestinationSettings           BitModulation;                                                // 0x0070(0x0060)
};


// ScriptStruct  Engine.SoundModulationDestinationSettings
// Struct Size::0x0060
struct FSoundModulationDestinationSettings
{
    float                                         Value;                                                        // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    USoundModulatorBase*                          Modulator;                                                    // 0x0008(0x0008)
    TSet<USoundModulatorBase*>                    Modulators;                                                   // 0x0010(0x0050)
};


// ScriptStruct  Synthesis.SourceEffectChorusBaseSettings
// Struct Size::0x0018
struct FSourceEffectChorusBaseSettings
{
    float                                         Depth;                                                        // 0x0000(0x0004)
    float                                         Frequency;                                                    // 0x0004(0x0004)
    float                                         Feedback;                                                     // 0x0008(0x0004)
    float                                         WetLevel;                                                     // 0x000C(0x0004)
    float                                         DryLevel;                                                     // 0x0010(0x0004)
    float                                         Spread;                                                       // 0x0014(0x0004)
};


// ScriptStruct  Synthesis.SourceEffectChorusSettings
// Struct Size::0x0258
struct FSourceEffectChorusSettings
{
    float                                         Depth;                                                        // 0x0000(0x0004)
    float                                         Frequency;                                                    // 0x0004(0x0004)
    float                                         Feedback;                                                     // 0x0008(0x0004)
    float                                         WetLevel;                                                     // 0x000C(0x0004)
    float                                         DryLevel;                                                     // 0x0010(0x0004)
    float                                         Spread;                                                       // 0x0014(0x0004)
    FSoundModulationDestinationSettings           DepthModulation;                                              // 0x0018(0x0060)
    FSoundModulationDestinationSettings           FrequencyModulation;                                          // 0x0078(0x0060)
    FSoundModulationDestinationSettings           FeedbackModulation;                                           // 0x00D8(0x0060)
    FSoundModulationDestinationSettings           WetModulation;                                                // 0x0138(0x0060)
    FSoundModulationDestinationSettings           DryModulation;                                                // 0x0198(0x0060)
    FSoundModulationDestinationSettings           SpreadModulation;                                             // 0x01F8(0x0060)
};


// ScriptStruct  Synthesis.SourceEffectConvolutionReverbSettings
// Struct Size::0x0010
struct FSourceEffectConvolutionReverbSettings
{
    float                                         NormalizationVolumeDb;                                        // 0x0000(0x0004)
    float                                         WetVolumeDb;                                                  // 0x0004(0x0004)
    float                                         DryVolumeDb;                                                  // 0x0008(0x0004)
    bool                                          bBypass;                                                      // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
};


// ScriptStruct  Synthesis.SourceEffectDynamicsProcessorSettings
// Struct Size::0x0028
struct FSourceEffectDynamicsProcessorSettings
{
    enum class ESourceEffectDynamicsProcessorType DynamicsProcessorType;                                        // 0x0000(0x0001)
    enum class ESourceEffectDynamicsPeakMode      PeakMode;                                                     // 0x0001(0x0001)
    char                                          pa_0002[0x0002]                                               // 0x0002(0x0002)
    float                                         LookAheadMsec;                                                // 0x0004(0x0004)
    float                                         AttackTimeMsec;                                               // 0x0008(0x0004)
    float                                         ReleaseTimeMsec;                                              // 0x000C(0x0004)
    float                                         ThresholdDb;                                                  // 0x0010(0x0004)
    float                                         Ratio;                                                        // 0x0014(0x0004)
    float                                         KneeBandwidthDb;                                              // 0x0018(0x0004)
    float                                         InputGainDb;                                                  // 0x001C(0x0004)
    float                                         OutputGainDb;                                                 // 0x0020(0x0004)
    char                                          bStereoLinked;                                                // 0x0024(0x0001)
    char                                          bAnalogMode;                                                  // 0x0024(0x0001)
    char                                          pa_0025[0x0003]                                               // 0x0025(0x0003)
};


// ScriptStruct  Synthesis.SourceEffectEnvelopeFollowerSettings
// Struct Size::0x000C
struct FSourceEffectEnvelopeFollowerSettings
{
    float                                         AttackTime;                                                   // 0x0000(0x0004)
    float                                         ReleaseTime;                                                  // 0x0004(0x0004)
    enum class EEnvelopeFollowerPeakMode          PeakMode;                                                     // 0x0008(0x0001)
    bool                                          bIsAnalogMode;                                                // 0x0009(0x0001)
    char                                          pa_000A[0x0002]                                               // 0x000A(0x0002)
};


// ScriptStruct  Synthesis.SourceEffectEQBand
// Struct Size::0x0010
struct FSourceEffectEQBand
{
    float                                         Frequency;                                                    // 0x0000(0x0004)
    float                                         Bandwidth;                                                    // 0x0004(0x0004)
    float                                         GainDb;                                                       // 0x0008(0x0004)
    char                                          bEnabled;                                                     // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
};


// ScriptStruct  Synthesis.SourceEffectEQSettings
// Struct Size::0x0010
struct FSourceEffectEQSettings
{
    TArray<FSourceEffectEQBand>                   EQBands;                                                      // 0x0000(0x0010)
};


// ScriptStruct  Synthesis.SourceEffectFilterAudioBusModulationSettings
// Struct Size::0x0028
struct FSourceEffectFilterAudioBusModulationSettings
{
    UAudioBus*                                    AudioBus;                                                     // 0x0000(0x0008)
    int32_t                                       EnvelopeFollowerAttackTimeMsec;                               // 0x0008(0x0004)
    int32_t                                       EnvelopeFollowerReleaseTimeMsec;                              // 0x000C(0x0004)
    float                                         EnvelopeGainMultiplier;                                       // 0x0010(0x0004)
    enum class ESourceEffectFilterParam           FilterParam;                                                  // 0x0014(0x0001)
    char                                          pa_0015[0x0003]                                               // 0x0015(0x0003)
    float                                         MinFrequencyModulation;                                       // 0x0018(0x0004)
    float                                         MaxFrequencyModulation;                                       // 0x001C(0x0004)
    float                                         MinResonanceModulation;                                       // 0x0020(0x0004)
    float                                         MaxResonanceModulation;                                       // 0x0024(0x0004)
};


// ScriptStruct  Synthesis.SourceEffectFilterSettings
// Struct Size::0x0020
struct FSourceEffectFilterSettings
{
    enum class ESourceEffectFilterCircuit         FilterCircuit;                                                // 0x0000(0x0001)
    enum class ESourceEffectFilterType            FilterType;                                                   // 0x0001(0x0001)
    char                                          pa_0002[0x0002]                                               // 0x0002(0x0002)
    float                                         CutoffFrequency;                                              // 0x0004(0x0004)
    float                                         FilterQ;                                                      // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    TArray<FSourceEffectFilterAudioBusModulationSettings>AudioBusModulation;                                    // 0x0010(0x0010)
};


// ScriptStruct  Synthesis.SourceEffectFoldbackDistortionSettings
// Struct Size::0x000C
struct FSourceEffectFoldbackDistortionSettings
{
    float                                         InputGainDb;                                                  // 0x0000(0x0004)
    float                                         ThresholdDb;                                                  // 0x0004(0x0004)
    float                                         OutputGainDb;                                                 // 0x0008(0x0004)
};


// ScriptStruct  Synthesis.SourceEffectMidSideSpreaderSettings
// Struct Size::0x0008
struct FSourceEffectMidSideSpreaderSettings
{
    float                                         SpreadAmount;                                                 // 0x0000(0x0004)
    enum class EStereoChannelMode                 InputMode;                                                    // 0x0004(0x0001)
    enum class EStereoChannelMode                 OutputMode;                                                   // 0x0005(0x0001)
    bool                                          bEqualPower;                                                  // 0x0006(0x0001)
    char                                          pa_0007[0x0001]                                               // 0x0007(0x0001)
};


// ScriptStruct  Synthesis.SourceEffectIndividualFilterSettings
// Struct Size::0x000C
struct FSourceEffectIndividualFilterSettings
{
    enum class ESourceEffectMotionFilterCircuit   FilterCircuit;                                                // 0x0000(0x0001)
    enum class ESourceEffectMotionFilterType      FilterType;                                                   // 0x0001(0x0001)
    char                                          pa_0002[0x0002]                                               // 0x0002(0x0002)
    float                                         CutoffFrequency;                                              // 0x0004(0x0004)
    float                                         FilterQ;                                                      // 0x0008(0x0004)
};


// ScriptStruct  Synthesis.SourceEffectMotionFilterModulationSettings
// Struct Size::0x0040
struct FSourceEffectMotionFilterModulationSettings
{
    enum class ESourceEffectMotionFilterModSource ModulationSource;                                             // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    FVector2D                                     ModulationInputRange;                                         // 0x0008(0x0010)
    FVector2D                                     ModulationOutputMinimumRange;                                 // 0x0018(0x0010)
    FVector2D                                     ModulationOutputMaximumRange;                                 // 0x0028(0x0010)
    float                                         UpdateEaseMS;                                                 // 0x0038(0x0004)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
};


// ScriptStruct  Synthesis.SourceEffectMotionFilterSettings
// Struct Size::0x0078
struct FSourceEffectMotionFilterSettings
{
    enum class ESourceEffectMotionFilterTopology  MotionFilterTopology;                                         // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         MotionFilterMix;                                              // 0x0004(0x0004)
    FSourceEffectIndividualFilterSettings         FilterASettings;                                              // 0x0008(0x000C)
    FSourceEffectIndividualFilterSettings         FilterBSettings;                                              // 0x0014(0x000C)
    TMap<enum class ESourceEffectMotionFilterModDestination,FSourceEffectMotionFilterModulationSettings>ModulationMappings;// 0x0020(0x0050)
    float                                         DryVolumeDb;                                                  // 0x0070(0x0004)
    char                                          pa_0074[0x0004]                                               // 0x0074(0x0004)
};


// ScriptStruct  Synthesis.SourceEffectPannerSettings
// Struct Size::0x0008
struct FSourceEffectPannerSettings
{
    float                                         Spread;                                                       // 0x0000(0x0004)
    float                                         Pan;                                                          // 0x0004(0x0004)
};


// ScriptStruct  Synthesis.SourceEffectPhaserSettings
// Struct Size::0x0010
struct FSourceEffectPhaserSettings
{
    float                                         WetLevel;                                                     // 0x0000(0x0004)
    float                                         Frequency;                                                    // 0x0004(0x0004)
    float                                         Feedback;                                                     // 0x0008(0x0004)
    enum class EPhaserLFOType                     LFOType;                                                      // 0x000C(0x0001)
    bool                                          UseQuadraturePhase;                                           // 0x000D(0x0001)
    char                                          pa_000E[0x0002]                                               // 0x000E(0x0002)
};


// ScriptStruct  Synthesis.SourceEffectRingModulationSettings
// Struct Size::0x0020
struct FSourceEffectRingModulationSettings
{
    enum class ERingModulatorTypeSourceEffect     ModulatorType;                                                // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         Frequency;                                                    // 0x0004(0x0004)
    float                                         Depth;                                                        // 0x0008(0x0004)
    float                                         DryLevel;                                                     // 0x000C(0x0004)
    float                                         WetLevel;                                                     // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    UAudioBus*                                    AudioBusModulator;                                            // 0x0018(0x0008)
};


// ScriptStruct  Synthesis.SourceEffectSimpleDelaySettings
// Struct Size::0x0018
struct FSourceEffectSimpleDelaySettings
{
    float                                         SpeedOfSound;                                                 // 0x0000(0x0004)
    float                                         DelayAmount;                                                  // 0x0004(0x0004)
    float                                         DryAmount;                                                    // 0x0008(0x0004)
    float                                         WetAmount;                                                    // 0x000C(0x0004)
    float                                         Feedback;                                                     // 0x0010(0x0004)
    char                                          bDelayBasedOnDistance;                                        // 0x0014(0x0001)
    char                                          bUseDistanceOverride;                                         // 0x0014(0x0001)
    char                                          pa_0015[0x0003]                                               // 0x0015(0x0003)
};


// ScriptStruct  Synthesis.SourceEffectStereoDelaySettings
// Struct Size::0x0024
struct FSourceEffectStereoDelaySettings
{
    enum class EStereoDelaySourceEffect           DelayMode;                                                    // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         DelayTimeMsec;                                                // 0x0004(0x0004)
    float                                         Feedback;                                                     // 0x0008(0x0004)
    float                                         DelayRatio;                                                   // 0x000C(0x0004)
    float                                         WetLevel;                                                     // 0x0010(0x0004)
    float                                         DryLevel;                                                     // 0x0014(0x0004)
    bool                                          bFilterEnabled;                                               // 0x0018(0x0001)
    enum class EStereoDelayFiltertype             FilterType;                                                   // 0x0019(0x0001)
    char                                          pa_001A[0x0002]                                               // 0x001A(0x0002)
    float                                         FilterFrequency;                                              // 0x001C(0x0004)
    float                                         FilterQ;                                                      // 0x0020(0x0004)
};


// ScriptStruct  Synthesis.SourceEffectWaveShaperSettings
// Struct Size::0x0008
struct FSourceEffectWaveShaperSettings
{
    float                                         Amount;                                                       // 0x0000(0x0004)
    float                                         OutputGainDb;                                                 // 0x0004(0x0004)
};


// ScriptStruct  Synthesis.SubmixEffectConvolutionReverbSettings
// Struct Size::0x0030
struct FSubmixEffectConvolutionReverbSettings
{
    float                                         NormalizationVolumeDb;                                        // 0x0000(0x0004)
    float                                         WetVolumeDb;                                                  // 0x0004(0x0004)
    float                                         DryVolumeDb;                                                  // 0x0008(0x0004)
    bool                                          bBypass;                                                      // 0x000C(0x0001)
    bool                                          bMixInputChannelFormatToImpulseResponseFormat;                // 0x000D(0x0001)
    bool                                          bMixReverbOutputToOutputChannelFormat;                        // 0x000E(0x0001)
    char                                          pa_000F[0x0001]                                               // 0x000F(0x0001)
    float                                         SurroundRearChannelBleedDb;                                   // 0x0010(0x0004)
    bool                                          bInvertRearChannelBleedPhase;                                 // 0x0014(0x0001)
    bool                                          bSurroundRearChannelFlip;                                     // 0x0015(0x0001)
    char                                          pa_0016[0x0002]                                               // 0x0016(0x0002)
    float                                         SurroundRearChannelBleedAmount;                               // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    UAudioImpulseResponse*                        ImpulseResponse;                                              // 0x0020(0x0008)
    bool                                          AllowHardwareAcceleration;                                    // 0x0028(0x0001)
    char                                          pa_0029[0x0007]                                               // 0x0029(0x0007)
};


// ScriptStruct  Synthesis.SubmixEffectDelaySettings
// Struct Size::0x000C
struct FSubmixEffectDelaySettings
{
    float                                         MaximumDelayLength;                                           // 0x0000(0x0004)
    float                                         InterpolationTime;                                            // 0x0004(0x0004)
    float                                         DelayLength;                                                  // 0x0008(0x0004)
};


// ScriptStruct  Synthesis.SubmixEffectFilterSettings
// Struct Size::0x000C
struct FSubmixEffectFilterSettings
{
    enum class ESubmixFilterType                  FilterType;                                                   // 0x0000(0x0001)
    enum class ESubmixFilterAlgorithm             FilterAlgorithm;                                              // 0x0001(0x0001)
    char                                          pa_0002[0x0002]                                               // 0x0002(0x0002)
    float                                         FilterFrequency;                                              // 0x0004(0x0004)
    float                                         FilterQ;                                                      // 0x0008(0x0004)
};


// ScriptStruct  Synthesis.SubmixEffectFlexiverbSettings
// Struct Size::0x0010
struct FSubmixEffectFlexiverbSettings
{
    float                                         PreDelay;                                                     // 0x0000(0x0004)
    float                                         DecayTime;                                                    // 0x0004(0x0004)
    float                                         RoomDampening;                                                // 0x0008(0x0004)
    int32_t                                       Complexity;                                                   // 0x000C(0x0004)
};


// ScriptStruct  Synthesis.DynamicsBandSettings
// Struct Size::0x0020
struct FDynamicsBandSettings
{
    float                                         CrossoverTopFrequency;                                        // 0x0000(0x0004)
    float                                         AttackTimeMsec;                                               // 0x0004(0x0004)
    float                                         ReleaseTimeMsec;                                              // 0x0008(0x0004)
    float                                         ThresholdDb;                                                  // 0x000C(0x0004)
    float                                         Ratio;                                                        // 0x0010(0x0004)
    float                                         KneeBandwidthDb;                                              // 0x0014(0x0004)
    float                                         InputGainDb;                                                  // 0x0018(0x0004)
    float                                         OutputGainDb;                                                 // 0x001C(0x0004)
};


// ScriptStruct  Synthesis.SubmixEffectMultibandCompressorSettings
// Struct Size::0x0038
struct FSubmixEffectMultibandCompressorSettings
{
    enum class ESubmixEffectDynamicsProcessorType DynamicsProcessorType;                                        // 0x0000(0x0001)
    enum class ESubmixEffectDynamicsPeakMode      PeakMode;                                                     // 0x0001(0x0001)
    enum class ESubmixEffectDynamicsChannelLinkModeLinkMode;                                                    // 0x0002(0x0001)
    char                                          pa_0003[0x0001]                                               // 0x0003(0x0001)
    float                                         LookAheadMsec;                                                // 0x0004(0x0004)
    bool                                          bAnalogMode;                                                  // 0x0008(0x0001)
    bool                                          bFourPole;                                                    // 0x0009(0x0001)
    bool                                          bBypass;                                                      // 0x000A(0x0001)
    enum class ESubmixEffectDynamicsKeySource     KeySource;                                                    // 0x000B(0x0001)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    UAudioBus*                                    ExternalAudioBus;                                             // 0x0010(0x0008)
    USoundSubmix*                                 ExternalSubmix;                                               // 0x0018(0x0008)
    float                                         KeyGainDb;                                                    // 0x0020(0x0004)
    bool                                          bKeyAudition;                                                 // 0x0024(0x0001)
    char                                          pa_0025[0x0003]                                               // 0x0025(0x0003)
    TArray<FDynamicsBandSettings>                 Bands;                                                        // 0x0028(0x0010)
};


// ScriptStruct  Synthesis.SubmixEffectStereoDelaySettings
// Struct Size::0x0024
struct FSubmixEffectStereoDelaySettings
{
    enum class EStereoDelaySourceEffect           DelayMode;                                                    // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         DelayTimeMsec;                                                // 0x0004(0x0004)
    float                                         Feedback;                                                     // 0x0008(0x0004)
    float                                         DelayRatio;                                                   // 0x000C(0x0004)
    float                                         WetLevel;                                                     // 0x0010(0x0004)
    float                                         DryLevel;                                                     // 0x0014(0x0004)
    bool                                          bFilterEnabled;                                               // 0x0018(0x0001)
    enum class EStereoDelayFiltertype             FilterType;                                                   // 0x0019(0x0001)
    char                                          pa_001A[0x0002]                                               // 0x001A(0x0002)
    float                                         FilterFrequency;                                              // 0x001C(0x0004)
    float                                         FilterQ;                                                      // 0x0020(0x0004)
};


// ScriptStruct  Synthesis.TapDelayInfo
// Struct Size::0x0018
struct FTapDelayInfo
{
    enum class ETapLineMode                       TapLineMode;                                                  // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         DelayLength;                                                  // 0x0004(0x0004)
    float                                         Gain;                                                         // 0x0008(0x0004)
    int32_t                                       OutputChannel;                                                // 0x000C(0x0004)
    float                                         PanInDegrees;                                                 // 0x0010(0x0004)
    int32_t                                       TapId;                                                        // 0x0014(0x0004)
};


// ScriptStruct  Synthesis.SubmixEffectTapDelaySettings
// Struct Size::0x0018
struct FSubmixEffectTapDelaySettings
{
    float                                         MaximumDelayLength;                                           // 0x0000(0x0004)
    float                                         InterpolationTime;                                            // 0x0004(0x0004)
    TArray<FTapDelayInfo>                         Taps;                                                         // 0x0008(0x0010)
};


// ScriptStruct  Synthesis.Synth2DSliderStyle
// Struct Size::0x0430
struct FSynth2DSliderStyle : public FSlateWidgetStyle
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FSlateBrush                                   NormalThumbImage;                                             // 0x0010(0x00D0)
    FSlateBrush                                   DisabledThumbImage;                                           // 0x00E0(0x00D0)
    FSlateBrush                                   NormalBarImage;                                               // 0x01B0(0x00D0)
    FSlateBrush                                   DisabledBarImage;                                             // 0x0280(0x00D0)
    FSlateBrush                                   BackgroundImage;                                              // 0x0350(0x00D0)
    float                                         BarThickness;                                                 // 0x0420(0x0004)
    char                                          pa_0424[0x000C]                                               // 0x0424(0x000C)
};


// ScriptStruct  Synthesis.SynthKnobStyle
// Struct Size::0x0360
struct FSynthKnobStyle : public FSlateWidgetStyle
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FSlateBrush                                   LargeKnob;                                                    // 0x0010(0x00D0)
    FSlateBrush                                   LargeKnobOverlay;                                             // 0x00E0(0x00D0)
    FSlateBrush                                   MediumKnob;                                                   // 0x01B0(0x00D0)
    FSlateBrush                                   MediumKnobOverlay;                                            // 0x0280(0x00D0)
    float                                         MinValueAngle;                                                // 0x0350(0x0004)
    float                                         MaxValueAngle;                                                // 0x0354(0x0004)
    enum class ESynthKnobSize                     KnobSize;                                                     // 0x0358(0x0001)
    char                                          pa_0359[0x0007]                                               // 0x0359(0x0007)
};


// ScriptStruct  Synthesis.SynthSlateStyle
// Struct Size::0x0010
struct FSynthSlateStyle : public FSlateWidgetStyle
{
    enum class ESynthSlateSizeType                SizeType;                                                     // 0x0008(0x0001)
    enum class ESynthSlateColorStyle              ColorStyle;                                                   // 0x0009(0x0001)
    char                                          pa_000A[0x0006]                                               // 0x000A(0x0006)
};


// ScriptStruct  LyraGame.AffixDisplayConfig
// Struct Size::0x0100
struct FAffixDisplayConfig
{
    FTGFPbDataTgfDBattleAffixDisplayData          DisplayData;                                                  // 0x0000(0x0100)
};


// ScriptStruct  LyraGame.ItemGemConfig
// Struct Size::0x0018
struct FItemGemConfig
{
    FTGFPbDataTgfDItemGem                         ItemGem;                                                      // 0x0000(0x0010)
    int32_t                                       PolishingCount;                                               // 0x0010(0x0004)
    int32_t                                       CorruptionId;                                                 // 0x0014(0x0004)
};


// ScriptStruct  LyraGame.TgfFlawlessTrialData
// Struct Size::0x000C
struct FTgfFlawlessTrialData
{
    char                                          pa_0000[0x000C]                                               // 0x0000(0x000C)
};


// ScriptStruct  LyraGame.PortalSpawnConfig
// Struct Size::0x0018
struct FPortalSpawnConfig
{
    float                                         SpawnTime;                                                    // 0x0000(0x0004)
    float                                         SpawnProbability;                                             // 0x0004(0x0004)
    enum class EPortalType                        PortalType;                                                   // 0x0008(0x0001)
    char                                          pa_0009[0x0007]                                               // 0x0009(0x0007)
    AActor*                                       PortalClass;                                                  // 0x0010(0x0008)
};


// ScriptStruct  LyraGame.PortalSpawnInfo
// Struct Size::0x0080
struct FPortalSpawnInfo
{
    float                                         SpawnTime;                                                    // 0x0000(0x0004)
    char                                          pa_0004[0x000C]                                               // 0x0004(0x000C)
    FTransform                                    SpawnTransform;                                               // 0x0010(0x0060)
    enum class EPortalType                        PortalType;                                                   // 0x0070(0x0001)
    char                                          pa_0071[0x0003]                                               // 0x0071(0x0003)
    float                                         SpawnProbability;                                             // 0x0074(0x0004)
    AActor*                                       PortalClass;                                                  // 0x0078(0x0008)
};


// ScriptStruct  LyraGame.DeathZoneImportanceBox
// Struct Size::0x0038
struct FDeathZoneImportanceBox
{
    FVector                                       Center;                                                       // 0x0000(0x0018)
    FVector                                       Extent;                                                       // 0x0018(0x0018)
    float                                         Rotation;                                                     // 0x0030(0x0004)
    int32_t                                       Importance;                                                   // 0x0034(0x0004)
};


// ScriptStruct  LyraGame.DeathZoneMessage
// Struct Size::0x0030
struct FDeathZoneMessage
{
    float                                         Delay;                                                        // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FText                                         Message;                                                      // 0x0008(0x0018)
    float                                         MessageDuration;                                              // 0x0020(0x0004)
    FGameplayTag                                  EventTag;                                                     // 0x0024(0x0008)
    enum class ETgfPlayerSceneTag                 PlayerSceneTag;                                               // 0x002C(0x0001)
    char                                          pa_002D[0x0003]                                               // 0x002D(0x0003)
};


// ScriptStruct  LyraGame.DeathZoneDisc
// Struct Size::0x0090
struct FDeathZoneDisc
{
    float                                         Radius;                                                       // 0x0000(0x0004)
    float                                         Padding;                                                      // 0x0004(0x0004)
    float                                         Pause;                                                        // 0x0008(0x0004)
    float                                         Interval;                                                     // 0x000C(0x0004)
    float                                         Duration;                                                     // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    UGameplayEffect*                              DamageGE;                                                     // 0x0018(0x0008)
    TArray<FDeathZoneImportanceBox>               ImportanceBoxes;                                              // 0x0020(0x0010)
    TArray<FPortalSpawnConfig>                    PortalSpawnConfigs;                                           // 0x0030(0x0010)
    TArray<float>                                 ExtractPortalSpawnTimes;                                      // 0x0040(0x0010)
    TArray<float>                                 RedExtractPortalSpawnTimes;                                   // 0x0050(0x0010)
    TArray<FPortalSpawnConfig>                    ShadowExtractPortalSpawnConfigs;                              // 0x0060(0x0010)
    TArray<float>                                 TeleportScrollSpawnTimes;                                     // 0x0070(0x0010)
    TArray<FDeathZoneMessage>                     Messages;                                                     // 0x0080(0x0010)
};


// ScriptStruct  LyraGame.DeathZoneDiscRuntimeInstance
// Struct Size::0x0030
struct FDeathZoneDiscRuntimeInstance
{
    FVector                                       Center;                                                       // 0x0000(0x0018)
    float                                         Radius;                                                       // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    TArray<FPortalSpawnInfo>                      PortalSpawnInfos;                                             // 0x0020(0x0010)
};


// ScriptStruct  LyraGame.SpawnedPortals
// Struct Size::0x0030
struct FSpawnedPortals
{
    TArray<TWeakObjectPtr<AActor>>                BluePortals;                                                  // 0x0000(0x0010)
    TArray<TWeakObjectPtr<AActor>>                RedPortals;                                                   // 0x0010(0x0010)
    TArray<TWeakObjectPtr<AActor>>                ShadowPortals;                                                // 0x0020(0x0010)
};


// ScriptStruct  LyraGame.SpawnedPortalsInfo
// Struct Size::0x0030
struct FSpawnedPortalsInfo
{
    TArray<AActor*>                               BluePortals;                                                  // 0x0000(0x0010)
    TArray<AActor*>                               RedPortals;                                                   // 0x0010(0x0010)
    TArray<AActor*>                               ShadowPortals;                                                // 0x0020(0x0010)
};


// ScriptStruct  LyraGame.InGameRookieTaskMessage
// Struct Size::0x0018
struct FInGameRookieTaskMessage
{
    FGameplayTag                                  Verb;                                                         // 0x0000(0x0008)
    enum class ETGFInGameRookieTaskType           RookieTaskType;                                               // 0x0008(0x0001)
    char                                          pa_0009[0x0007]                                               // 0x0009(0x0007)
    int64_t                                       Value;                                                        // 0x0010(0x0008)
};


// ScriptStruct  LyraGame.InteractionQuery
// Struct Size::0x0038
struct FInteractionQuery
{
    TWeakObjectPtr<AActor>                        RequestingAvatar;                                             // 0x0000(0x0008)
    TWeakObjectPtr<AController>                   RequestingController;                                         // 0x0008(0x0008)
    TWeakObjectPtr<UObject>                       OptionalObjectData;                                           // 0x0010(0x0008)
    FGameplayTagContainer                         InteractionTag;                                               // 0x0018(0x0020)
};


// ScriptStruct  LyraGame.ItemBigIconRaw
// Struct Size::0x0018
struct FItemBigIconRaw : public FTableRowBase
{
    int32_t                                       TypeId;                                                       // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    UTexture2D*                                   Icon;                                                         // 0x0010(0x0008)
};


// ScriptStruct  LyraGame.TgfInventoryOperationItemSource
// Struct Size::0x0030
struct FTgfInventoryOperationItemSource
{
    enum class ETgfInventoryOperationItemSourceTypeType;                                                        // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    ULyraInventoryItemInstance*                   ItemInstance;                                                 // 0x0008(0x0008)
    int32_t                                       PartialStackCount;                                            // 0x0010(0x0004)
    bool                                          bExplicitTarget;                                              // 0x0014(0x0001)
    char                                          pa_0015[0x0003]                                               // 0x0015(0x0003)
    FIntPoint                                     TargetPosition;                                               // 0x0018(0x0008)
    UTgfInventoryManagerComponent*                TargetInventory;                                              // 0x0020(0x0008)
    enum class ELyraInventoryType                 TargetInventoryType;                                          // 0x0028(0x0001)
    char                                          pa_0029[0x0007]                                               // 0x0029(0x0007)
};


// ScriptStruct  LyraGame.TgfInventoryLootState
// Struct Size::0x0010
struct FTgfInventoryLootState
{
    ULyraEquipmentManagerComponent*               LootEquipmentManager;                                         // 0x0000(0x0008)
    ULyraInventoryManagerComponent*               LootInventoryManager;                                         // 0x0008(0x0008)
};


// ScriptStruct  LyraGame.TgfItemDefinitionQualitySelectionSet
// Struct Size::0x0020
struct FTgfItemDefinitionQualitySelectionSet
{
    ULyraInventoryItemDefinition*                 BaseDefinitionClass;                                          // 0x0000(0x0008)
    TArray<enum class ETgfEquipQuality>           Qualities;                                                    // 0x0008(0x0010)
    ULyraInventoryItemDefinition*                 Definition;                                                   // 0x0018(0x0008)
};


// ScriptStruct  LyraGame.TgfItemDefinitionSelectionSet
// Struct Size::0x0010
struct FTgfItemDefinitionSelectionSet
{
    ULyraInventoryItemDefinition*                 OldDefinition;                                                // 0x0000(0x0008)
    ULyraInventoryItemDefinition*                 NewDefinition;                                                // 0x0008(0x0008)
};


// ScriptStruct  LyraGame.TgfItemEffectDefinition
// Struct Size::0x0080
struct FTgfItemEffectDefinition
{
    UObject*                                      Effect;                                                       // 0x0000(0x0008)
    FName                                         AttachSocket;                                                 // 0x0008(0x0008)
    FTransform                                    AttachTransform;                                              // 0x0010(0x0060)
    enum class EAttachLocation                    LocationType;                                                 // 0x0070(0x0001)
    char                                          pa_0071[0x0007]                                               // 0x0071(0x0007)
    UAkAudioEvent*                                EffectSound;                                                  // 0x0078(0x0008)
};


// ScriptStruct  LyraGame.TgfItemHeadFrameDefinition
// Struct Size::0x0008
struct FTgfItemHeadFrameDefinition
{
    UTexture2D*                                   TextureHeadFrame;                                             // 0x0000(0x0008)
};


// ScriptStruct  LyraGame.LyraAbilitySimpleFailureMessage
// Struct Size::0x0040
struct FLyraAbilitySimpleFailureMessage
{
    APlayerController*                            PlayerController;                                             // 0x0000(0x0008)
    FGameplayTagContainer                         FailureTags;                                                  // 0x0008(0x0020)
    FText                                         UserFacingReason;                                             // 0x0028(0x0018)
};


// ScriptStruct  LyraGame.TGFDumpedGameplayEffect
// Struct Size::0x0010
struct FTGFDumpedGameplayEffect
{
    UGameplayEffect*                              GameplayEffectClass;                                          // 0x0000(0x0008)
    int32_t                                       StackCount;                                                   // 0x0008(0x0004)
    float                                         Level;                                                        // 0x000C(0x0004)
};


// ScriptStruct  LyraGame.LyraCharacterPartHandle
// Struct Size::0x0004
struct FLyraCharacterPartHandle
{
    int32_t                                       PartHandle;                                                   // 0x0000(0x0004)
};


// ScriptStruct  LyraGame.LyraCharacterPart
// Struct Size::0x0040
struct FLyraCharacterPart
{
    AActor*                                       PartClass;                                                    // 0x0000(0x0008)
    FName                                         SocketName;                                                   // 0x0008(0x0008)
    enum class ECharacterCustomizationCollisionModeCollisionMode;                                               // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
    TArray<FTgfCharaPartChangeConfig>             OverrideMeshes;                                               // 0x0018(0x0010)
    TArray<FTgfCharaPartSpawnActor>               EquipmentActorsToSpawnInfo;                                   // 0x0028(0x0010)
    bool                                          bForceThirdPerson;                                            // 0x0038(0x0001)
    bool                                          Visible;                                                      // 0x0039(0x0001)
    char                                          pa_003A[0x0006]                                               // 0x003A(0x0006)
};


// ScriptStruct  LyraGame.TgfCharaPartSpawnActor
// Struct Size::0x0018
struct FTgfCharaPartSpawnActor
{
    enum class ETgfCharaPart                      PartEnum;                                                     // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    TArray<FLyraEquipmentActorToSpawn>            ActorsToSpawn;                                                // 0x0008(0x0010)
};


// ScriptStruct  LyraGame.LyraEquipmentActorToSpawn
// Struct Size::0x01B0
struct FLyraEquipmentActorToSpawn
{
    AActor*                                       ActorToSpawn;                                                 // 0x0000(0x0008)
    FName                                         RightAttachSocket;                                            // 0x0008(0x0008)
    FName                                         LeftAttachSocket;                                             // 0x0010(0x0008)
    FName                                         RightUnequipSocket;                                           // 0x0018(0x0008)
    FName                                         LeftUnequipSocket;                                            // 0x0020(0x0008)
    char                                          pa_0028[0x0008]                                               // 0x0028(0x0008)
    FTransform                                    RightAttachTransform;                                         // 0x0030(0x0060)
    FTransform                                    LeftAttachTransform;                                          // 0x0090(0x0060)
    FTransform                                    RightUnequipTransform;                                        // 0x00F0(0x0060)
    FTransform                                    LeftUnequipTransform;                                         // 0x0150(0x0060)
};


// ScriptStruct  LyraGame.TgfCharaPartChangeConfig
// Struct Size::0x0030
struct FTgfCharaPartChangeConfig
{
    enum class ETgfCharaPart                      PartEnum;                                                     // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    FLyraAnimBodyStyleSelectionSet                PartMeshes;                                                   // 0x0008(0x0020)
    bool                                          ClearPartWhenPartMeshIsEmpty;                                 // 0x0028(0x0001)
    char                                          pa_0029[0x0007]                                               // 0x0029(0x0007)
};


// ScriptStruct  LyraGame.LyraAnimBodyStyleSelectionSet
// Struct Size::0x0020
struct FLyraAnimBodyStyleSelectionSet
{
    TArray<FLyraAnimBodyStyleSelectionEntry>      MeshRules;                                                    // 0x0000(0x0010)
    UPhysicalMaterial*                            PhysicsMaterial;                                              // 0x0010(0x0008)
    USkeletalMesh*                                DefaultMesh;                                                  // 0x0018(0x0008)
};


// ScriptStruct  LyraGame.LyraAnimBodyStyleSelectionEntry
// Struct Size::0x0028
struct FLyraAnimBodyStyleSelectionEntry
{
    USkeletalMesh*                                Mesh;                                                         // 0x0000(0x0008)
    FGameplayTagContainer                         RequiredTags;                                                 // 0x0008(0x0020)
};


// ScriptStruct  LyraGame.LyraInteractionDurationMessage
// Struct Size::0x0010
struct FLyraInteractionDurationMessage
{
    AActor*                                       Instigator;                                                   // 0x0000(0x0008)
    float                                         Duration;                                                     // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
};


// ScriptStruct  LyraGame.LyraPenetrationAvoidanceFeeler
// Struct Size::0x0030
struct FLyraPenetrationAvoidanceFeeler
{
    FRotator                                      AdjustmentRot;                                                // 0x0000(0x0018)
    float                                         WorldWeight;                                                  // 0x0018(0x0004)
    float                                         PawnWeight;                                                   // 0x001C(0x0004)
    float                                         Extent;                                                       // 0x0020(0x0004)
    int32_t                                       TraceInterval;                                                // 0x0024(0x0004)
    int32_t                                       FramesUntilNextTrace;                                         // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
};


// ScriptStruct  LyraGame.LyraVerbMessage
// Struct Size::0x0080
struct FLyraVerbMessage
{
    FGameplayTag                                  Verb;                                                         // 0x0000(0x0008)
    UObject*                                      Instigator;                                                   // 0x0008(0x0008)
    UObject*                                      Target;                                                       // 0x0010(0x0008)
    FGameplayTagContainer                         InstigatorTags;                                               // 0x0018(0x0020)
    FGameplayTagContainer                         TargetTags;                                                   // 0x0038(0x0020)
    FGameplayTagContainer                         ContextTags;                                                  // 0x0058(0x0020)
    double                                        Magnitude;                                                    // 0x0078(0x0008)
};


// ScriptStruct  LyraGame.WeaponAttachSocket
// Struct Size::0x0070
struct FWeaponAttachSocket
{
    FName                                         Socket;                                                       // 0x0000(0x0008)
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FTransform                                    Offset;                                                       // 0x0010(0x0060)
};


// ScriptStruct  LyraGame.TorchParam
// Struct Size::0x0014
struct FTorchParam
{
    int32_t                                       OptionId;                                                     // 0x0000(0x0004)
    float                                         StartIntensity;                                               // 0x0004(0x0004)
    float                                         EndIntensity;                                                 // 0x0008(0x0004)
    float                                         StartRadius;                                                  // 0x000C(0x0004)
    float                                         EndRadius;                                                    // 0x0010(0x0004)
};


// ScriptStruct  LyraGame.PlayerIntStatisticItemEntry
// Struct Size::0x0018
struct FPlayerIntStatisticItemEntry : public FFastArraySerializerItem
{
    enum class TgfActorIntStatisticType           Type;                                                         // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
    int32_t                                       TypeId;                                                       // 0x0010(0x0004)
    int32_t                                       Value;                                                        // 0x0014(0x0004)
};


// ScriptStruct  LyraGame.PlayerFloatStatisticItemEntry
// Struct Size::0x0018
struct FPlayerFloatStatisticItemEntry : public FFastArraySerializerItem
{
    enum class TgfActorFloatStatisticType         Type;                                                         // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
    double                                        Value;                                                        // 0x0010(0x0008)
};


// ScriptStruct  LyraGame.PlayerRelationIntStatisticItemEntry
// Struct Size::0x0028
struct FPlayerRelationIntStatisticItemEntry : public FFastArraySerializerItem
{
    enum class TgfActorRelationStatisticType      Type;                                                         // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
    FString                                       OpenID;                                                       // 0x0010(0x0010)
    int32_t                                       Value;                                                        // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
};


// ScriptStruct  LyraGame.PlayerIntStatistics
// Struct Size::0x0120
struct FPlayerIntStatistics : public FFastArraySerializer
{
    TArray<FPlayerIntStatisticItemEntry>          IntStatistics;                                                // 0x0108(0x0010)
    AActor*                                       OwnerActor;                                                   // 0x0118(0x0008)
};


// ScriptStruct  LyraGame.PlayerFloatStatistics
// Struct Size::0x0120
struct FPlayerFloatStatistics : public FFastArraySerializer
{
    TArray<FPlayerFloatStatisticItemEntry>        FloatStatistics;                                              // 0x0108(0x0010)
    AActor*                                       OwnerActor;                                                   // 0x0118(0x0008)
};


// ScriptStruct  LyraGame.PlayerRelationIntStatistics
// Struct Size::0x0120
struct FPlayerRelationIntStatistics : public FFastArraySerializer
{
    TArray<FPlayerRelationIntStatisticItemEntry>  RelationIntStatistics;                                        // 0x0108(0x0010)
    AActor*                                       OwnerActor;                                                   // 0x0118(0x0008)
};


// ScriptStruct  LyraGame.FloatStatisticMessage
// Struct Size::0x0018
struct FFloatStatisticMessage
{
    enum class TgfActorFloatStatisticType         Type;                                                         // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    double                                        OldValue;                                                     // 0x0008(0x0008)
    double                                        NewValue;                                                     // 0x0010(0x0008)
};


// ScriptStruct  LyraGame.IntStatisticMessage
// Struct Size::0x0010
struct FIntStatisticMessage
{
    enum class TgfActorIntStatisticType           Type;                                                         // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    int32_t                                       TypeId;                                                       // 0x0004(0x0004)
    int32_t                                       OldValue;                                                     // 0x0008(0x0004)
    int32_t                                       NewValue;                                                     // 0x000C(0x0004)
};


// ScriptStruct  LyraGame.RelationIntStatisticMessage
// Struct Size::0x0020
struct FRelationIntStatisticMessage
{
    enum class TgfActorRelationStatisticType      Type;                                                         // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    FString                                       OpenID;                                                       // 0x0008(0x0010)
    int32_t                                       OldValue;                                                     // 0x0018(0x0004)
    int32_t                                       NewValue;                                                     // 0x001C(0x0004)
};


// ScriptStruct  LyraGame.RoleDisplayAttribute
// Struct Size::0x00B0
struct FRoleDisplayAttribute : public FTableRowBase
{
    enum class EnRoleDisplayAttribueID            type;                                                         // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
    FName                                         name;                                                         // 0x000C(0x0008)
    int32_t                                       order;                                                        // 0x0014(0x0004)
    enum class EnRoleDisplayAttribueGroup         group;                                                        // 0x0018(0x0001)
    char                                          pa_0019[0x0007]                                               // 0x0019(0x0007)
    FString                                       IconPath;                                                     // 0x0020(0x0010)
    TArray<FString>                               describes;                                                    // 0x0030(0x0010)
    bool                                          display;                                                      // 0x0040(0x0001)
    bool                                          as;                                                           // 0x0041(0x0001)
    char                                          pa_0042[0x0006]                                               // 0x0042(0x0006)
    TArray<enum class ETgfActorCareer>            careers;                                                      // 0x0048(0x0010)
    TArray<float>                                 value;                                                        // 0x0058(0x0010)
    FGameplayAttribute                            Attribute;                                                    // 0x0068(0x0038)
    FString                                       LuaFunction;                                                  // 0x00A0(0x0010)
};


// ScriptStruct  LyraGame.RoleStatisticsInfoRow
// Struct Size::0x0030
struct FRoleStatisticsInfoRow : public FTableRowBase
{
    enum class EnRoleStatisticsDataID             StatisticsId;                                                 // 0x0008(0x0001)
    char                                          pa_0009[0x0007]                                               // 0x0009(0x0007)
    FText                                         NameText;                                                     // 0x0010(0x0018)
    enum class EnRoleStatisticsDataGroup          group;                                                        // 0x0028(0x0001)
    bool                                          bDisplayAsPercentage;                                         // 0x0029(0x0001)
    bool                                          bAsInt;                                                       // 0x002A(0x0001)
    char                                          pa_002B[0x0001]                                               // 0x002B(0x0001)
    int32_t                                       DecimalPlace;                                                 // 0x002C(0x0004)
};


// ScriptStruct  LyraGame.SwordInsSet
// Struct Size::0x0010
struct FSwordInsSet
{
    TArray<AActor*>                               Swords;                                                       // 0x0000(0x0010)
};


// ScriptStruct  LyraGame.TgfMovementMonitorSetting
// Struct Size::0x00C8
struct FTgfMovementMonitorSetting
{
    enum class ETgfMovementMonitorType            MovementMonitorType;                                          // 0x0000(0x0001)
    enum class ETgfMonitorNetExecutionPolicy      NetExecutionPolicy;                                           // 0x0001(0x0001)
    char                                          pa_0002[0x0006]                                               // 0x0002(0x0006)
    FGameplayTagContainer                         SourceRequiredTags;                                           // 0x0008(0x0020)
    FGameplayTagQuery                             SourceTagQuery;                                               // 0x0028(0x0048)
    TArray<ULyraGameplayAbility*>                 ActivateGameplayAbilityList;                                  // 0x0070(0x0010)
    bool                                          bNeedCheckContinue;                                           // 0x0080(0x0001)
    bool                                          bResetWhenTrigger;                                            // 0x0081(0x0001)
    enum class ETgfMovementMonitorCrouchSetting   MonitorCrouchSetting;                                         // 0x0082(0x0001)
    bool                                          bNeedSendResetEvent;                                          // 0x0083(0x0001)
    char                                          pa_0084[0x0004]                                               // 0x0084(0x0004)
    TArray<FGameplayTag>                          ResetEventTags;                                               // 0x0088(0x0010)
    bool                                          bNeedSendStartEvent;                                          // 0x0098(0x0001)
    char                                          pa_0099[0x0007]                                               // 0x0099(0x0007)
    TArray<FGameplayTag>                          StartEventTags;                                               // 0x00A0(0x0010)
    bool                                          bNeedSendTriggerEvent;                                        // 0x00B0(0x0001)
    char                                          pa_00B1[0x0007]                                               // 0x00B1(0x0007)
    TArray<FGameplayTag>                          TriggerEventTags;                                             // 0x00B8(0x0010)
};


// ScriptStruct  LyraGame.TgfMovementMonitorConfig
// Struct Size::0x00E8
struct FTgfMovementMonitorConfig
{
    FGameplayTag                                  MonitorMovementTag;                                           // 0x0000(0x0008)
    FTgfMovementMonitorSetting                    MovementMonitorSetting;                                       // 0x0008(0x00C8)
    float                                         NeedMoveTime;                                                 // 0x00D0(0x0004)
    int32_t                                       NeedTriggerTimes;                                             // 0x00D4(0x0004)
    bool                                          IgnoreAutoTrigger;                                            // 0x00D8(0x0001)
    char                                          pa_00D9[0x0003]                                               // 0x00D9(0x0003)
    float                                         CurMoveTime;                                                  // 0x00DC(0x0004)
    int32_t                                       CurTriggerTimes;                                              // 0x00E0(0x0004)
    bool                                          bIsLastUpdateTime;                                            // 0x00E4(0x0001)
    bool                                          bIsTriggered;                                                 // 0x00E5(0x0001)
    char                                          pa_00E6[0x0002]                                               // 0x00E6(0x0002)
};


// ScriptStruct  LyraGame.TgfApplyAOEExtraParam
// Struct Size::0x0190
struct FTgfApplyAOEExtraParam
{
    FGameplayTagRequirements                      TargetRequirements;                                           // 0x0000(0x0040)
    FGameplayTagContainer                         ContextTags;                                                  // 0x0040(0x0020)
    float                                         AttackDPH;                                                    // 0x0060(0x0004)
    float                                         DamageRate;                                                   // 0x0064(0x0004)
    float                                         MinSplitNum;                                                  // 0x0068(0x0004)
    float                                         MinDPHRate;                                                   // 0x006C(0x0004)
    bool                                          bIgnoreDeathActor;                                            // 0x0070(0x0001)
    char                                          pa_0071[0x0003]                                               // 0x0071(0x0003)
    float                                         Level;                                                        // 0x0074(0x0004)
    enum class ETgfUseAttackType                  AttackType;                                                   // 0x0078(0x0001)
    bool                                          bCanCauseInterrupt;                                           // 0x0079(0x0001)
    char                                          pa_007A[0x0006]                                               // 0x007A(0x0006)
    UGameplayEffect*                              InterruptGE;                                                  // 0x0080(0x0008)
    float                                         OverrideAttackWeight;                                         // 0x0088(0x0004)
    bool                                          bNeedCritical;                                                // 0x008C(0x0001)
    bool                                          bIgnoreTeamRestrict;                                          // 0x008D(0x0001)
    char                                          pa_008E[0x0002]                                               // 0x008E(0x0002)
    FHitResult                                    HitResult;                                                    // 0x0090(0x00E8)
    FGameplayEffectContextHandle                  EffectContext;                                                // 0x0178(0x0018)
};


// ScriptStruct  LyraGame.TgfGameplayAbilityTargetingPassiveMoveInfo
// Struct Size::0x0040
struct FTgfGameplayAbilityTargetingPassiveMoveInfo
{
    FVector                                       TargetLocation;                                               // 0x0000(0x0018)
    bool                                          bUpdateRotation;                                              // 0x0018(0x0001)
    char                                          pa_0019[0x0007]                                               // 0x0019(0x0007)
    FRotator                                      TargetRotation;                                               // 0x0020(0x0018)
    float                                         Duration;                                                     // 0x0038(0x0004)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
};


// ScriptStruct  LyraGame.TgfGameplayAbilityTargetData
// Struct Size::0x0048
struct FTgfGameplayAbilityTargetData : public FGameplayAbilityTargetData
{
    FTgfGameplayAbilityTargetingPassiveMoveInfo   PassiveMoveInfo;                                              // 0x0008(0x0040)
};


// ScriptStruct  LyraGame.MovingCheckParams
// Struct Size::0x0014
struct FMovingCheckParams
{
    char                                          bCheckVelocity;                                               // 0x0000(0x0001)
    char                                          bCheckRotationYaw;                                            // 0x0000(0x0001)
    char                                          bCheckRotationPitch;                                          // 0x0000(0x0001)
    char                                          bCheckRepeat;                                                 // 0x0000(0x0001)
    char                                          bCheckMaxDistance;                                            // 0x0000(0x0001)
    char                                          bUseMeshLocation;                                             // 0x0000(0x0001)
    char                                          bIgnoreZ;                                                     // 0x0000(0x0001)
    char                                          bDebugMode;                                                   // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         MaxAnglePerSecond;                                            // 0x0004(0x0004)
    float                                         MaxDistancePerSecond;                                         // 0x0008(0x0004)
    float                                         CheckInterval;                                                // 0x000C(0x0004)
    float                                         MaxDistance;                                                  // 0x0010(0x0004)
};


// ScriptStruct  LyraGame.TgfAIAbilityFilter
// Struct Size::0x0038
struct FTgfAIAbilityFilter
{
    enum class ETgfAIAbilityFilterType            Type;                                                         // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    TArray<int32_t>                               args;                                                         // 0x0008(0x0010)
    FGameplayTagContainer                         Tags;                                                         // 0x0018(0x0020)
};


// ScriptStruct  LyraGame.TgfAIAbilityTargetFilter
// Struct Size::0x0038
struct FTgfAIAbilityTargetFilter
{
    enum class ETgfAIAbilityTargetFilterType      Type;                                                         // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    TArray<int32_t>                               args;                                                         // 0x0008(0x0010)
    FGameplayTagContainer                         Tags;                                                         // 0x0018(0x0020)
};


// ScriptStruct  LyraGame.TgfAIAbilityTarget
// Struct Size::0x0030
struct FTgfAIAbilityTarget
{
    enum class ETgfAIAbilityTargetType            Type;                                                         // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    AActor*                                       Actor;                                                        // 0x0008(0x0008)
    FVector                                       Vector;                                                       // 0x0010(0x0018)
    bool                                          ThreatTarget;                                                 // 0x0028(0x0001)
    char                                          pa_0029[0x0007]                                               // 0x0029(0x0007)
};


// ScriptStruct  LyraGame.TgfMoveActorConfig
// Struct Size::0x0030
struct FTgfMoveActorConfig
{
    int32_t                                       Priority;                                                     // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    UCurveVector*                                 LocationCurve;                                                // 0x0008(0x0008)
    bool                                          bIsExtractRootMotionCurve;                                    // 0x0010(0x0001)
    bool                                          bShouldIgnoreZAccumulate;                                     // 0x0011(0x0001)
    bool                                          bStopWhenMoveBlocked;                                         // 0x0012(0x0001)
    char                                          pa_0013[0x0001]                                               // 0x0013(0x0001)
    float                                         ClampVelocity;                                                // 0x0014(0x0004)
    bool                                          bUseConstantForce;                                            // 0x0018(0x0001)
    char                                          pa_0019[0x0003]                                               // 0x0019(0x0003)
    float                                         ForceStrength;                                                // 0x001C(0x0004)
    UCurveFloat*                                  StrengthCurve;                                                // 0x0020(0x0008)
    bool                                          bKeepForwardDirection;                                        // 0x0028(0x0001)
    char                                          pa_0029[0x0007]                                               // 0x0029(0x0007)
};


// ScriptStruct  LyraGame.TgfLineEffectStartConfig
// Struct Size::0x0058
struct FTgfLineEffectStartConfig
{
    enum class ETgfEffectPlacementTargetType      PlacementTargetType;                                          // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FName                                         SocketName;                                                   // 0x0004(0x0008)
    char                                          bOverrideRotation;                                            // 0x000C(0x0001)
    char                                          bOverrideScale;                                               // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
    FRotator                                      RotationOverride;                                             // 0x0010(0x0018)
    FVector                                       ScaleOverride;                                                // 0x0028(0x0018)
    FVector                                       AttachmentOffset;                                             // 0x0040(0x0018)
};


// ScriptStruct  LyraGame.TgfLineEffectEndConfig
// Struct Size::0x0014
struct FTgfLineEffectEndConfig
{
    enum class ETgfEffectPlacementTargetType      PlacementTargetType;                                          // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FName                                         SocketName;                                                   // 0x0004(0x0008)
    FName                                         TargetMeshParamName;                                          // 0x000C(0x0008)
};


// ScriptStruct  LyraGame.FXContainer
// Struct Size::0x0010
struct FFXContainer
{
    TArray<UFXSystemComponent*>                   Effects;                                                      // 0x0000(0x0010)
};


// ScriptStruct  LyraGame.TgfBattleEleResistanceItem
// Struct Size::0x0008
struct FTgfBattleEleResistanceItem
{
    enum class ETgfBattleElement                  AttackElement;                                                // 0x0000(0x0001)
    enum class ETgfBattleElement                  DefendElement;                                                // 0x0001(0x0001)
    char                                          pa_0002[0x0002]                                               // 0x0002(0x0002)
    float                                         DeltaRate;                                                    // 0x0004(0x0004)
};


// ScriptStruct  LyraGame.BlendingUtilParamsCache
// Struct Size::0x000C
struct FBlendingUtilParamsCache
{
    float                                         StartValue;                                                   // 0x0000(0x0004)
    float                                         ElapsedTime;                                                  // 0x0004(0x0004)
    char                                          bInBlending;                                                  // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
};


// ScriptStruct  LyraGame.SpeedDampingParams
// Struct Size::0x0008
struct FSpeedDampingParams
{
    float                                         RemainTime;                                                   // 0x0000(0x0004)
    float                                         CurSpeed;                                                     // 0x0004(0x0004)
};


// ScriptStruct  LyraGame.AnimTagPair
// Struct Size::0x0028
struct FAnimTagPair
{
    FGameplayTagContainer                         Tag;                                                          // 0x0000(0x0020)
    UAnimSequenceBase*                            Animation;                                                    // 0x0020(0x0008)
};


// ScriptStruct  LyraGame.AnimTagPairSet
// Struct Size::0x0018
struct FAnimTagPairSet
{
    TArray<FAnimTagPair>                          Animations;                                                   // 0x0000(0x0010)
    UAnimSequenceBase*                            DefaultAnimation;                                             // 0x0010(0x0008)
};


// ScriptStruct  LyraGame.PhysicsBodyContainer
// Struct Size::0x0030
struct FPhysicsBodyContainer
{
    TArray<FName>                                 Bodies;                                                       // 0x0000(0x0010)
    FGameplayTagContainer                         Tags;                                                         // 0x0010(0x0020)
};


// ScriptStruct  LyraGame.ProjectileActorSpawnParams
// Struct Size::0x0070
struct FProjectileActorSpawnParams
{
    FTransform                                    SpawnTransform;                                               // 0x0000(0x0060)
    bool                                          NeedChangeMesh;                                               // 0x0060(0x0001)
    char                                          pa_0061[0x000F]                                               // 0x0061(0x000F)
};


// ScriptStruct  LyraGame.TimeDilationConfig
// Struct Size::0x0008
struct FTimeDilationConfig
{
    float                                         TimeDilationDuration;                                         // 0x0000(0x0004)
    float                                         TimeDilationRate;                                             // 0x0004(0x0004)
};


// ScriptStruct  LyraGame.TgfGameplayTagABPConfig
// Struct Size::0x0020
struct FTgfGameplayTagABPConfig
{
    FGameplayTag                                  Tag;                                                          // 0x0000(0x0008)
    UAnimInstance*                                ABPClass;                                                     // 0x0008(0x0008)
    char                                          pa_0010[0x0010]                                               // 0x0010(0x0010)
};


// ScriptStruct  LyraGame.TgfVisibleCheck
// Struct Size::0x0008
struct FTgfVisibleCheck
{
    bool                                          bVisibleCheck;                                                // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         CheckDelayTime;                                               // 0x0004(0x0004)
};


// ScriptStruct  LyraGame.TgfRaceAvatarBodyModifyData
// Struct Size::0x0168
struct FTgfRaceAvatarBodyModifyData
{
    FVector                                       Bip001;                                                       // 0x0000(0x0018)
    FVector                                       Bip001;                                                       // 0x0018(0x0018)
    FVector                                       Bip001;                                                       // 0x0030(0x0018)
    FVector                                       Bip001;                                                       // 0x0048(0x0018)
    FVector                                       Bip001;                                                       // 0x0060(0x0018)
    FVector                                       Bip001;                                                       // 0x0078(0x0018)
    FVector                                       Bip001;                                                       // 0x0090(0x0018)
    FVector                                       Bone;                                                         // 0x00A8(0x0018)
    FVector                                       Bone;                                                         // 0x00C0(0x0018)
    FVector                                       Bone;                                                         // 0x00D8(0x0018)
    FVector                                       Bone;                                                         // 0x00F0(0x0018)
    FVector                                       Bone;                                                         // 0x0108(0x0018)
    FVector                                       Bip001;                                                       // 0x0120(0x0018)
    FVector                                       Bip001;                                                       // 0x0138(0x0018)
    FVector                                       Bip001;                                                       // 0x0150(0x0018)
};


// ScriptStruct  LyraGame.TgfRaceAvatarDataPair
// Struct Size::0x0170
struct FTgfRaceAvatarDataPair
{
    enum class ETgfActorRace                      Race;                                                         // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    FTgfRaceAvatarBodyModifyData                  ModifyData;                                                   // 0x0008(0x0168)
};


// ScriptStruct  LyraGame.TgfNotificationMessageSpawnActor
// Struct Size::0x0020
struct FTgfNotificationMessageSpawnActor
{
    AActor*                                       Class;                                                        // 0x0000(0x0008)
    FVector                                       position;                                                     // 0x0008(0x0018)
};


// ScriptStruct  LyraGame.TgfNotificationMessageSpawnMonster
// Struct Size::0x0028
struct FTgfNotificationMessageSpawnMonster
{
    ALyraCharacter*                               Class;                                                        // 0x0000(0x0008)
    FVector                                       position;                                                     // 0x0008(0x0018)
    int32_t                                       LootIndex;                                                    // 0x0020(0x0004)
    bool                                          Dormant;                                                      // 0x0024(0x0001)
    char                                          pa_0025[0x0003]                                               // 0x0025(0x0003)
};


// ScriptStruct  LyraGame.MapHintEscapeData
// Struct Size::0x0030
struct FMapHintEscapeData
{
    enum class ETgfEscapeMapHintType              EscapeHintType;                                               // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    FVector                                       ReportLocation;                                               // 0x0008(0x0018)
    ALyraCharacter*                               ReportCharacter;                                              // 0x0020(0x0008)
    UObject*                                      HandleObject;                                                 // 0x0028(0x0008)
};


// ScriptStruct  LyraGame.PlayerNameData
// Struct Size::0x0030
struct FPlayerNameData
{
    int32_t                                       RoleTypeId;                                                   // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FString                                       PlayerName;                                                   // 0x0008(0x0010)
    enum class ETgfActorCareer                    EPlayerCareerType;                                            // 0x0018(0x0001)
    char                                          pa_0019[0x0007]                                               // 0x0019(0x0007)
    int64_t                                       CreateIndex;                                                  // 0x0020(0x0008)
    bool                                          bIsForceHiddenPlayerName;                                     // 0x0028(0x0001)
    bool                                          bIsPlayer;                                                    // 0x0029(0x0001)
    char                                          pa_002A[0x0006]                                               // 0x002A(0x0006)
};


// ScriptStruct  LyraGame.TgfAnotherWeaponConfig
// Struct Size::0x0018
struct FTgfAnotherWeaponConfig
{
    enum class ETgfEquipSubType                   AnotherWeaponType;                                            // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    TArray<enum class ETgfActorCareer>            CareerRestricts;                                              // 0x0008(0x0010)
};


// ScriptStruct  LyraGame.TgfWeaponConfig
// Struct Size::0x0070
struct FTgfWeaponConfig
{
    enum class ETgfEquipSubType                   WeaponType;                                                   // 0x0000(0x0001)
    enum class ETgfWeaponEquipType                EquipType;                                                    // 0x0001(0x0001)
    bool                                          CanEquipDouble;                                               // 0x0002(0x0001)
    char                                          pa_0003[0x0005]                                               // 0x0003(0x0005)
    TArray<enum class ETgfActorCareer>            CareerRestricts;                                              // 0x0008(0x0010)
    TArray<FTgfAnotherWeaponConfig>               AnotherWeapons;                                               // 0x0018(0x0010)
    FGameplayTagQuery                             RequiredTag;                                                  // 0x0028(0x0048)
};


// ScriptStruct  LyraGame.TgfEquipmentConfig
// Struct Size::0x0070
struct FTgfEquipmentConfig
{
    enum class ETgfEquipSubType                   EquipType;                                                    // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    TArray<enum class ETgfEquipSlot>              AvailableEquipSlotLists;                                      // 0x0008(0x0010)
    TArray<enum class ETgfActorCareer>            CareerRestricts;                                              // 0x0018(0x0010)
    FGameplayTagQuery                             RequiredTag;                                                  // 0x0028(0x0048)
};


// ScriptStruct  LyraGame.TgfWeaponSlot
// Struct Size::0x0020
struct FTgfWeaponSlot
{
    enum class ETgfWeaponChangeSlot               WeaponSlot;                                                   // 0x0000(0x0001)
    enum class ETgfWeaponEquipType                EquipType;                                                    // 0x0001(0x0001)
    char                                          pa_0002[0x0002]                                               // 0x0002(0x0002)
    int32_t                                       LeftHandIndex;                                                // 0x0004(0x0004)
    int32_t                                       RightHandIndex;                                               // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    UTgfWeaponAnimInstance*                       AnimInstance;                                                 // 0x0010(0x0008)
    enum class ETgfEquipSubType                   LastRightEquipSubType;                                        // 0x0018(0x0001)
    char                                          pa_0019[0x0007]                                               // 0x0019(0x0007)
};


// ScriptStruct  LyraGame.TgfWeaponSwitchMessage
// Struct Size::0x0010
struct FTgfWeaponSwitchMessage
{
    UActorComponent*                              EquipmentManager;                                             // 0x0000(0x0008)
    enum class ETgfWeaponChangeSlot               WeaponSlot;                                                   // 0x0008(0x0001)
    enum class ETgfWeaponEquipType                EquipType;                                                    // 0x0009(0x0001)
    char                                          pa_000A[0x0006]                                               // 0x000A(0x0006)
};


// ScriptStruct  LyraGame.TgfFaceConfig
// Struct Size::0x0068
struct FTgfFaceConfig
{
    TMap<enum class ETgfCharaPart,USkeletalMesh*> MeshConfigs;                                                  // 0x0000(0x0050)
    int32_t                                       FaceId;                                                       // 0x0050(0x0004)
    char                                          pa_0054[0x0004]                                               // 0x0054(0x0004)
    TArray<UMaterialInstance*>                    SkinMaterials;                                                // 0x0058(0x0010)
};


// ScriptStruct  LyraGame.TgfSkinConfig
// Struct Size::0x0018
struct FTgfSkinConfig
{
    int32_t                                       SkinId;                                                       // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    TArray<UMaterialInstance*>                    SkinMaterials;                                                // 0x0008(0x0010)
};


// ScriptStruct  LyraGame.TGFFrameLimitHelper
// Struct Size::0x0001
struct FTGFFrameLimitHelper
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  LyraGame.TgfSubLevelChargeConfig
// Struct Size::0x0028
struct FTgfSubLevelChargeConfig
{
    int32_t                                       ChargeLevel;                                                  // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    UGameplayEffect*                              SubCost;                                                      // 0x0008(0x0008)
    float                                         ChargeTime;                                                   // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FString                                       SubLevelName;                                                 // 0x0018(0x0010)
};


// ScriptStruct  LyraGame.TgfCollectableActorInfo
// Struct Size::0x0020
struct FTgfCollectableActorInfo
{
    AActor*                                       CollectActor;                                                 // 0x0000(0x0008)
    FVector                                       CollectPos;                                                   // 0x0008(0x0018)
};


// ScriptStruct  LyraGame.TgfAbilityPostActiveCD
// Struct Size::0x0010
struct FTgfAbilityPostActiveCD
{
    ULyraGameplayAbility*                         Ability;                                                      // 0x0000(0x0008)
    float                                         PostActiveCD;                                                 // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
};


// ScriptStruct  LyraGame.AuraMessageVerb
// Struct Size::0x0010
struct FAuraMessageVerb
{
    ALyraCharacter*                               Instigator;                                                   // 0x0000(0x0008)
    ALyraCharacter*                               Target;                                                       // 0x0008(0x0008)
};


// ScriptStruct  LyraGame.TgfActiveGameplayAuraHandle
// Struct Size::0x0004
struct FTgfActiveGameplayAuraHandle
{
    int32_t                                       Handle;                                                       // 0x0000(0x0004)
};


// ScriptStruct  LyraGame.TgfGameplayAuraSpec
// Struct Size::0x0010
struct FTgfGameplayAuraSpec
{
    FTgfActiveGameplayAuraHandle                  Handle;                                                       // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    UTgfGameplayAura*                             Aura;                                                         // 0x0008(0x0008)
};


// ScriptStruct  LyraGame.ActorCareerRacePair
// Struct Size::0x0002
struct FActorCareerRacePair
{
    enum class ETgfActorCareer                    Career;                                                       // 0x0000(0x0001)
    enum class ETgfActorRace                      Race;                                                         // 0x0001(0x0001)
};


// ScriptStruct  LyraGame.SkillWidgetMessage
// Struct Size::0x0018
struct FSkillWidgetMessage
{
    enum class EWidgetDirection                   WidgetDirection;                                              // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    UTgfSkillWidgetBase*                          SkillWidgetObj;                                               // 0x0008(0x0008)
    enum class ETgfActorCareer                    ActorCareer;                                                  // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
};


// ScriptStruct  LyraGame.DashBoardConstructMessage
// Struct Size::0x0010
struct FDashBoardConstructMessage
{
    FString                                       DashBoardConstructMsg;                                        // 0x0000(0x0010)
};


// ScriptStruct  LyraGame.DashBoardChargeSkillMessage
// Struct Size::0x0020
struct FDashBoardChargeSkillMessage
{
    FString                                       SkillName;                                                    // 0x0000(0x0010)
    float                                         ChargeMaxTime;                                                // 0x0010(0x0004)
    float                                         ChargeCurrentTime;                                            // 0x0014(0x0004)
    bool                                          UseHoldChargeMethod;                                          // 0x0018(0x0001)
    char                                          pa_0019[0x0007]                                               // 0x0019(0x0007)
};


// ScriptStruct  LyraGame.DashBoardShowTextMessage
// Struct Size::0x0018
struct FDashBoardShowTextMessage
{
    FString                                       Content;                                                      // 0x0000(0x0010)
    bool                                          bShowText;                                                    // 0x0010(0x0001)
    bool                                          bUseHoldChargeMethod;                                         // 0x0011(0x0001)
    char                                          pa_0012[0x0006]                                               // 0x0012(0x0006)
};


// ScriptStruct  LyraGame.HudBooleanMessage
// Struct Size::0x0001
struct FHudBooleanMessage
{
    bool                                          bValue;                                                       // 0x0000(0x0001)
};


// ScriptStruct  LyraGame.HudStringMessage
// Struct Size::0x0010
struct FHudStringMessage
{
    FString                                       StringValue;                                                  // 0x0000(0x0010)
};


// ScriptStruct  LyraGame.KeyBindingChangeMessage
// Struct Size::0x0018
struct FKeyBindingChangeMessage
{
    FKey                                          Key;                                                          // 0x0000(0x0018)
};


// ScriptStruct  LyraGame.HurtNotifyMessage
// Struct Size::0x0020
struct FHurtNotifyMessage
{
    FVector                                       Location;                                                     // 0x0000(0x0018)
    float                                         Num;                                                          // 0x0018(0x0004)
    enum class EHurtNotifyType                    HurtNotifyType;                                               // 0x001C(0x0001)
    bool                                          bIsCrit;                                                      // 0x001D(0x0001)
    enum class EHurtNotifyAnimType                AnimType;                                                     // 0x001E(0x0001)
    char                                          pa_001F[0x0001]                                               // 0x001F(0x0001)
};


// ScriptStruct  LyraGame.HitDirectionMessage
// Struct Size::0x0020
struct FHitDirectionMessage
{
    FGameplayTag                                  Verb;                                                         // 0x0000(0x0008)
    float                                         Direction;                                                    // 0x0008(0x0004)
    bool                                          bIsGuarded;                                                   // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
    AActor*                                       DamageInstigator;                                             // 0x0010(0x0008)
    AActor*                                       DamageTarget;                                                 // 0x0018(0x0008)
};


// ScriptStruct  LyraGame.LocalBuffIconMessage
// Struct Size::0x0020
struct FLocalBuffIconMessage
{
    AActor*                                       Source;                                                       // 0x0000(0x0008)
    UTexture2D*                                   BuffIcon;                                                     // 0x0008(0x0008)
    float                                         TotalTime;                                                    // 0x0010(0x0004)
    float                                         RemainTime;                                                   // 0x0014(0x0004)
    int32_t                                       StackCnt;                                                     // 0x0018(0x0004)
    enum class ELocalBuffState                    BuffState;                                                    // 0x001C(0x0001)
    char                                          pa_001D[0x0003]                                               // 0x001D(0x0003)
};


// ScriptStruct  LyraGame.HudTimeMessage
// Struct Size::0x0018
struct FHudTimeMessage
{
    AActor*                                       Source;                                                       // 0x0000(0x0008)
    float                                         CurTime;                                                      // 0x0008(0x0004)
    float                                         TotalTime;                                                    // 0x000C(0x0004)
    float                                         RemainTime;                                                   // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  LyraGame.HudIntMessage
// Struct Size::0x0010
struct FHudIntMessage
{
    AActor*                                       Source;                                                       // 0x0000(0x0008)
    int32_t                                       Num;                                                          // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
};


// ScriptStruct  LyraGame.TgfGearsetLevelAbilityItem
// Struct Size::0x0018
struct FTgfGearsetLevelAbilityItem
{
    int32_t                                       GearsetLevel;                                                 // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    TArray<ULyraAbilitySet*>                      AbilitySetsToGrant;                                           // 0x0008(0x0010)
};


// ScriptStruct  LyraGame.TgfPresetAppearanceTemplate
// Struct Size::0x0070
struct FTgfPresetAppearanceTemplate
{
    int32_t                                       ID;                                                           // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    UTexture2D*                                   AppearanceTexture;                                            // 0x0008(0x0008)
    FString                                       Description;                                                  // 0x0010(0x0010)
    TMap<enum class ECreateRoleChooseSubType,int32_t>MapAppearaneOptionalData;                                  // 0x0020(0x0050)
};


// ScriptStruct  LyraGame.TgfMeshConfig
// Struct Size::0x0018
struct FTgfMeshConfig
{
    int32_t                                       ID;                                                           // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    USkeletalMesh*                                Mesh;                                                         // 0x0008(0x0008)
    UTexture2D*                                   Thumbnail;                                                    // 0x0010(0x0008)
};


// ScriptStruct  LyraGame.TgfConfigParam
// Struct Size::0x0050
struct FTgfConfigParam
{
    FName                                         HairColorParam;                                               // 0x0000(0x0008)
    FName                                         BeardColorParam;                                              // 0x0008(0x0008)
    FName                                         EyeColorParam;                                                // 0x0010(0x0008)
    FName                                         TatooColorParam;                                              // 0x0018(0x0008)
    FName                                         SkinColorParam;                                               // 0x0020(0x0008)
    FName                                         MakeupColorParam;                                             // 0x0028(0x0008)
    FName                                         ScarTextureParam;                                             // 0x0030(0x0008)
    FName                                         ScarNormalMapTextureParam;                                    // 0x0038(0x0008)
    FName                                         MakeUpTextureParam;                                           // 0x0040(0x0008)
    FName                                         TatooTextureParam;                                            // 0x0048(0x0008)
};


// ScriptStruct  LyraGame.TgfConfigParamConfig
// Struct Size::0x0060
struct FTgfConfigParamConfig
{
    TArray<int32_t>                               ID;                                                           // 0x0000(0x0010)
    FTgfConfigParam                               Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  LyraGame.TgfColorConfig
// Struct Size::0x0020
struct FTgfColorConfig
{
    int32_t                                       ID;                                                           // 0x0000(0x0004)
    FLinearColor                                  HSVColor;                                                     // 0x0004(0x0010)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    UTexture2D*                                   Thumbnail;                                                    // 0x0018(0x0008)
};


// ScriptStruct  LyraGame.TgfTextureConfig
// Struct Size::0x0018
struct FTgfTextureConfig
{
    int32_t                                       ID;                                                           // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    UTexture2D*                                   Texture;                                                      // 0x0008(0x0008)
    UTexture2D*                                   Thumbnail;                                                    // 0x0010(0x0008)
};


// ScriptStruct  LyraGame.TgfMaterialConfig
// Struct Size::0x0020
struct FTgfMaterialConfig
{
    int32_t                                       ID;                                                           // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    TArray<UMaterialInstance*>                    Material;                                                     // 0x0008(0x0010)
    UTexture2D*                                   Thumbnail;                                                    // 0x0018(0x0008)
};


// ScriptStruct  LyraGame.TgfGenderConfig
// Struct Size::0x0010
struct FTgfGenderConfig
{
    UTexture2D*                                   BaseTexture;                                                  // 0x0000(0x0008)
    UTexture2D*                                   SelectTexture;                                                // 0x0008(0x0008)
};


// ScriptStruct  LyraGame.TgfHeadResData
// Struct Size::0x0100
struct FTgfHeadResData
{
    char                                          pa_0000[0x0100]                                               // 0x0000(0x0100)
};


// ScriptStruct  LyraGame.TgfHeadResConfig
// Struct Size::0x0030
struct FTgfHeadResConfig
{
    int32_t                                       FaceId;                                                       // 0x0000(0x0004)
    int32_t                                       HairId;                                                       // 0x0004(0x0004)
    int32_t                                       BeardId;                                                      // 0x0008(0x0004)
    int32_t                                       HairMId;                                                      // 0x000C(0x0004)
    int32_t                                       SkinMId;                                                      // 0x0010(0x0004)
    int32_t                                       BeardMId;                                                     // 0x0014(0x0004)
    int32_t                                       TatooId;                                                      // 0x0018(0x0004)
    int32_t                                       TatooMId;                                                     // 0x001C(0x0004)
    int32_t                                       EyeMId;                                                       // 0x0020(0x0004)
    int32_t                                       ScarId;                                                       // 0x0024(0x0004)
    int32_t                                       MakeupId;                                                     // 0x0028(0x0004)
    int32_t                                       MakeupMId;                                                    // 0x002C(0x0004)
};


// ScriptStruct  LyraGame.TgfAvatarBuildConfig
// Struct Size::0x0068
struct FTgfAvatarBuildConfig
{
    FTgfHeadResConfig                             CosmeticData;                                                 // 0x0000(0x0030)
    enum class ETgfActorGender                    Gender;                                                       // 0x0030(0x0001)
    enum class ETgfActorRace                      Race;                                                         // 0x0031(0x0001)
    char                                          pa_0032[0x0006]                                               // 0x0032(0x0006)
    TArray<int32_t>                               Equipments;                                                   // 0x0038(0x0010)
    TArray<int32_t>                               Weapons;                                                      // 0x0048(0x0010)
    TArray<int32_t>                               Skins;                                                        // 0x0058(0x0010)
};


// ScriptStruct  LyraGame.TgfInventoryPackageSingleItem
// Struct Size::0x0008
struct FTgfInventoryPackageSingleItem
{
    int32_t                                       ItemId;                                                       // 0x0000(0x0004)
    int32_t                                       Count;                                                        // 0x0004(0x0004)
};


// ScriptStruct  LyraGame.TgfInventoryPackageItem
// Struct Size::0x0018
struct FTgfInventoryPackageItem
{
    int32_t                                       PackageId;                                                    // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    TArray<FTgfInventoryPackageSingleItem>        PackageItem;                                                  // 0x0008(0x0010)
};


// ScriptStruct  LyraGame.TgfInventoryRequirementQuery
// Struct Size::0x0020
struct FTgfInventoryRequirementQuery
{
    enum class ETgfInventoryRequirementQueryResultResult;                                                       // 0x0000(0x0001)
    enum class ETgfEquipSubType                   EquipSubType;                                                 // 0x0001(0x0001)
    char                                          pa_0002[0x0006]                                               // 0x0002(0x0006)
    TArray<enum class ETgfActorCareer>            RequiredCareer;                                               // 0x0008(0x0010)
    int32_t                                       RequiredLevel;                                                // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  LyraGame.TgfInventoryLockedItem
// Struct Size::0x0018
struct FTgfInventoryLockedItem
{
    FIntPoint                                     position;                                                     // 0x0000(0x0008)
    FIntPoint                                     Size;                                                         // 0x0008(0x0008)
    UTgfInventoryItemWrapper*                     Item;                                                         // 0x0010(0x0008)
};


// ScriptStruct  LyraGame.TgfPlayerIDKey
// Struct Size::0x0010
struct FTgfPlayerIDKey
{
    int64_t                                       UserId;                                                       // 0x0000(0x0008)
    int64_t                                       ZoneId;                                                       // 0x0008(0x0008)
};


// ScriptStruct  LyraGame.SkinDataItem
// Struct Size::0x0008
struct FSkinDataItem
{
    enum class ETgfSkinSlot                       SkinType;                                                     // 0x0000(0x0001)
    enum class ETgfSkinCategory                   SkinCategory;                                                 // 0x0001(0x0001)
    char                                          pa_0002[0x0002]                                               // 0x0002(0x0002)
    int32_t                                       SkinId;                                                       // 0x0004(0x0004)
};


// ScriptStruct  LyraGame.SkinDataPack
// Struct Size::0x0018
struct FSkinDataPack
{
    TArray<FSkinDataItem>                         ArrayData;                                                    // 0x0000(0x0010)
    bool                                          DataPushed;                                                   // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
};


// ScriptStruct  LyraGame.TGFItemPosition
// Struct Size::0x0018
struct FTGFItemPosition
{
    enum class EnItemStorageType                  Type;                                                         // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    int64_t                                       Guid;                                                         // 0x0008(0x0008)
    int32_t                                       X;                                                            // 0x0010(0x0004)
    int32_t                                       Y;                                                            // 0x0014(0x0004)
};


// ScriptStruct  LyraGame.TgfPawnMeshWithType
// Struct Size::0x0010
struct FTgfPawnMeshWithType
{
    UMeshComponent*                               MeshComp;                                                     // 0x0000(0x0008)
    enum class ETgfPawnMeshType                   MeshType;                                                     // 0x0008(0x0001)
    char                                          pa_0009[0x0007]                                               // 0x0009(0x0007)
};


// ScriptStruct  LyraGame.TgfPawnMeshReplaceResult
// Struct Size::0x0018
struct FTgfPawnMeshReplaceResult
{
    UMaterialInterface*                           OriginMaterial;                                               // 0x0000(0x0008)
    UMaterialInstanceDynamic*                     NewMID;                                                       // 0x0008(0x0008)
    FName                                         MaterialSlotName;                                             // 0x0010(0x0008)
};


// ScriptStruct  LyraGame.TgfPawnMaterialRestoreCache
// Struct Size::0x0020
struct FTgfPawnMaterialRestoreCache
{
    TArray<UMaterialInterface*>                   Materials;                                                    // 0x0000(0x0010)
    UMaterialInterface*                           OverlayMaterial;                                              // 0x0010(0x0008)
    char                                          pa_0018[0x0008]                                               // 0x0018(0x0008)
};


// ScriptStruct  LyraGame.TgfNpcEventStruct
// Struct Size::0x0030
struct FTgfNpcEventStruct
{
    FGameplayTagContainer                         TriggerTags;                                                  // 0x0000(0x0020)
    TArray<UTgfNpcBehavior*>                      NpcBehaviors;                                                 // 0x0020(0x0010)
};


// ScriptStruct  LyraGame.PawnMeshTypeContainer
// Struct Size::0x0004
struct FPawnMeshTypeContainer
{
    int32_t                                       MeshTypeFlags;                                                // 0x0000(0x0004)
};


// ScriptStruct  LyraGame.TgfEnterPortalParameter
// Struct Size::0x000C
struct FTgfEnterPortalParameter
{
    FGameplayTag                                  PortalTag;                                                    // 0x0000(0x0008)
    float                                         Delay;                                                        // 0x0008(0x0004)
};


// ScriptStruct  LyraGame.ProjectileInitParams
// Struct Size::0x0080
struct FProjectileInitParams
{
    enum class ETgfEquipSlot                      EquipSlot;                                                    // 0x0000(0x0001)
    enum class ETgfUseAttackType                  UseAttackType;                                                // 0x0001(0x0001)
    char                                          pa_0002[0x0006]                                               // 0x0002(0x0006)
    ULyraEquipmentInstance*                       EquipInstance;                                                // 0x0008(0x0008)
    bool                                          CanCauseInterrupt;                                            // 0x0010(0x0001)
    bool                                          ConsumeItem;                                                  // 0x0011(0x0001)
    char                                          pa_0012[0x0006]                                               // 0x0012(0x0006)
    FGameplayTagContainer                         AttrBoostTags;                                                // 0x0018(0x0020)
    FGameplayTagContainer                         GEAttributeTag;                                               // 0x0038(0x0020)
    UCurveFloat*                                  DamageRateCurve;                                              // 0x0058(0x0008)
    FGameplayEffectContextHandle                  InputGECH;                                                    // 0x0060(0x0018)
    UGameplayAbility*                             SrcGA;                                                        // 0x0078(0x0008)
};


// ScriptStruct  LyraGame.WeaponAnimStateInfo
// Struct Size::0x0002
struct FWeaponAnimStateInfo
{
    enum class ERangedWeaponStateType             Status;                                                       // 0x0000(0x0001)
    bool                                          bAiming;                                                      // 0x0001(0x0001)
};


// ScriptStruct  LyraGame.ArrowAnimConfig
// Struct Size::0x0010
struct FArrowAnimConfig
{
    UAnimMontage*                                 HasArrowAnim;                                                 // 0x0000(0x0008)
    UAnimMontage*                                 EmptyAnim;                                                    // 0x0008(0x0008)
};


// ScriptStruct  Engine.RootMotionSource
// Struct Size::0x00E0
struct FRootMotionSource
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
    uint16_t                                      Priority;                                                     // 0x0010(0x0002)
    uint16_t                                      LocalID;                                                      // 0x0012(0x0002)
    enum class ERootMotionAccumulateMode          AccumulateMode;                                               // 0x0014(0x0001)
    char                                          pa_0015[0x0003]                                               // 0x0015(0x0003)
    FName                                         InstanceName;                                                 // 0x0018(0x0008)
    float                                         StartTime;                                                    // 0x0020(0x0004)
    float                                         CurrentTime;                                                  // 0x0024(0x0004)
    float                                         PreviousTime;                                                 // 0x0028(0x0004)
    float                                         Duration;                                                     // 0x002C(0x0004)
    FRootMotionSourceStatus                       Status;                                                       // 0x0030(0x0001)
    FRootMotionSourceSettings                     Settings;                                                     // 0x0031(0x0001)
    bool                                          bInLocalSpace;                                                // 0x0032(0x0001)
    char                                          pa_0033[0x000D]                                               // 0x0033(0x000D)
    FRootMotionMovementParams                     RootMotionParams;                                             // 0x0040(0x0070)
    FRootMotionFinishVelocitySettings             FinishVelocityParams;                                         // 0x00B0(0x0028)
    char                                          pa_00D8[0x0008]                                               // 0x00D8(0x0008)
};


// ScriptStruct  Engine.RootMotionFinishVelocitySettings
// Struct Size::0x0028
struct FRootMotionFinishVelocitySettings
{
    enum class ERootMotionFinishVelocityMode      Mode;                                                         // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    FVector                                       SetVelocity;                                                  // 0x0008(0x0018)
    float                                         ClampVelocity;                                                // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
};


// ScriptStruct  Engine.RootMotionMovementParams
// Struct Size::0x0070
struct FRootMotionMovementParams
{
    bool                                          bHasRootMotion;                                               // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         BlendWeight;                                                  // 0x0004(0x0004)
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FTransform                                    RootMotionTransform;                                          // 0x0010(0x0060)
};


// ScriptStruct  Engine.RootMotionSourceSettings
// Struct Size::0x0001
struct FRootMotionSourceSettings
{
    char                                          Flags;                                                        // 0x0000(0x0001)
};


// ScriptStruct  Engine.RootMotionSourceStatus
// Struct Size::0x0001
struct FRootMotionSourceStatus
{
    char                                          Flags;                                                        // 0x0000(0x0001)
};


// ScriptStruct  LyraGame.TgfRootMotionSource
// Struct Size::0x0150
struct FTgfRootMotionSource : public FRootMotionSource
{
    FTransform                                    StartTransform;                                               // 0x00E0(0x0060)
    bool                                          bIsExtractRootMotionCurve;                                    // 0x0140(0x0001)
    bool                                          bRestrictSpeedToExpected;                                     // 0x0141(0x0001)
    char                                          pa_0142[0x0006]                                               // 0x0142(0x0006)
    UCurveVector*                                 LocationCurve;                                                // 0x0148(0x0008)
};


// ScriptStruct  Engine.RootMotionSource
// Struct Size::0x0120
struct FRootMotionSource : public FRootMotionSource
{
    FVector                                       StartLocation;                                                // 0x00D8(0x0018)
    FVector                                       TargetLocation;                                               // 0x00F0(0x0018)
    bool                                          bRestrictSpeedToExpected;                                     // 0x0108(0x0001)
    char                                          pa_0109[0x0007]                                               // 0x0109(0x0007)
    UCurveVector*                                 PathOffsetCurve;                                              // 0x0110(0x0008)
    char                                          pa_0118[0x0008]                                               // 0x0118(0x0008)
};


// ScriptStruct  LyraGame.TgfRootMotionSource
// Struct Size::0x0120
struct FTgfRootMotionSource : public FRootMotionSource
{
    float                                         IgnoreZLimit;                                                 // 0x0118(0x0004)
    char                                          pa_011C[0x0004]                                               // 0x011C(0x0004)
};


// ScriptStruct  LyraGame.RootMotionSource
// Struct Size::0x0170
struct FRootMotionSource : public FRootMotionSource
{
    FVector                                       StartLocation;                                                // 0x00D8(0x0018)
    FRotator                                      StartRotation;                                                // 0x00F0(0x0018)
    FVector                                       InitialTargetLocation;                                        // 0x0108(0x0018)
    FVector                                       TargetLocation;                                               // 0x0120(0x0018)
    FRotator                                      TargetRotation;                                               // 0x0138(0x0018)
    int32_t                                       MoveFlags;                                                    // 0x0150(0x0004)
    bool                                          bRestrictSpeedToExpected;                                     // 0x0154(0x0001)
    char                                          pa_0155[0x0003]                                               // 0x0155(0x0003)
    UCurveFloat*                                  LocationLerpCurve;                                            // 0x0158(0x0008)
    UCurveFloat*                                  RotationLerpCurve;                                            // 0x0160(0x0008)
    UCurveFloat*                                  TimeMappingCurve;                                             // 0x0168(0x0008)
};


// ScriptStruct  Engine.RootMotionSource
// Struct Size::0x0100
struct FRootMotionSource : public FRootMotionSource
{
    FVector                                       Force;                                                        // 0x00D8(0x0018)
    UCurveFloat*                                  StrengthOverTime;                                             // 0x00F0(0x0008)
    char                                          pa_00F8[0x0008]                                               // 0x00F8(0x0008)
};


// ScriptStruct  LyraGame.RootMotionSource
// Struct Size::0x0100
struct FRootMotionSource : public FRootMotionSource
{
};


// ScriptStruct  LyraGame.TgfSnapQueryConfig
// Struct Size::0x0048
struct FTgfSnapQueryConfig
{
    float                                         TargetScanRange;                                              // 0x0000(0x0004)
    float                                         ScanFieldOfView;                                              // 0x0004(0x0004)
    float                                         ScanVerticalFieldOfViewUp;                                    // 0x0008(0x0004)
    float                                         ScanVerticalFieldOfViewDown;                                  // 0x000C(0x0004)
    enum class ECollisionChannel                  TargetChannel;                                                // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
    int32_t                                       MoveFlags;                                                    // 0x0014(0x0004)
    UCurveFloat*                                  LocationSnapLerpCurve;                                        // 0x0018(0x0008)
    UCurveFloat*                                  RotationSnapLerpCurve;                                        // 0x0020(0x0008)
    bool                                          bNeedFollowTarget;                                            // 0x0028(0x0001)
    char                                          pa_0029[0x0007]                                               // 0x0029(0x0007)
    UCurveFloat*                                  TargetLocationLerpSpeedHorizontal;                            // 0x0030(0x0008)
    UCurveFloat*                                  TargetLocationLerpSpeedVertical;                              // 0x0038(0x0008)
    float                                         TargetRotationLerpSpeed;                                      // 0x0040(0x0004)
    char                                          pa_0044[0x0004]                                               // 0x0044(0x0004)
};


// ScriptStruct  LyraGame.TgfSpectatorList
// Struct Size::0x0018
struct FTgfSpectatorList
{
    char                                          pa_0000[0x0018]                                               // 0x0000(0x0018)
};


// ScriptStruct  LyraGame.ThreatInfo
// Struct Size::0x0010
struct FThreatInfo
{
    AActor*                                       Actor;                                                        // 0x0000(0x0008)
    float                                         Threat;                                                       // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
};


// ScriptStruct  LyraGame.ReportRecord
// Struct Size::0x0090
struct FReportRecord
{
    FString                                       EventName;                                                    // 0x0000(0x0010)
    FString                                       EventType;                                                    // 0x0010(0x0010)
    FString                                       Str1;                                                         // 0x0020(0x0010)
    FString                                       Str2;                                                         // 0x0030(0x0010)
    FString                                       Str3;                                                         // 0x0040(0x0010)
    FString                                       Str4;                                                         // 0x0050(0x0010)
    FString                                       Str5;                                                         // 0x0060(0x0010)
    int64_t                                       Int1;                                                         // 0x0070(0x0008)
    int64_t                                       Int2;                                                         // 0x0078(0x0008)
    int64_t                                       Int3;                                                         // 0x0080(0x0008)
    int64_t                                       ActionTime;                                                   // 0x0088(0x0008)
};


// ScriptStruct  LyraGame.TgfWeaponAnimConfig
// Struct Size::0x0010
struct FTgfWeaponAnimConfig
{
    enum class ETgfEquipSubType                   AssistWeaponType;                                             // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    UTgfWeaponAnimDefinition*                     AnimWeaponDefinition;                                         // 0x0008(0x0008)
};


// ScriptStruct  LyraGame.WidgetList
// Struct Size::0x0010
struct FWidgetList
{
    TArray<UUserWidget*>                          WidgetList;                                                   // 0x0000(0x0010)
};


// ScriptStruct  LyraGame.VirtualItemRow
// Struct Size::0x0048
struct FVirtualItemRow : public FTableRowBase
{
    FName                                         Name;                                                         // 0x0008(0x0008)
    int32_t                                       CurrencyID;                                                   // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    UTexture2D*                                   CurrencyIcon;                                                 // 0x0018(0x0008)
    UTexture2D*                                   TipsIcon;                                                     // 0x0020(0x0008)
    FText                                         Description;                                                  // 0x0028(0x0018)
    enum class ETgfEquipQuality                   Quality;                                                      // 0x0040(0x0001)
    char                                          pa_0041[0x0007]                                               // 0x0041(0x0007)
};


// ScriptStruct  LyraGame.LyraAbilityMontageFailureMessage
// Struct Size::0x0030
struct FLyraAbilityMontageFailureMessage
{
    APlayerController*                            PlayerController;                                             // 0x0000(0x0008)
    FGameplayTagContainer                         FailureTags;                                                  // 0x0008(0x0020)
    UAnimMontage*                                 FailureMontage;                                               // 0x0028(0x0008)
};


// ScriptStruct  LyraGame.LyraPlayerResetMessage
// Struct Size::0x0008
struct FLyraPlayerResetMessage
{
    AActor*                                       OwnerPlayerState;                                             // 0x0000(0x0008)
};


// ScriptStruct  LyraGame.GameplayCueNotify
// Struct Size::0x0008
struct FGameplayCueNotify
{
    int32_t                                       HitValueLevel;                                                // 0x0000(0x0004)
    enum class ETgfFirstPersonRestrict            FirstPersonRestrict;                                          // 0x0004(0x0001)
    enum class ETgfThreeValueRestrict             IsGuarded;                                                    // 0x0005(0x0001)
    char                                          pa_0006[0x0002]                                               // 0x0006(0x0002)
};


// ScriptStruct  LyraGame.GameplayCueNotify
// Struct Size::0x0018
struct FGameplayCueNotify
{
    bool                                          bDefaultSpawn;                                                // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    TArray<FGameplayCueNotify>                    EffectConditions;                                             // 0x0008(0x0010)
};


// ScriptStruct  LyraGame.GameplayCueNotify
// Struct Size::0x0050
struct FGameplayCueNotify
{
    TMap<enum class ETgfGameplayCueNotify,FGameplayCueNotify>EffectTypeConfig;                                  // 0x0000(0x0050)
};


// ScriptStruct  LyraGame.TgfGameplayCueNotify
// Struct Size::0x0178
struct FTgfGameplayCueNotify
{
    FGameplayCueNotify                            SpawnConditionOverride;                                       // 0x0000(0x00D0)
    FGameplayCueNotify                            PlacementInfoOverride;                                        // 0x00D0(0x0078)
    FName                                         SwitchGroup;                                                  // 0x0148(0x0008)
    FName                                         SwitchState;                                                  // 0x0150(0x0008)
    UAkSwitchValue*                               SwitchValue;                                                  // 0x0158(0x0008)
    UAkAudioEvent*                                Sound;                                                        // 0x0160(0x0008)
    char                                          bOverrideSpawnCondition;                                      // 0x0168(0x0001)
    char                                          bOverridePlacementInfo;                                       // 0x0168(0x0001)
    char                                          pa_0169[0x0003]                                               // 0x0169(0x0003)
    float                                         LoopingFadeOutDuration;                                       // 0x016C(0x0004)
    bool                                          AudioObstacleDetection;                                       // 0x0170(0x0001)
    char                                          pa_0171[0x0007]                                               // 0x0171(0x0007)
};


// ScriptStruct  LyraGame.TgfGameplayCueNotify
// Struct Size::0x0020
struct FTgfGameplayCueNotify
{
    FString                                       Description;                                                  // 0x0000(0x0010)
    TArray<FGameplayCueNotify>                    Particles;                                                    // 0x0010(0x0010)
};


// ScriptStruct  LyraGame.TgfGameplayCueNotify
// Struct Size::0x0030
struct FTgfGameplayCueNotify
{
    UMaterialInterface*                           DecalMaterial;                                                // 0x0000(0x0008)
    TArray<enum class EPhysicalSurface>           AllowedSurfaceTypes;                                          // 0x0008(0x0010)
    FVector                                       DecalSize;                                                    // 0x0018(0x0018)
};


// ScriptStruct  LyraGame.TgfGameplayCueNotify
// Struct Size::0x0170
struct FTgfGameplayCueNotify
{
    FGameplayCueNotify                            SpawnConditionOverride;                                       // 0x0000(0x00D0)
    FGameplayCueNotify                            PlacementInfoOverride;                                        // 0x00D0(0x0078)
    UCameraShakeBase*                             CameraShake;                                                  // 0x0148(0x0008)
    float                                         ShakeScale;                                                   // 0x0150(0x0004)
    enum class EGameplayCueNotify                 PlaySpace;                                                    // 0x0154(0x0001)
    char                                          pa_0155[0x0003]                                               // 0x0155(0x0003)
    char                                          bOverrideSpawnCondition;                                      // 0x0158(0x0001)
    char                                          bOverridePlacementInfo;                                       // 0x0158(0x0001)
    char                                          bPlayInWorld;                                                 // 0x0158(0x0001)
    char                                          pa_0159[0x0003]                                               // 0x0159(0x0003)
    float                                         WorldInnerRadius;                                             // 0x015C(0x0004)
    float                                         WorldOuterRadius;                                             // 0x0160(0x0004)
    float                                         WorldFalloffExponent;                                         // 0x0164(0x0004)
    enum class EGameplayCueNotify                 TargetActor;                                                  // 0x0168(0x0001)
    char                                          pa_0169[0x0007]                                               // 0x0169(0x0007)
};


// ScriptStruct  LyraGame.TgfGameplayCueNotify
// Struct Size::0x00F0
struct FTgfGameplayCueNotify
{
    TArray<FTgfGameplayCueNotify>                 BurstWwiseSounds;                                             // 0x0000(0x0010)
    TArray<FTgfGameplayCueNotify>                 BurstRandomParticleLists;                                     // 0x0010(0x0010)
    TArray<FTgfGameplayCueNotify>                 BurstSourceCameraShakes;                                      // 0x0020(0x0010)
    TArray<UMaterialInstance*>                    BurstScreenMaterials;                                         // 0x0030(0x0010)
    TArray<FTgfGameplayCueNotify>                 BurstDamageDecals;                                            // 0x0040(0x0010)
    TArray<FGameplayCueNotify>                    BurstParticles;                                               // 0x0050(0x0010)
    TArray<FGameplayCueNotify>                    BurstCameraLensEffects;                                       // 0x0060(0x0010)
    TArray<FGameplayCueNotify>                    BurstForceFeedbacks;                                          // 0x0070(0x0010)
    TArray<FGameplayCueNotify>                    BurstDecals;                                                  // 0x0080(0x0010)
    FGameplayCueNotify                            HitValueRestrict;                                             // 0x0090(0x0050)
    TArray<FTgfGameplayCueNotify>                 BurstGroupedParticles;                                        // 0x00E0(0x0010)
};


// ScriptStruct  LyraGame.TgfSpawnSound
// Struct Size::0x0018
struct FTgfSpawnSound
{
    UAkAudioEvent*                                SoundEvent;                                                   // 0x0000(0x0008)
    UAkComponent*                                 AudioComponent;                                               // 0x0008(0x0008)
    int32_t                                       SoundPlayingId;                                               // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  LyraGame.TgfGameplayCueNotify
// Struct Size::0x0020
struct FTgfGameplayCueNotify
{
    TArray<FTgfSpawnSound>                        SpawnSounds;                                                  // 0x0000(0x0010)
    TArray<UNiagaraComponent*>                    SpawnLineNiagaraComponents;                                   // 0x0010(0x0010)
};


// ScriptStruct  LyraGame.TgfGameplayCueNotify
// Struct Size::0x0080
struct FTgfGameplayCueNotify
{
    TArray<FTgfGameplayCueNotify>                 LoopingSounds;                                                // 0x0000(0x0010)
    FGameplayCueNotify                            HitValueRestrict;                                             // 0x0010(0x0050)
    TArray<UMaterialInstance*>                    BurstScreenMaterials;                                         // 0x0060(0x0010)
    TArray<FTgfGameplayCueNotify>                 LoopingGroupedParticles;                                      // 0x0070(0x0010)
};


// ScriptStruct  LyraGame.AddShieldItem
// Struct Size::0x0020
struct FAddShieldItem
{
    FGameplayEffectContextHandle                  EffectHandle;                                                 // 0x0000(0x0018)
    bool                                          IsMinus;                                                      // 0x0018(0x0001)
    char                                          pa_0019[0x0003]                                               // 0x0019(0x0003)
    float                                         DeltaNum;                                                     // 0x001C(0x0004)
};


// ScriptStruct  LyraGame.TgfFirstLevelSingleAffectItem
// Struct Size::0x0040
struct FTgfFirstLevelSingleAffectItem
{
    FGameplayAttribute                            AffectAttr;                                                   // 0x0000(0x0038)
    float                                         Multiplier;                                                   // 0x0038(0x0004)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
};


// ScriptStruct  LyraGame.TgfFirstLevelAttrCfgItem
// Struct Size::0x0048
struct FTgfFirstLevelAttrCfgItem
{
    FGameplayAttribute                            BaseAttr;                                                     // 0x0000(0x0038)
    TArray<FTgfFirstLevelSingleAffectItem>        AffectItems;                                                  // 0x0038(0x0010)
};


// ScriptStruct  LyraGame.TgfCareerTalentConditionCfgItem
// Struct Size::0x0040
struct FTgfCareerTalentConditionCfgItem
{
    FGameplayAttribute                            ConditionalAttr;                                              // 0x0000(0x0038)
    float                                         RequiredValue;                                                // 0x0038(0x0004)
    int32_t                                       order;                                                        // 0x003C(0x0004)
};


// ScriptStruct  LyraGame.TgfCareerTalentCfgItem
// Struct Size::0x0080
struct FTgfCareerTalentCfgItem
{
    TArray<FTgfCareerTalentConditionCfgItem>      FirstLevelAttrConditions;                                     // 0x0000(0x0010)
    FGameplayTagContainer                         RequiredTags;                                                 // 0x0010(0x0020)
    TArray<ULyraAbilitySet*>                      AbilitySets;                                                  // 0x0030(0x0010)
    int32_t                                       TalentId;                                                     // 0x0040(0x0004)
    char                                          pa_0044[0x0004]                                               // 0x0044(0x0004)
    FString                                       Name;                                                         // 0x0048(0x0010)
    FString                                       desc;                                                         // 0x0058(0x0010)
    FString                                       CreateRoleDesc;                                               // 0x0068(0x0010)
    UTexture2D*                                   Icon;                                                         // 0x0078(0x0008)
};


// ScriptStruct  LyraGame.TgfCareerRaceCfgItem
// Struct Size::0x0048
struct FTgfCareerRaceCfgItem
{
    enum class ETgfActorCareer                    Career;                                                       // 0x0000(0x0001)
    enum class ETgfActorRace                      Race;                                                         // 0x0001(0x0001)
    char                                          pa_0002[0x0006]                                               // 0x0002(0x0006)
    TArray<ULyraAbilitySet*>                      DefaultAbilitySets;                                           // 0x0008(0x0010)
    TArray<FTgfCareerTalentCfgItem>               Talents;                                                      // 0x0018(0x0010)
    TArray<FGameplayAttribute>                    ResPoints;                                                    // 0x0028(0x0010)
    TArray<ULyraEquipmentDefinition*>             TestEquipDefList;                                             // 0x0038(0x0010)
};


// ScriptStruct  LyraGame.TgfMatchAbilityItem
// Struct Size::0x0018
struct FTgfMatchAbilityItem
{
    enum class ETgfMatchType                      MatchType;                                                    // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    TArray<ULyraAbilitySet*>                      AbilitySets;                                                  // 0x0008(0x0010)
};


// ScriptStruct  LyraGame.TgfMithrilAbilityItem
// Struct Size::0x0008
struct FTgfMithrilAbilityItem
{
    ULyraAbilitySet*                              AbilitySet;                                                   // 0x0000(0x0008)
};


// ScriptStruct  LyraGame.TgfActorRuntimeTalent
// Struct Size::0x0108
struct FTgfActorRuntimeTalent
{
    FTgfCareerTalentCfgItem                       Config;                                                       // 0x0000(0x0080)
    bool                                          IsEnabled;                                                    // 0x0080(0x0001)
    char                                          pa_0081[0x0007]                                               // 0x0081(0x0007)
    FLyraAbilitySet                               GrantedHandles;                                               // 0x0088(0x0080)
};


// ScriptStruct  LyraGame.LyraAbilitySet
// Struct Size::0x0080
struct FLyraAbilitySet
{
    TArray<FGameplayAbilitySpecHandle>            AbilitySpecHandles;                                           // 0x0000(0x0010)
    TArray<FActiveGameplayEffectHandle>           GameplayEffectHandles;                                        // 0x0010(0x0010)
    TArray<UAttributeSet*>                        GrantedAttributeSets;                                         // 0x0020(0x0010)
    TArray<FLyraAbilitySet>                       GrantedAttributeValues;                                       // 0x0030(0x0010)
    TArray<FLyraAbilitySet>                       GrantedGameTags;                                              // 0x0040(0x0010)
    TArray<FTgfActiveGameplayAuraHandle>          GrantedAuras;                                                 // 0x0050(0x0010)
    TArray<FGameplayTag>                          GrantedDamagePartMonitor;                                     // 0x0060(0x0010)
    TArray<FGameplayTag>                          GrantedMovementMonitor;                                       // 0x0070(0x0010)
};


// ScriptStruct  LyraGame.LyraAbilitySet
// Struct Size::0x0028
struct FLyraAbilitySet
{
    FGameplayTagContainer                         GameplayTags;                                                 // 0x0000(0x0020)
    bool                                          NeedReplicated;                                               // 0x0020(0x0001)
    char                                          pa_0021[0x0003]                                               // 0x0021(0x0003)
    int32_t                                       Count;                                                        // 0x0024(0x0004)
};


// ScriptStruct  LyraGame.LyraAbilitySet
// Struct Size::0x0040
struct FLyraAbilitySet
{
    FGameplayAttribute                            Attribute;                                                    // 0x0000(0x0038)
    float                                         Value;                                                        // 0x0038(0x0004)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
};


// ScriptStruct  LyraGame.TgfExecutionModifierAttrValue
// Struct Size::0x0040
struct FTgfExecutionModifierAttrValue
{
    FGameplayAttribute                            Attribute;                                                    // 0x0000(0x0038)
    float                                         Value;                                                        // 0x0038(0x0004)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
};


// ScriptStruct  LyraGame.LyraAbilitySet
// Struct Size::0x0030
struct FLyraAbilitySet
{
    ULyraGameplayAbility*                         Ability;                                                      // 0x0000(0x0008)
    int32_t                                       AbilityLevel;                                                 // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FGameplayTagContainer                         InputTagContainer;                                            // 0x0010(0x0020)
};


// ScriptStruct  LyraGame.LyraAbilitySet
// Struct Size::0x0010
struct FLyraAbilitySet
{
    UGameplayEffect*                              GameplayEffect;                                               // 0x0000(0x0008)
    float                                         EffectLevel;                                                  // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
};


// ScriptStruct  LyraGame.LyraAbilitySet
// Struct Size::0x0008
struct FLyraAbilitySet
{
    UAttributeSet*                                AttributeSet;                                                 // 0x0000(0x0008)
};


// ScriptStruct  LyraGame.LyraAbilitySet
// Struct Size::0x0008
struct FLyraAbilitySet
{
    UTgfGameplayAura*                             Aura;                                                         // 0x0000(0x0008)
};


// ScriptStruct  LyraGame.LyraAbilitySet
// Struct Size::0x0108
struct FLyraAbilitySet
{
    FTgfDamagePartMonitorConfig                   Config;                                                       // 0x0000(0x0108)
};


// ScriptStruct  LyraGame.LyraAbilitySet
// Struct Size::0x00E8
struct FLyraAbilitySet
{
    FTgfMovementMonitorConfig                     Config;                                                       // 0x0000(0x00E8)
};


// ScriptStruct  LyraGame.LyraAbilitySet
// Struct Size::0x0048
struct FLyraAbilitySet
{
    FGameplayAttribute                            Attribute;                                                    // 0x0000(0x0038)
    float                                         Value;                                                        // 0x0038(0x0004)
    float                                         MaxValue;                                                     // 0x003C(0x0004)
    float                                         MinValue;                                                     // 0x0040(0x0004)
    char                                          pa_0044[0x0004]                                               // 0x0044(0x0004)
};


// ScriptStruct  LyraGame.LyraAbilitySet
// Struct Size::0x0014
struct FLyraAbilitySet
{
    FGameplayTag                                  GameplayTag;                                                  // 0x0000(0x0008)
    float                                         Value;                                                        // 0x0008(0x0004)
    float                                         MaxValue;                                                     // 0x000C(0x0004)
    float                                         MinValue;                                                     // 0x0010(0x0004)
};


// ScriptStruct  LyraGame.LyraAbilitySet
// Struct Size::0x0010
struct FLyraAbilitySet
{
    bool                                          UseOverrideLevel;                                             // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    int32_t                                       Value;                                                        // 0x0004(0x0004)
    int32_t                                       MaxValue;                                                     // 0x0008(0x0004)
    int32_t                                       MinValue;                                                     // 0x000C(0x0004)
};


// ScriptStruct  LyraGame.LyraAbilityTagRelationship
// Struct Size::0x0088
struct FLyraAbilityTagRelationship
{
    FGameplayTag                                  AbilityTag;                                                   // 0x0000(0x0008)
    FGameplayTagContainer                         AbilityTagsToBlock;                                           // 0x0008(0x0020)
    FGameplayTagContainer                         AbilityTagsToCancel;                                          // 0x0028(0x0020)
    FGameplayTagContainer                         ActivationRequiredTags;                                       // 0x0048(0x0020)
    FGameplayTagContainer                         ActivationBlockedTags;                                        // 0x0068(0x0020)
};


// ScriptStruct  LyraGame.LyraGameplayAbilityTargetData
// Struct Size::0x0100
struct FLyraGameplayAbilityTargetData : public FGameplayAbilityTargetData
{
    int32_t                                       CartridgeID;                                                  // 0x00F8(0x0004)
    char                                          pa_00FC[0x0004]                                               // 0x00FC(0x0004)
};


// ScriptStruct  LyraGame.TgfGameplayEffectExtraParam
// Struct Size::0x0018
struct FTgfGameplayEffectExtraParam
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    float                                         HitValue;                                                     // 0x0008(0x0004)
    float                                         NormalWeight;                                                 // 0x000C(0x0004)
    float                                         TangentWeight;                                                // 0x0010(0x0004)
    float                                         CriticalRandomValue;                                          // 0x0014(0x0004)
};


// ScriptStruct  LyraGame.LyraGameplayEffectContext
// Struct Size::0x00B0
struct FLyraGameplayEffectContext : public FGameplayEffectContext
{
    int32_t                                       CartridgeID;                                                  // 0x0090(0x0004)
    char                                          pa_0094[0x0014]                                               // 0x0094(0x0014)
    TWeakObjectPtr<UObject>                       AbilitySourceObject;                                          // 0x00A8(0x0008)
};


// ScriptStruct  LyraGame.GlobalAppliedAbilityList
// Struct Size::0x0050
struct FGlobalAppliedAbilityList
{
    TMap<ULyraAbilitySystemComponent*,FGameplayAbilitySpecHandle>Handles;                                       // 0x0000(0x0050)
};


// ScriptStruct  LyraGame.GlobalAppliedEffectList
// Struct Size::0x0050
struct FGlobalAppliedEffectList
{
    TMap<ULyraAbilitySystemComponent*,FActiveGameplayEffectHandle>Handles;                                      // 0x0000(0x0050)
};


// ScriptStruct  LyraGame.TgfDashTrackingSettings
// Struct Size::0x0014
struct FTgfDashTrackingSettings
{
    float                                         TrackingDuration;                                             // 0x0000(0x0004)
    float                                         MaxTurningSpeed;                                              // 0x0004(0x0004)
    float                                         MaxTurningAngle;                                              // 0x0008(0x0004)
    float                                         StopDist;                                                     // 0x000C(0x0004)
    enum class ETgfTrackingDashType               TrackingDeathSetting;                                         // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
};


// ScriptStruct  LyraGame.TgfDashTrackingHitSettings
// Struct Size::0x0008
struct FTgfDashTrackingHitSettings
{
    enum class ETgfTrackingDashType               TrackingHitType;                                              // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    int32_t                                       MaxHitCount;                                                  // 0x0004(0x0004)
};


// ScriptStruct  LyraGame.FootLandHitInfo
// Struct Size::0x0040
struct FFootLandHitInfo
{
    bool                                          bHit;                                                         // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    FVector                                       Location;                                                     // 0x0008(0x0018)
    FVector                                       Normal;                                                       // 0x0020(0x0018)
    float                                         Distance;                                                     // 0x0038(0x0004)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
};


// ScriptStruct  LyraGame.LyraPlayRateModify
// Struct Size::0x0058
struct FLyraPlayRateModify
{
    float                                         Basic;                                                        // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    TMap<enum class ELyraPlayRateModifyKey,float> Modifies;                                                     // 0x0008(0x0050)
};


// ScriptStruct  LyraGame.LyraAudioSubmixEffectsChain
// Struct Size::0x0018
struct FLyraAudioSubmixEffectsChain
{
    USoundSubmix*                                 Submix;                                                       // 0x0000(0x0008)
    TArray<USoundEffectSubmixPreset*>             SubmixEffectChain;                                            // 0x0008(0x0010)
};


// ScriptStruct  LyraGame.LyraSubmixEffectChainMap
// Struct Size::0x0040
struct FLyraSubmixEffectChainMap
{
    TSoftObjectPtr<USoundSubmix>                  Submix;                                                       // 0x0000(0x0030)
    TArray<TSoftObjectPtr<USoundEffectSubmixPreset>>SubmixEffectChain;                                          // 0x0030(0x0010)
};


// ScriptStruct  LyraGame.LyraReplicatedAcceleration
// Struct Size::0x0003
struct FLyraReplicatedAcceleration
{
    char                                          AccelXYRadians;                                               // 0x0000(0x0001)
    char                                          AccelXYMagnitude;                                             // 0x0001(0x0001)
    int8_t                                        AccelZ;                                                       // 0x0002(0x0001)
};


// ScriptStruct  LyraGame.SharedRepMovement
// Struct Size::0x0078
struct FSharedRepMovement
{
    FRepMovement                                  RepMovement;                                                  // 0x0000(0x0070)
    float                                         RepTimeStamp;                                                 // 0x0070(0x0004)
    char                                          RepMovementMode;                                              // 0x0074(0x0001)
    bool                                          bProxyIsJumpForceApplied;                                     // 0x0075(0x0001)
    bool                                          bIsCrouched;                                                  // 0x0076(0x0001)
    char                                          pa_0077[0x0001]                                               // 0x0077(0x0001)
};


// ScriptStruct  Engine.RepMovement
// Struct Size::0x0070
struct FRepMovement
{
    FVector                                       LinearVelocity;                                               // 0x0000(0x0018)
    FVector                                       AngularVelocity;                                              // 0x0018(0x0018)
    FVector                                       Location;                                                     // 0x0030(0x0018)
    FRotator                                      Rotation;                                                     // 0x0048(0x0018)
    char                                          bSimulatedPhysicSleep;                                        // 0x0060(0x0001)
    char                                          bRepPhysics;                                                  // 0x0060(0x0001)
    char                                          pa_0061[0x0003]                                               // 0x0061(0x0003)
    int32_t                                       ServerFrame;                                                  // 0x0064(0x0004)
    int32_t                                       ServerPhysicsHandle;                                          // 0x0068(0x0004)
    enum class EVectorQuantization                LocationQuantizationLevel;                                    // 0x006C(0x0001)
    enum class EVectorQuantization                VelocityQuantizationLevel;                                    // 0x006D(0x0001)
    enum class ERotatorQuantization               RotationQuantizationLevel;                                    // 0x006E(0x0001)
    char                                          pa_006F[0x0001]                                               // 0x006F(0x0001)
};


// ScriptStruct  LyraGame.LyraCharacterGroundInfo
// Struct Size::0x00F8
struct FLyraCharacterGroundInfo
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    FHitResult                                    GroundHitResult;                                              // 0x0008(0x00E8)
    float                                         GroundDistance;                                               // 0x00F0(0x0004)
    char                                          pa_00F4[0x0004]                                               // 0x00F4(0x0004)
};


// ScriptStruct  LyraGame.MovingScaleParams
// Struct Size::0x0010
struct FMovingScaleParams
{
    float                                         MoveForwardScale;                                             // 0x0000(0x0004)
    float                                         MoveRightLeftScale;                                           // 0x0004(0x0004)
    float                                         MoveBackwardScale;                                            // 0x0008(0x0004)
    bool                                          bForceBackScale;                                              // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
};


// ScriptStruct  LyraGame.MovingScaleContainer
// Struct Size::0x0060
struct FMovingScaleContainer
{
    TMap<FGameplayTag,FMovingScaleParams>         MovingScales;                                                 // 0x0000(0x0050)
    FMovingScaleParams                            DefaultParams;                                                // 0x0050(0x0010)
};


// ScriptStruct  LyraGame.LyraCameraSelection
// Struct Size::0x0028
struct FLyraCameraSelection
{
    ULyraCameraMode*                              CameraMode;                                                   // 0x0000(0x0008)
    FGameplayTagContainer                         RequiredTags;                                                 // 0x0008(0x0020)
};


// ScriptStruct  LyraGame.TgfAttributeChangeMessage
// Struct Size::0x0050
struct FTgfAttributeChangeMessage
{
    ULyraAbilitySystemComponent*                  AbilitySystemComponent;                                       // 0x0000(0x0008)
    APawn*                                        Character;                                                    // 0x0008(0x0008)
    FGameplayAttribute                            Attribute;                                                    // 0x0010(0x0038)
    float                                         NewValue;                                                     // 0x0048(0x0004)
    float                                         OldValue;                                                     // 0x004C(0x0004)
};


// ScriptStruct  LyraGame.TgfGameplayTagChangeMessage
// Struct Size::0x0020
struct FTgfGameplayTagChangeMessage
{
    ULyraAbilitySystemComponent*                  AbilitySystemComponent;                                       // 0x0000(0x0008)
    APawn*                                        Character;                                                    // 0x0008(0x0008)
    FGameplayTag                                  GameplayTag;                                                  // 0x0010(0x0008)
    int32_t                                       Count;                                                        // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  LyraGame.TgfDeathStateInfo
// Struct Size::0x00F8
struct FTgfDeathStateInfo
{
    enum class ETgfDeathState                     DeathState;                                                   // 0x0000(0x0001)
    enum class EAnimConfigDirection               DeathDirection;                                               // 0x0001(0x0001)
    char                                          pa_0002[0x0006]                                               // 0x0002(0x0006)
    FHitResult                                    HitResult;                                                    // 0x0008(0x00E8)
    ALyraCharacter*                               Killer;                                                       // 0x00F0(0x0008)
};


// ScriptStruct  LyraGame.TgfResetInitAttrArgs
// Struct Size::0x0010
struct FTgfResetInitAttrArgs
{
    float                                         Health;                                                       // 0x0000(0x0004)
    float                                         Magic;                                                        // 0x0004(0x0004)
    float                                         SoulEnergy;                                                   // 0x0008(0x0004)
    float                                         NaturalEnergy;                                                // 0x000C(0x0004)
};


// ScriptStruct  LyraGame.AttrCommonEventStackFrame
// Struct Size::0x0020
struct FAttrCommonEventStackFrame
{
    UGameplayEffect*                              Def;                                                          // 0x0000(0x0008)
    FGameplayTag                                  EventTag;                                                     // 0x0008(0x0008)
    AActor*                                       Instigator;                                                   // 0x0010(0x0008)
    AActor*                                       Target;                                                       // 0x0018(0x0008)
};


// ScriptStruct  LyraGame.LyraControllerCharacterPartEntry
// Struct Size::0x0048
struct FLyraControllerCharacterPartEntry
{
    FLyraCharacterPart                            Part;                                                         // 0x0000(0x0040)
    char                                          pa_0040[0x0008]                                               // 0x0040(0x0008)
};


// ScriptStruct  LyraGame.LyraAnimLayerSelectionEntry
// Struct Size::0x0028
struct FLyraAnimLayerSelectionEntry
{
    UAnimInstance*                                Layer;                                                        // 0x0000(0x0008)
    FGameplayTagContainer                         RequiredTags;                                                 // 0x0008(0x0020)
};


// ScriptStruct  LyraGame.LyraAnimLayerSelectionSet
// Struct Size::0x0018
struct FLyraAnimLayerSelectionSet
{
    TArray<FLyraAnimLayerSelectionEntry>          LayerRules;                                                   // 0x0000(0x0010)
    UAnimInstance*                                DefaultLayer;                                                 // 0x0010(0x0008)
};


// ScriptStruct  LyraGame.TgfAvatarMeshPart
// Struct Size::0x0010
struct FTgfAvatarMeshPart
{
    USkeletalMesh*                                Mesh;                                                         // 0x0000(0x0008)
    UPhysicalMaterial*                            PhysicsMaterial;                                              // 0x0008(0x0008)
};


// ScriptStruct  LyraGame.TgfAvatarMeshSelectionEntry
// Struct Size::0x0070
struct FTgfAvatarMeshSelectionEntry
{
    TMap<enum class ETgfCharaPart,FTgfAvatarMeshPart>MeshParts;                                                 // 0x0000(0x0050)
    FGameplayTagContainer                         RequiredTags;                                                 // 0x0050(0x0020)
};


// ScriptStruct  LyraGame.TgfAvatarMeshSelectionSet
// Struct Size::0x0060
struct FTgfAvatarMeshSelectionSet
{
    TArray<FTgfAvatarMeshSelectionEntry>          MeshRules;                                                    // 0x0000(0x0010)
    TMap<enum class ETgfCharaPart,FTgfAvatarMeshPart>DefaultMesh;                                               // 0x0010(0x0050)
};


// ScriptStruct  LyraGame.TgfWeaponEquipMontagesEntry
// Struct Size::0x0030
struct FTgfWeaponEquipMontagesEntry
{
    FGameplayTagContainer                         RequiredTags;                                                 // 0x0000(0x0020)
    UAnimMontage*                                 EquipMontage;                                                 // 0x0020(0x0008)
    UAnimMontage*                                 UnEquipMontage;                                               // 0x0028(0x0008)
};


// ScriptStruct  LyraGame.TgfWeaponEquipMontagesSet
// Struct Size::0x0020
struct FTgfWeaponEquipMontagesSet
{
    TArray<FTgfWeaponEquipMontagesEntry>          Entries;                                                      // 0x0000(0x0010)
    UAnimMontage*                                 EquipMontageDefault;                                          // 0x0010(0x0008)
    UAnimMontage*                                 UnEquipMontageDefault;                                        // 0x0018(0x0008)
};


// ScriptStruct  LyraGame.TgfWeaponInspectionMontagesEntry
// Struct Size::0x0028
struct FTgfWeaponInspectionMontagesEntry
{
    FGameplayTagContainer                         RequiredTags;                                                 // 0x0000(0x0020)
    UAnimMontage*                                 InspectionMontage;                                            // 0x0020(0x0008)
};


// ScriptStruct  LyraGame.TgfWeaponInspectionMontagesSet
// Struct Size::0x0018
struct FTgfWeaponInspectionMontagesSet
{
    TArray<FTgfWeaponInspectionMontagesEntry>     Entries;                                                      // 0x0000(0x0010)
    UAnimMontage*                                 InspectionMontageDefault;                                     // 0x0010(0x0008)
};


// ScriptStruct  LyraGame.TgfSkillCastMontageEntry
// Struct Size::0x0038
struct FTgfSkillCastMontageEntry
{
    enum class ETgfMontageEntryType               EntryType;                                                    // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    FGameplayTagContainer                         Tags;                                                         // 0x0008(0x0020)
    UAnimMontage*                                 Montage;                                                      // 0x0028(0x0008)
    FName                                         SectionName;                                                  // 0x0030(0x0008)
};


// ScriptStruct  LyraGame.TgfSkillCastMontageSet
// Struct Size::0x0020
struct FTgfSkillCastMontageSet
{
    TArray<FTgfSkillCastMontageEntry>             CastMontages;                                                 // 0x0000(0x0010)
    UAnimMontage*                                 DefaultMontage;                                               // 0x0010(0x0008)
    FName                                         DefaultSectionName;                                           // 0x0018(0x0008)
};


// ScriptStruct  LyraGame.TgfSkillCastPhaseMontageSet
// Struct Size::0x0048
struct FTgfSkillCastPhaseMontageSet
{
    FGameplayTagContainer                         PhaseTags;                                                    // 0x0000(0x0020)
    enum class ETgfMontageEntryType               PhaseEntryType;                                               // 0x0020(0x0001)
    char                                          pa_0021[0x0007]                                               // 0x0021(0x0007)
    TArray<FTgfSkillCastMontageEntry>             CastMontages;                                                 // 0x0028(0x0010)
    FString                                       Comment;                                                      // 0x0038(0x0010)
};


// ScriptStruct  LyraGame.LyraAppliedCharacterPartEntry
// Struct Size::0x0060
struct FLyraAppliedCharacterPartEntry : public FFastArraySerializerItem
{
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FLyraCharacterPart                            Part;                                                         // 0x0010(0x0040)
    int32_t                                       PartHandle;                                                   // 0x0050(0x0004)
    enum class ETGFCharacterPartSource            Source;                                                       // 0x0054(0x0001)
    char                                          pa_0055[0x0003]                                               // 0x0055(0x0003)
    UChildActorComponent*                         SpawnedComponent;                                             // 0x0058(0x0008)
};


// ScriptStruct  LyraGame.LyraCharacterPartList
// Struct Size::0x0128
struct FLyraCharacterPartList : public FFastArraySerializer
{
    TArray<FLyraAppliedCharacterPartEntry>        Entries;                                                      // 0x0108(0x0010)
    ULyraPawnComponent*                           OwnerComponent;                                               // 0x0118(0x0008)
    char                                          pa_0120[0x0008]                                               // 0x0120(0x0008)
};


// ScriptStruct  LyraGame.LyraCheatToRun
// Struct Size::0x0018
struct FLyraCheatToRun
{
    enum class ECheatExecutionTime                Phase;                                                        // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FString                                       Cheat;                                                        // 0x0008(0x0010)
};


// ScriptStruct  LyraGame.LyraAppliedEquipmentEntry
// Struct Size::0x0020
struct FLyraAppliedEquipmentEntry : public FFastArraySerializerItem
{
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    ULyraEquipmentInstance*                       Instance;                                                     // 0x0010(0x0008)
    enum class ETgfEquipSlot                      Slot;                                                         // 0x0018(0x0001)
    enum class ETgfEquipMapType                   MapType;                                                      // 0x0019(0x0001)
    bool                                          InHeld;                                                       // 0x001A(0x0001)
    bool                                          LastHeld;                                                     // 0x001B(0x0001)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  LyraGame.LyraEquipmentList
// Struct Size::0x0130
struct FLyraEquipmentList : public FFastArraySerializer
{
    TArray<FLyraAppliedEquipmentEntry>            Entries;                                                      // 0x0108(0x0010)
    UActorComponent*                              OwnerComponent;                                               // 0x0118(0x0008)
    ULyraEquipmentInstance*                       InstanceType;                                                 // 0x0120(0x0008)
    bool                                          InReplicating;                                                // 0x0128(0x0001)
    char                                          pa_0129[0x0007]                                               // 0x0129(0x0007)
};


// ScriptStruct  LyraGame.LyraEquipmentChangeMessage
// Struct Size::0x0008
struct FLyraEquipmentChangeMessage
{
    UActorComponent*                              EquipmentManager;                                             // 0x0000(0x0008)
};


// ScriptStruct  LyraGame.LyraQuickBarSlotsChangedMessage
// Struct Size::0x0018
struct FLyraQuickBarSlotsChangedMessage
{
    AActor*                                       Owner;                                                        // 0x0000(0x0008)
    TArray<ULyraInventoryItemInstance*>           Slots;                                                        // 0x0008(0x0010)
};


// ScriptStruct  LyraGame.LyraQuickBarActiveIndexChangedMessage
// Struct Size::0x0010
struct FLyraQuickBarActiveIndexChangedMessage
{
    AActor*                                       Owner;                                                        // 0x0000(0x0008)
    int32_t                                       ActiveIndex;                                                  // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
};


// ScriptStruct  LyraGame.LyraContextEffectAnimNotifyVFXSettings
// Struct Size::0x0018
struct FLyraContextEffectAnimNotifyVFXSettings
{
    FVector                                       Scale;                                                        // 0x0000(0x0018)
};


// ScriptStruct  LyraGame.LyraContextEffectAnimNotifyAudioSettings
// Struct Size::0x0008
struct FLyraContextEffectAnimNotifyAudioSettings
{
    float                                         VolumeMultiplier;                                             // 0x0000(0x0004)
    float                                         PitchMultiplier;                                              // 0x0004(0x0004)
};


// ScriptStruct  LyraGame.LyraContextEffectAnimNotifyTraceSettings
// Struct Size::0x0028
struct FLyraContextEffectAnimNotifyTraceSettings
{
    enum class ECollisionChannel                  TraceChannel;                                                 // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    FVector                                       EndTraceLocationOffset;                                       // 0x0008(0x0018)
    bool                                          bIgnoreActor;                                                 // 0x0020(0x0001)
    char                                          pa_0021[0x0007]                                               // 0x0021(0x0007)
};


// ScriptStruct  LyraGame.LyraContextEffectAnimNotifyPreviewSettings
// Struct Size::0x0048
struct FLyraContextEffectAnimNotifyPreviewSettings
{
    bool                                          bPreviewPhysicalSurfaceAsContext;                             // 0x0000(0x0001)
    enum class EPhysicalSurface                   PreviewPhysicalSurface;                                       // 0x0001(0x0001)
    char                                          pa_0002[0x0006]                                               // 0x0002(0x0006)
    FSoftObjectPath                               PreviewContextEffectsLibrary;                                 // 0x0008(0x0020)
    FGameplayTagContainer                         PreviewContexts;                                              // 0x0028(0x0020)
};


// ScriptStruct  LyraGame.LyraContextEffects
// Struct Size::0x0038
struct FLyraContextEffects
{
    FGameplayTag                                  EffectTag;                                                    // 0x0000(0x0008)
    FGameplayTagContainer                         Context;                                                      // 0x0008(0x0020)
    TArray<FSoftObjectPath>                       Effects;                                                      // 0x0028(0x0010)
};


// ScriptStruct  LyraGame.LyraNumberPopRequest
// Struct Size::0x0060
struct FLyraNumberPopRequest
{
    FVector                                       WorldLocation;                                                // 0x0000(0x0018)
    FGameplayTagContainer                         SourceTags;                                                   // 0x0018(0x0020)
    FGameplayTagContainer                         TargetTags;                                                   // 0x0038(0x0020)
    int32_t                                       NumberToDisplay;                                              // 0x0058(0x0004)
    bool                                          bIsCriticalDamage;                                            // 0x005C(0x0001)
    char                                          pa_005D[0x0003]                                               // 0x005D(0x0003)
};


// ScriptStruct  LyraGame.PooledNumberPopComponentList
// Struct Size::0x0010
struct FPooledNumberPopComponentList
{
    TArray<UStaticMeshComponent*>                 Components;                                                   // 0x0000(0x0010)
};


// ScriptStruct  LyraGame.LiveNumberPopEntry
// Struct Size::0x0018
struct FLiveNumberPopEntry
{
    UStaticMeshComponent*                         Component;                                                    // 0x0000(0x0008)
    char                                          pa_0008[0x0010]                                               // 0x0008(0x0010)
};


// ScriptStruct  LyraGame.LyraAbilityGrant
// Struct Size::0x0030
struct FLyraAbilityGrant
{
    TSoftClassPtr<UObject>                        AbilityType;                                                  // 0x0000(0x0030)
};


// ScriptStruct  LyraGame.LyraAttributeSetGrant
// Struct Size::0x0060
struct FLyraAttributeSetGrant
{
    TSoftClassPtr<UObject>                        AttributeSetType;                                             // 0x0000(0x0030)
    TSoftObjectPtr<UDataTable>                    InitializationData;                                           // 0x0030(0x0030)
};


// ScriptStruct  LyraGame.GameFeatureAbilitiesEntry
// Struct Size::0x0060
struct FGameFeatureAbilitiesEntry
{
    TSoftClassPtr<UObject>                        ActorClass;                                                   // 0x0000(0x0030)
    TArray<FLyraAbilityGrant>                     GrantedAbilities;                                             // 0x0030(0x0010)
    TArray<FLyraAttributeSetGrant>                GrantedAttributes;                                            // 0x0040(0x0010)
    TArray<TSoftObjectPtr<ULyraAbilitySet>>       GrantedAbilitySets;                                           // 0x0050(0x0010)
};


// ScriptStruct  LyraGame.InputMappingContextAndPriority
// Struct Size::0x0038
struct FInputMappingContextAndPriority
{
    TSoftObjectPtr<UInputMappingContext>          InputMapping;                                                 // 0x0000(0x0030)
    int32_t                                       Priority;                                                     // 0x0030(0x0004)
    char                                          pa_0034[0x0004]                                               // 0x0034(0x0004)
};


// ScriptStruct  LyraGame.LyraHUDLayoutRequest
// Struct Size::0x0038
struct FLyraHUDLayoutRequest
{
    TSoftClassPtr<UObject>                        LayoutClass;                                                  // 0x0000(0x0030)
    FGameplayTag                                  LayerID;                                                      // 0x0030(0x0008)
};


// ScriptStruct  LyraGame.LyraHUDElementEntry
// Struct Size::0x0038
struct FLyraHUDElementEntry
{
    TSoftClassPtr<UObject>                        WidgetClass;                                                  // 0x0000(0x0030)
    FGameplayTag                                  SlotId;                                                       // 0x0030(0x0008)
};


// ScriptStruct  LyraGame.LyraInputAction
// Struct Size::0x0010
struct FLyraInputAction
{
    UInputAction*                                 InputAction;                                                  // 0x0000(0x0008)
    FGameplayTag                                  InputTag;                                                     // 0x0008(0x0008)
};


// ScriptStruct  LyraGame.LoadedMappableConfigPair
// Struct Size::0x0010
struct FLoadedMappableConfigPair
{
    UPlayerMappableInputConfig*                   Config;                                                       // 0x0000(0x0008)
    enum class ECommonInputType                   Type;                                                         // 0x0008(0x0001)
    bool                                          bIsActive;                                                    // 0x0009(0x0001)
    char                                          pa_000A[0x0006]                                               // 0x000A(0x0006)
};


// ScriptStruct  LyraGame.MappableConfigPair
// Struct Size::0x0080
struct FMappableConfigPair
{
    TSoftObjectPtr<UPlayerMappableInputConfig>    Config;                                                       // 0x0000(0x0030)
    enum class ECommonInputType                   Type;                                                         // 0x0030(0x0001)
    char                                          pa_0031[0x0007]                                               // 0x0031(0x0007)
    FGameplayTagContainer                         DependentPlatformTraits;                                      // 0x0038(0x0020)
    FGameplayTagContainer                         ExcludedPlatformTraits;                                       // 0x0058(0x0020)
    bool                                          bShouldActivateAutomatically;                                 // 0x0078(0x0001)
    char                                          pa_0079[0x0007]                                               // 0x0079(0x0007)
};


// ScriptStruct  LyraGame.LootPoolItem
// Struct Size::0x0020
struct FLootPoolItem
{
    TArray<int32_t>                               Elements;                                                     // 0x0000(0x0010)
    TArray<int32_t>                               RequiredLevelArgs;                                            // 0x0010(0x0010)
};


// ScriptStruct  LyraGame.PickupTemplate
// Struct Size::0x0010
struct FPickupTemplate
{
    int32_t                                       StackCount;                                                   // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    ULyraInventoryItemDefinition*                 ItemDef;                                                      // 0x0008(0x0008)
};


// ScriptStruct  LyraGame.PickupInstance
// Struct Size::0x0008
struct FPickupInstance
{
    ULyraInventoryItemInstance*                   Item;                                                         // 0x0000(0x0008)
};


// ScriptStruct  LyraGame.InventoryPickup
// Struct Size::0x0010
struct FInventoryPickup
{
    TArray<FPickupTemplate>                       Templates;                                                    // 0x0000(0x0010)
};


// ScriptStruct  LyraGame.LyraInventoryChangeMessage
// Struct Size::0x0018
struct FLyraInventoryChangeMessage
{
    UActorComponent*                              InventoryOwner;                                               // 0x0000(0x0008)
    ULyraInventoryItemInstance*                   Instance;                                                     // 0x0008(0x0008)
    int32_t                                       NewCount;                                                     // 0x0010(0x0004)
    int32_t                                       Delta;                                                        // 0x0014(0x0004)
};


// ScriptStruct  LyraGame.LyraInventoryEntry
// Struct Size::0x0028
struct FLyraInventoryEntry : public FFastArraySerializerItem
{
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    ULyraInventoryItemInstance*                   Instance;                                                     // 0x0010(0x0008)
    FIntPoint                                     position;                                                     // 0x0018(0x0008)
    enum class ELyraInventoryType                 InventoryType;                                                // 0x0020(0x0001)
    bool                                          bMarkedForRemove;                                             // 0x0021(0x0001)
    char                                          pa_0022[0x0006]                                               // 0x0022(0x0006)
};


// ScriptStruct  LyraGame.LyraInventoryList
// Struct Size::0x0130
struct FLyraInventoryList : public FFastArraySerializer
{
    TArray<FLyraInventoryEntry>                   Entries;                                                      // 0x0108(0x0010)
    UActorComponent*                              OwnerComponent;                                               // 0x0118(0x0008)
    ULyraInventoryItemInstance*                   InstanceType;                                                 // 0x0120(0x0008)
    bool                                          InReplicating;                                                // 0x0128(0x0001)
    char                                          pa_0129[0x0007]                                               // 0x0129(0x0007)
};


// ScriptStruct  LyraGame.TgfEquipAttrItem
// Struct Size::0x0048
struct FTgfEquipAttrItem
{
    FGameplayAttribute                            Attribute;                                                    // 0x0000(0x0038)
    float                                         Value;                                                        // 0x0038(0x0004)
    float                                         MaxValue;                                                     // 0x003C(0x0004)
    float                                         MinValue;                                                     // 0x0040(0x0004)
    enum class ETgfItemAffixType                  AffixType;                                                    // 0x0044(0x0001)
    enum class ETgfAttributeCondition             Condition;                                                    // 0x0045(0x0001)
    enum class ETgfAttributeTarget                Target;                                                       // 0x0046(0x0001)
    bool                                          HasAdded;                                                     // 0x0047(0x0001)
};


// ScriptStruct  LyraGame.TgfEquipGearsetItem
// Struct Size::0x0008
struct FTgfEquipGearsetItem
{
    int32_t                                       GearsetId;                                                    // 0x0000(0x0004)
    int32_t                                       GearsetLevel;                                                 // 0x0004(0x0004)
};


// ScriptStruct  LyraGame.TgfDItemBuffer
// Struct Size::0x0010
struct FTgfDItemBuffer
{
    TArray<char>                                  Buffer;                                                       // 0x0000(0x0010)
};


// ScriptStruct  LyraGame.LyraNotificationMessage
// Struct Size::0x0038
struct FLyraNotificationMessage
{
    FGameplayTag                                  TargetChannel;                                                // 0x0000(0x0008)
    APlayerState*                                 TargetPlayer;                                                 // 0x0008(0x0008)
    FText                                         PayloadMessage;                                               // 0x0010(0x0018)
    FGameplayTag                                  PayloadTag;                                                   // 0x0028(0x0008)
    UObject*                                      PayloadObject;                                                // 0x0030(0x0008)
};


// ScriptStruct  LyraGame.LyraVerbMessageReplicationEntry
// Struct Size::0x0090
struct FLyraVerbMessageReplicationEntry : public FFastArraySerializerItem
{
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FLyraVerbMessage                              Message;                                                      // 0x0010(0x0080)
};


// ScriptStruct  LyraGame.LyraVerbMessageReplication
// Struct Size::0x0120
struct FLyraVerbMessageReplication : public FFastArraySerializer
{
    TArray<FLyraVerbMessageReplicationEntry>      CurrentMessages;                                              // 0x0108(0x0010)
    UObject*                                      Owner;                                                        // 0x0118(0x0008)
};


// ScriptStruct  LyraGame.TgfNotificationMessage
// Struct Size::0x0018
struct FTgfNotificationMessage
{
    FGameplayTag                                  TargetChannel;                                                // 0x0000(0x0008)
    UObject*                                      PayloadObject;                                                // 0x0008(0x0008)
    float                                         Magnitude;                                                    // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  LyraGame.LyraQualityDeviceProfileVariant
// Struct Size::0x0030
struct FLyraQualityDeviceProfileVariant
{
    FText                                         DisplayName;                                                  // 0x0000(0x0018)
    FString                                       DeviceProfileSuffix;                                          // 0x0018(0x0010)
    int32_t                                       MinRefreshRate;                                               // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
};


// ScriptStruct  LyraGame.LyraPerformanceStatGroup
// Struct Size::0x0098
struct FLyraPerformanceStatGroup
{
    FGameplayTagQuery                             VisibilityQuery;                                              // 0x0000(0x0048)
    TSet<enum class ELyraDisplayablePerformanceStat>AllowedStats;                                               // 0x0048(0x0050)
};


// ScriptStruct  LyraGame.LyraPlayerStartGroup
// Struct Size::0x0018
struct FLyraPlayerStartGroup
{
    char                                          pa_0000[0x0018]                                               // 0x0000(0x0018)
};


// ScriptStruct  LyraGame.LyraCachedPlayerStarts
// Struct Size::0x0030
struct FLyraCachedPlayerStarts
{
    TArray<TWeakObjectPtr<ALyraPlayerStart>>      PlayerStarts;                                                 // 0x0000(0x0010)
    TArray<TWeakObjectPtr<ALyraPlayerStartSet>>   PlayerStartSets;                                              // 0x0010(0x0010)
    TArray<TWeakObjectPtr<ALyraPlayerStartSetGroup>>PlayerStartSetGroups;                                       // 0x0020(0x0010)
};


// ScriptStruct  LyraGame.TgfPlayerStartsGroupInfo
// Struct Size::0x0048
struct FTgfPlayerStartsGroupInfo
{
    TArray<TWeakObjectPtr<ALyraPlayerStart>>      PlayerStarts;                                                 // 0x0000(0x0010)
    TArray<TWeakObjectPtr<ALyraPlayerStartSet>>   PlayerStartSets;                                              // 0x0010(0x0010)
    TArray<int32_t>                               PlayerStartGroupIds;                                          // 0x0020(0x0010)
    TArray<FLyraPlayerStartGroup>                 PlayerStartGroups;                                            // 0x0030(0x0010)
    int32_t                                       CurrentTurn;                                                  // 0x0040(0x0004)
    char                                          pa_0044[0x0004]                                               // 0x0044(0x0004)
};


// ScriptStruct  LyraGame.LyraPlayerStateSelfQuitMessage
// Struct Size::0x0008
struct FLyraPlayerStateSelfQuitMessage
{
    APlayerState*                                 PlayerState;                                                  // 0x0000(0x0008)
};


// ScriptStruct  LyraGame.TgfMithrilInfo
// Struct Size::0x0008
struct FTgfMithrilInfo
{
    enum class ETgfForceType                      Type;                                                         // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    int32_t                                       RemainingRebirthChances;                                      // 0x0004(0x0004)
};


// ScriptStruct  LyraGame.LyraScalabilitySnapshot
// Struct Size::0x0060
struct FLyraScalabilitySnapshot
{
    char                                          pa_0000[0x0060]                                               // 0x0000(0x0060)
};


// ScriptStruct  LyraGame.TGFDPDefaultSettings
// Struct Size::0x0030
struct FTGFDPDefaultSettings
{
    int32_t                                       WindowMode;                                                   // 0x0000(0x0004)
    char                                          pa_0004[0x000C]                                               // 0x0004(0x000C)
    float                                         Brightness;                                                   // 0x0010(0x0004)
    bool                                          bVerticalSync;                                                // 0x0014(0x0001)
    char                                          pa_0015[0x0003]                                               // 0x0015(0x0003)
    int32_t                                       FPSLimitIndex;                                                // 0x0018(0x0004)
    int32_t                                       SSModeIndex;                                                  // 0x001C(0x0004)
    int32_t                                       OverallSettingLevel;                                          // 0x0020(0x0004)
    float                                         SharpnessNormalized;                                          // 0x0024(0x0004)
    bool                                          bNaniteVSMEnable;                                             // 0x0028(0x0001)
    bool                                          bNaniteEnable;                                                // 0x0029(0x0001)
    bool                                          bVSMEnable;                                                   // 0x002A(0x0001)
    bool                                          bFrameGenerationEnable;                                       // 0x002B(0x0001)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
};


// ScriptStruct  LyraGame.InventoryTalentsTipsData
// Struct Size::0x0010
struct FInventoryTalentsTipsData
{
    TArray<int64_t>                               RoleGuids;                                                    // 0x0000(0x0010)
};


// ScriptStruct  LyraGame.GameplayTagStack
// Struct Size::0x0018
struct FGameplayTagStack : public FFastArraySerializerItem
{
    FGameplayTag                                  Tag;                                                          // 0x000C(0x0008)
    int32_t                                       StackCount;                                                   // 0x0014(0x0004)
};


// ScriptStruct  LyraGame.GameplayTagStackContainer
// Struct Size::0x0168
struct FGameplayTagStackContainer : public FFastArraySerializer
{
    TArray<FGameplayTagStack>                     Stacks;                                                       // 0x0108(0x0010)
    char                                          pa_0118[0x0050]                                               // 0x0118(0x0050)
};


// ScriptStruct  LyraGame.LyraTeamInfoBaseStruct
// Struct Size::0x0028
struct FLyraTeamInfoBaseStruct
{
    char                                          pa_0000[0x0028]                                               // 0x0000(0x0028)
};


// ScriptStruct  LyraGame.LyraTeamTrackingInfo
// Struct Size::0x0060
struct FLyraTeamTrackingInfo
{
    ALyraTeamPublicInfo*                          PublicInfo;                                                   // 0x0000(0x0008)
    ALyraTeamPrivateInfo*                         PrivateInfo;                                                  // 0x0008(0x0008)
    ULyraTeamDisplayAsset*                        DisplayAsset;                                                 // 0x0010(0x0008)
    FMulticastInlineDelegate                      OnTeamDisplayAssetChanged;                                    // 0x0018(0x0010)
    FLyraTeamInfoBaseStruct                       TeamInfo;                                                     // 0x0028(0x0028)
    char                                          pa_0050[0x0010]                                               // 0x0050(0x0010)
};


// ScriptStruct  LyraGame.CircumferenceMarkerEntry
// Struct Size::0x0008
struct FCircumferenceMarkerEntry
{
    float                                         PositionAngle;                                                // 0x0000(0x0004)
    float                                         ImageRotationAngle;                                           // 0x0004(0x0004)
};


// ScriptStruct  AnimationCore.Axis
// Struct Size::0x0020
struct FAxis
{
    FVector                                       Axis;                                                         // 0x0000(0x0018)
    bool                                          bInLocalSpace;                                                // 0x0018(0x0001)
    char                                          pa_0019[0x0007]                                               // 0x0019(0x0007)
};


// ScriptStruct  AnimationCore.NodeChain
// Struct Size::0x0010
struct FNodeChain
{
    TArray<FName>                                 Nodes;                                                        // 0x0000(0x0010)
};


// ScriptStruct  AnimationCore.ConstraintDescriptionEx
// Struct Size::0x0010
struct FConstraintDescriptionEx
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    FFilterOptionPerAxis                          AxesFilterOption;                                             // 0x0008(0x0003)
    char                                          pa_000B[0x0005]                                               // 0x000B(0x0005)
};


// ScriptStruct  AnimationCore.TransformConstraintDescription
// Struct Size::0x0018
struct FTransformConstraintDescription : public FConstraintDescriptionEx
{
    enum class ETransformConstraintType           TransformType;                                                // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
};


// ScriptStruct  AnimationCore.AimConstraintDescription
// Struct Size::0x0070
struct FAimConstraintDescription : public FConstraintDescriptionEx
{
    FAxis                                         LookAt;                                                       // 0x0010(0x0020)
    FAxis                                         LookUp;                                                       // 0x0030(0x0020)
    bool                                          bUseLookUp;                                                   // 0x0050(0x0001)
    char                                          pa_0051[0x0007]                                               // 0x0051(0x0007)
    FVector                                       LookUpTarget;                                                 // 0x0058(0x0018)
};


// ScriptStruct  AnimationCore.TransformNoScale
// Struct Size::0x0040
struct FTransformNoScale
{
    FVector                                       Location;                                                     // 0x0000(0x0018)
    char                                          pa_0018[0x0008]                                               // 0x0018(0x0008)
    FQuat                                         Rotation;                                                     // 0x0020(0x0020)
};


// ScriptStruct  SlateCore.FontData
// Struct Size::0x0028
struct FFontData
{
    FString                                       FontFilename;                                                 // 0x0000(0x0010)
    char                                          pa_0010[0x0004]                                               // 0x0010(0x0004)
    enum class EFontHinting                       Hinting;                                                      // 0x0014(0x0001)
    enum class EFontLoadingPolicy                 LoadingPolicy;                                                // 0x0015(0x0001)
    char                                          pa_0016[0x0002]                                               // 0x0016(0x0002)
    int32_t                                       SubFaceIndex;                                                 // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    UObject*                                      FontFaceAsset;                                                // 0x0020(0x0008)
};


// ScriptStruct  SlateCore.TypefaceEntry
// Struct Size::0x0030
struct FTypefaceEntry
{
    FName                                         Name;                                                         // 0x0000(0x0008)
    FFontData                                     Font;                                                         // 0x0008(0x0028)
};


// ScriptStruct  SlateCore.Typeface
// Struct Size::0x0010
struct FTypeface
{
    TArray<FTypefaceEntry>                        Fonts;                                                        // 0x0000(0x0010)
};


// ScriptStruct  SlateCore.CompositeFallbackFont
// Struct Size::0x0018
struct FCompositeFallbackFont
{
    FTypeface                                     Typeface;                                                     // 0x0000(0x0010)
    float                                         ScalingFactor;                                                // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  SlateCore.CompositeSubFont
// Struct Size::0x0038
struct FCompositeSubFont : public FCompositeFallbackFont
{
    TArray<FInt32Range>                           CharacterRanges;                                              // 0x0018(0x0010)
    FString                                       Cultures;                                                     // 0x0028(0x0010)
};


// ScriptStruct  SlateCore.CompositeFont
// Struct Size::0x0038
struct FCompositeFont
{
    FTypeface                                     DefaultTypeface;                                              // 0x0000(0x0010)
    FCompositeFallbackFont                        FallbackTypeface;                                             // 0x0010(0x0018)
    TArray<FCompositeSubFont>                     SubTypefaces;                                                 // 0x0028(0x0010)
};


// ScriptStruct  SlateCore.CaptureLostEvent
// Struct Size::0x0008
struct FCaptureLostEvent
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
};


// ScriptStruct  SlateCore.SegmentedControlStyle
// Struct Size::0x2160
struct FSegmentedControlStyle : public FSlateWidgetStyle
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FCheckBoxStyle                                ControlStyle;                                                 // 0x0010(0x0AD0)
    FCheckBoxStyle                                FirstControlStyle;                                            // 0x0AE0(0x0AD0)
    FCheckBoxStyle                                LastControlStyle;                                             // 0x15B0(0x0AD0)
    FSlateBrush                                   BackgroundBrush;                                              // 0x2080(0x00D0)
    FMargin                                       UniformPadding;                                               // 0x2150(0x0010)
};


// ScriptStruct  SlateCore.CheckBoxStyle
// Struct Size::0x0AD0
struct FCheckBoxStyle : public FSlateWidgetStyle
{
    enum class ESlateCheckBoxType                 CheckBoxType;                                                 // 0x0008(0x0001)
    char                                          pa_0009[0x0007]                                               // 0x0009(0x0007)
    FSlateBrush                                   UncheckedImage;                                               // 0x0010(0x00D0)
    FSlateBrush                                   UncheckedHoveredImage;                                        // 0x00E0(0x00D0)
    FSlateBrush                                   UncheckedPressedImage;                                        // 0x01B0(0x00D0)
    FSlateBrush                                   CheckedImage;                                                 // 0x0280(0x00D0)
    FSlateBrush                                   CheckedHoveredImage;                                          // 0x0350(0x00D0)
    FSlateBrush                                   CheckedPressedImage;                                          // 0x0420(0x00D0)
    FSlateBrush                                   UndeterminedImage;                                            // 0x04F0(0x00D0)
    FSlateBrush                                   UndeterminedHoveredImage;                                     // 0x05C0(0x00D0)
    FSlateBrush                                   UndeterminedPressedImage;                                     // 0x0690(0x00D0)
    FMargin                                       Padding;                                                      // 0x0760(0x0010)
    FSlateBrush                                   BackgroundImage;                                              // 0x0770(0x00D0)
    FSlateBrush                                   BackgroundHoveredImage;                                       // 0x0840(0x00D0)
    FSlateBrush                                   BackgroundPressedImage;                                       // 0x0910(0x00D0)
    FSlateColor                                   ForegroundColor;                                              // 0x09E0(0x0014)
    FSlateColor                                   HoveredForeground;                                            // 0x09F4(0x0014)
    FSlateColor                                   PressedForeground;                                            // 0x0A08(0x0014)
    FSlateColor                                   CheckedForeground;                                            // 0x0A1C(0x0014)
    FSlateColor                                   CheckedHoveredForeground;                                     // 0x0A30(0x0014)
    FSlateColor                                   CheckedPressedForeground;                                     // 0x0A44(0x0014)
    FSlateColor                                   UndeterminedForeground;                                       // 0x0A58(0x0014)
    FSlateColor                                   BorderBackgroundColor;                                        // 0x0A6C(0x0014)
    FSlateSound                                   CheckedSlateSound;                                            // 0x0A80(0x0018)
    FSlateSound                                   UncheckedSlateSound;                                          // 0x0A98(0x0018)
    FSlateSound                                   HoveredSlateSound;                                            // 0x0AB0(0x0018)
    char                                          pa_0AC8[0x0008]                                               // 0x0AC8(0x0008)
};


// ScriptStruct  SlateCore.HyperlinkStyle
// Struct Size::0x0750
struct FHyperlinkStyle : public FSlateWidgetStyle
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FButtonStyle                                  UnderlineStyle;                                               // 0x0010(0x03F0)
    FTextBlockStyle                               TextStyle;                                                    // 0x0400(0x0340)
    FMargin                                       Padding;                                                      // 0x0740(0x0010)
};


// ScriptStruct  SlateCore.InlineEditableTextBlockStyle
// Struct Size::0x11D0
struct FInlineEditableTextBlockStyle : public FSlateWidgetStyle
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FEditableTextBoxStyle                         EditableTextBoxStyle;                                         // 0x0010(0x0E80)
    FTextBlockStyle                               TextStyle;                                                    // 0x0E90(0x0340)
};


// ScriptStruct  SlateCore.ProgressBarStyle
// Struct Size::0x0290
struct FProgressBarStyle : public FSlateWidgetStyle
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FSlateBrush                                   BackgroundImage;                                              // 0x0010(0x00D0)
    FSlateBrush                                   FillImage;                                                    // 0x00E0(0x00D0)
    FSlateBrush                                   MarqueeImage;                                                 // 0x01B0(0x00D0)
    bool                                          EnableFillAnimation;                                          // 0x0280(0x0001)
    char                                          pa_0281[0x000F]                                               // 0x0281(0x000F)
};


// ScriptStruct  SlateCore.ExpandableAreaStyle
// Struct Size::0x01C0
struct FExpandableAreaStyle : public FSlateWidgetStyle
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FSlateBrush                                   CollapsedImage;                                               // 0x0010(0x00D0)
    FSlateBrush                                   ExpandedImage;                                                // 0x00E0(0x00D0)
    float                                         RolloutAnimationSeconds;                                      // 0x01B0(0x0004)
    char                                          pa_01B4[0x000C]                                               // 0x01B4(0x000C)
};


// ScriptStruct  SlateCore.SearchBoxStyle
// Struct Size::0x1250
struct FSearchBoxStyle : public FSlateWidgetStyle
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FEditableTextBoxStyle                         TextBoxStyle;                                                 // 0x0010(0x0E80)
    FSlateFontInfo                                ActiveFontInfo;                                               // 0x0E90(0x0058)
    char                                          pa_0EE8[0x0008]                                               // 0x0EE8(0x0008)
    FSlateBrush                                   UpArrowImage;                                                 // 0x0EF0(0x00D0)
    FSlateBrush                                   DownArrowImage;                                               // 0x0FC0(0x00D0)
    FSlateBrush                                   GlassImage;                                                   // 0x1090(0x00D0)
    FSlateBrush                                   ClearImage;                                                   // 0x1160(0x00D0)
    FMargin                                       ImagePadding;                                                 // 0x1230(0x0010)
    bool                                          bLeftAlignButtons;                                            // 0x1240(0x0001)
    bool                                          bLeftAlignSearchResultButtons;                                // 0x1241(0x0001)
    bool                                          bLeftAlignGlassImageAndClearButton;                           // 0x1242(0x0001)
    char                                          pa_1243[0x000D]                                               // 0x1243(0x000D)
};


// ScriptStruct  SlateCore.VolumeControlStyle
// Struct Size::0x0920
struct FVolumeControlStyle : public FSlateWidgetStyle
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FSliderStyle                                  SliderStyle;                                                  // 0x0010(0x0500)
    FSlateBrush                                   HighVolumeImage;                                              // 0x0510(0x00D0)
    FSlateBrush                                   MidVolumeImage;                                               // 0x05E0(0x00D0)
    FSlateBrush                                   LowVolumeImage;                                               // 0x06B0(0x00D0)
    FSlateBrush                                   NoVolumeImage;                                                // 0x0780(0x00D0)
    FSlateBrush                                   MutedImage;                                                   // 0x0850(0x00D0)
};


// ScriptStruct  SlateCore.InlineTextImageStyle
// Struct Size::0x00F0
struct FInlineTextImageStyle : public FSlateWidgetStyle
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FSlateBrush                                   Image;                                                        // 0x0010(0x00D0)
    int16_t                                       Baseline;                                                     // 0x00E0(0x0002)
    char                                          pa_00E2[0x000E]                                               // 0x00E2(0x000E)
};


// ScriptStruct  SlateCore.SplitterStyle
// Struct Size::0x01B0
struct FSplitterStyle : public FSlateWidgetStyle
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FSlateBrush                                   HandleNormalBrush;                                            // 0x0010(0x00D0)
    FSlateBrush                                   HandleHighlightBrush;                                         // 0x00E0(0x00D0)
};


// ScriptStruct  SlateCore.TableViewStyle
// Struct Size::0x00E0
struct FTableViewStyle : public FSlateWidgetStyle
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FSlateBrush                                   BackgroundBrush;                                              // 0x0010(0x00D0)
};


// ScriptStruct  SlateCore.TableColumnHeaderStyle
// Struct Size::0x0760
struct FTableColumnHeaderStyle : public FSlateWidgetStyle
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FSlateBrush                                   SortPrimaryAscendingImage;                                    // 0x0010(0x00D0)
    FSlateBrush                                   SortPrimaryDescendingImage;                                   // 0x00E0(0x00D0)
    FSlateBrush                                   SortSecondaryAscendingImage;                                  // 0x01B0(0x00D0)
    FSlateBrush                                   SortSecondaryDescendingImage;                                 // 0x0280(0x00D0)
    FSlateBrush                                   NormalBrush;                                                  // 0x0350(0x00D0)
    FSlateBrush                                   HoveredBrush;                                                 // 0x0420(0x00D0)
    FSlateBrush                                   MenuDropdownImage;                                            // 0x04F0(0x00D0)
    FSlateBrush                                   MenuDropdownNormalBorderBrush;                                // 0x05C0(0x00D0)
    FSlateBrush                                   MenuDropdownHoveredBorderBrush;                               // 0x0690(0x00D0)
};


// ScriptStruct  SlateCore.HeaderRowStyle
// Struct Size::0x1260
struct FHeaderRowStyle : public FSlateWidgetStyle
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FTableColumnHeaderStyle                       ColumnStyle;                                                  // 0x0010(0x0760)
    FTableColumnHeaderStyle                       LastColumnStyle;                                              // 0x0770(0x0760)
    FSplitterStyle                                ColumnSplitterStyle;                                          // 0x0ED0(0x01B0)
    float                                         SplitterHandleSize;                                           // 0x1080(0x0004)
    char                                          pa_1084[0x000C]                                               // 0x1084(0x000C)
    FSlateBrush                                   BackgroundBrush;                                              // 0x1090(0x00D0)
    FSlateColor                                   ForegroundColor;                                              // 0x1160(0x0014)
    char                                          pa_1174[0x000C]                                               // 0x1174(0x000C)
    FSlateBrush                                   HorizontalSeparatorBrush;                                     // 0x1180(0x00D0)
    float                                         HorizontalSeparatorThickness;                                 // 0x1250(0x0004)
    char                                          pa_1254[0x000C]                                               // 0x1254(0x000C)
};


// ScriptStruct  SlateCore.DockTabStyle
// Struct Size::0x0D80
struct FDockTabStyle : public FSlateWidgetStyle
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FButtonStyle                                  CloseButtonStyle;                                             // 0x0010(0x03F0)
    FSlateBrush                                   NormalBrush;                                                  // 0x0400(0x00D0)
    FSlateBrush                                   ColorOverlayTabBrush;                                         // 0x04D0(0x00D0)
    FSlateBrush                                   ColorOverlayIconBrush;                                        // 0x05A0(0x00D0)
    FSlateBrush                                   ForegroundBrush;                                              // 0x0670(0x00D0)
    FSlateBrush                                   HoveredBrush;                                                 // 0x0740(0x00D0)
    FSlateBrush                                   ContentAreaBrush;                                             // 0x0810(0x00D0)
    FSlateBrush                                   TabWellBrush;                                                 // 0x08E0(0x00D0)
    FTextBlockStyle                               TabTextStyle;                                                 // 0x09B0(0x0340)
    FMargin                                       TabPadding;                                                   // 0x0CF0(0x0010)
    FVector2D                                     IconSize;                                                     // 0x0D00(0x0010)
    float                                         OverlapWidth;                                                 // 0x0D10(0x0004)
    FSlateColor                                   FlashColor;                                                   // 0x0D14(0x0014)
    FSlateColor                                   NormalForegroundColor;                                        // 0x0D28(0x0014)
    FSlateColor                                   HoveredForegroundColor;                                       // 0x0D3C(0x0014)
    FSlateColor                                   ActiveForegroundColor;                                        // 0x0D50(0x0014)
    FSlateColor                                   ForegroundForegroundColor;                                    // 0x0D64(0x0014)
    float                                         IconBorderPadding;                                            // 0x0D78(0x0004)
    char                                          pa_0D7C[0x0004]                                               // 0x0D7C(0x0004)
};


// ScriptStruct  SlateCore.ScrollBoxStyle
// Struct Size::0x0350
struct FScrollBoxStyle : public FSlateWidgetStyle
{
    float                                         BarThickness;                                                 // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FSlateBrush                                   TopShadowBrush;                                               // 0x0010(0x00D0)
    FSlateBrush                                   BottomShadowBrush;                                            // 0x00E0(0x00D0)
    FSlateBrush                                   LeftShadowBrush;                                              // 0x01B0(0x00D0)
    FSlateBrush                                   RightShadowBrush;                                             // 0x0280(0x00D0)
};


// ScriptStruct  SlateCore.ScrollBorderStyle
// Struct Size::0x01B0
struct FScrollBorderStyle : public FSlateWidgetStyle
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FSlateBrush                                   TopShadowBrush;                                               // 0x0010(0x00D0)
    FSlateBrush                                   BottomShadowBrush;                                            // 0x00E0(0x00D0)
};


// ScriptStruct  SlateCore.WindowStyle
// Struct Size::0x1940
struct FWindowStyle : public FSlateWidgetStyle
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FButtonStyle                                  MinimizeButtonStyle;                                          // 0x0010(0x03F0)
    FButtonStyle                                  MaximizeButtonStyle;                                          // 0x0400(0x03F0)
    FButtonStyle                                  RestoreButtonStyle;                                           // 0x07F0(0x03F0)
    FButtonStyle                                  CloseButtonStyle;                                             // 0x0BE0(0x03F0)
    FTextBlockStyle                               TitleTextStyle;                                               // 0x0FD0(0x0340)
    FSlateBrush                                   ActiveTitleBrush;                                             // 0x1310(0x00D0)
    FSlateBrush                                   InactiveTitleBrush;                                           // 0x13E0(0x00D0)
    FSlateBrush                                   FlashTitleBrush;                                              // 0x14B0(0x00D0)
    FSlateColor                                   BackgroundColor;                                              // 0x1580(0x0014)
    char                                          pa_1594[0x000C]                                               // 0x1594(0x000C)
    FSlateBrush                                   OutlineBrush;                                                 // 0x15A0(0x00D0)
    FSlateColor                                   OutlineColor;                                                 // 0x1670(0x0014)
    char                                          pa_1684[0x000C]                                               // 0x1684(0x000C)
    FSlateBrush                                   BorderBrush;                                                  // 0x1690(0x00D0)
    FSlateColor                                   BorderColor;                                                  // 0x1760(0x0014)
    char                                          pa_1774[0x000C]                                               // 0x1774(0x000C)
    FSlateBrush                                   BackgroundBrush;                                              // 0x1780(0x00D0)
    FSlateBrush                                   ChildBackgroundBrush;                                         // 0x1850(0x00D0)
    int32_t                                       WindowCornerRadius;                                           // 0x1920(0x0004)
    FMargin                                       BorderPadding;                                                // 0x1924(0x0010)
    char                                          pa_1934[0x000C]                                               // 0x1934(0x000C)
};


// ScriptStruct  SlateCore.StyleColorList
// Struct Size::0x0988
struct FStyleColorList
{
    FLinearColor                                  StyleColors;                                                  // 0x0000(0x0010)
    char                                          pa_0010[0x0978]                                               // 0x0010(0x0978)
};


// ScriptStruct  SlateCore.StyleTheme
// Struct Size::0x0048
struct FStyleTheme
{
    char                                          pa_0000[0x0048]                                               // 0x0000(0x0048)
};


// ScriptStruct  SlateCore.ToolBarStyle
// Struct Size::0x3E60
struct FToolBarStyle : public FSlateWidgetStyle
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FSlateBrush                                   BackgroundBrush;                                              // 0x0010(0x00D0)
    FSlateBrush                                   ExpandBrush;                                                  // 0x00E0(0x00D0)
    FSlateBrush                                   SeparatorBrush;                                               // 0x01B0(0x00D0)
    FTextBlockStyle                               LabelStyle;                                                   // 0x0280(0x0340)
    FEditableTextBoxStyle                         EditableTextStyle;                                            // 0x05C0(0x0E80)
    FCheckBoxStyle                                ToggleButton;                                                 // 0x1440(0x0AD0)
    FComboButtonStyle                             ComboButtonStyle;                                             // 0x1F10(0x0600)
    FButtonStyle                                  SettingsButtonStyle;                                          // 0x2510(0x03F0)
    FComboButtonStyle                             SettingsComboButton;                                          // 0x2900(0x0600)
    FCheckBoxStyle                                SettingsToggleButton;                                         // 0x2F00(0x0AD0)
    FButtonStyle                                  ButtonStyle;                                                  // 0x39D0(0x03F0)
    FMargin                                       LabelPadding;                                                 // 0x3DC0(0x0010)
    FMargin                                       SeparatorPadding;                                             // 0x3DD0(0x0010)
    FMargin                                       ComboButtonPadding;                                           // 0x3DE0(0x0010)
    FMargin                                       ButtonPadding;                                                // 0x3DF0(0x0010)
    FMargin                                       CheckBoxPadding;                                              // 0x3E00(0x0010)
    FMargin                                       BlockPadding;                                                 // 0x3E10(0x0010)
    FMargin                                       IndentedBlockPadding;                                         // 0x3E20(0x0010)
    FMargin                                       BackgroundPadding;                                            // 0x3E30(0x0010)
    FVector2D                                     IconSize;                                                     // 0x3E40(0x0010)
    bool                                          bShowLabels;                                                  // 0x3E50(0x0001)
    char                                          pa_3E51[0x000F]                                               // 0x3E51(0x000F)
};


// ScriptStruct  Slate.CustomizedToolMenuEntry
// Struct Size::0x0004
struct FCustomizedToolMenuEntry
{
    enum class ECustomizedToolMenuVisibility      Visibility;                                                   // 0x0000(0x0004)
};


// ScriptStruct  Slate.CustomizedToolMenuSection
// Struct Size::0x0004
struct FCustomizedToolMenuSection
{
    enum class ECustomizedToolMenuVisibility      Visibility;                                                   // 0x0000(0x0004)
};


// ScriptStruct  Slate.CustomizedToolMenuNameArray
// Struct Size::0x0010
struct FCustomizedToolMenuNameArray
{
    TArray<FName>                                 Names;                                                        // 0x0000(0x0010)
};


// ScriptStruct  Slate.CustomizedToolMenu
// Struct Size::0x01F0
struct FCustomizedToolMenu
{
    FName                                         Name;                                                         // 0x0000(0x0008)
    TMap<FName,FCustomizedToolMenuEntry>          Entries;                                                      // 0x0008(0x0050)
    TMap<FName,FCustomizedToolMenuSection>        Sections;                                                     // 0x0058(0x0050)
    TMap<FName,FCustomizedToolMenuNameArray>      EntryOrder;                                                   // 0x00A8(0x0050)
    TArray<FName>                                 SectionOrder;                                                 // 0x00F8(0x0010)
    char                                          pa_0108[0x00E8]                                               // 0x0108(0x00E8)
};


// ScriptStruct  ImageWriteQueue.ImageWriteOptions
// Struct Size::0x0060
struct FImageWriteOptions
{
    enum class EDesiredImageFormat                Format;                                                       // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FDelegate                                     OnComplete;                                                   // 0x0004(0x0010)
    int32_t                                       CompressionQuality;                                           // 0x0014(0x0004)
    bool                                          bOverwriteFile;                                               // 0x0018(0x0001)
    bool                                          bAsync;                                                       // 0x0019(0x0001)
    char                                          pa_001A[0x0046]                                               // 0x001A(0x0046)
};


// ScriptStruct  MaterialShaderQualitySettings.MaterialQualityOverrides
// Struct Size::0x0008
struct FMaterialQualityOverrides
{
    bool                                          bDiscardQualityDuringCook;                                    // 0x0000(0x0001)
    bool                                          bEnableOverride;                                              // 0x0001(0x0001)
    bool                                          bForceFullyRough;                                             // 0x0002(0x0001)
    bool                                          bForceNonMetal;                                               // 0x0003(0x0001)
    bool                                          bForceDisableLMDirectionality;                                // 0x0004(0x0001)
    bool                                          bForceDisablePreintegratedGF;                                 // 0x0005(0x0001)
    bool                                          bDisableMaterialNormalCalculation;                            // 0x0006(0x0001)
    enum class EMobileShadowQuality               MobileShadowQuality;                                          // 0x0007(0x0001)
};


// ScriptStruct  EyeTracker.EyeTrackerGazeData
// Struct Size::0x0058
struct FEyeTrackerGazeData
{
    FVector                                       GazeOrigin;                                                   // 0x0000(0x0018)
    FVector                                       GazeDirection;                                                // 0x0018(0x0018)
    FVector                                       FixationPoint;                                                // 0x0030(0x0018)
    float                                         ConfidenceValue;                                              // 0x0048(0x0004)
    bool                                          bIsLeftEyeBlink;                                              // 0x004C(0x0001)
    bool                                          bIsRightEyeBlink;                                             // 0x004D(0x0001)
    char                                          pa_004E[0x0002]                                               // 0x004E(0x0002)
    float                                         LeftPupilDiameter;                                            // 0x0050(0x0004)
    float                                         RightPupilDiameter;                                           // 0x0054(0x0004)
};


// ScriptStruct  EyeTracker.EyeTrackerStereoGazeData
// Struct Size::0x0080
struct FEyeTrackerStereoGazeData
{
    FVector                                       LeftEyeOrigin;                                                // 0x0000(0x0018)
    FVector                                       LeftEyeDirection;                                             // 0x0018(0x0018)
    FVector                                       RightEyeOrigin;                                               // 0x0030(0x0018)
    FVector                                       RightEyeDirection;                                            // 0x0048(0x0018)
    FVector                                       FixationPoint;                                                // 0x0060(0x0018)
    float                                         ConfidenceValue;                                              // 0x0078(0x0004)
    char                                          pa_007C[0x0004]                                               // 0x007C(0x0004)
};


// ScriptStruct  EngineSettings.AutoCompleteCommand
// Struct Size::0x0028
struct FAutoCompleteCommand
{
    FString                                       Command;                                                      // 0x0000(0x0010)
    FString                                       desc;                                                         // 0x0010(0x0010)
    char                                          pa_0020[0x0008]                                               // 0x0020(0x0008)
};


// ScriptStruct  EngineSettings.GameModeName
// Struct Size::0x0030
struct FGameModeName
{
    FString                                       Name;                                                         // 0x0000(0x0010)
    FSoftClassPath                                GameMode;                                                     // 0x0010(0x0020)
};


// ScriptStruct  EngineSettings.TemplateMapInfoOverride
// Struct Size::0x0058
struct FTemplateMapInfoOverride
{
    FSoftObjectPath                               Thumbnail;                                                    // 0x0000(0x0020)
    FSoftObjectPath                               Map;                                                          // 0x0020(0x0020)
    FText                                         DisplayName;                                                  // 0x0040(0x0018)
};


// ScriptStruct  DeveloperSettings.PerPlatformSettings
// Struct Size::0x0010
struct FPerPlatformSettings
{
    TArray<UPlatformSettings*>                    Settings;                                                     // 0x0000(0x0010)
};


// ScriptStruct  DeveloperSettings.PlatformSettingsInstances
// Struct Size::0x0058
struct FPlatformSettingsInstances
{
    UPlatformSettings*                            PlatformInstance;                                             // 0x0000(0x0008)
    TMap<FName,UPlatformSettings*>                OtherPlatforms;                                               // 0x0008(0x0050)
};


// ScriptStruct  Chaos.ChaosSolverConfiguration
// Struct Size::0x0068
struct FChaosSolverConfiguration
{
    int32_t                                       PositionIterations;                                           // 0x0000(0x0004)
    int32_t                                       VelocityIterations;                                           // 0x0004(0x0004)
    int32_t                                       ProjectionIterations;                                         // 0x0008(0x0004)
    float                                         CollisionMarginFraction;                                      // 0x000C(0x0004)
    float                                         CollisionMarginMax;                                           // 0x0010(0x0004)
    float                                         CollisionCullDistance;                                        // 0x0014(0x0004)
    float                                         CollisionMaxPushOutVelocity;                                  // 0x0018(0x0004)
    float                                         ClusterConnectionFactor;                                      // 0x001C(0x0004)
    enum class EClusterUnionMethod                ClusterUnionConnectionType;                                   // 0x0020(0x0001)
    bool                                          bGenerateCollisionData;                                       // 0x0021(0x0001)
    char                                          pa_0022[0x0002]                                               // 0x0022(0x0002)
    FSolverCollisionFilterSettings                CollisionFilterSettings;                                      // 0x0024(0x0010)
    bool                                          bGenerateBreakData;                                           // 0x0034(0x0001)
    char                                          pa_0035[0x0003]                                               // 0x0035(0x0003)
    FSolverBreakingFilterSettings                 BreakingFilterSettings;                                       // 0x0038(0x0010)
    bool                                          bGenerateTrailingData;                                        // 0x0048(0x0001)
    char                                          pa_0049[0x0003]                                               // 0x0049(0x0003)
    FSolverTrailingFilterSettings                 TrailingFilterSettings;                                       // 0x004C(0x0010)
    int32_t                                       Iterations;                                                   // 0x005C(0x0004)
    int32_t                                       PushOutIterations;                                            // 0x0060(0x0004)
    bool                                          bGenerateContactGraph;                                        // 0x0064(0x0001)
    char                                          pa_0065[0x0003]                                               // 0x0065(0x0003)
};


// ScriptStruct  Chaos.SolverTrailingFilterSettings
// Struct Size::0x0010
struct FSolverTrailingFilterSettings
{
    bool                                          FilterEnabled;                                                // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         MinMass;                                                      // 0x0004(0x0004)
    float                                         MinSpeed;                                                     // 0x0008(0x0004)
    float                                         MinVolume;                                                    // 0x000C(0x0004)
};


// ScriptStruct  Chaos.SolverBreakingFilterSettings
// Struct Size::0x0010
struct FSolverBreakingFilterSettings
{
    bool                                          FilterEnabled;                                                // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         MinMass;                                                      // 0x0004(0x0004)
    float                                         MinSpeed;                                                     // 0x0008(0x0004)
    float                                         MinVolume;                                                    // 0x000C(0x0004)
};


// ScriptStruct  Chaos.SolverCollisionFilterSettings
// Struct Size::0x0010
struct FSolverCollisionFilterSettings
{
    bool                                          FilterEnabled;                                                // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         MinMass;                                                      // 0x0004(0x0004)
    float                                         MinSpeed;                                                     // 0x0008(0x0004)
    float                                         MinImpulse;                                                   // 0x000C(0x0004)
};


// ScriptStruct  Chaos.SolverCollisionData
// Struct Size::0x00C0
struct FSolverCollisionData
{
    FVector                                       Location;                                                     // 0x0000(0x0018)
    FVector                                       AccumulatedImpulse;                                           // 0x0018(0x0018)
    FVector                                       Normal;                                                       // 0x0030(0x0018)
    FVector                                       Velocity1;                                                    // 0x0048(0x0018)
    FVector                                       Velocity2;                                                    // 0x0060(0x0018)
    FVector                                       AngularVelocity1;                                             // 0x0078(0x0018)
    FVector                                       AngularVelocity2;                                             // 0x0090(0x0018)
    float                                         Mass1;                                                        // 0x00A8(0x0004)
    float                                         Mass2;                                                        // 0x00AC(0x0004)
    int32_t                                       ParticleIndex;                                                // 0x00B0(0x0004)
    int32_t                                       LevelsetIndex;                                                // 0x00B4(0x0004)
    int32_t                                       ParticleIndexMesh;                                            // 0x00B8(0x0004)
    int32_t                                       LevelsetIndexMesh;                                            // 0x00BC(0x0004)
};


// ScriptStruct  Chaos.SolverBreakingData
// Struct Size::0x0058
struct FSolverBreakingData
{
    FVector                                       Location;                                                     // 0x0000(0x0018)
    FVector                                       Velocity;                                                     // 0x0018(0x0018)
    FVector                                       AngularVelocity;                                              // 0x0030(0x0018)
    float                                         Mass;                                                         // 0x0048(0x0004)
    int32_t                                       ParticleIndex;                                                // 0x004C(0x0004)
    int32_t                                       ParticleIndexMesh;                                            // 0x0050(0x0004)
    char                                          pa_0054[0x0004]                                               // 0x0054(0x0004)
};


// ScriptStruct  Chaos.SolverTrailingData
// Struct Size::0x0058
struct FSolverTrailingData
{
    FVector                                       Location;                                                     // 0x0000(0x0018)
    FVector                                       Velocity;                                                     // 0x0018(0x0018)
    FVector                                       AngularVelocity;                                              // 0x0030(0x0018)
    float                                         Mass;                                                         // 0x0048(0x0004)
    int32_t                                       ParticleIndex;                                                // 0x004C(0x0004)
    int32_t                                       ParticleIndexMesh;                                            // 0x0050(0x0004)
    char                                          pa_0054[0x0004]                                               // 0x0054(0x0004)
};


// ScriptStruct  Chaos.RecordedFrame
// Struct Size::0x00B8
struct FRecordedFrame
{
    TArray<FTransform>                            Transforms;                                                   // 0x0000(0x0010)
    TArray<int32_t>                               TransformIndices;                                             // 0x0010(0x0010)
    TArray<int32_t>                               PreviousTransformIndices;                                     // 0x0020(0x0010)
    TArray<bool>                                  DisabledFlags;                                                // 0x0030(0x0010)
    TArray<FSolverCollisionData>                  Collisions;                                                   // 0x0040(0x0010)
    TArray<FSolverBreakingData>                   Breakings;                                                    // 0x0050(0x0010)
    TSet<FSolverTrailingData>                     Trailings;                                                    // 0x0060(0x0050)
    float                                         Timestamp;                                                    // 0x00B0(0x0004)
    char                                          pa_00B4[0x0004]                                               // 0x00B4(0x0004)
};


// ScriptStruct  Chaos.RecordedTransformTrack
// Struct Size::0x0010
struct FRecordedTransformTrack
{
    TArray<FRecordedFrame>                        Records;                                                      // 0x0000(0x0010)
};


// ScriptStruct  Chaos.SolverRemovalFilterSettings
// Struct Size::0x000C
struct FSolverRemovalFilterSettings
{
    bool                                          FilterEnabled;                                                // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         MinMass;                                                      // 0x0004(0x0004)
    float                                         MinVolume;                                                    // 0x0008(0x0004)
};


// ScriptStruct  MRMesh.MRMeshConfiguration
// Struct Size::0x0001
struct FMRMeshConfiguration
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  AugmentedReality.TrackedGeometryGroup
// Struct Size::0x0018
struct FTrackedGeometryGroup
{
    AARActor*                                     ARActor;                                                      // 0x0000(0x0008)
    UARComponent*                                 ARComponent;                                                  // 0x0008(0x0008)
    UARTrackedGeometry*                           TrackedGeometry;                                              // 0x0010(0x0008)
};


// ScriptStruct  AugmentedReality.ARSessionPayload
// Struct Size::0x0018
struct FARSessionPayload
{
    int32_t                                       ConfigFlags;                                                  // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    UMaterialInterface*                           DefaultMeshMaterial;                                          // 0x0008(0x0008)
    UMaterialInterface*                           DefaultWireframeMeshMaterial;                                 // 0x0010(0x0008)
};


// ScriptStruct  AugmentedReality.ARPlaneUpdatePayload
// Struct Size::0x00D0
struct FARPlaneUpdatePayload
{
    FARSessionPayload                             SessionPayload;                                               // 0x0000(0x0018)
    char                                          pa_0018[0x0008]                                               // 0x0018(0x0008)
    FTransform                                    WorldTransform;                                               // 0x0020(0x0060)
    FVector                                       Center;                                                       // 0x0080(0x0018)
    FVector                                       Extents;                                                      // 0x0098(0x0018)
    TArray<FVector>                               BoundaryVertices;                                             // 0x00B0(0x0010)
    enum class EARObjectClassification            ObjectClassification;                                         // 0x00C0(0x0001)
    char                                          pa_00C1[0x000F]                                               // 0x00C1(0x000F)
};


// ScriptStruct  AugmentedReality.ARPointUpdatePayload
// Struct Size::0x0001
struct FARPointUpdatePayload
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  AugmentedReality.ARFaceUpdatePayload
// Struct Size::0x0060
struct FARFaceUpdatePayload
{
    FARSessionPayload                             SessionPayload;                                               // 0x0000(0x0018)
    FVector                                       LeftEyePosition;                                              // 0x0018(0x0018)
    FVector                                       RightEyePosition;                                             // 0x0030(0x0018)
    FVector                                       LookAtTarget;                                                 // 0x0048(0x0018)
};


// ScriptStruct  AugmentedReality.ARImageUpdatePayload
// Struct Size::0x00A0
struct FARImageUpdatePayload
{
    FARSessionPayload                             SessionPayload;                                               // 0x0000(0x0018)
    char                                          pa_0018[0x0008]                                               // 0x0018(0x0008)
    FTransform                                    WorldTransform;                                               // 0x0020(0x0060)
    UARCandidateImage*                            DetectedImage;                                                // 0x0080(0x0008)
    FVector2D                                     EstimatedSize;                                                // 0x0088(0x0010)
    char                                          pa_0098[0x0008]                                               // 0x0098(0x0008)
};


// ScriptStruct  AugmentedReality.ARQRCodeUpdatePayload
// Struct Size::0x00B0
struct FARQRCodeUpdatePayload
{
    FARSessionPayload                             SessionPayload;                                               // 0x0000(0x0018)
    char                                          pa_0018[0x0008]                                               // 0x0018(0x0008)
    FTransform                                    WorldTransform;                                               // 0x0020(0x0060)
    FVector                                       Extents;                                                      // 0x0080(0x0018)
    FString                                       QRCode;                                                       // 0x0098(0x0010)
    char                                          pa_00A8[0x0008]                                               // 0x00A8(0x0008)
};


// ScriptStruct  AugmentedReality.ARPoseUpdatePayload
// Struct Size::0x0070
struct FARPoseUpdatePayload
{
    FTransform                                    WorldTransform;                                               // 0x0000(0x0060)
    TArray<FTransform>                            JointTransforms;                                              // 0x0060(0x0010)
};


// ScriptStruct  AugmentedReality.AREnvironmentProbeUpdatePayload
// Struct Size::0x0060
struct FAREnvironmentProbeUpdatePayload
{
    FTransform                                    WorldTransform;                                               // 0x0000(0x0060)
};


// ScriptStruct  AugmentedReality.ARObjectUpdatePayload
// Struct Size::0x0060
struct FARObjectUpdatePayload
{
    FTransform                                    WorldTransform;                                               // 0x0000(0x0060)
};


// ScriptStruct  AugmentedReality.ARMeshUpdatePayload
// Struct Size::0x0090
struct FARMeshUpdatePayload
{
    FARSessionPayload                             SessionPayload;                                               // 0x0000(0x0018)
    char                                          pa_0018[0x0008]                                               // 0x0018(0x0008)
    FTransform                                    WorldTransform;                                               // 0x0020(0x0060)
    enum class EARObjectClassification            ObjectClassification;                                         // 0x0080(0x0001)
    char                                          pa_0081[0x000F]                                               // 0x0081(0x000F)
};


// ScriptStruct  AugmentedReality.ARGeoAnchorUpdatePayload
// Struct Size::0x00A0
struct FARGeoAnchorUpdatePayload
{
    FARSessionPayload                             SessionPayload;                                               // 0x0000(0x0018)
    char                                          pa_0018[0x0008]                                               // 0x0018(0x0008)
    FTransform                                    WorldTransform;                                               // 0x0020(0x0060)
    float                                         Longitude;                                                    // 0x0080(0x0004)
    float                                         Latitude;                                                     // 0x0084(0x0004)
    float                                         AltitudeMeters;                                               // 0x0088(0x0004)
    enum class EARAltitudeSource                  AltitudeSource;                                               // 0x008C(0x0001)
    char                                          pa_008D[0x0003]                                               // 0x008D(0x0003)
    FString                                       AnchorName;                                                   // 0x0090(0x0010)
};


// ScriptStruct  AugmentedReality.ARSharedWorldReplicationState
// Struct Size::0x0008
struct FARSharedWorldReplicationState
{
    int32_t                                       PreviewImageOffset;                                           // 0x0000(0x0004)
    int32_t                                       ARWorldOffset;                                                // 0x0004(0x0004)
};


// ScriptStruct  AugmentedReality.ARTraceResult
// Struct Size::0x0090
struct FARTraceResult
{
    float                                         DistanceFromCamera;                                           // 0x0000(0x0004)
    enum class EARLineTraceChannels               TraceChannel;                                                 // 0x0004(0x0001)
    char                                          pa_0005[0x000B]                                               // 0x0005(0x000B)
    FTransform                                    LocalTransform;                                               // 0x0010(0x0060)
    UARTrackedGeometry*                           TrackedGeometry;                                              // 0x0070(0x0008)
    char                                          pa_0078[0x0018]                                               // 0x0078(0x0018)
};


// ScriptStruct  AugmentedReality.ARSessionStatus
// Struct Size::0x0018
struct FARSessionStatus
{
    FString                                       AdditionalInfo;                                               // 0x0000(0x0010)
    enum class EARSessionStatus                   Status;                                                       // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
};


// ScriptStruct  AugmentedReality.ARVideoFormat
// Struct Size::0x000C
struct FARVideoFormat
{
    int32_t                                       FPS;                                                          // 0x0000(0x0004)
    int32_t                                       Width;                                                        // 0x0004(0x0004)
    int32_t                                       Height;                                                       // 0x0008(0x0004)
};


// ScriptStruct  AugmentedReality.ARSkeletonDefinition
// Struct Size::0x0028
struct FARSkeletonDefinition
{
    int32_t                                       NumJoints;                                                    // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    TArray<FName>                                 JointNames;                                                   // 0x0008(0x0010)
    TArray<int32_t>                               ParentIndices;                                                // 0x0018(0x0010)
};


// ScriptStruct  AugmentedReality.ARPose2D
// Struct Size::0x0048
struct FARPose2D
{
    FARSkeletonDefinition                         SkeletonDefinition;                                           // 0x0000(0x0028)
    TArray<FVector2D>                             JointLocations;                                               // 0x0028(0x0010)
    TArray<bool>                                  IsJointTracked;                                               // 0x0038(0x0010)
};


// ScriptStruct  AugmentedReality.ARPose3D
// Struct Size::0x0050
struct FARPose3D
{
    FARSkeletonDefinition                         SkeletonDefinition;                                           // 0x0000(0x0028)
    TArray<FTransform>                            JointTransforms;                                              // 0x0028(0x0010)
    TArray<bool>                                  IsJointTracked;                                               // 0x0038(0x0010)
    enum class EARJointTransformSpace             JointTransformSpace;                                          // 0x0048(0x0001)
    char                                          pa_0049[0x0007]                                               // 0x0049(0x0007)
};


// ScriptStruct  AugmentedReality.ARCameraIntrinsics
// Struct Size::0x0028
struct FARCameraIntrinsics
{
    FIntPoint                                     ImageResolution;                                              // 0x0000(0x0008)
    FVector2D                                     FocalLength;                                                  // 0x0008(0x0010)
    FVector2D                                     PrincipalPoint;                                               // 0x0018(0x0010)
};


// ScriptStruct  HeadMountedDisplay.XRHMDData
// Struct Size::0x0060
struct FXRHMDData
{
    bool                                          bValid;                                                       // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FName                                         DeviceName;                                                   // 0x0004(0x0008)
    FGuid                                         ApplicationInstanceID;                                        // 0x000C(0x0010)
    enum class ETrackingStatus                    TrackingStatus;                                               // 0x001C(0x0001)
    char                                          pa_001D[0x0003]                                               // 0x001D(0x0003)
    FVector                                       position;                                                     // 0x0020(0x0018)
    char                                          pa_0038[0x0008]                                               // 0x0038(0x0008)
    FQuat                                         Rotation;                                                     // 0x0040(0x0020)
};


// ScriptStruct  HeadMountedDisplay.XRMotionControllerData
// Struct Size::0x00E0
struct FXRMotionControllerData
{
    bool                                          bValid;                                                       // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FName                                         DeviceName;                                                   // 0x0004(0x0008)
    FGuid                                         ApplicationInstanceID;                                        // 0x000C(0x0010)
    enum class EXRVisualType                      DeviceVisualType;                                             // 0x001C(0x0001)
    enum class EControllerHand                    HandIndex;                                                    // 0x001D(0x0001)
    enum class ETrackingStatus                    TrackingStatus;                                               // 0x001E(0x0001)
    char                                          pa_001F[0x0001]                                               // 0x001F(0x0001)
    FVector                                       GripPosition;                                                 // 0x0020(0x0018)
    char                                          pa_0038[0x0008]                                               // 0x0038(0x0008)
    FQuat                                         GripRotation;                                                 // 0x0040(0x0020)
    FVector                                       AimPosition;                                                  // 0x0060(0x0018)
    char                                          pa_0078[0x0008]                                               // 0x0078(0x0008)
    FQuat                                         AimRotation;                                                  // 0x0080(0x0020)
    TArray<FVector>                               HandKeyPositions;                                             // 0x00A0(0x0010)
    TArray<FQuat>                                 HandKeyRotations;                                             // 0x00B0(0x0010)
    TArray<float>                                 HandKeyRadii;                                                 // 0x00C0(0x0010)
    bool                                          bIsGrasped;                                                   // 0x00D0(0x0001)
    char                                          pa_00D1[0x000F]                                               // 0x00D1(0x000F)
};


// ScriptStruct  HeadMountedDisplay.XRGestureConfig
// Struct Size::0x0006
struct FXRGestureConfig
{
    bool                                          bTap;                                                         // 0x0000(0x0001)
    bool                                          bHold;                                                        // 0x0001(0x0001)
    enum class ESpatialInputGestureAxis           AxisGesture;                                                  // 0x0002(0x0001)
    bool                                          bNavigationAxisX;                                             // 0x0003(0x0001)
    bool                                          bNavigationAxisY;                                             // 0x0004(0x0001)
    bool                                          bNavigationAxisZ;                                             // 0x0005(0x0001)
};


// ScriptStruct  HeadMountedDisplay.XRDeviceId
// Struct Size::0x000C
struct FXRDeviceId
{
    FName                                         SystemName;                                                   // 0x0000(0x0008)
    int32_t                                       DeviceID;                                                     // 0x0008(0x0004)
};


// ScriptStruct  BuildPatchServices.CustomFieldData
// Struct Size::0x0020
struct FCustomFieldData
{
    FString                                       Key;                                                          // 0x0000(0x0010)
    FString                                       Value;                                                        // 0x0010(0x0010)
};


// ScriptStruct  BuildPatchServices.SHAHashData
// Struct Size::0x0014
struct FSHAHashData
{
    char                                          Hash;                                                         // 0x0000(0x0001)
    char                                          pa_0001[0x0013]                                               // 0x0001(0x0013)
};


// ScriptStruct  BuildPatchServices.ChunkInfoData
// Struct Size::0x0040
struct FChunkInfoData
{
    FGuid                                         Guid;                                                         // 0x0000(0x0010)
    uint64_t                                      Hash;                                                         // 0x0010(0x0008)
    FSHAHashData                                  ShaHash;                                                      // 0x0018(0x0014)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
    int64_t                                       FileSize;                                                     // 0x0030(0x0008)
    char                                          GroupNumber;                                                  // 0x0038(0x0001)
    char                                          pa_0039[0x0007]                                               // 0x0039(0x0007)
};


// ScriptStruct  BuildPatchServices.ChunkPartData
// Struct Size::0x0018
struct FChunkPartData
{
    FGuid                                         Guid;                                                         // 0x0000(0x0010)
    uint32_t                                      Offset;                                                       // 0x0010(0x0004)
    uint32_t                                      Size;                                                         // 0x0014(0x0004)
};


// ScriptStruct  BuildPatchServices.FileManifestData
// Struct Size::0x0068
struct FFileManifestData
{
    FString                                       Filename;                                                     // 0x0000(0x0010)
    FSHAHashData                                  FileHash;                                                     // 0x0010(0x0014)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
    TArray<FChunkPartData>                        FileChunkParts;                                               // 0x0028(0x0010)
    TArray<FString>                               InstallTags;                                                  // 0x0038(0x0010)
    bool                                          bIsUnixExecutable;                                            // 0x0048(0x0001)
    char                                          pa_0049[0x0007]                                               // 0x0049(0x0007)
    FString                                       SymlinkTarget;                                                // 0x0050(0x0010)
    bool                                          bIsReadOnly;                                                  // 0x0060(0x0001)
    bool                                          bIsCompressed;                                                // 0x0061(0x0001)
    char                                          pa_0062[0x0006]                                               // 0x0062(0x0006)
};


// ScriptStruct  TypedElementFramework.ScriptTypedElementListProxy
// Struct Size::0x0010
struct FScriptTypedElementListProxy
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
};


// ScriptStruct  Foliage.FoliageVertexColorChannelMask
// Struct Size::0x000C
struct FFoliageVertexColorChannelMask
{
    char                                          UseMask;                                                      // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         MaskThreshold;                                                // 0x0004(0x0004)
    char                                          InvertMask;                                                   // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
};


// ScriptStruct  Foliage.FoliageDensityFalloff
// Struct Size::0x0090
struct FFoliageDensityFalloff
{
    bool                                          bUseFalloffCurve;                                             // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    FRuntimeFloatCurve                            FalloffCurve;                                                 // 0x0008(0x0088)
};


// ScriptStruct  Foliage.FoliageTypeObject
// Struct Size::0x0020
struct FFoliageTypeObject
{
    UObject*                                      FoliageTypeObject;                                            // 0x0000(0x0008)
    UFoliageType*                                 TypeInstance;                                                 // 0x0008(0x0008)
    bool                                          bIsAsset;                                                     // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
    UFoliageType*                                 Type;                                                         // 0x0018(0x0008)
};


// ScriptStruct  Foliage.ProceduralFoliageInstance
// Struct Size::0x0080
struct FProceduralFoliageInstance
{
    FQuat                                         Rotation;                                                     // 0x0000(0x0020)
    FVector                                       Location;                                                     // 0x0020(0x0018)
    float                                         Age;                                                          // 0x0038(0x0004)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
    FVector                                       Normal;                                                       // 0x0040(0x0018)
    float                                         Scale;                                                        // 0x0058(0x0004)
    char                                          pa_005C[0x0004]                                               // 0x005C(0x0004)
    UFoliageType*                                 Type;                                                         // 0x0060(0x0008)
    char                                          pa_0068[0x0018]                                               // 0x0068(0x0018)
};


// ScriptStruct  Landscape.LandscapeLayerBrush
// Struct Size::0x0001
struct FLandscapeLayerBrush
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  Landscape.LandscapeLayer
// Struct Size::0x0088
struct FLandscapeLayer
{
    FGuid                                         Guid;                                                         // 0x0000(0x0010)
    FName                                         Name;                                                         // 0x0010(0x0008)
    bool                                          bVisible;                                                     // 0x0018(0x0001)
    bool                                          bLocked;                                                      // 0x0019(0x0001)
    char                                          pa_001A[0x0002]                                               // 0x001A(0x0002)
    float                                         HeightmapAlpha;                                               // 0x001C(0x0004)
    float                                         WeightmapAlpha;                                               // 0x0020(0x0004)
    enum class ELandscapeBlendMode                BlendMode;                                                    // 0x0024(0x0001)
    char                                          pa_0025[0x0003]                                               // 0x0025(0x0003)
    TArray<FLandscapeLayerBrush>                  Brushes;                                                      // 0x0028(0x0010)
    TMap<ULandscapeLayerInfoObject*,bool>         WeightmapLayerAllocationBlend;                                // 0x0038(0x0050)
};


// ScriptStruct  Landscape.LandscapeEditToolRenderData
// Struct Size::0x0038
struct FLandscapeEditToolRenderData
{
    UMaterialInterface*                           ToolMaterial;                                                 // 0x0000(0x0008)
    UMaterialInterface*                           GizmoMaterial;                                                // 0x0008(0x0008)
    int32_t                                       SelectedType;                                                 // 0x0010(0x0004)
    int32_t                                       DebugChannelR;                                                // 0x0014(0x0004)
    int32_t                                       DebugChannelG;                                                // 0x0018(0x0004)
    int32_t                                       DebugChannelB;                                                // 0x001C(0x0004)
    UTexture2D*                                   DataTexture;                                                  // 0x0020(0x0008)
    UTexture2D*                                   LayerContributionTexture;                                     // 0x0028(0x0008)
    UTexture2D*                                   DirtyTexture;                                                 // 0x0030(0x0008)
};


// ScriptStruct  Landscape.WeightmapLayerAllocationInfo
// Struct Size::0x0010
struct FWeightmapLayerAllocationInfo
{
    ULandscapeLayerInfoObject*                    LayerInfo;                                                    // 0x0000(0x0008)
    char                                          WeightmapTextureIndex;                                        // 0x0008(0x0001)
    char                                          WeightmapTextureChannel;                                      // 0x0009(0x0001)
    char                                          pa_000A[0x0006]                                               // 0x000A(0x0006)
};


// ScriptStruct  Landscape.LandscapeComponentMaterialOverride
// Struct Size::0x0010
struct FLandscapeComponentMaterialOverride
{
    FPerPlatformInt                               LODIndex;                                                     // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    UMaterialInterface*                           Material;                                                     // 0x0008(0x0008)
};


// ScriptStruct  Landscape.LandscapePerLODMaterialOverride
// Struct Size::0x0010
struct FLandscapePerLODMaterialOverride
{
    int32_t                                       LODIndex;                                                     // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    UMaterialInterface*                           Material;                                                     // 0x0008(0x0008)
};


// ScriptStruct  Landscape.WeightmapData
// Struct Size::0x0030
struct FWeightmapData
{
    TArray<UTexture2D*>                           Textures;                                                     // 0x0000(0x0010)
    TArray<FWeightmapLayerAllocationInfo>         LayerAllocations;                                             // 0x0010(0x0010)
    TArray<ULandscapeWeightmapUsage*>             TextureUsages;                                                // 0x0020(0x0010)
};


// ScriptStruct  Landscape.HeightmapData
// Struct Size::0x0008
struct FHeightmapData
{
    UTexture2D*                                   Texture;                                                      // 0x0000(0x0008)
};


// ScriptStruct  Landscape.LandscapeLayerComponentData
// Struct Size::0x0038
struct FLandscapeLayerComponentData
{
    FHeightmapData                                HeightmapData;                                                // 0x0000(0x0008)
    FWeightmapData                                WeightmapData;                                                // 0x0008(0x0030)
};


// ScriptStruct  Landscape.GizmoSelectData
// Struct Size::0x0050
struct FGizmoSelectData
{
    char                                          pa_0000[0x0050]                                               // 0x0000(0x0050)
};


// ScriptStruct  Landscape.GrassVariety
// Struct Size::0x0058
struct FGrassVariety
{
    UStaticMesh*                                  GrassMesh;                                                    // 0x0000(0x0008)
    TArray<UMaterialInterface*>                   OverrideMaterials;                                            // 0x0008(0x0010)
    FPerPlatformFloat                             GrassDensity;                                                 // 0x0018(0x0004)
    bool                                          bUseGrid;                                                     // 0x001C(0x0001)
    char                                          pa_001D[0x0003]                                               // 0x001D(0x0003)
    float                                         PlacementJitter;                                              // 0x0020(0x0004)
    FPerPlatformInt                               StartCullDistance;                                            // 0x0024(0x0004)
    FPerPlatformInt                               EndCullDistance;                                              // 0x0028(0x0004)
    int32_t                                       MinLOD;                                                       // 0x002C(0x0004)
    enum class EGrassScaling                      Scaling;                                                      // 0x0030(0x0001)
    char                                          pa_0031[0x0003]                                               // 0x0031(0x0003)
    FFloatInterval                                ScaleX;                                                       // 0x0034(0x0008)
    FFloatInterval                                ScaleY;                                                       // 0x003C(0x0008)
    FFloatInterval                                ScaleZ;                                                       // 0x0044(0x0008)
    bool                                          RandomRotation;                                               // 0x004C(0x0001)
    bool                                          AlignToSurface;                                               // 0x004D(0x0001)
    bool                                          bUseLandscapeLightmap;                                        // 0x004E(0x0001)
    FLightingChannels                             LightingChannels;                                             // 0x004F(0x0001)
    bool                                          bReceivesDecals;                                              // 0x0050(0x0001)
    bool                                          bCastDynamicShadow;                                           // 0x0051(0x0001)
    bool                                          bCastContactShadow;                                           // 0x0052(0x0001)
    bool                                          bKeepInstanceBufferCPUCopy;                                   // 0x0053(0x0001)
    uint32_t                                      InstanceWorldPositionOffsetDisableDistance;                   // 0x0054(0x0004)
};


// ScriptStruct  Landscape.LandscapeMaterialTextureStreamingInfo
// Struct Size::0x000C
struct FLandscapeMaterialTextureStreamingInfo
{
    FName                                         TextureName;                                                  // 0x0000(0x0008)
    float                                         TexelFactor;                                                  // 0x0008(0x0004)
};


// ScriptStruct  Landscape.LandscapeSplineConnection
// Struct Size::0x0010
struct FLandscapeSplineConnection
{
    ULandscapeSplineSegment*                      Segment;                                                      // 0x0000(0x0008)
    char                                          End;                                                          // 0x0008(0x0001)
    char                                          pa_0009[0x0007]                                               // 0x0009(0x0007)
};


// ScriptStruct  Landscape.ForeignControlPointData
// Struct Size::0x0001
struct FForeignControlPointData
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  Landscape.ForeignSplineSegmentData
// Struct Size::0x0001
struct FForeignSplineSegmentData
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  Landscape.ForeignWorldSplineData
// Struct Size::0x0001
struct FForeignWorldSplineData
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  Landscape.LandscapeSplineInterpPoint
// Struct Size::0x00E0
struct FLandscapeSplineInterpPoint
{
    FVector                                       Center;                                                       // 0x0000(0x0018)
    FVector                                       Left;                                                         // 0x0018(0x0018)
    FVector                                       Right;                                                        // 0x0030(0x0018)
    FVector                                       FalloffLeft;                                                  // 0x0048(0x0018)
    FVector                                       FalloffRight;                                                 // 0x0060(0x0018)
    FVector                                       LayerLeft;                                                    // 0x0078(0x0018)
    FVector                                       LayerRight;                                                   // 0x0090(0x0018)
    FVector                                       LayerFalloffLeft;                                             // 0x00A8(0x0018)
    FVector                                       LayerFalloffRight;                                            // 0x00C0(0x0018)
    float                                         StartEndFalloff;                                              // 0x00D8(0x0004)
    char                                          pa_00DC[0x0004]                                               // 0x00DC(0x0004)
};


// ScriptStruct  Landscape.LandscapeSplineSegmentConnection
// Struct Size::0x0018
struct FLandscapeSplineSegmentConnection
{
    ULandscapeSplineControlPoint*                 ControlPoint;                                                 // 0x0000(0x0008)
    float                                         TangentLen;                                                   // 0x0008(0x0004)
    FName                                         SocketName;                                                   // 0x000C(0x0008)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  Landscape.LandscapeSplineMeshEntry
// Struct Size::0x0058
struct FLandscapeSplineMeshEntry
{
    UStaticMesh*                                  Mesh;                                                         // 0x0000(0x0008)
    TArray<UMaterialInterface*>                   MaterialOverrides;                                            // 0x0008(0x0010)
    char                                          bCenterH;                                                     // 0x0018(0x0001)
    char                                          pa_0019[0x0007]                                               // 0x0019(0x0007)
    FVector2D                                     CenterAdjust;                                                 // 0x0020(0x0010)
    char                                          bScaleToWidth;                                                // 0x0030(0x0001)
    char                                          pa_0031[0x0007]                                               // 0x0031(0x0007)
    FVector                                       Scale;                                                        // 0x0038(0x0018)
    enum class LandscapeSplineMeshOrientation     Orientation;                                                  // 0x0050(0x0001)
    enum class ESplineMeshAxis                    ForwardAxis;                                                  // 0x0051(0x0001)
    enum class ESplineMeshAxis                    UpAxis;                                                       // 0x0052(0x0001)
    char                                          pa_0053[0x0005]                                               // 0x0053(0x0005)
};


// ScriptStruct  Landscape.GrassInput
// Struct Size::0x0038
struct FGrassInput
{
    FName                                         Name;                                                         // 0x0000(0x0008)
    ULandscapeGrassType*                          GrassType;                                                    // 0x0008(0x0008)
    FExpressionInput                              Input;                                                        // 0x0010(0x0028)
};


// ScriptStruct  Landscape.LayerBlendInput
// Struct Size::0x0088
struct FLayerBlendInput
{
    FName                                         LayerName;                                                    // 0x0000(0x0008)
    enum class ELandscapeLayerBlendType           BlendType;                                                    // 0x0008(0x0001)
    char                                          pa_0009[0x0007]                                               // 0x0009(0x0007)
    FExpressionInput                              LayerInput;                                                   // 0x0010(0x0028)
    FExpressionInput                              HeightInput;                                                  // 0x0038(0x0028)
    float                                         PreviewWeight;                                                // 0x0060(0x0004)
    char                                          pa_0064[0x0004]                                               // 0x0064(0x0004)
    FVector                                       ConstLayerInput;                                              // 0x0068(0x0018)
    float                                         ConstHeightInput;                                             // 0x0080(0x0004)
    char                                          pa_0084[0x0004]                                               // 0x0084(0x0004)
};


// ScriptStruct  Landscape.LandscapeInfoLayerSettings
// Struct Size::0x0010
struct FLandscapeInfoLayerSettings
{
    ULandscapeLayerInfoObject*                    LayerInfoObj;                                                 // 0x0000(0x0008)
    FName                                         LayerName;                                                    // 0x0008(0x0008)
};


// ScriptStruct  Landscape.LandscapeEditorLayerSettings
// Struct Size::0x0001
struct FLandscapeEditorLayerSettings
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  Landscape.LandscapeLayerStruct
// Struct Size::0x0008
struct FLandscapeLayerStruct
{
    ULandscapeLayerInfoObject*                    LayerInfoObj;                                                 // 0x0000(0x0008)
};


// ScriptStruct  Landscape.LandscapeImportLayerInfo
// Struct Size::0x0001
struct FLandscapeImportLayerInfo
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  Landscape.LandscapeProxyMaterialOverride
// Struct Size::0x0010
struct FLandscapeProxyMaterialOverride
{
    FPerPlatformInt                               LODIndex;                                                     // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    UMaterialInterface*                           Material;                                                     // 0x0008(0x0008)
};


// ScriptStruct  Landscape.PhysicalMaterialInput
// Struct Size::0x0030
struct FPhysicalMaterialInput
{
    UPhysicalMaterial*                            PhysicalMaterial;                                             // 0x0000(0x0008)
    FExpressionInput                              Input;                                                        // 0x0008(0x0028)
};


// ScriptStruct  TimeManagement.TimedDataChannelSampleTime
// Struct Size::0x0018
struct FTimedDataChannelSampleTime
{
    char                                          pa_0000[0x0018]                                               // 0x0000(0x0018)
};


// ScriptStruct  TimeManagement.TimedDataInputEvaluationData
// Struct Size::0x0008
struct FTimedDataInputEvaluationData
{
    float                                         DistanceToNewestSampleSeconds;                                // 0x0000(0x0004)
    float                                         DistanceToOldestSampleSeconds;                                // 0x0004(0x0004)
};


// ScriptStruct  MovieScene.ActorForWorldTransforms
// Struct Size::0x0018
struct FActorForWorldTransforms
{
    TWeakObjectPtr<AActor>                        Actor;                                                        // 0x0000(0x0008)
    TWeakObjectPtr<USceneComponent>               Component;                                                    // 0x0008(0x0008)
    FName                                         SocketName;                                                   // 0x0010(0x0008)
};


// ScriptStruct  MovieScene.MovieSceneDeterminismData
// Struct Size::0x0018
struct FMovieSceneDeterminismData
{
    TArray<FFrameTime>                            Fences;                                                       // 0x0000(0x0010)
    bool                                          bParentSequenceRequiresLowerFence;                            // 0x0010(0x0001)
    bool                                          bParentSequenceRequiresUpperFence;                            // 0x0011(0x0001)
    char                                          pa_0012[0x0006]                                               // 0x0012(0x0006)
};


// ScriptStruct  MovieScene.MovieSceneEmptyStruct
// Struct Size::0x0001
struct FMovieSceneEmptyStruct
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  MovieScene.MovieSceneEvaluationKey
// Struct Size::0x000C
struct FMovieSceneEvaluationKey
{
    FMovieSceneSequenceID                         SequenceID;                                                   // 0x0000(0x0004)
    FMovieSceneTrackIdentifier                    TrackIdentifier;                                              // 0x0004(0x0004)
    uint32_t                                      SectionIndex;                                                 // 0x0008(0x0004)
};


// ScriptStruct  MovieScene.MovieSceneTrackIdentifier
// Struct Size::0x0004
struct FMovieSceneTrackIdentifier
{
    uint32_t                                      Value;                                                        // 0x0000(0x0004)
};


// ScriptStruct  MovieScene.MovieSceneKeyStruct
// Struct Size::0x0008
struct FMovieSceneKeyStruct
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
};


// ScriptStruct  MovieScene.GeneratedMovieSceneKeyStruct
// Struct Size::0x0050
struct FGeneratedMovieSceneKeyStruct
{
    char                                          pa_0000[0x0050]                                               // 0x0000(0x0050)
};


// ScriptStruct  MovieScene.MovieSceneKeyTimeStruct
// Struct Size::0x0028
struct FMovieSceneKeyTimeStruct : public FMovieSceneKeyStruct
{
    FFrameNumber                                  Time;                                                         // 0x0008(0x0004)
    char                                          pa_000C[0x001C]                                               // 0x000C(0x001C)
};


// ScriptStruct  MovieScene.MovieSceneSectionParameters
// Struct Size::0x0024
struct FMovieSceneSectionParameters
{
    FFrameNumber                                  StartFrameOffset;                                             // 0x0000(0x0004)
    bool                                          bCanLoop;                                                     // 0x0004(0x0001)
    char                                          pa_0005[0x0003]                                               // 0x0005(0x0003)
    FFrameNumber                                  EndFrameOffset;                                               // 0x0008(0x0004)
    FFrameNumber                                  FirstLoopStartFrameOffset;                                    // 0x000C(0x0004)
    float                                         TimeScale;                                                    // 0x0010(0x0004)
    int32_t                                       HierarchicalBias;                                             // 0x0014(0x0004)
    float                                         StartOffset;                                                  // 0x0018(0x0004)
    float                                         PrerollTime;                                                  // 0x001C(0x0004)
    float                                         PostrollTime;                                                 // 0x0020(0x0004)
};


// ScriptStruct  MovieScene.MovieSceneSegmentIdentifier
// Struct Size::0x0004
struct FMovieSceneSegmentIdentifier
{
    int32_t                                       IdentifierIndex;                                              // 0x0000(0x0004)
};


// ScriptStruct  MovieScene.SectionEvaluationData
// Struct Size::0x000C
struct FSectionEvaluationData
{
    int32_t                                       ImplIndex;                                                    // 0x0000(0x0004)
    FFrameNumber                                  ForcedTime;                                                   // 0x0004(0x0004)
    enum class ESectionEvaluationFlags            Flags;                                                        // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
};


// ScriptStruct  MovieScene.MovieSceneSegment
// Struct Size::0x0058
struct FMovieSceneSegment
{
    char                                          pa_0000[0x0058]                                               // 0x0000(0x0058)
};


// ScriptStruct  MovieScene.MovieSceneSequenceLoopCount
// Struct Size::0x0004
struct FMovieSceneSequenceLoopCount
{
    int32_t                                       Value;                                                        // 0x0000(0x0004)
};


// ScriptStruct  MovieScene.MovieSceneSequencePlaybackSettings
// Struct Size::0x0020
struct FMovieSceneSequencePlaybackSettings
{
    char                                          bAutoPlay;                                                    // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FMovieSceneSequenceLoopCount                  LoopCount;                                                    // 0x0004(0x0004)
    FMovieSceneSequenceTickInterval               TickInterval;                                                 // 0x0008(0x000C)
    float                                         PlayRate;                                                     // 0x0014(0x0004)
    float                                         StartTime;                                                    // 0x0018(0x0004)
    char                                          bRandomStartTime;                                             // 0x001C(0x0001)
    char                                          bRestoreState;                                                // 0x001C(0x0001)
    char                                          bDisableMovementInput;                                        // 0x001C(0x0001)
    char                                          bDisableLookAtInput;                                          // 0x001C(0x0001)
    char                                          bHidePlayer;                                                  // 0x001C(0x0001)
    char                                          bHideHud;                                                     // 0x001C(0x0001)
    char                                          bDisableCameraCuts;                                           // 0x001C(0x0001)
    char                                          bPauseAtEnd;                                                  // 0x001C(0x0001)
    char                                          bInheritTickIntervalFromOwner;                                // 0x001D(0x0001)
    char                                          pa_001E[0x0002]                                               // 0x001E(0x0002)
};


// ScriptStruct  MovieScene.MovieSceneSequenceTickInterval
// Struct Size::0x000C
struct FMovieSceneSequenceTickInterval
{
    float                                         TickIntervalSeconds;                                          // 0x0000(0x0004)
    float                                         EvaluationBudgetMicroseconds;                                 // 0x0004(0x0004)
    bool                                          bTickWhenPaused;                                              // 0x0008(0x0001)
    bool                                          bAllowRounding;                                               // 0x0009(0x0001)
    char                                          pa_000A[0x0002]                                               // 0x000A(0x0002)
};


// ScriptStruct  MovieScene.MovieSceneTimeTransform
// Struct Size::0x000C
struct FMovieSceneTimeTransform
{
    float                                         TimeScale;                                                    // 0x0000(0x0004)
    FFrameTime                                    Offset;                                                       // 0x0004(0x0008)
};


// ScriptStruct  MovieScene.MovieSceneAudioTriggerChannel
// Struct Size::0x00F8
struct FMovieSceneAudioTriggerChannel : public FMovieSceneChannel
{
    TArray<FFrameNumber>                          Times;                                                        // 0x0050(0x0010)
    TArray<bool>                                  Values;                                                       // 0x0060(0x0010)
    char                                          pa_0070[0x0088]                                               // 0x0070(0x0088)
};


// ScriptStruct  MovieScene.MovieSceneDoubleValue
// Struct Size::0x0020
struct FMovieSceneDoubleValue
{
    double                                        Value;                                                        // 0x0000(0x0008)
    FMovieSceneTangentData                        Tangent;                                                      // 0x0008(0x0014)
    enum class ERichCurveInterpMode               InterpMode;                                                   // 0x001C(0x0001)
    enum class ERichCurveTangentMode              TangentMode;                                                  // 0x001D(0x0001)
    char                                          PaddingByte;                                                  // 0x001E(0x0001)
    char                                          pa_001F[0x0001]                                               // 0x001F(0x0001)
};


// ScriptStruct  MovieScene.MovieSceneDoubleChannel
// Struct Size::0x0118
struct FMovieSceneDoubleChannel : public FMovieSceneChannel
{
    enum class ERichCurveExtrapolation            PreInfinityExtrap;                                            // 0x0050(0x0001)
    enum class ERichCurveExtrapolation            PostInfinityExtrap;                                           // 0x0051(0x0001)
    char                                          pa_0052[0x0006]                                               // 0x0052(0x0006)
    TArray<FFrameNumber>                          Times;                                                        // 0x0058(0x0010)
    TArray<FMovieSceneDoubleValue>                Values;                                                       // 0x0068(0x0010)
    double                                        DefaultValue;                                                 // 0x0078(0x0008)
    bool                                          bHasDefaultValue;                                             // 0x0080(0x0001)
    char                                          pa_0081[0x0007]                                               // 0x0081(0x0007)
    FMovieSceneKeyHandleMap                       KeyHandles;                                                   // 0x0088(0x0088)
    FFrameRate                                    TickResolution;                                               // 0x0110(0x0008)
};


// ScriptStruct  MovieScene.MovieSceneObjectPathChannelKeyValue
// Struct Size::0x0038
struct FMovieSceneObjectPathChannelKeyValue
{
    TSoftObjectPtr<UObject>                       SoftPtr;                                                      // 0x0000(0x0030)
    UObject*                                      HardPtr;                                                      // 0x0030(0x0008)
};


// ScriptStruct  MovieScene.MovieSceneObjectPathChannel
// Struct Size::0x0138
struct FMovieSceneObjectPathChannel : public FMovieSceneChannel
{
    UClass*                                       PropertyClass;                                                // 0x0050(0x0008)
    TArray<FFrameNumber>                          Times;                                                        // 0x0058(0x0010)
    TArray<FMovieSceneObjectPathChannelKeyValue>  Values;                                                       // 0x0068(0x0010)
    FMovieSceneObjectPathChannelKeyValue          DefaultValue;                                                 // 0x0078(0x0038)
    char                                          pa_00B0[0x0088]                                               // 0x00B0(0x0088)
};


// ScriptStruct  MovieScene.MovieSceneSequenceCompilerMaskStruct
// Struct Size::0x0001
struct FMovieSceneSequenceCompilerMaskStruct
{
    char                                          bHierarchy;                                                   // 0x0000(0x0001)
    char                                          bEvaluationTemplate;                                          // 0x0000(0x0001)
    char                                          bEvaluationTemplateField;                                     // 0x0000(0x0001)
    char                                          bEntityComponentField;                                        // 0x0000(0x0001)
};


// ScriptStruct  MovieScene.MovieSceneCompiledSequenceFlagStruct
// Struct Size::0x0001
struct FMovieSceneCompiledSequenceFlagStruct
{
    char                                          bParentSequenceRequiresLowerFence;                            // 0x0000(0x0001)
    char                                          bParentSequenceRequiresUpperFence;                            // 0x0000(0x0001)
};


// ScriptStruct  MovieScene.EasingComponentData
// Struct Size::0x0008
struct FEasingComponentData
{
    UMovieSceneSection*                           Section;                                                      // 0x0000(0x0008)
};


// ScriptStruct  MovieScene.MovieSceneTrackInstanceComponent
// Struct Size::0x0010
struct FMovieSceneTrackInstanceComponent
{
    UMovieSceneSection*                           Owner;                                                        // 0x0000(0x0008)
    UMovieSceneTrackInstance*                     TrackInstanceClass;                                           // 0x0008(0x0008)
};


// ScriptStruct  MovieScene.MovieSceneEvaluationHookComponent
// Struct Size::0x0020
struct FMovieSceneEvaluationHookComponent
{
    TScriptInterface<IMovieSceneEvaluationHook>   Interface;                                                    // 0x0000(0x0010)
    char                                          pa_0010[0x0010]                                               // 0x0010(0x0010)
};


// ScriptStruct  MovieScene.TrackInstanceInputComponent
// Struct Size::0x0010
struct FTrackInstanceInputComponent
{
    UMovieSceneSection*                           Section;                                                      // 0x0000(0x0008)
    int32_t                                       OutputIndex;                                                  // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
};


// ScriptStruct  MovieScene.MovieSceneEntitySystemGraphNode
// Struct Size::0x0028
struct FMovieSceneEntitySystemGraphNode
{
    char                                          pa_0000[0x0020]                                               // 0x0000(0x0020)
    UMovieSceneEntitySystem*                      System;                                                       // 0x0020(0x0008)
};


// ScriptStruct  MovieScene.MovieSceneEntitySystemGraphNodes
// Struct Size::0x0038
struct FMovieSceneEntitySystemGraphNodes
{
    char                                          pa_0000[0x0038]                                               // 0x0000(0x0038)
};


// ScriptStruct  MovieScene.MovieSceneEntitySystemGraph
// Struct Size::0x0138
struct FMovieSceneEntitySystemGraph
{
    char                                          pa_0000[0x0080]                                               // 0x0000(0x0080)
    FMovieSceneEntitySystemGraphNodes             Nodes;                                                        // 0x0080(0x0038)
    char                                          pa_00B8[0x0080]                                               // 0x00B8(0x0080)
};


// ScriptStruct  MovieScene.MovieSceneEvaluationHookEvent
// Struct Size::0x0038
struct FMovieSceneEvaluationHookEvent
{
    FMovieSceneEvaluationHookComponent            Hook;                                                         // 0x0000(0x0020)
    char                                          pa_0020[0x0018]                                               // 0x0020(0x0018)
};


// ScriptStruct  MovieScene.MovieSceneEvaluationHookEventContainer
// Struct Size::0x0010
struct FMovieSceneEvaluationHookEventContainer
{
    TArray<FMovieSceneEvaluationHookEvent>        Events;                                                       // 0x0000(0x0010)
};


// ScriptStruct  MovieScene.MovieSceneEvaluationInstanceKey
// Struct Size::0x0004
struct FMovieSceneEvaluationInstanceKey
{
    char                                          pa_0000[0x0004]                                               // 0x0000(0x0004)
};


// ScriptStruct  MovieScene.MovieSceneTrackInstanceInput
// Struct Size::0x0010
struct FMovieSceneTrackInstanceInput
{
    UMovieSceneSection*                           Section;                                                      // 0x0000(0x0008)
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
};


// ScriptStruct  MovieScene.MovieSceneTrackInstanceEntry
// Struct Size::0x0010
struct FMovieSceneTrackInstanceEntry
{
    UObject*                                      BoundObject;                                                  // 0x0000(0x0008)
    UMovieSceneTrackInstance*                     TrackInstance;                                                // 0x0008(0x0008)
};


// ScriptStruct  MovieScene.OptionalMovieSceneBlendType
// Struct Size::0x0002
struct FOptionalMovieSceneBlendType
{
    enum class EMovieSceneBlendType               BlendType;                                                    // 0x0000(0x0001)
    bool                                          bIsValid;                                                     // 0x0001(0x0001)
};


// ScriptStruct  MovieScene.MovieSceneEvalTemplatePtr
// Struct Size::0x0088
struct FMovieSceneEvalTemplatePtr
{
    char                                          pa_0000[0x0088]                                               // 0x0000(0x0088)
};


// ScriptStruct  MovieScene.MovieSceneEvaluationFieldEntityKey
// Struct Size::0x000C
struct FMovieSceneEvaluationFieldEntityKey
{
    TWeakObjectPtr<UObject>                       EntityOwner;                                                  // 0x0000(0x0008)
    uint32_t                                      EntityID;                                                     // 0x0008(0x0004)
};


// ScriptStruct  MovieScene.MovieSceneEvaluationFieldEntity
// Struct Size::0x0010
struct FMovieSceneEvaluationFieldEntity
{
    FMovieSceneEvaluationFieldEntityKey           Key;                                                          // 0x0000(0x000C)
    int32_t                                       SharedMetaDataIndex;                                          // 0x000C(0x0004)
};


// ScriptStruct  MovieScene.MovieSceneEvaluationFieldSharedEntityMetaData
// Struct Size::0x0010
struct FMovieSceneEvaluationFieldSharedEntityMetaData
{
    FGuid                                         ObjectBindingID;                                              // 0x0000(0x0010)
};


// ScriptStruct  MovieScene.MovieSceneEvaluationFieldEntityMetaData
// Struct Size::0x0020
struct FMovieSceneEvaluationFieldEntityMetaData
{
    FString                                       OverrideBoundPropertyPath;                                    // 0x0000(0x0010)
    FFrameNumber                                  ForcedTime;                                                   // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    enum class ESectionEvaluationFlags            Flags;                                                        // 0x0018(0x0001)
    char                                          bEvaluateInSequencePreRoll;                                   // 0x0019(0x0001)
    char                                          bEvaluateInSequencePostRoll;                                  // 0x0019(0x0001)
    char                                          pa_001A[0x0006]                                               // 0x001A(0x0006)
};


// ScriptStruct  MovieScene.MovieSceneEvaluationFieldEntityTree
// Struct Size::0x0060
struct FMovieSceneEvaluationFieldEntityTree
{
    char                                          pa_0000[0x0060]                                               // 0x0000(0x0060)
};


// ScriptStruct  MovieScene.MovieSceneEntityComponentField
// Struct Size::0x00F0
struct FMovieSceneEntityComponentField
{
    FMovieSceneEvaluationFieldEntityTree          PersistentEntityTree;                                         // 0x0000(0x0060)
    FMovieSceneEvaluationFieldEntityTree          OneShotEntityTree;                                            // 0x0060(0x0060)
    TArray<FMovieSceneEvaluationFieldEntity>      Entities;                                                     // 0x00C0(0x0010)
    TArray<FMovieSceneEvaluationFieldEntityMetaData>EntityMetaData;                                             // 0x00D0(0x0010)
    TArray<FMovieSceneEvaluationFieldSharedEntityMetaData>SharedMetaData;                                       // 0x00E0(0x0010)
};


// ScriptStruct  MovieScene.MovieSceneEvaluationFieldTrackPtr
// Struct Size::0x0008
struct FMovieSceneEvaluationFieldTrackPtr
{
    FMovieSceneSequenceID                         SequenceID;                                                   // 0x0000(0x0004)
    FMovieSceneTrackIdentifier                    TrackIdentifier;                                              // 0x0004(0x0004)
};


// ScriptStruct  MovieScene.MovieSceneEvaluationFieldSegmentPtr
// Struct Size::0x000C
struct FMovieSceneEvaluationFieldSegmentPtr : public FMovieSceneEvaluationFieldTrackPtr
{
    FMovieSceneSegmentIdentifier                  SegmentID;                                                    // 0x0008(0x0004)
};


// ScriptStruct  MovieScene.MovieSceneFieldEntry
// Struct Size::0x000C
struct FMovieSceneFieldEntry
{
    FMovieSceneEvaluationFieldTrackPtr            TrackPtr;                                                     // 0x0000(0x0008)
    uint16_t                                      NumChildren;                                                  // 0x0008(0x0002)
    char                                          pa_000A[0x0002]                                               // 0x000A(0x0002)
};


// ScriptStruct  MovieScene.MovieSceneFieldEntry
// Struct Size::0x0008
struct FMovieSceneFieldEntry
{
    uint16_t                                      ChildIndex;                                                   // 0x0000(0x0002)
    enum class ESectionEvaluationFlags            Flags;                                                        // 0x0002(0x0001)
    char                                          pa_0003[0x0001]                                               // 0x0003(0x0001)
    FFrameNumber                                  ForcedTime;                                                   // 0x0004(0x0004)
};


// ScriptStruct  MovieScene.MovieSceneEvaluationGroupLUTIndex
// Struct Size::0x0008
struct FMovieSceneEvaluationGroupLUTIndex
{
    int32_t                                       NumInitPtrs;                                                  // 0x0000(0x0004)
    int32_t                                       NumEvalPtrs;                                                  // 0x0004(0x0004)
};


// ScriptStruct  MovieScene.MovieSceneEvaluationGroup
// Struct Size::0x0030
struct FMovieSceneEvaluationGroup
{
    TArray<FMovieSceneEvaluationGroupLUTIndex>    LUTIndices;                                                   // 0x0000(0x0010)
    TArray<FMovieSceneFieldEntry>                 TrackLUT;                                                     // 0x0010(0x0010)
    TArray<FMovieSceneFieldEntry>                 SectionLUT;                                                   // 0x0020(0x0010)
};


// ScriptStruct  MovieScene.MovieSceneOrderedEvaluationKey
// Struct Size::0x0010
struct FMovieSceneOrderedEvaluationKey
{
    FMovieSceneEvaluationKey                      Key;                                                          // 0x0000(0x000C)
    uint16_t                                      SetupIndex;                                                   // 0x000C(0x0002)
    uint16_t                                      TearDownIndex;                                                // 0x000E(0x0002)
};


// ScriptStruct  MovieScene.MovieSceneEvaluationMetaData
// Struct Size::0x0020
struct FMovieSceneEvaluationMetaData
{
    TArray<FMovieSceneSequenceID>                 ActiveSequences;                                              // 0x0000(0x0010)
    TArray<FMovieSceneOrderedEvaluationKey>       ActiveEntities;                                               // 0x0010(0x0010)
};


// ScriptStruct  MovieScene.MovieSceneEvaluationField
// Struct Size::0x0030
struct FMovieSceneEvaluationField
{
    TArray<FMovieSceneFrameRange>                 Ranges;                                                       // 0x0000(0x0010)
    TArray<FMovieSceneEvaluationGroup>            Groups;                                                       // 0x0010(0x0010)
    TArray<FMovieSceneEvaluationMetaData>         MetaData;                                                     // 0x0020(0x0010)
};


// ScriptStruct  MovieScene.MovieSceneFrameRange
// Struct Size::0x0010
struct FMovieSceneFrameRange
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
};


// ScriptStruct  MovieScene.MovieSceneTemplateGenerationLedger
// Struct Size::0x00A8
struct FMovieSceneTemplateGenerationLedger
{
    FMovieSceneTrackIdentifier                    LastTrackIdentifier;                                          // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    TMap<FGuid,FMovieSceneTrackIdentifier>        TrackSignatureToTrackIdentifier;                              // 0x0008(0x0050)
    TMap<FGuid,FMovieSceneFrameRange>             SubSectionRanges;                                             // 0x0058(0x0050)
};


// ScriptStruct  MovieScene.MovieSceneSubSectionData
// Struct Size::0x001C
struct FMovieSceneSubSectionData
{
    TWeakObjectPtr<UMovieSceneSubSection>         Section;                                                      // 0x0000(0x0008)
    FGuid                                         ObjectBindingID;                                              // 0x0008(0x0010)
    enum class ESectionEvaluationFlags            Flags;                                                        // 0x0018(0x0001)
    char                                          pa_0019[0x0003]                                               // 0x0019(0x0003)
};


// ScriptStruct  MovieScene.MovieSceneEvaluationTemplateSerialNumber
// Struct Size::0x0004
struct FMovieSceneEvaluationTemplateSerialNumber
{
    uint32_t                                      Value;                                                        // 0x0000(0x0004)
};


// ScriptStruct  MovieScene.MovieSceneEvaluationTemplate
// Struct Size::0x0160
struct FMovieSceneEvaluationTemplate
{
    TMap<FMovieSceneTrackIdentifier,FMovieSceneEvaluationTrack>Tracks;                                          // 0x0000(0x0050)
    char                                          pa_0050[0x0050]                                               // 0x0050(0x0050)
    FGuid                                         SequenceSignature;                                            // 0x00A0(0x0010)
    FMovieSceneEvaluationTemplateSerialNumber     TemplateSerialNumber;                                         // 0x00B0(0x0004)
    char                                          pa_00B4[0x0004]                                               // 0x00B4(0x0004)
    FMovieSceneTemplateGenerationLedger           TemplateLedger;                                               // 0x00B8(0x00A8)
};


// ScriptStruct  MovieScene.MovieSceneEvaluationTrack
// Struct Size::0x0078
struct FMovieSceneEvaluationTrack
{
    FGuid                                         ObjectBindingID;                                              // 0x0000(0x0010)
    uint16_t                                      EvaluationPriority;                                           // 0x0010(0x0002)
    enum class EEvaluationMethod                  EvaluationMethod;                                             // 0x0012(0x0001)
    char                                          pa_0013[0x0001]                                               // 0x0013(0x0001)
    TWeakObjectPtr<UMovieSceneTrack>              SourceTrack;                                                  // 0x0014(0x0008)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    TArray<FMovieSceneEvalTemplatePtr>            ChildTemplates;                                               // 0x0020(0x0010)
    FMovieSceneTrackImplementationPtr             TrackTemplate;                                                // 0x0030(0x0038)
    FName                                         EvaluationGroup;                                              // 0x0068(0x0008)
    char                                          bEvaluateInPreroll;                                           // 0x0070(0x0001)
    char                                          bEvaluateInPostroll;                                          // 0x0070(0x0001)
    char                                          bTearDownPriority;                                            // 0x0070(0x0001)
    char                                          pa_0071[0x0007]                                               // 0x0071(0x0007)
};


// ScriptStruct  MovieScene.MovieSceneTrackImplementationPtr
// Struct Size::0x0038
struct FMovieSceneTrackImplementationPtr
{
    char                                          pa_0000[0x0038]                                               // 0x0000(0x0038)
};


// ScriptStruct  MovieScene.MovieSceneRootEvaluationTemplateInstance
// Struct Size::0x0088
struct FMovieSceneRootEvaluationTemplateInstance
{
    TWeakObjectPtr<UMovieSceneSequence>           WeakRootSequence;                                             // 0x0000(0x0008)
    UMovieSceneCompiledDataManager*               CompiledDataManager;                                          // 0x0008(0x0008)
    char                                          pa_0010[0x0018]                                               // 0x0010(0x0018)
    UMovieSceneEntitySystemLinker*                EntitySystemLinker;                                           // 0x0028(0x0008)
    TMap<FMovieSceneSequenceID,UObject*>          DirectorInstances;                                            // 0x0030(0x0050)
    char                                          pa_0080[0x0008]                                               // 0x0080(0x0008)
};


// ScriptStruct  MovieScene.MovieSceneSubSequenceData
// Struct Size::0x0110
struct FMovieSceneSubSequenceData
{
    FSoftObjectPath                               Sequence;                                                     // 0x0000(0x0020)
    FMovieSceneSequenceTransform                  OuterToInnerTransform;                                        // 0x0020(0x0020)
    FMovieSceneSequenceTransform                  RootToSequenceTransform;                                      // 0x0040(0x0020)
    FFrameRate                                    TickResolution;                                               // 0x0060(0x0008)
    FMovieSceneSequenceID                         DeterministicSequenceID;                                      // 0x0068(0x0004)
    FMovieSceneFrameRange                         ParentPlayRange;                                              // 0x006C(0x0010)
    FFrameNumber                                  ParentStartFrameOffset;                                       // 0x007C(0x0004)
    FFrameNumber                                  ParentEndFrameOffset;                                         // 0x0080(0x0004)
    FFrameNumber                                  ParentFirstLoopStartFrameOffset;                              // 0x0084(0x0004)
    bool                                          bCanLoop;                                                     // 0x0088(0x0001)
    char                                          pa_0089[0x0003]                                               // 0x0089(0x0003)
    FMovieSceneFrameRange                         PlayRange;                                                    // 0x008C(0x0010)
    FMovieSceneFrameRange                         FullPlayRange;                                                // 0x009C(0x0010)
    FMovieSceneFrameRange                         UnwarpedPlayRange;                                            // 0x00AC(0x0010)
    FMovieSceneFrameRange                         PreRollRange;                                                 // 0x00BC(0x0010)
    FMovieSceneFrameRange                         PostRollRange;                                                // 0x00CC(0x0010)
    int16_t                                       HierarchicalBias;                                             // 0x00DC(0x0002)
    bool                                          bHasHierarchicalEasing;                                       // 0x00DE(0x0001)
    char                                          pa_00DF[0x0001]                                               // 0x00DF(0x0001)
    FMovieSceneSequenceInstanceDataPtr            InstanceData;                                                 // 0x00E0(0x0018)
    char                                          pa_00F8[0x0008]                                               // 0x00F8(0x0008)
    FGuid                                         SubSectionSignature;                                          // 0x0100(0x0010)
};


// ScriptStruct  MovieScene.MovieSceneSequenceInstanceDataPtr
// Struct Size::0x0018
struct FMovieSceneSequenceInstanceDataPtr
{
    char                                          pa_0000[0x0018]                                               // 0x0000(0x0018)
};


// ScriptStruct  MovieScene.MovieSceneSequenceTransform
// Struct Size::0x0020
struct FMovieSceneSequenceTransform
{
    FMovieSceneTimeTransform                      LinearTransform;                                              // 0x0000(0x000C)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    TArray<FMovieSceneNestedSequenceTransform>    NestedTransforms;                                             // 0x0010(0x0010)
};


// ScriptStruct  MovieScene.MovieSceneNestedSequenceTransform
// Struct Size::0x0014
struct FMovieSceneNestedSequenceTransform
{
    FMovieSceneTimeTransform                      LinearTransform;                                              // 0x0000(0x000C)
    FMovieSceneTimeWarping                        Warping;                                                      // 0x000C(0x0008)
};


// ScriptStruct  MovieScene.MovieSceneTimeWarping
// Struct Size::0x0008
struct FMovieSceneTimeWarping
{
    FFrameNumber                                  Start;                                                        // 0x0000(0x0004)
    FFrameNumber                                  End;                                                          // 0x0004(0x0004)
};


// ScriptStruct  MovieScene.MovieSceneSequenceHierarchyNode
// Struct Size::0x0018
struct FMovieSceneSequenceHierarchyNode
{
    FMovieSceneSequenceID                         ParentId;                                                     // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    TArray<FMovieSceneSequenceID>                 Children;                                                     // 0x0008(0x0010)
};


// ScriptStruct  MovieScene.MovieSceneSubSequenceTreeEntry
// Struct Size::0x0018
struct FMovieSceneSubSequenceTreeEntry
{
    char                                          pa_0000[0x0018]                                               // 0x0000(0x0018)
};


// ScriptStruct  MovieScene.MovieSceneSubSequenceTree
// Struct Size::0x0060
struct FMovieSceneSubSequenceTree
{
    char                                          pa_0000[0x0060]                                               // 0x0000(0x0060)
};


// ScriptStruct  MovieScene.MovieSceneSequenceHierarchy
// Struct Size::0x0118
struct FMovieSceneSequenceHierarchy
{
    FMovieSceneSequenceHierarchyNode              RootNode;                                                     // 0x0000(0x0018)
    FMovieSceneSubSequenceTree                    Tree;                                                         // 0x0018(0x0060)
    TMap<FMovieSceneSequenceID,FMovieSceneSubSequenceData>SubSequences;                                         // 0x0078(0x0050)
    TMap<FMovieSceneSequenceID,FMovieSceneSequenceHierarchyNode>Hierarchy;                                      // 0x00C8(0x0050)
};


// ScriptStruct  MovieScene.MovieSceneWarpCounter
// Struct Size::0x0010
struct FMovieSceneWarpCounter
{
    TArray<uint32_t>                              WarpCounts;                                                   // 0x0000(0x0010)
};


// ScriptStruct  MovieScene.MovieSceneExpansionState
// Struct Size::0x0001
struct FMovieSceneExpansionState
{
    bool                                          bExpanded;                                                    // 0x0000(0x0001)
};


// ScriptStruct  MovieScene.MovieSceneMarkedFrame
// Struct Size::0x0020
struct FMovieSceneMarkedFrame
{
    FFrameNumber                                  FrameNumber;                                                  // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FString                                       Label;                                                        // 0x0008(0x0010)
    bool                                          bIsDeterminismFence;                                          // 0x0018(0x0001)
    char                                          pa_0019[0x0007]                                               // 0x0019(0x0007)
};


// ScriptStruct  MovieScene.MovieSceneEditorData
// Struct Size::0x00F0
struct FMovieSceneEditorData
{
    TMap<FString,FMovieSceneExpansionState>       ExpansionStates;                                              // 0x0000(0x0050)
    TArray<FString>                               PinnedNodes;                                                  // 0x0050(0x0010)
    double                                        ViewStart;                                                    // 0x0060(0x0008)
    double                                        ViewEnd;                                                      // 0x0068(0x0008)
    double                                        WorkStart;                                                    // 0x0070(0x0008)
    double                                        WorkEnd;                                                      // 0x0078(0x0008)
    TSet<FFrameNumber>                            MarkedFrames;                                                 // 0x0080(0x0050)
    FFloatRange                                   WorkingRange;                                                 // 0x00D0(0x0010)
    FFloatRange                                   ViewRange;                                                    // 0x00E0(0x0010)
};


// ScriptStruct  MovieScene.MovieSceneTrackLabels
// Struct Size::0x0010
struct FMovieSceneTrackLabels
{
    TArray<FString>                               Strings;                                                      // 0x0000(0x0010)
};


// ScriptStruct  MovieScene.MovieSceneObjectBindingIDs
// Struct Size::0x0010
struct FMovieSceneObjectBindingIDs
{
    TArray<FMovieSceneObjectBindingID>            IDs;                                                          // 0x0000(0x0010)
};


// ScriptStruct  MovieScene.MovieSceneSectionGroup
// Struct Size::0x0010
struct FMovieSceneSectionGroup
{
    TArray<TWeakObjectPtr<UMovieSceneSection>>    Sections;                                                     // 0x0000(0x0010)
};


// ScriptStruct  MovieScene.MovieSceneBinding
// Struct Size::0x0030
struct FMovieSceneBinding
{
    FGuid                                         ObjectGuid;                                                   // 0x0000(0x0010)
    FString                                       BindingName;                                                  // 0x0010(0x0010)
    TArray<UMovieSceneTrack*>                     Tracks;                                                       // 0x0020(0x0010)
};


// ScriptStruct  MovieScene.MovieSceneBindingOverrideData
// Struct Size::0x0050
struct FMovieSceneBindingOverrideData
{
    FMovieSceneObjectBindingID                    ObjectBindingID;                                              // 0x0000(0x0018)
    TSoftObjectPtr<UObject>                       Object;                                                       // 0x0018(0x0030)
    bool                                          bOverridesDefault;                                            // 0x0048(0x0001)
    char                                          pa_0049[0x0007]                                               // 0x0049(0x0007)
};


// ScriptStruct  MovieScene.MovieSceneBindingProxy
// Struct Size::0x0018
struct FMovieSceneBindingProxy
{
    FGuid                                         BindingId;                                                    // 0x0000(0x0010)
    UMovieSceneSequence*                          Sequence;                                                     // 0x0010(0x0008)
};


// ScriptStruct  MovieScene.MovieScenePossessable
// Struct Size::0x0058
struct FMovieScenePossessable
{
    TArray<FName>                                 Tags;                                                         // 0x0000(0x0010)
    FGuid                                         Guid;                                                         // 0x0010(0x0010)
    FString                                       Name;                                                         // 0x0020(0x0010)
    FGuid                                         ParentGuid;                                                   // 0x0030(0x0010)
    FMovieSceneObjectBindingID                    SpawnableObjectBindingID;                                     // 0x0040(0x0018)
};


// ScriptStruct  MovieScene.MovieSceneSectionEvalOptions
// Struct Size::0x0002
struct FMovieSceneSectionEvalOptions
{
    bool                                          bCanEditCompletionMode;                                       // 0x0000(0x0001)
    enum class EMovieSceneCompletionMode          CompletionMode;                                               // 0x0001(0x0001)
};


// ScriptStruct  MovieScene.MovieSceneEasingSettings
// Struct Size::0x0038
struct FMovieSceneEasingSettings
{
    int32_t                                       AutoEaseInDuration;                                           // 0x0000(0x0004)
    int32_t                                       AutoEaseOutDuration;                                          // 0x0004(0x0004)
    TScriptInterface<IMovieSceneEasingFunction>   EaseIn;                                                       // 0x0008(0x0010)
    bool                                          bManualEaseIn;                                                // 0x0018(0x0001)
    char                                          pa_0019[0x0003]                                               // 0x0019(0x0003)
    int32_t                                       ManualEaseInDuration;                                         // 0x001C(0x0004)
    TScriptInterface<IMovieSceneEasingFunction>   EaseOut;                                                      // 0x0020(0x0010)
    bool                                          bManualEaseOut;                                               // 0x0030(0x0001)
    char                                          pa_0031[0x0003]                                               // 0x0031(0x0003)
    int32_t                                       ManualEaseOutDuration;                                        // 0x0034(0x0004)
};


// ScriptStruct  MovieScene.MovieSceneTimecodeSource
// Struct Size::0x0014
struct FMovieSceneTimecodeSource
{
    FTimecode                                     Timecode;                                                     // 0x0000(0x0014)
};


// ScriptStruct  MovieScene.MovieSceneSequenceReplProperties
// Struct Size::0x0010
struct FMovieSceneSequenceReplProperties
{
    FFrameTime                                    LastKnownPosition;                                            // 0x0000(0x0008)
    enum class EMovieScenePlayerStatus            LastKnownStatus;                                              // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
    int32_t                                       LastKnownNumLoops;                                            // 0x000C(0x0004)
};


// ScriptStruct  MovieScene.MovieSceneSequencePlaybackParams
// Struct Size::0x0028
struct FMovieSceneSequencePlaybackParams
{
    FFrameTime                                    Frame;                                                        // 0x0000(0x0008)
    float                                         Time;                                                         // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FString                                       MarkedFrame;                                                  // 0x0010(0x0010)
    enum class EMovieScenePositionType            PositionType;                                                 // 0x0020(0x0001)
    enum class EUpdatePositionMethod              UpdateMethod;                                                 // 0x0021(0x0001)
    bool                                          bHasJumped;                                                   // 0x0022(0x0001)
    char                                          pa_0023[0x0005]                                               // 0x0023(0x0005)
};


// ScriptStruct  MovieScene.MovieSceneSequencePlayToParams
// Struct Size::0x0001
struct FMovieSceneSequencePlayToParams
{
    bool                                          bExclusive;                                                   // 0x0000(0x0001)
};


// ScriptStruct  MovieScene.MovieSceneSpawnable
// Struct Size::0x00C0
struct FMovieSceneSpawnable
{
    FTransform                                    SpawnTransform;                                               // 0x0000(0x0060)
    TArray<FName>                                 Tags;                                                         // 0x0060(0x0010)
    bool                                          bContinuouslyRespawn;                                         // 0x0070(0x0001)
    bool                                          bNetAddressableName;                                          // 0x0071(0x0001)
    bool                                          bEvaluateTracksWhenNotSpawned;                                // 0x0072(0x0001)
    char                                          pa_0073[0x0001]                                               // 0x0073(0x0001)
    FGuid                                         Guid;                                                         // 0x0074(0x0010)
    char                                          pa_0084[0x0004]                                               // 0x0084(0x0004)
    FString                                       Name;                                                         // 0x0088(0x0010)
    UObject*                                      ObjectTemplate;                                               // 0x0098(0x0008)
    TArray<FGuid>                                 ChildPossessables;                                            // 0x00A0(0x0010)
    enum class ESpawnOwnership                    Ownership;                                                    // 0x00B0(0x0001)
    char                                          pa_00B1[0x0003]                                               // 0x00B1(0x0003)
    FName                                         LevelName;                                                    // 0x00B4(0x0008)
    char                                          pa_00BC[0x0004]                                               // 0x00BC(0x0004)
};


// ScriptStruct  MovieScene.MovieSceneTrackEvalOptions
// Struct Size::0x0004
struct FMovieSceneTrackEvalOptions
{
    char                                          bCanEvaluateNearestSection;                                   // 0x0000(0x0001)
    char                                          bEvalNearestSection;                                          // 0x0000(0x0001)
    char                                          bEvaluateInPreroll;                                           // 0x0000(0x0001)
    char                                          bEvaluateInPostroll;                                          // 0x0000(0x0001)
    char                                          bEvaluateNearestSection;                                      // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
};


// ScriptStruct  MovieScene.MovieSceneTrackDisplayOptions
// Struct Size::0x0004
struct FMovieSceneTrackDisplayOptions
{
    char                                          bShowVerticalFrames;                                          // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
};


// ScriptStruct  MovieScene.MovieSceneTrackEvaluationFieldEntry
// Struct Size::0x0020
struct FMovieSceneTrackEvaluationFieldEntry
{
    UMovieSceneSection*                           Section;                                                      // 0x0000(0x0008)
    FFrameNumberRange                             Range;                                                        // 0x0008(0x0010)
    FFrameNumber                                  ForcedTime;                                                   // 0x0018(0x0004)
    enum class ESectionEvaluationFlags            Flags;                                                        // 0x001C(0x0001)
    char                                          pa_001D[0x0001]                                               // 0x001D(0x0001)
    int16_t                                       LegacySortOrder;                                              // 0x001E(0x0002)
};


// ScriptStruct  MovieScene.MovieSceneTrackEvaluationField
// Struct Size::0x0010
struct FMovieSceneTrackEvaluationField
{
    TArray<FMovieSceneTrackEvaluationFieldEntry>  Entries;                                                      // 0x0000(0x0010)
};


// ScriptStruct  MovieScene.TestMovieSceneEvalTemplate
// Struct Size::0x0020
struct FTestMovieSceneEvalTemplate : public FMovieSceneEvalTemplate
{
};


// ScriptStruct  MeshDescription.ElementID
// Struct Size::0x0004
struct FElementID
{
    int32_t                                       IDValue;                                                      // 0x0000(0x0004)
};


// ScriptStruct  MeshDescription.VertexID
// Struct Size::0x0004
struct FVertexID : public FElementID
{
};


// ScriptStruct  MeshDescription.VertexInstanceID
// Struct Size::0x0004
struct FVertexInstanceID : public FElementID
{
};


// ScriptStruct  MeshDescription.EdgeID
// Struct Size::0x0004
struct FEdgeID : public FElementID
{
};


// ScriptStruct  MeshDescription.UVID
// Struct Size::0x0004
struct FUVID : public FElementID
{
};


// ScriptStruct  MeshDescription.TriangleID
// Struct Size::0x0004
struct FTriangleID : public FElementID
{
};


// ScriptStruct  MeshDescription.PolygonGroupID
// Struct Size::0x0004
struct FPolygonGroupID : public FElementID
{
};


// ScriptStruct  MeshDescription.PolygonID
// Struct Size::0x0004
struct FPolygonID : public FElementID
{
};


// ScriptStruct  StaticMeshDescription.UVMapSettings
// Struct Size::0x0070
struct FUVMapSettings
{
    FVector                                       Size;                                                         // 0x0000(0x0018)
    FVector2D                                     UVTile;                                                       // 0x0018(0x0010)
    FVector                                       position;                                                     // 0x0028(0x0018)
    FRotator                                      Rotation;                                                     // 0x0040(0x0018)
    FVector                                       Scale;                                                        // 0x0058(0x0018)
};


// ScriptStruct  ChaosSolverEngine.BreakEventCallbackWrapper
// Struct Size::0x0040
struct FBreakEventCallbackWrapper
{
    char                                          pa_0000[0x0040]                                               // 0x0000(0x0040)
};


// ScriptStruct  ChaosSolverEngine.RemovalEventCallbackWrapper
// Struct Size::0x0040
struct FRemovalEventCallbackWrapper
{
    char                                          pa_0000[0x0040]                                               // 0x0000(0x0040)
};


// ScriptStruct  ChaosSolverEngine.CrumblingEventCallbackWrapper
// Struct Size::0x0040
struct FCrumblingEventCallbackWrapper
{
    char                                          pa_0000[0x0040]                                               // 0x0000(0x0040)
};


// ScriptStruct  ChaosSolverEngine.ChaosHandlerSet
// Struct Size::0x0058
struct FChaosHandlerSet
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    TSet<UObject*>                                ChaosHandlers;                                                // 0x0008(0x0050)
};


// ScriptStruct  ChaosSolverEngine.ChaosDebugSubstepControl
// Struct Size::0x0003
struct FChaosDebugSubstepControl
{
    bool                                          bPause;                                                       // 0x0000(0x0001)
    bool                                          bSubstep;                                                     // 0x0001(0x0001)
    bool                                          bStep;                                                        // 0x0002(0x0001)
};


// ScriptStruct  FieldSystemEngine.FieldObjectCommands
// Struct Size::0x0030
struct FFieldObjectCommands
{
    TArray<FName>                                 TargetNames;                                                  // 0x0000(0x0010)
    TArray<UFieldNodeBase*>                       RootNodes;                                                    // 0x0010(0x0010)
    TArray<UFieldSystemMetaData*>                 MetaDatas;                                                    // 0x0020(0x0010)
};


// ScriptStruct  NetCore.NetAnalyticsDataConfig
// Struct Size::0x000C
struct FNetAnalyticsDataConfig
{
    FName                                         DataName;                                                     // 0x0000(0x0008)
    bool                                          bEnabled;                                                     // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
};


// ScriptStruct  NetCore.StateStruct
// Struct Size::0x0018
struct FStateStruct
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    FString                                       StateName;                                                    // 0x0008(0x0010)
};


// ScriptStruct  NetCore.EscalationState
// Struct Size::0x0030
struct FEscalationState : public FStateStruct
{
    bool                                          bLogEscalate;                                                 // 0x0018(0x0001)
    bool                                          bDormant;                                                     // 0x0019(0x0001)
    int16_t                                       CooloffTime;                                                  // 0x001A(0x0002)
    int16_t                                       AutoEscalateTime;                                             // 0x001C(0x0002)
    int8_t                                        HighestTimePeriod;                                            // 0x001E(0x0001)
    char                                          pa_001F[0x0001]                                               // 0x001F(0x0001)
    TArray<int8_t>                                AllTimePeriods;                                               // 0x0020(0x0010)
};


// ScriptStruct  NetCore.NetFaultState
// Struct Size::0x0040
struct FNetFaultState : public FEscalationState
{
    bool                                          bCloseConnection;                                             // 0x0030(0x0001)
    char                                          pa_0031[0x0001]                                               // 0x0031(0x0001)
    int16_t                                       EscalateQuotaFaultsPerPeriod;                                 // 0x0032(0x0002)
    int8_t                                        EscalateQuotaFaultPercentPerPeriod;                           // 0x0034(0x0001)
    char                                          pa_0035[0x0001]                                               // 0x0035(0x0001)
    int16_t                                       DescalateQuotaFaultsPerPeriod;                                // 0x0036(0x0002)
    int8_t                                        DescalateQuotaFaultPercentPerPeriod;                          // 0x0038(0x0001)
    int8_t                                        EscalateQuotaTimePeriod;                                      // 0x0039(0x0001)
    char                                          pa_003A[0x0006]                                               // 0x003A(0x0006)
};


// ScriptStruct  DataflowCore.DataflowConnection
// Struct Size::0x0040
struct FDataflowConnection
{
    char                                          pa_0000[0x0040]                                               // 0x0000(0x0040)
};


// ScriptStruct  DataflowCore.DataflowInput
// Struct Size::0x0048
struct FDataflowInput : public FDataflowConnection
{
    char                                          pa_0040[0x0008]                                               // 0x0040(0x0008)
};


// ScriptStruct  DataflowCore.DataflowOutput
// Struct Size::0x0068
struct FDataflowOutput : public FDataflowConnection
{
    char                                          pa_0040[0x0028]                                               // 0x0040(0x0028)
};


// ScriptStruct  GeometryCollectionEngine.ChaosBreakingEventRequestSettings
// Struct Size::0x0018
struct FChaosBreakingEventRequestSettings
{
    int32_t                                       MaxNumberOfResults;                                           // 0x0000(0x0004)
    float                                         MinRadius;                                                    // 0x0004(0x0004)
    float                                         MinSpeed;                                                     // 0x0008(0x0004)
    float                                         MinMass;                                                      // 0x000C(0x0004)
    float                                         MaxDistance;                                                  // 0x0010(0x0004)
    enum class EChaosBreakingSortMethod           SortMethod;                                                   // 0x0014(0x0001)
    char                                          pa_0015[0x0003]                                               // 0x0015(0x0003)
};


// ScriptStruct  GeometryCollectionEngine.ChaosCollisionEventRequestSettings
// Struct Size::0x0018
struct FChaosCollisionEventRequestSettings
{
    int32_t                                       MaxNumberResults;                                             // 0x0000(0x0004)
    float                                         MinMass;                                                      // 0x0004(0x0004)
    float                                         MinSpeed;                                                     // 0x0008(0x0004)
    float                                         MinImpulse;                                                   // 0x000C(0x0004)
    float                                         MaxDistance;                                                  // 0x0010(0x0004)
    enum class EChaosCollisionSortMethod          SortMethod;                                                   // 0x0014(0x0001)
    char                                          pa_0015[0x0003]                                               // 0x0015(0x0003)
};


// ScriptStruct  GeometryCollectionEngine.ChaosRemovalEventRequestSettings
// Struct Size::0x0010
struct FChaosRemovalEventRequestSettings
{
    int32_t                                       MaxNumberOfResults;                                           // 0x0000(0x0004)
    float                                         MinMass;                                                      // 0x0004(0x0004)
    float                                         MaxDistance;                                                  // 0x0008(0x0004)
    enum class EChaosRemovalSortMethod            SortMethod;                                                   // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
};


// ScriptStruct  GeometryCollectionEngine.ChaosTrailingEventRequestSettings
// Struct Size::0x0018
struct FChaosTrailingEventRequestSettings
{
    int32_t                                       MaxNumberOfResults;                                           // 0x0000(0x0004)
    float                                         MinMass;                                                      // 0x0004(0x0004)
    float                                         MinSpeed;                                                     // 0x0008(0x0004)
    float                                         MinAngularSpeed;                                              // 0x000C(0x0004)
    float                                         MaxDistance;                                                  // 0x0010(0x0004)
    enum class EChaosTrailingSortMethod           SortMethod;                                                   // 0x0014(0x0001)
    char                                          pa_0015[0x0003]                                               // 0x0015(0x0003)
};


// ScriptStruct  GeometryCollectionEngine.GeometryCollectionDebugDrawWarningMessage
// Struct Size::0x0001
struct FGeometryCollectionDebugDrawWarningMessage
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  GeometryCollectionEngine.GeometryCollectionDebugDrawActorSelectedRigidBody
// Struct Size::0x0018
struct FGeometryCollectionDebugDrawActorSelectedRigidBody
{
    int32_t                                       ID;                                                           // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    AChaosSolverActor*                            Solver;                                                       // 0x0008(0x0008)
    AGeometryCollectionActor*                     GeometryCollection;                                           // 0x0010(0x0008)
};


// ScriptStruct  GeometryCollectionEngine.GeometryCollectionSource
// Struct Size::0x00A0
struct FGeometryCollectionSource
{
    FSoftObjectPath                               SourceGeometryObject;                                         // 0x0000(0x0020)
    FTransform                                    LocalTransform;                                               // 0x0020(0x0060)
    TArray<UMaterialInterface*>                   SourceMaterial;                                               // 0x0080(0x0010)
    bool                                          bAddInternalMaterials;                                        // 0x0090(0x0001)
    bool                                          bSplitComponents;                                             // 0x0091(0x0001)
    char                                          pa_0092[0x000E]                                               // 0x0092(0x000E)
};


// ScriptStruct  GeometryCollectionEngine.GeometryCollectionAutoInstanceMesh
// Struct Size::0x0030
struct FGeometryCollectionAutoInstanceMesh
{
    FSoftObjectPath                               StaticMesh;                                                   // 0x0000(0x0020)
    TArray<UMaterialInterface*>                   Materials;                                                    // 0x0020(0x0010)
};


// ScriptStruct  GeometryCollectionEngine.GeometryCollectionEmbeddedExemplar
// Struct Size::0x0030
struct FGeometryCollectionEmbeddedExemplar
{
    FSoftObjectPath                               StaticMeshExemplar;                                           // 0x0000(0x0020)
    float                                         StartCullDistance;                                            // 0x0020(0x0004)
    float                                         EndCullDistance;                                              // 0x0024(0x0004)
    int32_t                                       InstanceCount;                                                // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
};


// ScriptStruct  GeometryCollectionEngine.GeometryCollectionLevelSetData
// Struct Size::0x0010
struct FGeometryCollectionLevelSetData
{
    int32_t                                       MinLevelSetResolution;                                        // 0x0000(0x0004)
    int32_t                                       MaxLevelSetResolution;                                        // 0x0004(0x0004)
    int32_t                                       MinClusterLevelSetResolution;                                 // 0x0008(0x0004)
    int32_t                                       MaxClusterLevelSetResolution;                                 // 0x000C(0x0004)
};


// ScriptStruct  GeometryCollectionEngine.GeometryCollectionCollisionParticleData
// Struct Size::0x0008
struct FGeometryCollectionCollisionParticleData
{
    float                                         CollisionParticlesFraction;                                   // 0x0000(0x0004)
    int32_t                                       MaximumCollisionParticles;                                    // 0x0004(0x0004)
};


// ScriptStruct  GeometryCollectionEngine.GeometryCollectionCollisionTypeData
// Struct Size::0x0024
struct FGeometryCollectionCollisionTypeData
{
    enum class ECollisionTypeEnum                 CollisionType;                                                // 0x0000(0x0001)
    enum class EImplicitTypeEnum                  ImplicitType;                                                 // 0x0001(0x0001)
    char                                          pa_0002[0x0002]                                               // 0x0002(0x0002)
    FGeometryCollectionLevelSetData               LevelSet;                                                     // 0x0004(0x0010)
    FGeometryCollectionCollisionParticleData      CollisionParticles;                                           // 0x0014(0x0008)
    float                                         CollisionObjectReductionPercentage;                           // 0x001C(0x0004)
    float                                         CollisionMarginFraction;                                      // 0x0020(0x0004)
};


// ScriptStruct  GeometryCollectionEngine.GeometryCollectionSizeSpecificData
// Struct Size::0x0020
struct FGeometryCollectionSizeSpecificData
{
    float                                         MaxSize;                                                      // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    TArray<FGeometryCollectionCollisionTypeData>  CollisionShapes;                                              // 0x0008(0x0010)
    int32_t                                       DamageThreshold;                                              // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x0068
struct FAnimNode : public FAnimNode
{
    float                                         X;                                                            // 0x0010(0x0004)
    float                                         Y;                                                            // 0x0014(0x0004)
    FName                                         GroupName;                                                    // 0x0018(0x0008)
    enum class EAnimGroupRole                     GroupRole;                                                    // 0x0020(0x0001)
    char                                          pa_0021[0x0007]                                               // 0x0021(0x0007)
    UBlendSpace*                                  BlendSpace;                                                   // 0x0028(0x0008)
    TArray<FPoseLink>                             SamplePoseLinks;                                              // 0x0030(0x0010)
    char                                          pa_0040[0x0028]                                               // 0x0040(0x0028)
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x0068
struct FAnimNode : public FAnimNode
{
};


// ScriptStruct  Engine.AnimNode
// Struct Size::0x0020
struct FAnimNode : public FAnimNode
{
    FPoseLink                                     Result;                                                       // 0x0010(0x0010)
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x0020
struct FAnimNode : public FAnimNode
{
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x0128
struct FAnimNode : public FAnimNode
{
    FBoneReference                                BoneToModify;                                                 // 0x00C8(0x0010)
    FVector                                       Translation;                                                  // 0x00D8(0x0018)
    FRotator                                      Rotation;                                                     // 0x00F0(0x0018)
    FVector                                       Scale;                                                        // 0x0108(0x0018)
    enum class EBoneModificationMode              TranslationMode;                                              // 0x0120(0x0001)
    enum class EBoneModificationMode              RotationMode;                                                 // 0x0121(0x0001)
    enum class EBoneModificationMode              ScaleMode;                                                    // 0x0122(0x0001)
    enum class EBoneControlSpace                  TranslationSpace;                                             // 0x0123(0x0001)
    enum class EBoneControlSpace                  RotationSpace;                                                // 0x0124(0x0001)
    enum class EBoneControlSpace                  ScaleSpace;                                                   // 0x0125(0x0001)
    char                                          pa_0126[0x0002]                                               // 0x0126(0x0002)
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x0010
struct FAnimNode : public FAnimNode
{
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x0010
struct FAnimNode : public FAnimNode
{
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x00F0
struct FAnimNode : public FAnimNode
{
    FBoneReference                                TargetBone;                                                   // 0x00C8(0x0010)
    FBoneReference                                SourceBone;                                                   // 0x00D8(0x0010)
    float                                         Multiplier;                                                   // 0x00E8(0x0004)
    enum class EBoneAxis                          RotationAxisToRefer;                                          // 0x00EC(0x0001)
    bool                                          bIsAdditive;                                                  // 0x00ED(0x0001)
    char                                          pa_00EE[0x0002]                                               // 0x00EE(0x0002)
};


// ScriptStruct  Engine.AnimNodeReference
// Struct Size::0x0010
struct FAnimNodeReference
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
};


// ScriptStruct  AnimGraphRuntime.BlendSpacePlayerReference
// Struct Size::0x0010
struct FBlendSpacePlayerReference : public FAnimNodeReference
{
};


// ScriptStruct  AnimGraphRuntime.RotationRetargetingInfo
// Struct Size::0x01A0
struct FRotationRetargetingInfo
{
    bool                                          bEnabled;                                                     // 0x0000(0x0001)
    char                                          pa_0001[0x000F]                                               // 0x0001(0x000F)
    FTransform                                    Source;                                                       // 0x0010(0x0060)
    FTransform                                    Target;                                                       // 0x0070(0x0060)
    enum class ERotationComponent                 RotationComponent;                                            // 0x00D0(0x0001)
    char                                          pa_00D1[0x0007]                                               // 0x00D1(0x0007)
    FVector                                       TwistAxis;                                                    // 0x00D8(0x0018)
    bool                                          bUseAbsoluteAngle;                                            // 0x00F0(0x0001)
    char                                          pa_00F1[0x0003]                                               // 0x00F1(0x0003)
    float                                         SourceMinimum;                                                // 0x00F4(0x0004)
    float                                         SourceMaximum;                                                // 0x00F8(0x0004)
    float                                         TargetMinimum;                                                // 0x00FC(0x0004)
    float                                         TargetMaximum;                                                // 0x0100(0x0004)
    enum class EEasingFuncType                    EasingType;                                                   // 0x0104(0x0001)
    char                                          pa_0105[0x0003]                                               // 0x0105(0x0003)
    FRuntimeFloatCurve                            CustomCurve;                                                  // 0x0108(0x0088)
    bool                                          bFlipEasing;                                                  // 0x0190(0x0001)
    char                                          pa_0191[0x0003]                                               // 0x0191(0x0003)
    float                                         EasingWeight;                                                 // 0x0194(0x0004)
    bool                                          bClamp;                                                       // 0x0198(0x0001)
    char                                          pa_0199[0x0007]                                               // 0x0199(0x0007)
};


// ScriptStruct  AnimGraphRuntime.PositionHistory
// Struct Size::0x0030
struct FPositionHistory
{
    TArray<FVector>                               Positions;                                                    // 0x0000(0x0010)
    float                                         Range;                                                        // 0x0010(0x0004)
    char                                          pa_0014[0x001C]                                               // 0x0014(0x001C)
};


// ScriptStruct  AnimGraphRuntime.LayeredBoneBlendReference
// Struct Size::0x0010
struct FLayeredBoneBlendReference : public FAnimNodeReference
{
};


// ScriptStruct  AnimGraphRuntime.AnimationStateResultReference
// Struct Size::0x0010
struct FAnimationStateResultReference : public FAnimNodeReference
{
};


// ScriptStruct  AnimGraphRuntime.AnimationStateMachineReference
// Struct Size::0x0010
struct FAnimationStateMachineReference : public FAnimNodeReference
{
};


// ScriptStruct  Engine.AnimNode
// Struct Size::0x0010
struct FAnimNode : public FAnimNode
{
};


// ScriptStruct  Engine.AnimNode
// Struct Size::0x0038
struct FAnimNode : public FAnimNode
{
    char                                          pa_0010[0x0010]                                               // 0x0010(0x0010)
    float                                         BlendWeight;                                                  // 0x0020(0x0004)
    float                                         InternalTimeAccumulator;                                      // 0x0024(0x0004)
    char                                          pa_0028[0x0010]                                               // 0x0028(0x0010)
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x0068
struct FAnimNode : public FAnimNode
{
    char                                          pa_0038[0x0028]                                               // 0x0038(0x0028)
    UBlendSpace*                                  PreviousBlendSpace;                                           // 0x0060(0x0008)
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x0070
struct FAnimNode : public FAnimNode
{
    UBlendSpace*                                  BlendSpace;                                                   // 0x0068(0x0008)
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x01D0
struct FAnimNode : public FAnimNode
{
    char                                          pa_0070[0x00C0]                                               // 0x0070(0x00C0)
    FPoseLink                                     BasePose;                                                     // 0x0130(0x0010)
    int32_t                                       LODThreshold;                                                 // 0x0140(0x0004)
    FName                                         SourceSocketName;                                             // 0x0144(0x0008)
    FName                                         PivotSocketName;                                              // 0x014C(0x0008)
    char                                          pa_0154[0x0004]                                               // 0x0154(0x0004)
    FVector                                       LookAtLocation;                                               // 0x0158(0x0018)
    FVector                                       SocketAxis;                                                   // 0x0170(0x0018)
    float                                         Alpha;                                                        // 0x0188(0x0004)
    char                                          pa_018C[0x0044]                                               // 0x018C(0x0044)
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x00C8
struct FAnimNode : public FAnimNode
{
    FPoseLink                                     Base;                                                         // 0x0010(0x0010)
    FPoseLink                                     Additive;                                                     // 0x0020(0x0010)
    float                                         Alpha;                                                        // 0x0030(0x0004)
    FInputScaleBias                               AlphaScaleBias;                                               // 0x0034(0x0008)
    int32_t                                       LODThreshold;                                                 // 0x003C(0x0004)
    FInputAlphaBoolBlend                          AlphaBoolBlend;                                               // 0x0040(0x0048)
    FName                                         AlphaCurveName;                                               // 0x0088(0x0008)
    FInputScaleBiasClamp                          AlphaScaleBiasClamp;                                          // 0x0090(0x0030)
    char                                          pa_00C0[0x0004]                                               // 0x00C0(0x0004)
    enum class EAnimAlphaInputType                AlphaInputType;                                               // 0x00C4(0x0001)
    bool                                          bAlphaBoolEnabled;                                            // 0x00C5(0x0001)
    char                                          pa_00C6[0x0002]                                               // 0x00C6(0x0002)
};


// ScriptStruct  AnimGraphRuntime.BlendBoneByChannelEntry
// Struct Size::0x0024
struct FBlendBoneByChannelEntry
{
    FBoneReference                                SourceBone;                                                   // 0x0000(0x0010)
    FBoneReference                                TargetBone;                                                   // 0x0010(0x0010)
    bool                                          bBlendTranslation;                                            // 0x0020(0x0001)
    bool                                          bBlendRotation;                                               // 0x0021(0x0001)
    bool                                          bBlendScale;                                                  // 0x0022(0x0001)
    char                                          pa_0023[0x0001]                                               // 0x0023(0x0001)
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x0068
struct FAnimNode : public FAnimNode
{
    FPoseLink                                     A;                                                            // 0x0010(0x0010)
    FPoseLink                                     B;                                                            // 0x0020(0x0010)
    TArray<FBlendBoneByChannelEntry>              BoneDefinitions;                                              // 0x0030(0x0010)
    char                                          pa_0040[0x0010]                                               // 0x0040(0x0010)
    float                                         Alpha;                                                        // 0x0050(0x0004)
    char                                          pa_0054[0x0004]                                               // 0x0054(0x0004)
    FInputScaleBias                               AlphaScaleBias;                                               // 0x0058(0x0008)
    enum class EBoneControlSpace                  TransformsSpace;                                              // 0x0060(0x0001)
    char                                          pa_0061[0x0007]                                               // 0x0061(0x0007)
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x0048
struct FAnimNode : public FAnimNode
{
    TArray<FPoseLink>                             BlendPose;                                                    // 0x0010(0x0010)
    char                                          pa_0020[0x0028]                                               // 0x0020(0x0028)
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x0048
struct FAnimNode : public FAnimNode
{
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x0048
struct FAnimNode : public FAnimNode
{
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x0048
struct FAnimNode : public FAnimNode
{
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x0078
struct FAnimNode : public FAnimNode
{
    float                                         NormalizedTime;                                               // 0x0070(0x0004)
    bool                                          bTeleportToNormalizedTime;                                    // 0x0074(0x0001)
    char                                          pa_0075[0x0003]                                               // 0x0075(0x0003)
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x0090
struct FAnimNode : public FAnimNode
{
    FName                                         GroupName;                                                    // 0x0068(0x0008)
    enum class EAnimGroupRole                     GroupRole;                                                    // 0x0070(0x0001)
    enum class EAnimSyncMethod                    Method;                                                       // 0x0071(0x0001)
    bool                                          bIgnoreForRelevancyTest;                                      // 0x0072(0x0001)
    char                                          pa_0073[0x0001]                                               // 0x0073(0x0001)
    float                                         X;                                                            // 0x0074(0x0004)
    float                                         Y;                                                            // 0x0078(0x0004)
    float                                         PlayRate;                                                     // 0x007C(0x0004)
    bool                                          bLoop;                                                        // 0x0080(0x0001)
    bool                                          bResetPlayTimeWhenBlendSpaceChanges;                          // 0x0081(0x0001)
    char                                          pa_0082[0x0002]                                               // 0x0082(0x0002)
    float                                         StartPosition;                                                // 0x0084(0x0004)
    UBlendSpace*                                  BlendSpace;                                                   // 0x0088(0x0008)
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x0038
struct FAnimNode : public FAnimNode
{
    FPoseLink                                     Source;                                                       // 0x0010(0x0010)
    char                                          pa_0020[0x0014]                                               // 0x0020(0x0014)
    enum class EAnimFunctionCallSite              CallSite;                                                     // 0x0034(0x0004)
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x01D8
struct FAnimNode : public FAnimNode
{
    TWeakObjectPtr<USkeletalMeshComponent>        SourceMeshComponent;                                          // 0x0010(0x0008)
    char                                          bUseAttachedParent;                                           // 0x0018(0x0001)
    char                                          bCopyCurves;                                                  // 0x0018(0x0001)
    bool                                          bCopyCustomAttributes;                                        // 0x0019(0x0001)
    char                                          bUseMeshPose;                                                 // 0x001A(0x0001)
    char                                          pa_001B[0x0001]                                               // 0x001B(0x0001)
    FName                                         RootBoneToCopy;                                               // 0x001C(0x0008)
    char                                          pa_0024[0x01B4]                                               // 0x0024(0x01B4)
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x0040
struct FAnimNode : public FAnimNode
{
    FPoseLink                                     SourcePose;                                                   // 0x0010(0x0010)
    FName                                         SourceBinding;                                                // 0x0020(0x0008)
    float                                         Alpha;                                                        // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
    TScriptInterface<ICurveSourceInterface>       CurveSource;                                                  // 0x0030(0x0010)
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x00E0
struct FAnimNode : public FAnimNode
{
    FPoseLink                                     BasePose;                                                     // 0x0010(0x0010)
    TArray<FPoseLink>                             BlendPoses;                                                   // 0x0020(0x0010)
    enum class ELayeredBoneBlendMode              BlendMode;                                                    // 0x0030(0x0001)
    char                                          pa_0031[0x0007]                                               // 0x0031(0x0007)
    TArray<UBlendProfile*>                        BlendMasks;                                                   // 0x0038(0x0010)
    TArray<FInputBlendPose>                       LayerSetup;                                                   // 0x0048(0x0010)
    TArray<float>                                 BlendWeights;                                                 // 0x0058(0x0010)
    bool                                          bMeshSpaceRotationBlend;                                      // 0x0068(0x0001)
    bool                                          bMeshSpaceScaleBlend;                                         // 0x0069(0x0001)
    enum class ECurveBlendOption                  CurveBlendOption;                                             // 0x006A(0x0001)
    bool                                          bBlendRootMotionBasedOnRootBone;                              // 0x006B(0x0001)
    char                                          pa_006C[0x0004]                                               // 0x006C(0x0004)
    int32_t                                       LODThreshold;                                                 // 0x0070(0x0004)
    char                                          pa_0074[0x0004]                                               // 0x0074(0x0004)
    TArray<FPerBoneBlendWeight>                   PerBoneBlendWeights;                                          // 0x0078(0x0010)
    FGuid                                         SkeletonGuid;                                                 // 0x0088(0x0010)
    FGuid                                         VirtualBoneGuid;                                              // 0x0098(0x0010)
    char                                          pa_00A8[0x0038]                                               // 0x00A8(0x0038)
};


// ScriptStruct  Engine.PerBoneBlendWeight
// Struct Size::0x0008
struct FPerBoneBlendWeight
{
    int32_t                                       SourceIndex;                                                  // 0x0000(0x0004)
    float                                         BlendWeight;                                                  // 0x0004(0x0004)
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x0038
struct FAnimNode : public FAnimNode
{
    FPoseLink                                     Base;                                                         // 0x0010(0x0010)
    FPoseLink                                     Additive;                                                     // 0x0020(0x0010)
    bool                                          bMeshSpaceAdditive;                                           // 0x0030(0x0001)
    char                                          pa_0031[0x0007]                                               // 0x0031(0x0007)
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x0048
struct FAnimNode : public FAnimNode
{
    FPoseLink                                     Source;                                                       // 0x0010(0x0010)
    char                                          pa_0020[0x0028]                                               // 0x0020(0x0028)
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x0048
struct FAnimNode : public FAnimNode
{
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x0060
struct FAnimNode : public FAnimNode
{
    bool                                          bMirror;                                                      // 0x0048(0x0001)
    char                                          pa_0049[0x0007]                                               // 0x0049(0x0007)
    UMirrorDataTable*                             MirrorDataTable;                                              // 0x0050(0x0008)
    float                                         BlendTime;                                                    // 0x0058(0x0004)
    bool                                          bResetChild;                                                  // 0x005C(0x0001)
    bool                                          bBoneMirroring;                                               // 0x005D(0x0001)
    bool                                          bCurveMirroring;                                              // 0x005E(0x0001)
    bool                                          bAttributeMirroring;                                          // 0x005F(0x0001)
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x0100
struct FAnimNode : public FAnimNode
{
    FPoseLink                                     SourcePose;                                                   // 0x0010(0x0010)
    TMap<FName,float>                             CurveMap;                                                     // 0x0020(0x0050)
    TArray<float>                                 CurveValues;                                                  // 0x0070(0x0010)
    TArray<FName>                                 CurveNames;                                                   // 0x0080(0x0010)
    char                                          pa_0090[0x0064]                                               // 0x0090(0x0064)
    float                                         Alpha;                                                        // 0x00F4(0x0004)
    enum class EModifyCurveApplyMode              ApplyMode;                                                    // 0x00F8(0x0001)
    char                                          pa_00F9[0x0007]                                               // 0x00F9(0x0007)
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x0050
struct FAnimNode : public FAnimNode
{
    TArray<FPoseLink>                             Poses;                                                        // 0x0010(0x0010)
    TArray<float>                                 DesiredAlphas;                                                // 0x0020(0x0010)
    char                                          pa_0030[0x0010]                                               // 0x0030(0x0010)
    FInputScaleBias                               AlphaScaleBias;                                               // 0x0040(0x0008)
    bool                                          bAdditiveNode;                                                // 0x0048(0x0001)
    bool                                          bNormalizeAlpha;                                              // 0x0049(0x0001)
    char                                          pa_004A[0x0006]                                               // 0x004A(0x0006)
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x0090
struct FAnimNode : public FAnimNode
{
    UPoseAsset*                                   PoseAsset;                                                    // 0x0038(0x0008)
    char                                          pa_0040[0x0050]                                               // 0x0040(0x0050)
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x00B0
struct FAnimNode : public FAnimNode
{
    FPoseLink                                     SourcePose;                                                   // 0x0090(0x0010)
    enum class EAlphaBlendOption                  BlendOption;                                                  // 0x00A0(0x0001)
    char                                          pa_00A1[0x0007]                                               // 0x00A1(0x0007)
    UCurveFloat*                                  CustomCurve;                                                  // 0x00A8(0x0008)
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x00A8
struct FAnimNode : public FAnimNode
{
    FName                                         PoseName;                                                     // 0x0090(0x0008)
    float                                         PoseWeight;                                                   // 0x0098(0x0004)
    char                                          pa_009C[0x000C]                                               // 0x009C(0x000C)
};


// ScriptStruct  AnimGraphRuntime.PoseDriverTransform
// Struct Size::0x0030
struct FPoseDriverTransform
{
    FVector                                       TargetTranslation;                                            // 0x0000(0x0018)
    FRotator                                      TargetRotation;                                               // 0x0018(0x0018)
};


// ScriptStruct  AnimGraphRuntime.PoseDriverTarget
// Struct Size::0x00C8
struct FPoseDriverTarget
{
    TArray<FPoseDriverTransform>                  BoneTransforms;                                               // 0x0000(0x0010)
    FRotator                                      TargetRotation;                                               // 0x0010(0x0018)
    float                                         TargetScale;                                                  // 0x0028(0x0004)
    enum class ERBFDistanceMethod                 DistanceMethod;                                               // 0x002C(0x0001)
    enum class ERBFFunctionType                   FunctionType;                                                 // 0x002D(0x0001)
    bool                                          bApplyCustomCurve;                                            // 0x002E(0x0001)
    char                                          pa_002F[0x0001]                                               // 0x002F(0x0001)
    FRichCurve                                    CustomCurve;                                                  // 0x0030(0x0080)
    FName                                         DrivenName;                                                   // 0x00B0(0x0008)
    char                                          pa_00B8[0x0008]                                               // 0x00B8(0x0008)
    bool                                          bIsHidden;                                                    // 0x00C0(0x0001)
    char                                          pa_00C1[0x0007]                                               // 0x00C1(0x0007)
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x0188
struct FAnimNode : public FAnimNode
{
    FPoseLink                                     SourcePose;                                                   // 0x0090(0x0010)
    TArray<FBoneReference>                        SourceBones;                                                  // 0x00A0(0x0010)
    TArray<FBoneReference>                        OnlyDriveBones;                                               // 0x00B0(0x0010)
    TArray<FPoseDriverTarget>                     PoseTargets;                                                  // 0x00C0(0x0010)
    char                                          pa_00D0[0x0030]                                               // 0x00D0(0x0030)
    FBoneReference                                EvalSpaceBone;                                                // 0x0100(0x0010)
    bool                                          bEvalFromRefPose;                                             // 0x0110(0x0001)
    char                                          pa_0111[0x0007]                                               // 0x0111(0x0007)
    FRBFParams                                    RBFParams;                                                    // 0x0118(0x0038)
    enum class EPoseDriverSource                  DriveSource;                                                  // 0x0150(0x0001)
    enum class EPoseDriverOutput                  DriveOutput;                                                  // 0x0151(0x0001)
    char                                          bOnlyDriveSelectedBones;                                      // 0x0152(0x0001)
    char                                          pa_0153[0x0001]                                               // 0x0153(0x0001)
    int32_t                                       LODThreshold;                                                 // 0x0154(0x0004)
    char                                          pa_0158[0x0030]                                               // 0x0158(0x0030)
};


// ScriptStruct  AnimGraphRuntime.RBFParams
// Struct Size::0x0038
struct FRBFParams
{
    int32_t                                       TargetDimensions;                                             // 0x0000(0x0004)
    enum class ERBFSolverType                     SolverType;                                                   // 0x0004(0x0001)
    char                                          pa_0005[0x0003]                                               // 0x0005(0x0003)
    float                                         Radius;                                                       // 0x0008(0x0004)
    bool                                          bAutomaticRadius;                                             // 0x000C(0x0001)
    enum class ERBFFunctionType                   Function;                                                     // 0x000D(0x0001)
    enum class ERBFDistanceMethod                 DistanceMethod;                                               // 0x000E(0x0001)
    enum class EBoneAxis                          TwistAxis;                                                    // 0x000F(0x0001)
    float                                         WeightThreshold;                                              // 0x0010(0x0004)
    enum class ERBFNormalizeMethod                NormalizeMethod;                                              // 0x0014(0x0001)
    char                                          pa_0015[0x0003]                                               // 0x0015(0x0003)
    FVector                                       MedianReference;                                              // 0x0018(0x0018)
    float                                         MedianMin;                                                    // 0x0030(0x0004)
    float                                         MedianMax;                                                    // 0x0034(0x0004)
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x0090
struct FAnimNode : public FAnimNode
{
    FName                                         SnapshotName;                                                 // 0x0010(0x0008)
    FPoseSnapshot                                 Snapshot;                                                     // 0x0018(0x0038)
    enum class ESnapshotSourceMode                Mode;                                                         // 0x0050(0x0001)
    char                                          pa_0051[0x003F]                                               // 0x0051(0x003F)
};


// ScriptStruct  Engine.PoseSnapshot
// Struct Size::0x0038
struct FPoseSnapshot
{
    TArray<FTransform>                            LocalTransforms;                                              // 0x0000(0x0010)
    TArray<FName>                                 BoneNames;                                                    // 0x0010(0x0010)
    FName                                         SkeletalMeshName;                                             // 0x0020(0x0008)
    FName                                         SnapshotName;                                                 // 0x0028(0x0008)
    bool                                          bIsValid;                                                     // 0x0030(0x0001)
    char                                          pa_0031[0x0007]                                               // 0x0031(0x0007)
};


// ScriptStruct  AnimGraphRuntime.RandomPlayerSequenceEntry
// Struct Size::0x0050
struct FRandomPlayerSequenceEntry
{
    UAnimSequence*                                Sequence;                                                     // 0x0000(0x0008)
    float                                         ChanceToPlay;                                                 // 0x0008(0x0004)
    int32_t                                       MinLoopCount;                                                 // 0x000C(0x0004)
    int32_t                                       MaxLoopCount;                                                 // 0x0010(0x0004)
    float                                         MinPlayRate;                                                  // 0x0014(0x0004)
    float                                         MaxPlayRate;                                                  // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    FAlphaBlend                                   BlendIn;                                                      // 0x0020(0x0030)
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x0078
struct FAnimNode : public FAnimNode
{
    TArray<FRandomPlayerSequenceEntry>            Entries;                                                      // 0x0010(0x0010)
    char                                          pa_0020[0x0050]                                               // 0x0020(0x0050)
    float                                         BlendWeight;                                                  // 0x0070(0x0004)
    bool                                          bShuffleMode;                                                 // 0x0074(0x0001)
    char                                          pa_0075[0x0003]                                               // 0x0075(0x0003)
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x00A8
struct FAnimNode : public FAnimNode
{
    FPoseLink                                     BasePose;                                                     // 0x0010(0x0010)
    float                                         Pitch;                                                        // 0x0020(0x0004)
    float                                         Yaw;                                                          // 0x0024(0x0004)
    FInputScaleBiasClamp                          PitchScaleBiasClamp;                                          // 0x0028(0x0030)
    FInputScaleBiasClamp                          YawScaleBiasClamp;                                            // 0x0058(0x0030)
    FRotator                                      MeshToComponent;                                              // 0x0088(0x0018)
    char                                          pa_00A0[0x0008]                                               // 0x00A0(0x0008)
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x0118
struct FAnimNode : public FAnimNode
{
    FPoseLink                                     BasePose;                                                     // 0x0070(0x0010)
    int32_t                                       LODThreshold;                                                 // 0x0080(0x0004)
    float                                         Alpha;                                                        // 0x0084(0x0004)
    FInputScaleBias                               AlphaScaleBias;                                               // 0x0088(0x0008)
    FInputAlphaBoolBlend                          AlphaBoolBlend;                                               // 0x0090(0x0048)
    FName                                         AlphaCurveName;                                               // 0x00D8(0x0008)
    FInputScaleBiasClamp                          AlphaScaleBiasClamp;                                          // 0x00E0(0x0030)
    char                                          pa_0110[0x0004]                                               // 0x0110(0x0004)
    enum class EAnimAlphaInputType                AlphaInputType;                                               // 0x0114(0x0001)
    bool                                          bAlphaBoolEnabled;                                            // 0x0115(0x0001)
    char                                          pa_0116[0x0002]                                               // 0x0116(0x0002)
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x0110
struct FAnimNode : public FAnimNode
{
    FPoseLink                                     BasePose;                                                     // 0x0068(0x0010)
    int32_t                                       LODThreshold;                                                 // 0x0078(0x0004)
    float                                         Alpha;                                                        // 0x007C(0x0004)
    FInputScaleBias                               AlphaScaleBias;                                               // 0x0080(0x0008)
    FInputAlphaBoolBlend                          AlphaBoolBlend;                                               // 0x0088(0x0048)
    FName                                         AlphaCurveName;                                               // 0x00D0(0x0008)
    FInputScaleBiasClamp                          AlphaScaleBiasClamp;                                          // 0x00D8(0x0030)
    char                                          pa_0108[0x0004]                                               // 0x0108(0x0004)
    enum class EAnimAlphaInputType                AlphaInputType;                                               // 0x010C(0x0001)
    bool                                          bAlphaBoolEnabled;                                            // 0x010D(0x0001)
    char                                          pa_010E[0x0002]                                               // 0x010E(0x0002)
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x0040
struct FAnimNode : public FAnimNode
{
    char                                          pa_0038[0x0008]                                               // 0x0038(0x0008)
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x0040
struct FAnimNode : public FAnimNode
{
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x0068
struct FAnimNode : public FAnimNode
{
    FName                                         GroupName;                                                    // 0x0040(0x0008)
    enum class EAnimGroupRole                     GroupRole;                                                    // 0x0048(0x0001)
    enum class EAnimSyncMethod                    Method;                                                       // 0x0049(0x0001)
    bool                                          bIgnoreForRelevancyTest;                                      // 0x004A(0x0001)
    char                                          pa_004B[0x0005]                                               // 0x004B(0x0005)
    UAnimSequenceBase*                            Sequence;                                                     // 0x0050(0x0008)
    float                                         ExplicitTime;                                                 // 0x0058(0x0004)
    bool                                          bShouldLoop;                                                  // 0x005C(0x0001)
    bool                                          bTeleportToExplicitTime;                                      // 0x005D(0x0001)
    enum class ESequenceEvalReinit                ReinitializationBehavior;                                     // 0x005E(0x0001)
    char                                          pa_005F[0x0001]                                               // 0x005F(0x0001)
    float                                         StartPosition;                                                // 0x0060(0x0004)
    char                                          pa_0064[0x0004]                                               // 0x0064(0x0004)
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x0048
struct FAnimNode : public FAnimNode
{
    FPoseLink                                     Source;                                                       // 0x0010(0x0010)
    FName                                         SlotName;                                                     // 0x0020(0x0008)
    bool                                          bAlwaysUpdateSourcePose;                                      // 0x0028(0x0001)
    char                                          pa_0029[0x001F]                                               // 0x0029(0x001F)
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x0030
struct FAnimNode : public FAnimNode
{
    FPoseLink                                     Source;                                                       // 0x0010(0x0010)
    FName                                         GroupName;                                                    // 0x0020(0x0008)
    enum class EAnimGroupRole                     GroupRole;                                                    // 0x0028(0x0001)
    char                                          pa_0029[0x0007]                                               // 0x0029(0x0007)
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x00C8
struct FAnimNode : public FAnimNode
{
    FPoseLink                                     A;                                                            // 0x0010(0x0010)
    FPoseLink                                     B;                                                            // 0x0020(0x0010)
    enum class EAnimAlphaInputType                AlphaInputType;                                               // 0x0030(0x0001)
    char                                          bAlphaBoolEnabled;                                            // 0x0031(0x0001)
    char                                          bResetChildOnActivation;                                      // 0x0031(0x0001)
    char                                          pa_0032[0x0002]                                               // 0x0032(0x0002)
    float                                         Alpha;                                                        // 0x0034(0x0004)
    FInputScaleBias                               AlphaScaleBias;                                               // 0x0038(0x0008)
    FInputAlphaBoolBlend                          AlphaBoolBlend;                                               // 0x0040(0x0048)
    FName                                         AlphaCurveName;                                               // 0x0088(0x0008)
    FInputScaleBiasClamp                          AlphaScaleBiasClamp;                                          // 0x0090(0x0030)
    char                                          pa_00C0[0x0008]                                               // 0x00C0(0x0008)
};


// ScriptStruct  AnimGraphRuntime.AnimSequencerInstanceProxy
// Struct Size::0x0C80
struct FAnimSequencerInstanceProxy : public FAnimInstanceProxy
{
    char                                          pa_0880[0x0400]                                               // 0x0880(0x0400)
};


// ScriptStruct  AnimGraphRuntime.AnimPhysConstraintSetup
// Struct Size::0x0088
struct FAnimPhysConstraintSetup
{
    enum class AnimPhysLinearConstraintType       LinearXLimitType;                                             // 0x0000(0x0001)
    enum class AnimPhysLinearConstraintType       LinearYLimitType;                                             // 0x0001(0x0001)
    enum class AnimPhysLinearConstraintType       LinearZLimitType;                                             // 0x0002(0x0001)
    char                                          pa_0003[0x0005]                                               // 0x0003(0x0005)
    FVector                                       LinearAxesMin;                                                // 0x0008(0x0018)
    FVector                                       LinearAxesMax;                                                // 0x0020(0x0018)
    enum class AnimPhysAngularConstraintType      AngularConstraintType;                                        // 0x0038(0x0001)
    enum class AnimPhysTwistAxis                  TwistAxis;                                                    // 0x0039(0x0001)
    enum class AnimPhysTwistAxis                  AngularTargetAxis;                                            // 0x003A(0x0001)
    char                                          pa_003B[0x0001]                                               // 0x003B(0x0001)
    float                                         ConeAngle;                                                    // 0x003C(0x0004)
    FVector                                       AngularLimitsMin;                                             // 0x0040(0x0018)
    FVector                                       AngularLimitsMax;                                             // 0x0058(0x0018)
    FVector                                       AngularTarget;                                                // 0x0070(0x0018)
};


// ScriptStruct  AnimGraphRuntime.AnimPhysPlanarLimit
// Struct Size::0x0070
struct FAnimPhysPlanarLimit
{
    FBoneReference                                DrivingBone;                                                  // 0x0000(0x0010)
    FTransform                                    PlaneTransform;                                               // 0x0010(0x0060)
};


// ScriptStruct  AnimGraphRuntime.AnimPhysSphericalLimit
// Struct Size::0x0030
struct FAnimPhysSphericalLimit
{
    FBoneReference                                DrivingBone;                                                  // 0x0000(0x0010)
    FVector                                       SphereLocalOffset;                                            // 0x0010(0x0018)
    float                                         LimitRadius;                                                  // 0x0028(0x0004)
    enum class ESphericalLimitType                LimitType;                                                    // 0x002C(0x0001)
    char                                          pa_002D[0x0003]                                               // 0x002D(0x0003)
};


// ScriptStruct  AnimGraphRuntime.AnimPhysBodyDefinition
// Struct Size::0x00D0
struct FAnimPhysBodyDefinition
{
    FBoneReference                                BoundBone;                                                    // 0x0000(0x0010)
    FVector                                       BoxExtents;                                                   // 0x0010(0x0018)
    FVector                                       LocalJointOffset;                                             // 0x0028(0x0018)
    FAnimPhysConstraintSetup                      ConstraintSetup;                                              // 0x0040(0x0088)
    enum class AnimPhysCollisionType              CollisionType;                                                // 0x00C8(0x0001)
    char                                          pa_00C9[0x0003]                                               // 0x00C9(0x0003)
    float                                         SphereCollisionRadius;                                        // 0x00CC(0x0004)
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x0520
struct FAnimNode : public FAnimNode
{
    float                                         LinearDampingOverride;                                        // 0x00C8(0x0004)
    float                                         AngularDampingOverride;                                       // 0x00CC(0x0004)
    char                                          pa_00D0[0x00C0]                                               // 0x00D0(0x00C0)
    FBoneReference                                RelativeSpaceBone;                                            // 0x0190(0x0010)
    FBoneReference                                BoundBone;                                                    // 0x01A0(0x0010)
    FBoneReference                                ChainEnd;                                                     // 0x01B0(0x0010)
    TArray<FAnimPhysBodyDefinition>               PhysicsBodyDefinitions;                                       // 0x01C0(0x0010)
    float                                         GravityScale;                                                 // 0x01D0(0x0004)
    char                                          pa_01D4[0x0004]                                               // 0x01D4(0x0004)
    FVector                                       GravityOverride;                                              // 0x01D8(0x0018)
    float                                         LinearSpringConstant;                                         // 0x01F0(0x0004)
    float                                         AngularSpringConstant;                                        // 0x01F4(0x0004)
    float                                         WindScale;                                                    // 0x01F8(0x0004)
    char                                          pa_01FC[0x0004]                                               // 0x01FC(0x0004)
    FVector                                       ComponentLinearAccScale;                                      // 0x0200(0x0018)
    FVector                                       ComponentLinearVelScale;                                      // 0x0218(0x0018)
    FVector                                       ComponentAppliedLinearAccClamp;                               // 0x0230(0x0018)
    float                                         AngularBiasOverride;                                          // 0x0248(0x0004)
    int32_t                                       NumSolverIterationsPreUpdate;                                 // 0x024C(0x0004)
    int32_t                                       NumSolverIterationsPostUpdate;                                // 0x0250(0x0004)
    char                                          pa_0254[0x0004]                                               // 0x0254(0x0004)
    TArray<FAnimPhysSphericalLimit>               SphericalLimits;                                              // 0x0258(0x0010)
    FVector                                       ExternalForce;                                                // 0x0268(0x0018)
    TArray<FAnimPhysPlanarLimit>                  PlanarLimits;                                                 // 0x0280(0x0010)
    enum class AnimPhysSimSpaceType               SimulationSpace;                                              // 0x0290(0x0001)
    char                                          pa_0291[0x0002]                                               // 0x0291(0x0002)
    char                                          bUseSphericalLimits;                                          // 0x0293(0x0001)
    char                                          bUsePlanarLimit;                                              // 0x0293(0x0001)
    char                                          bDoUpdate;                                                    // 0x0293(0x0001)
    char                                          bDoEval;                                                      // 0x0293(0x0001)
    char                                          bOverrideLinearDamping;                                       // 0x0293(0x0001)
    char                                          bOverrideAngularBias;                                         // 0x0293(0x0001)
    char                                          bOverrideAngularDamping;                                      // 0x0293(0x0001)
    char                                          bEnableWind;                                                  // 0x0293(0x0001)
    char                                          bUseGravityOverride;                                          // 0x0294(0x0001)
    char                                          bGravityOverrideInSimSpace;                                   // 0x0294(0x0001)
    char                                          bLinearSpring;                                                // 0x0294(0x0001)
    char                                          bAngularSpring;                                               // 0x0294(0x0001)
    char                                          bChain;                                                       // 0x0294(0x0001)
    char                                          pa_0295[0x000B]                                               // 0x0295(0x000B)
    FRotationRetargetingInfo                      RetargetingSettings;                                          // 0x02A0(0x01A0)
    char                                          pa_0440[0x00E0]                                               // 0x0440(0x00E0)
};


// ScriptStruct  AnimGraphRuntime.AngularRangeLimit
// Struct Size::0x0040
struct FAngularRangeLimit
{
    FVector                                       LimitMin;                                                     // 0x0000(0x0018)
    FVector                                       LimitMax;                                                     // 0x0018(0x0018)
    FBoneReference                                bone;                                                         // 0x0030(0x0010)
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x00E8
struct FAnimNode : public FAnimNode
{
    TArray<FAngularRangeLimit>                    AngularRangeLimits;                                           // 0x00C8(0x0010)
    TArray<FVector>                               AngularOffsets;                                               // 0x00D8(0x0010)
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x0118
struct FAnimNode : public FAnimNode
{
    FBoneReference                                SourceBone;                                                   // 0x00C8(0x0010)
    UCurveFloat*                                  DrivingCurve;                                                 // 0x00D8(0x0008)
    float                                         Multiplier;                                                   // 0x00E0(0x0004)
    float                                         RangeMin;                                                     // 0x00E4(0x0004)
    float                                         RangeMax;                                                     // 0x00E8(0x0004)
    float                                         RemappedMin;                                                  // 0x00EC(0x0004)
    float                                         RemappedMax;                                                  // 0x00F0(0x0004)
    FName                                         ParameterName;                                                // 0x00F4(0x0008)
    FBoneReference                                TargetBone;                                                   // 0x00FC(0x0010)
    enum class EDrivenDestinationMode             DestinationMode;                                              // 0x010C(0x0001)
    enum class EDrivenBoneModificationMode        ModificationMode;                                             // 0x010D(0x0001)
    enum class EComponentType                     SourceComponent;                                              // 0x010E(0x0001)
    char                                          bUseRange;                                                    // 0x010F(0x0001)
    char                                          bAffectTargetTranslationX;                                    // 0x010F(0x0001)
    char                                          bAffectTargetTranslationY;                                    // 0x010F(0x0001)
    char                                          bAffectTargetTranslationZ;                                    // 0x010F(0x0001)
    char                                          bAffectTargetRotationX;                                       // 0x010F(0x0001)
    char                                          bAffectTargetRotationY;                                       // 0x010F(0x0001)
    char                                          bAffectTargetRotationZ;                                       // 0x010F(0x0001)
    char                                          bAffectTargetScaleX;                                          // 0x010F(0x0001)
    char                                          bAffectTargetScaleY;                                          // 0x0110(0x0001)
    char                                          bAffectTargetScaleZ;                                          // 0x0110(0x0001)
    char                                          pa_0111[0x0007]                                               // 0x0111(0x0007)
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x01C0
struct FAnimNode : public FAnimNode
{
    FVector                                       EffectorLocation;                                             // 0x00C8(0x0018)
    enum class EBoneControlSpace                  EffectorLocationSpace;                                        // 0x00E0(0x0001)
    char                                          pa_00E1[0x000F]                                               // 0x00E1(0x000F)
    FBoneSocketTarget                             EffectorTarget;                                               // 0x00F0(0x0090)
    FBoneReference                                TipBone;                                                      // 0x0180(0x0010)
    FBoneReference                                RootBone;                                                     // 0x0190(0x0010)
    float                                         Precision;                                                    // 0x01A0(0x0004)
    int32_t                                       MaxIterations;                                                // 0x01A4(0x0004)
    bool                                          bStartFromTail;                                               // 0x01A8(0x0001)
    bool                                          bEnableRotationLimit;                                         // 0x01A9(0x0001)
    char                                          pa_01AA[0x0006]                                               // 0x01AA(0x0006)
    TArray<float>                                 RotationLimitPerJoints;                                       // 0x01B0(0x0010)
};


// ScriptStruct  Engine.BoneSocketTarget
// Struct Size::0x0090
struct FBoneSocketTarget
{
    bool                                          bUseSocket;                                                   // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FBoneReference                                BoneReference;                                                // 0x0004(0x0010)
    char                                          pa_0014[0x000C]                                               // 0x0014(0x000C)
    FSocketReference                              SocketReference;                                              // 0x0020(0x0070)
};


// ScriptStruct  Engine.SocketReference
// Struct Size::0x0070
struct FSocketReference
{
    char                                          pa_0000[0x0060]                                               // 0x0000(0x0060)
    FName                                         SocketName;                                                   // 0x0060(0x0008)
    char                                          pa_0068[0x0008]                                               // 0x0068(0x0008)
};


// ScriptStruct  AnimGraphRuntime.Constraint
// Struct Size::0x001C
struct FConstraint
{
    FBoneReference                                TargetBone;                                                   // 0x0000(0x0010)
    enum class EConstraintOffsetOption            OffsetOption;                                                 // 0x0010(0x0001)
    enum class ETransformConstraintType           TransformType;                                                // 0x0011(0x0001)
    FFilterOptionPerAxis                          PerAxis;                                                      // 0x0012(0x0003)
    char                                          pa_0015[0x0007]                                               // 0x0015(0x0007)
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x0108
struct FAnimNode : public FAnimNode
{
    FBoneReference                                BoneToModify;                                                 // 0x00C8(0x0010)
    TArray<FConstraint>                           ConstraintSetup;                                              // 0x00D8(0x0010)
    TArray<float>                                 ConstraintWeights;                                            // 0x00E8(0x0010)
    char                                          pa_00F8[0x0010]                                               // 0x00F8(0x0010)
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x00F0
struct FAnimNode : public FAnimNode
{
    FBoneReference                                SourceBone;                                                   // 0x00C8(0x0010)
    FBoneReference                                TargetBone;                                                   // 0x00D8(0x0010)
    bool                                          bCopyTranslation;                                             // 0x00E8(0x0001)
    bool                                          bCopyRotation;                                                // 0x00E9(0x0001)
    bool                                          bCopyScale;                                                   // 0x00EA(0x0001)
    enum class EBoneControlSpace                  ControlSpace;                                                 // 0x00EB(0x0001)
    char                                          pa_00EC[0x0004]                                               // 0x00EC(0x0004)
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x00F8
struct FAnimNode : public FAnimNode
{
    FBoneReference                                SourceBone;                                                   // 0x00C8(0x0010)
    FBoneReference                                TargetBone;                                                   // 0x00D8(0x0010)
    bool                                          bCopyTranslation;                                             // 0x00E8(0x0001)
    bool                                          bCopyRotation;                                                // 0x00E9(0x0001)
    bool                                          bCopyScale;                                                   // 0x00EA(0x0001)
    enum class CopyBoneDeltaMode                  CopyMode;                                                     // 0x00EB(0x0001)
    float                                         TranslationMultiplier;                                        // 0x00EC(0x0004)
    float                                         RotationMultiplier;                                           // 0x00F0(0x0004)
    float                                         ScaleMultiplier;                                              // 0x00F4(0x0004)
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x01F0
struct FAnimNode : public FAnimNode
{
    char                                          pa_00C8[0x0008]                                               // 0x00C8(0x0008)
    FTransform                                    EffectorTransform;                                            // 0x00D0(0x0060)
    FBoneSocketTarget                             EffectorTarget;                                               // 0x0130(0x0090)
    FBoneReference                                TipBone;                                                      // 0x01C0(0x0010)
    FBoneReference                                RootBone;                                                     // 0x01D0(0x0010)
    float                                         Precision;                                                    // 0x01E0(0x0004)
    int32_t                                       MaxIterations;                                                // 0x01E4(0x0004)
    enum class EBoneControlSpace                  EffectorTransformSpace;                                       // 0x01E8(0x0001)
    enum class EBoneRotationSource                EffectorRotationSource;                                       // 0x01E9(0x0001)
    char                                          pa_01EA[0x0006]                                               // 0x01EA(0x0006)
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x0120
struct FAnimNode : public FAnimNode
{
    FBoneReference                                RightHandFK;                                                  // 0x00C8(0x0010)
    FBoneReference                                LeftHandFK;                                                   // 0x00D8(0x0010)
    FBoneReference                                RightHandIK;                                                  // 0x00E8(0x0010)
    FBoneReference                                LeftHandIK;                                                   // 0x00F8(0x0010)
    TArray<FBoneReference>                        IKBonesToMove;                                                // 0x0108(0x0010)
    float                                         HandFKWeight;                                                 // 0x0118(0x0004)
    char                                          pa_011C[0x0004]                                               // 0x011C(0x0004)
};


// ScriptStruct  AnimGraphRuntime.IKChainLink
// Struct Size::0x0070
struct FIKChainLink
{
    char                                          pa_0000[0x0070]                                               // 0x0000(0x0070)
};


// ScriptStruct  AnimGraphRuntime.IKChain
// Struct Size::0x0048
struct FIKChain
{
    char                                          pa_0000[0x0048]                                               // 0x0000(0x0048)
};


// ScriptStruct  AnimGraphRuntime.AnimLegIKDefinition
// Struct Size::0x002C
struct FAnimLegIKDefinition
{
    FBoneReference                                IKFootBone;                                                   // 0x0000(0x0010)
    FBoneReference                                FKFootBone;                                                   // 0x0010(0x0010)
    int32_t                                       NumBonesInLimb;                                               // 0x0020(0x0004)
    float                                         MinRotationAngle;                                             // 0x0024(0x0004)
    enum class EAxis                              FootBoneForwardAxis;                                          // 0x0028(0x0001)
    enum class EAxis                              HingeRotationAxis;                                            // 0x0029(0x0001)
    bool                                          bEnableRotationLimit;                                         // 0x002A(0x0001)
    bool                                          bEnableKneeTwistCorrection;                                   // 0x002B(0x0001)
};


// ScriptStruct  AnimGraphRuntime.AnimLegIKData
// Struct Size::0x00E0
struct FAnimLegIKData
{
    char                                          pa_0000[0x00E0]                                               // 0x0000(0x00E0)
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x00F8
struct FAnimNode : public FAnimNode
{
    float                                         ReachPrecision;                                               // 0x00C8(0x0004)
    int32_t                                       MaxIterations;                                                // 0x00CC(0x0004)
    TArray<FAnimLegIKDefinition>                  LegsDefinition;                                               // 0x00D0(0x0010)
    char                                          pa_00E0[0x0018]                                               // 0x00E0(0x0018)
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x0250
struct FAnimNode : public FAnimNode
{
    FBoneReference                                BoneToModify;                                                 // 0x00C8(0x0010)
    char                                          pa_00D8[0x0008]                                               // 0x00D8(0x0008)
    FBoneSocketTarget                             LookAtTarget;                                                 // 0x00E0(0x0090)
    FVector                                       LookAtLocation;                                               // 0x0170(0x0018)
    FAxis                                         LookAt;                                                       // 0x0188(0x0020)
    bool                                          bUseLookUpAxis;                                               // 0x01A8(0x0001)
    enum class EInterpolationBlend                InterpolationType;                                            // 0x01A9(0x0001)
    char                                          pa_01AA[0x0006]                                               // 0x01AA(0x0006)
    FAxis                                         LookUp;                                                       // 0x01B0(0x0020)
    float                                         LookAtClamp;                                                  // 0x01D0(0x0004)
    float                                         InterpolationTime;                                            // 0x01D4(0x0004)
    float                                         InterpolationTriggerThreashold;                               // 0x01D8(0x0004)
    char                                          pa_01DC[0x0074]                                               // 0x01DC(0x0074)
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x0128
struct FAnimNode : public FAnimNode
{
    FBoneReference                                BoneToObserve;                                                // 0x00C8(0x0010)
    enum class EBoneControlSpace                  DisplaySpace;                                                 // 0x00D8(0x0001)
    bool                                          bRelativeToRefPose;                                           // 0x00D9(0x0001)
    char                                          pa_00DA[0x0006]                                               // 0x00DA(0x0006)
    FVector                                       Translation;                                                  // 0x00E0(0x0018)
    FRotator                                      Rotation;                                                     // 0x00F8(0x0018)
    FVector                                       Scale;                                                        // 0x0110(0x0018)
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x00D8
struct FAnimNode : public FAnimNode
{
    char                                          pa_00C8[0x0010]                                               // 0x00C8(0x0010)
};


// ScriptStruct  AnimGraphRuntime.SimSpaceSettings
// Struct Size::0x0068
struct FSimSpaceSettings
{
    float                                         WorldAlpha;                                                   // 0x0000(0x0004)
    float                                         VelocityScaleZ;                                               // 0x0004(0x0004)
    float                                         MaxLinearVelocity;                                            // 0x0008(0x0004)
    float                                         MaxAngularVelocity;                                           // 0x000C(0x0004)
    float                                         MaxLinearAcceleration;                                        // 0x0010(0x0004)
    float                                         MaxAngularAcceleration;                                       // 0x0014(0x0004)
    float                                         ExternalLinearDrag;                                           // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    FVector                                       ExternalLinearDragV;                                          // 0x0020(0x0018)
    FVector                                       ExternalLinearVelocity;                                       // 0x0038(0x0018)
    FVector                                       ExternalAngularVelocity;                                      // 0x0050(0x0018)
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x09A0
struct FAnimNode : public FAnimNode
{
    UPhysicsAsset*                                OverridePhysicsAsset;                                         // 0x00C8(0x0008)
    char                                          pa_00D0[0x0128]                                               // 0x00D0(0x0128)
    FVector                                       OverrideWorldGravity;                                         // 0x01F8(0x0018)
    FVector                                       ExternalForce;                                                // 0x0210(0x0018)
    FVector                                       ComponentLinearAccScale;                                      // 0x0228(0x0018)
    FVector                                       ComponentLinearVelScale;                                      // 0x0240(0x0018)
    FVector                                       ComponentAppliedLinearAccClamp;                               // 0x0258(0x0018)
    FSimSpaceSettings                             SimSpaceSettings;                                             // 0x0270(0x0068)
    float                                         CachedBoundsScale;                                            // 0x02D8(0x0004)
    FBoneReference                                BaseBoneRef;                                                  // 0x02DC(0x0010)
    enum class ECollisionChannel                  OverlapChannel;                                               // 0x02EC(0x0001)
    enum class ESimulationSpace                   SimulationSpace;                                              // 0x02ED(0x0001)
    bool                                          bForceDisableCollisionBetweenConstraintBodies;                // 0x02EE(0x0001)
    bool                                          bUseExternalClothCollision;                                   // 0x02EF(0x0001)
    char                                          pa_02F0[0x0001]                                               // 0x02F0(0x0001)
    char                                          bEnableWorldGeometry;                                         // 0x02F1(0x0001)
    char                                          bOverrideWorldGravity;                                        // 0x02F1(0x0001)
    char                                          bTransferBoneVelocities;                                      // 0x02F1(0x0001)
    char                                          bFreezeIncomingPoseOnStart;                                   // 0x02F1(0x0001)
    char                                          bClampLinearTranslationLimitToRefPose;                        // 0x02F1(0x0001)
    char                                          pa_02F2[0x0002]                                               // 0x02F2(0x0002)
    float                                         WorldSpaceMinimumScale;                                       // 0x02F4(0x0004)
    float                                         EvaluationResetTime;                                          // 0x02F8(0x0004)
    char                                          pa_02FC[0x0001]                                               // 0x02FC(0x0001)
    enum class ESimulationTiming                  SimulationTiming;                                             // 0x02FD(0x0001)
    char                                          pa_02FE[0x06A2]                                               // 0x02FE(0x06A2)
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x0088
struct FAnimNode : public FAnimNode
{
    FPoseLink                                     InputPose;                                                    // 0x0010(0x0010)
    float                                         DefaultChainLength;                                           // 0x0020(0x0004)
    FBoneReference                                ChainStartBone;                                               // 0x0024(0x0010)
    FBoneReference                                ChainEndBone;                                                 // 0x0034(0x0010)
    char                                          pa_0044[0x0004]                                               // 0x0044(0x0004)
    FVector                                       TargetLocation;                                               // 0x0048(0x0018)
    float                                         Alpha;                                                        // 0x0060(0x0004)
    char                                          pa_0064[0x0004]                                               // 0x0064(0x0004)
    FInputScaleBias                               AlphaScaleBias;                                               // 0x0068(0x0008)
    enum class EScaleChainInitialLength           ChainInitialLength;                                           // 0x0070(0x0001)
    char                                          pa_0071[0x0017]                                               // 0x0071(0x0017)
};


// ScriptStruct  AnimGraphRuntime.SplineIKCachedBoneData
// Struct Size::0x0014
struct FSplineIKCachedBoneData
{
    FBoneReference                                bone;                                                         // 0x0000(0x0010)
    int32_t                                       RefSkeletonIndex;                                             // 0x0010(0x0004)
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x0270
struct FAnimNode : public FAnimNode
{
    FBoneReference                                StartBone;                                                    // 0x00C8(0x0010)
    FBoneReference                                EndBone;                                                      // 0x00D8(0x0010)
    enum class ESplineBoneAxis                    BoneAxis;                                                     // 0x00E8(0x0001)
    bool                                          bAutoCalculateSpline;                                         // 0x00E9(0x0001)
    char                                          pa_00EA[0x0002]                                               // 0x00EA(0x0002)
    int32_t                                       PointCount;                                                   // 0x00EC(0x0004)
    TArray<FTransform>                            ControlPoints;                                                // 0x00F0(0x0010)
    float                                         Roll;                                                         // 0x0100(0x0004)
    float                                         TwistStart;                                                   // 0x0104(0x0004)
    float                                         TwistEnd;                                                     // 0x0108(0x0004)
    char                                          pa_010C[0x0004]                                               // 0x010C(0x0004)
    FAlphaBlend                                   TwistBlend;                                                   // 0x0110(0x0030)
    float                                         Stretch;                                                      // 0x0140(0x0004)
    float                                         Offset;                                                       // 0x0144(0x0004)
    char                                          pa_0148[0x0128]                                               // 0x0148(0x0128)
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x0158
struct FAnimNode : public FAnimNode
{
    FBoneReference                                SpringBone;                                                   // 0x00C8(0x0010)
    float                                         MaxDisplacement;                                              // 0x00D8(0x0004)
    float                                         SpringStiffness;                                              // 0x00DC(0x0004)
    float                                         SpringDamping;                                                // 0x00E0(0x0004)
    float                                         ErrorResetThresh;                                             // 0x00E4(0x0004)
    char                                          pa_00E8[0x006C]                                               // 0x00E8(0x006C)
    char                                          bLimitDisplacement;                                           // 0x0154(0x0001)
    char                                          bTranslateX;                                                  // 0x0154(0x0001)
    char                                          bTranslateY;                                                  // 0x0154(0x0001)
    char                                          bTranslateZ;                                                  // 0x0154(0x0001)
    char                                          bRotateX;                                                     // 0x0154(0x0001)
    char                                          bRotateY;                                                     // 0x0154(0x0001)
    char                                          bRotateZ;                                                     // 0x0154(0x0001)
    char                                          pa_0155[0x0003]                                               // 0x0155(0x0003)
};


// ScriptStruct  AnimGraphRuntime.RotationLimit
// Struct Size::0x0030
struct FRotationLimit
{
    FVector                                       LimitMin;                                                     // 0x0000(0x0018)
    FVector                                       LimitMax;                                                     // 0x0018(0x0018)
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x02A0
struct FAnimNode : public FAnimNode
{
    char                                          pa_00C8[0x0068]                                               // 0x00C8(0x0068)
    FBoneReference                                TrailBone;                                                    // 0x0130(0x0010)
    int32_t                                       ChainLength;                                                  // 0x0140(0x0004)
    enum class EAxis                              ChainBoneAxis;                                                // 0x0144(0x0001)
    char                                          bInvertChainBoneAxis;                                         // 0x0145(0x0001)
    char                                          bLimitStretch;                                                // 0x0145(0x0001)
    char                                          bLimitRotation;                                               // 0x0145(0x0001)
    char                                          bUsePlanarLimit;                                              // 0x0145(0x0001)
    char                                          bActorSpaceFakeVel;                                           // 0x0145(0x0001)
    char                                          bReorientParentToChild;                                       // 0x0145(0x0001)
    char                                          pa_0146[0x0002]                                               // 0x0146(0x0002)
    float                                         MaxDeltaTime;                                                 // 0x0148(0x0004)
    float                                         RelaxationSpeedScale;                                         // 0x014C(0x0004)
    FRuntimeFloatCurve                            TrailRelaxationSpeed;                                         // 0x0150(0x0088)
    FInputScaleBiasClamp                          RelaxationSpeedScaleInputProcessor;                           // 0x01D8(0x0030)
    TArray<FRotationLimit>                        RotationLimits;                                               // 0x0208(0x0010)
    TArray<FVector>                               RotationOffsets;                                              // 0x0218(0x0010)
    TArray<FAnimPhysPlanarLimit>                  PlanarLimits;                                                 // 0x0228(0x0010)
    float                                         StretchLimit;                                                 // 0x0238(0x0004)
    char                                          pa_023C[0x0004]                                               // 0x023C(0x0004)
    FVector                                       FakeVelocity;                                                 // 0x0240(0x0018)
    FBoneReference                                BaseJoint;                                                    // 0x0258(0x0010)
    float                                         LastBoneRotationAnimAlphaBlend;                               // 0x0268(0x0004)
    char                                          pa_026C[0x0034]                                               // 0x026C(0x0034)
};


// ScriptStruct  AnimGraphRuntime.ReferenceBoneFrame
// Struct Size::0x0030
struct FReferenceBoneFrame
{
    FBoneReference                                bone;                                                         // 0x0000(0x0010)
    FAxis                                         Axis;                                                         // 0x0010(0x0020)
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x0168
struct FAnimNode : public FAnimNode
{
    FReferenceBoneFrame                           BaseFrame;                                                    // 0x00C8(0x0030)
    FReferenceBoneFrame                           TwistFrame;                                                   // 0x00F8(0x0030)
    FAxis                                         TwistPlaneNormalAxis;                                         // 0x0128(0x0020)
    float                                         RangeMax;                                                     // 0x0148(0x0004)
    float                                         RemappedMin;                                                  // 0x014C(0x0004)
    float                                         RemappedMax;                                                  // 0x0150(0x0004)
    FAnimCurveParam                               Curve;                                                        // 0x0154(0x000C)
    char                                          pa_0160[0x0008]                                               // 0x0160(0x0008)
};


// ScriptStruct  Engine.AnimCurveParam
// Struct Size::0x000C
struct FAnimCurveParam
{
    FName                                         Name;                                                         // 0x0000(0x0008)
    char                                          pa_0008[0x0004]                                               // 0x0008(0x0004)
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x0270
struct FAnimNode : public FAnimNode
{
    FBoneReference                                IKBone;                                                       // 0x00C8(0x0010)
    float                                         StartStretchRatio;                                            // 0x00D8(0x0004)
    float                                         MaxStretchScale;                                              // 0x00DC(0x0004)
    FVector                                       EffectorLocation;                                             // 0x00E0(0x0018)
    char                                          pa_00F8[0x0008]                                               // 0x00F8(0x0008)
    FBoneSocketTarget                             EffectorTarget;                                               // 0x0100(0x0090)
    FVector                                       JointTargetLocation;                                          // 0x0190(0x0018)
    char                                          pa_01A8[0x0008]                                               // 0x01A8(0x0008)
    FBoneSocketTarget                             JointTarget;                                                  // 0x01B0(0x0090)
    FAxis                                         TwistAxis;                                                    // 0x0240(0x0020)
    enum class EBoneControlSpace                  EffectorLocationSpace;                                        // 0x0260(0x0001)
    enum class EBoneControlSpace                  JointTargetLocationSpace;                                     // 0x0261(0x0001)
    char                                          bAllowStretching;                                             // 0x0262(0x0001)
    char                                          bTakeRotationFromEffectorSpace;                               // 0x0262(0x0001)
    char                                          bMaintainEffectorRelRot;                                      // 0x0262(0x0001)
    char                                          bAllowTwist;                                                  // 0x0262(0x0001)
    char                                          pa_0263[0x000D]                                               // 0x0263(0x000D)
};


// ScriptStruct  AnimGraphRuntime.LinkedAnimGraphReference
// Struct Size::0x0010
struct FLinkedAnimGraphReference : public FAnimNodeReference
{
};


// ScriptStruct  AnimGraphRuntime.RBFEntry
// Struct Size::0x0010
struct FRBFEntry
{
    TArray<float>                                 Values;                                                       // 0x0000(0x0010)
};


// ScriptStruct  AnimGraphRuntime.RBFTarget
// Struct Size::0x00A0
struct FRBFTarget : public FRBFEntry
{
    float                                         ScaleFactor;                                                  // 0x0010(0x0004)
    bool                                          bApplyCustomCurve;                                            // 0x0014(0x0001)
    char                                          pa_0015[0x0003]                                               // 0x0015(0x0003)
    FRichCurve                                    CustomCurve;                                                  // 0x0018(0x0080)
    enum class ERBFDistanceMethod                 DistanceMethod;                                               // 0x0098(0x0001)
    enum class ERBFFunctionType                   FunctionType;                                                 // 0x0099(0x0001)
    char                                          pa_009A[0x0006]                                               // 0x009A(0x0006)
};


// ScriptStruct  AnimGraphRuntime.SequenceEvaluatorReference
// Struct Size::0x0010
struct FSequenceEvaluatorReference : public FAnimNodeReference
{
};


// ScriptStruct  AnimGraphRuntime.SequencePlayerReference
// Struct Size::0x0010
struct FSequencePlayerReference : public FAnimNodeReference
{
};


// ScriptStruct  AnimGraphRuntime.SkeletalControlReference
// Struct Size::0x0010
struct FSkeletalControlReference : public FAnimNodeReference
{
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x0020
struct FAnimNode : public FAnimNode
{
};


// ScriptStruct  AudioExtensions.AudioParameter
// Struct Size::0x00A0
struct FAudioParameter
{
    FName                                         ParamName;                                                    // 0x0000(0x0008)
    float                                         FloatParam;                                                   // 0x0008(0x0004)
    bool                                          BoolParam;                                                    // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
    int32_t                                       IntParam;                                                     // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    UObject*                                      ObjectParam;                                                  // 0x0018(0x0008)
    FString                                       StringParam;                                                  // 0x0020(0x0010)
    TArray<float>                                 ArrayFloatParam;                                              // 0x0030(0x0010)
    TArray<bool>                                  ArrayBoolParam;                                               // 0x0040(0x0010)
    TArray<int32_t>                               ArrayIntParam;                                                // 0x0050(0x0010)
    TArray<UObject*>                              ArrayObjectParam;                                             // 0x0060(0x0010)
    TArray<FString>                               ArrayStringParam;                                             // 0x0070(0x0010)
    enum class EAudioParameterType                ParamType;                                                    // 0x0080(0x0001)
    char                                          pa_0081[0x0003]                                               // 0x0081(0x0003)
    FName                                         TypeName;                                                     // 0x0084(0x0008)
    char                                          pa_008C[0x0014]                                               // 0x008C(0x0014)
};


// ScriptStruct  Constraints.ConstraintTickFunction
// Struct Size::0x0040
struct FConstraintTickFunction : public FTickFunction
{
    char                                          pa_0028[0x0018]                                               // 0x0028(0x0018)
};


// ScriptStruct  MovieSceneTracks.MovieScenePreAnimatedMaterialParameters
// Struct Size::0x0010
struct FMovieScenePreAnimatedMaterialParameters
{
    UMaterialInterface*                           PreviousMaterial;                                             // 0x0000(0x0008)
    UMaterialInterface*                           PreviousParameterContainer;                                   // 0x0008(0x0008)
};


// ScriptStruct  MovieSceneTracks.MovieSceneCameraShakeSourceTrigger
// Struct Size::0x0028
struct FMovieSceneCameraShakeSourceTrigger
{
    UCameraShakeBase*                             ShakeClass;                                                   // 0x0000(0x0008)
    float                                         PlayScale;                                                    // 0x0008(0x0004)
    enum class ECameraShakePlaySpace              PlaySpace;                                                    // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
    FRotator                                      UserDefinedPlaySpace;                                         // 0x0010(0x0018)
};


// ScriptStruct  MovieSceneTracks.MovieSceneCameraShakeSourceTriggerChannel
// Struct Size::0x00F8
struct FMovieSceneCameraShakeSourceTriggerChannel : public FMovieSceneChannel
{
    TArray<FFrameNumber>                          KeyTimes;                                                     // 0x0050(0x0010)
    TArray<FMovieSceneCameraShakeSourceTrigger>   KeyValues;                                                    // 0x0060(0x0010)
    char                                          pa_0070[0x0088]                                               // 0x0070(0x0088)
};


// ScriptStruct  MovieSceneTracks.MovieSceneDoublePerlinNoiseChannel
// Struct Size::0x0068
struct FMovieSceneDoublePerlinNoiseChannel : public FMovieSceneChannel
{
    FPerlinNoiseParams                            PerlinNoiseParams;                                            // 0x0050(0x0018)
};


// ScriptStruct  MovieSceneTracks.PerlinNoiseParams
// Struct Size::0x0018
struct FPerlinNoiseParams
{
    float                                         Frequency;                                                    // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    double                                        Amplitude;                                                    // 0x0008(0x0008)
    float                                         Offset;                                                       // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  MovieSceneTracks.MovieSceneEventPayloadVariable
// Struct Size::0x0010
struct FMovieSceneEventPayloadVariable
{
    FString                                       Value;                                                        // 0x0000(0x0010)
};


// ScriptStruct  MovieSceneTracks.MovieSceneEventPtrs
// Struct Size::0x0028
struct FMovieSceneEventPtrs
{
    UFunction*                                    Function;                                                     // 0x0000(0x0008)
    BoundObjectProperty                           BoundObjectProperty;                                          // 0x0008(0x0020)
};


// ScriptStruct  MovieSceneTracks.MovieSceneEvent
// Struct Size::0x0028
struct FMovieSceneEvent
{
    FMovieSceneEventPtrs                          Ptrs;                                                         // 0x0000(0x0028)
};


// ScriptStruct  MovieSceneTracks.MovieSceneEventChannel
// Struct Size::0x00F8
struct FMovieSceneEventChannel : public FMovieSceneChannel
{
    TArray<FFrameNumber>                          KeyTimes;                                                     // 0x0050(0x0010)
    TArray<FMovieSceneEvent>                      KeyValues;                                                    // 0x0060(0x0010)
    char                                          pa_0070[0x0088]                                               // 0x0070(0x0088)
};


// ScriptStruct  MovieSceneTracks.MovieSceneFloatPerlinNoiseChannel
// Struct Size::0x0068
struct FMovieSceneFloatPerlinNoiseChannel : public FMovieSceneChannel
{
    FPerlinNoiseParams                            PerlinNoiseParams;                                            // 0x0050(0x0018)
};


// ScriptStruct  MovieSceneTracks.MovieScene3DPathSectionTemplate
// Struct Size::0x0150
struct FMovieScene3DPathSectionTemplate : public FMovieSceneEvalTemplate
{
    FMovieSceneObjectBindingID                    PathBindingID;                                                // 0x0020(0x0018)
    FMovieSceneFloatChannel                       TimingCurve;                                                  // 0x0038(0x0110)
    enum class MovieScene3DPathSection            FrontAxisEnum;                                                // 0x0148(0x0001)
    enum class MovieScene3DPathSection            UpAxisEnum;                                                   // 0x0149(0x0001)
    char                                          pa_014A[0x0002]                                               // 0x014A(0x0002)
    char                                          bFollow;                                                      // 0x014C(0x0001)
    char                                          bReverse;                                                     // 0x014C(0x0001)
    char                                          bForceUpright;                                                // 0x014C(0x0001)
    char                                          pa_014D[0x0003]                                               // 0x014D(0x0003)
};


// ScriptStruct  MovieSceneTracks.MovieSceneActorReferenceSectionTemplate
// Struct Size::0x0158
struct FMovieSceneActorReferenceSectionTemplate : public FMovieSceneEvalTemplate
{
    FMovieScenePropertySectionData                PropertyData;                                                 // 0x0020(0x0018)
    FMovieSceneActorReferenceData                 ActorReferenceData;                                           // 0x0038(0x0120)
};


// ScriptStruct  MovieSceneTracks.MovieSceneActorReferenceData
// Struct Size::0x0120
struct FMovieSceneActorReferenceData : public FMovieSceneChannel
{
    TArray<FFrameNumber>                          KeyTimes;                                                     // 0x0050(0x0010)
    FMovieSceneActorReferenceKey                  DefaultValue;                                                 // 0x0060(0x0028)
    TArray<FMovieSceneActorReferenceKey>          KeyValues;                                                    // 0x0088(0x0010)
    char                                          pa_0098[0x0088]                                               // 0x0098(0x0088)
};


// ScriptStruct  MovieSceneTracks.MovieSceneActorReferenceKey
// Struct Size::0x0028
struct FMovieSceneActorReferenceKey
{
    FMovieSceneObjectBindingID                    Object;                                                       // 0x0000(0x0018)
    FName                                         ComponentName;                                                // 0x0018(0x0008)
    FName                                         SocketName;                                                   // 0x0020(0x0008)
};


// ScriptStruct  MovieSceneTracks.MovieSceneAudioSectionTemplate
// Struct Size::0x0028
struct FMovieSceneAudioSectionTemplate : public FMovieSceneEvalTemplate
{
    UMovieSceneAudioSection*                      AudioSection;                                                 // 0x0020(0x0008)
};


// ScriptStruct  MovieSceneTracks.MovieSceneCameraShakeSourceShakeSectionTemplate
// Struct Size::0x0050
struct FMovieSceneCameraShakeSourceShakeSectionTemplate : public FMovieSceneEvalTemplate
{
    FMovieSceneCameraShakeSectionData             SourceData;                                                   // 0x0020(0x0028)
    FFrameNumber                                  SectionStartTime;                                             // 0x0048(0x0004)
    FFrameNumber                                  SectionEndTime;                                               // 0x004C(0x0004)
};


// ScriptStruct  MovieSceneTracks.MovieSceneCameraShakeSectionData
// Struct Size::0x0028
struct FMovieSceneCameraShakeSectionData
{
    UCameraShakeBase*                             ShakeClass;                                                   // 0x0000(0x0008)
    float                                         PlayScale;                                                    // 0x0008(0x0004)
    enum class ECameraShakePlaySpace              PlaySpace;                                                    // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
    FRotator                                      UserDefinedPlaySpace;                                         // 0x0010(0x0018)
};


// ScriptStruct  MovieSceneTracks.MovieSceneCameraShakeSourceTriggerSectionTemplate
// Struct Size::0x0040
struct FMovieSceneCameraShakeSourceTriggerSectionTemplate : public FMovieSceneEvalTemplate
{
    TArray<FFrameNumber>                          TriggerTimes;                                                 // 0x0020(0x0010)
    TArray<FMovieSceneCameraShakeSourceTrigger>   TriggerValues;                                                // 0x0030(0x0010)
};


// ScriptStruct  MovieSceneTracks.MovieSceneCameraShakeSectionTemplate
// Struct Size::0x0050
struct FMovieSceneCameraShakeSectionTemplate : public FMovieSceneEvalTemplate
{
    FMovieSceneCameraShakeSectionData             SourceData;                                                   // 0x0020(0x0028)
    FFrameNumber                                  SectionStartTime;                                             // 0x0048(0x0004)
    char                                          pa_004C[0x0004]                                               // 0x004C(0x0004)
};


// ScriptStruct  MovieSceneTracks.MovieSceneColorSectionTemplate
// Struct Size::0x0480
struct FMovieSceneColorSectionTemplate : public FMovieScenePropertySectionTemplate
{
    FMovieSceneFloatChannel                       Curves;                                                       // 0x0038(0x0110)
    char                                          pa_0148[0x0330]                                               // 0x0148(0x0330)
    enum class EMovieSceneBlendType               BlendType;                                                    // 0x0478(0x0001)
    char                                          pa_0479[0x0007]                                               // 0x0479(0x0007)
};


// ScriptStruct  MovieSceneTracks.MovieSceneEventSectionTemplate
// Struct Size::0x0120
struct FMovieSceneEventSectionTemplate : public FMovieSceneEvalTemplate
{
    FMovieSceneEventSectionData                   EventData;                                                    // 0x0020(0x00F8)
    char                                          bFireEventsWhenForwards;                                      // 0x0118(0x0001)
    char                                          bFireEventsWhenBackwards;                                     // 0x0118(0x0001)
    char                                          pa_0119[0x0007]                                               // 0x0119(0x0007)
};


// ScriptStruct  MovieSceneTracks.MovieSceneEventSectionData
// Struct Size::0x00F8
struct FMovieSceneEventSectionData : public FMovieSceneChannel
{
    TArray<FFrameNumber>                          Times;                                                        // 0x0050(0x0010)
    TArray<FEventPayload>                         KeyValues;                                                    // 0x0060(0x0010)
    char                                          pa_0070[0x0088]                                               // 0x0070(0x0088)
};


// ScriptStruct  MovieSceneTracks.EventPayload
// Struct Size::0x0038
struct FEventPayload
{
    FName                                         EventName;                                                    // 0x0000(0x0008)
    FMovieSceneEventParameters                    Parameters;                                                   // 0x0008(0x0030)
};


// ScriptStruct  MovieSceneTracks.MovieSceneEventParameters
// Struct Size::0x0030
struct FMovieSceneEventParameters
{
    char                                          pa_0000[0x0030]                                               // 0x0000(0x0030)
};


// ScriptStruct  MovieSceneTracks.MovieSceneFadeSectionTemplate
// Struct Size::0x0148
struct FMovieSceneFadeSectionTemplate : public FMovieSceneEvalTemplate
{
    FMovieSceneFloatChannel                       FadeCurve;                                                    // 0x0020(0x0110)
    FLinearColor                                  FadeColor;                                                    // 0x0130(0x0010)
    char                                          bFadeAudio;                                                   // 0x0140(0x0001)
    char                                          pa_0141[0x0007]                                               // 0x0141(0x0007)
};


// ScriptStruct  MovieSceneTracks.MovieSceneObjectPropertyTemplate
// Struct Size::0x0170
struct FMovieSceneObjectPropertyTemplate : public FMovieScenePropertySectionTemplate
{
    FMovieSceneObjectPathChannel                  ObjectChannel;                                                // 0x0038(0x0138)
};


// ScriptStruct  MovieSceneTracks.MovieSceneParticleParameterSectionTemplate
// Struct Size::0x0080
struct FMovieSceneParticleParameterSectionTemplate : public FMovieSceneParameterSectionTemplate
{
};


// ScriptStruct  MovieSceneTracks.MovieSceneParticleSectionTemplate
// Struct Size::0x0128
struct FMovieSceneParticleSectionTemplate : public FMovieSceneEvalTemplate
{
    FMovieSceneParticleChannel                    ParticleKeys;                                                 // 0x0020(0x0108)
};


// ScriptStruct  MovieSceneTracks.MovieSceneParticleChannel
// Struct Size::0x0108
struct FMovieSceneParticleChannel : public FMovieSceneByteChannel
{
};


// ScriptStruct  MovieSceneTracks.MovieSceneBoolPropertySectionTemplate
// Struct Size::0x0138
struct FMovieSceneBoolPropertySectionTemplate : public FMovieScenePropertySectionTemplate
{
    FMovieSceneBoolChannel                        BoolCurve;                                                    // 0x0038(0x0100)
};


// ScriptStruct  MovieSceneTracks.MovieSceneStringPropertySectionTemplate
// Struct Size::0x0148
struct FMovieSceneStringPropertySectionTemplate : public FMovieScenePropertySectionTemplate
{
    FMovieSceneStringChannel                      StringCurve;                                                  // 0x0038(0x0110)
};


// ScriptStruct  MovieSceneTracks.MovieSceneSkeletalAnimationParams
// Struct Size::0x0150
struct FMovieSceneSkeletalAnimationParams
{
    UAnimSequenceBase*                            Animation;                                                    // 0x0000(0x0008)
    FFrameNumber                                  FirstLoopStartFrameOffset;                                    // 0x0008(0x0004)
    FFrameNumber                                  StartFrameOffset;                                             // 0x000C(0x0004)
    FFrameNumber                                  EndFrameOffset;                                               // 0x0010(0x0004)
    float                                         PlayRate;                                                     // 0x0014(0x0004)
    char                                          bReverse;                                                     // 0x0018(0x0001)
    char                                          pa_0019[0x0003]                                               // 0x0019(0x0003)
    FName                                         SlotName;                                                     // 0x001C(0x0008)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
    UMirrorDataTable*                             MirrorDataTable;                                              // 0x0028(0x0008)
    FMovieSceneFloatChannel                       Weight;                                                       // 0x0030(0x0110)
    bool                                          bSkipAnimNotifiers;                                           // 0x0140(0x0001)
    bool                                          bForceCustomMode;                                             // 0x0141(0x0001)
    enum class ESwapRootBone                      SwapRootBone;                                                 // 0x0142(0x0001)
    char                                          pa_0143[0x0001]                                               // 0x0143(0x0001)
    float                                         StartOffset;                                                  // 0x0144(0x0004)
    float                                         EndOffset;                                                    // 0x0148(0x0004)
    char                                          pa_014C[0x0004]                                               // 0x014C(0x0004)
};


// ScriptStruct  MovieSceneTracks.MovieSceneSkeletalAnimationSectionTemplateParameters
// Struct Size::0x0158
struct FMovieSceneSkeletalAnimationSectionTemplateParameters : public FMovieSceneSkeletalAnimationParams
{
    FFrameNumber                                  SectionStartTime;                                             // 0x0150(0x0004)
    FFrameNumber                                  SectionEndTime;                                               // 0x0154(0x0004)
};


// ScriptStruct  MovieSceneTracks.MovieSceneSkeletalAnimationSectionTemplate
// Struct Size::0x0178
struct FMovieSceneSkeletalAnimationSectionTemplate : public FMovieSceneEvalTemplate
{
    FMovieSceneSkeletalAnimationSectionTemplateParametersParams;                                                // 0x0020(0x0158)
};


// ScriptStruct  MovieSceneTracks.MovieSceneSlomoSectionTemplate
// Struct Size::0x0130
struct FMovieSceneSlomoSectionTemplate : public FMovieSceneEvalTemplate
{
    FMovieSceneFloatChannel                       SlomoCurve;                                                   // 0x0020(0x0110)
};


// ScriptStruct  MovieSceneTracks.MovieSceneVisibilitySectionTemplate
// Struct Size::0x0138
struct FMovieSceneVisibilitySectionTemplate : public FMovieSceneBoolPropertySectionTemplate
{
};


// ScriptStruct  MovieSceneTracks.LevelVisibilityComponentData
// Struct Size::0x0008
struct FLevelVisibilityComponentData
{
    UMovieSceneLevelVisibilitySection*            Section;                                                      // 0x0000(0x0008)
};


// ScriptStruct  MovieSceneTracks.MovieSceneDataLayerComponentData
// Struct Size::0x0008
struct FMovieSceneDataLayerComponentData
{
    UMovieSceneDataLayerSection*                  Section;                                                      // 0x0000(0x0008)
};


// ScriptStruct  MovieSceneTracks.ConstraintComponentData
// Struct Size::0x0018
struct FConstraintComponentData
{
    FName                                         ConstraintName;                                               // 0x0000(0x0008)
    char                                          pa_0008[0x0010]                                               // 0x0008(0x0010)
};


// ScriptStruct  MovieSceneTracks.MovieScene3DLocationKeyStruct
// Struct Size::0x0040
struct FMovieScene3DLocationKeyStruct : public FMovieSceneKeyStruct
{
    FVector                                       Location;                                                     // 0x0008(0x0018)
    FFrameNumber                                  Time;                                                         // 0x0020(0x0004)
    char                                          pa_0024[0x001C]                                               // 0x0024(0x001C)
};


// ScriptStruct  MovieSceneTracks.MovieScene3DRotationKeyStruct
// Struct Size::0x0040
struct FMovieScene3DRotationKeyStruct : public FMovieSceneKeyStruct
{
    FRotator                                      Rotation;                                                     // 0x0008(0x0018)
    FFrameNumber                                  Time;                                                         // 0x0020(0x0004)
    char                                          pa_0024[0x001C]                                               // 0x0024(0x001C)
};


// ScriptStruct  MovieSceneTracks.MovieScene3DScaleKeyStruct
// Struct Size::0x0030
struct FMovieScene3DScaleKeyStruct : public FMovieSceneKeyStruct
{
    FVector3f                                     Scale;                                                        // 0x0008(0x000C)
    FFrameNumber                                  Time;                                                         // 0x0014(0x0004)
    char                                          pa_0018[0x0018]                                               // 0x0018(0x0018)
};


// ScriptStruct  MovieSceneTracks.MovieScene3DTransformKeyStruct
// Struct Size::0x0060
struct FMovieScene3DTransformKeyStruct : public FMovieSceneKeyStruct
{
    FVector                                       Location;                                                     // 0x0008(0x0018)
    FRotator                                      Rotation;                                                     // 0x0020(0x0018)
    FVector3f                                     Scale;                                                        // 0x0038(0x000C)
    FFrameNumber                                  Time;                                                         // 0x0044(0x0004)
    char                                          pa_0048[0x0018]                                               // 0x0048(0x0018)
};


// ScriptStruct  MovieSceneTracks.MovieSceneTransformMask
// Struct Size::0x0004
struct FMovieSceneTransformMask
{
    uint32_t                                      mask;                                                         // 0x0000(0x0004)
};


// ScriptStruct  MovieSceneTracks.MovieSceneColorKeyStruct
// Struct Size::0x0038
struct FMovieSceneColorKeyStruct : public FMovieSceneKeyStruct
{
    FLinearColor                                  Color;                                                        // 0x0008(0x0010)
    FFrameNumber                                  Time;                                                         // 0x0018(0x0004)
    char                                          pa_001C[0x001C]                                               // 0x001C(0x001C)
};


// ScriptStruct  MovieSceneTracks.MovieSceneCVarOverrides
// Struct Size::0x0050
struct FMovieSceneCVarOverrides
{
    TMap<FString,FString>                         ValuesByCVar;                                                 // 0x0000(0x0050)
};


// ScriptStruct  MovieSceneTracks.MovieSceneFloatVectorKeyStructBase
// Struct Size::0x0028
struct FMovieSceneFloatVectorKeyStructBase : public FMovieSceneKeyStruct
{
    FFrameNumber                                  Time;                                                         // 0x0008(0x0004)
    char                                          pa_000C[0x001C]                                               // 0x000C(0x001C)
};


// ScriptStruct  MovieSceneTracks.MovieSceneVector2fKeyStruct
// Struct Size::0x0030
struct FMovieSceneVector2fKeyStruct : public FMovieSceneFloatVectorKeyStructBase
{
    FVector2f                                     Vector;                                                       // 0x0028(0x0008)
};


// ScriptStruct  MovieSceneTracks.MovieSceneVector3fKeyStruct
// Struct Size::0x0038
struct FMovieSceneVector3fKeyStruct : public FMovieSceneFloatVectorKeyStructBase
{
    FVector3f                                     Vector;                                                       // 0x0028(0x000C)
    char                                          pa_0034[0x0004]                                               // 0x0034(0x0004)
};


// ScriptStruct  MovieSceneTracks.MovieSceneVector4fKeyStruct
// Struct Size::0x0040
struct FMovieSceneVector4fKeyStruct : public FMovieSceneFloatVectorKeyStructBase
{
    char                                          pa_0028[0x0008]                                               // 0x0028(0x0008)
    FVector4f                                     Vector;                                                       // 0x0030(0x0010)
};


// ScriptStruct  MovieSceneTracks.MovieSceneDoubleVectorKeyStructBase
// Struct Size::0x0028
struct FMovieSceneDoubleVectorKeyStructBase : public FMovieSceneKeyStruct
{
    FFrameNumber                                  Time;                                                         // 0x0008(0x0004)
    char                                          pa_000C[0x001C]                                               // 0x000C(0x001C)
};


// ScriptStruct  MovieSceneTracks.MovieSceneVector2DKeyStruct
// Struct Size::0x0038
struct FMovieSceneVector2DKeyStruct : public FMovieSceneDoubleVectorKeyStructBase
{
    FVector2D                                     Vector;                                                       // 0x0028(0x0010)
};


// ScriptStruct  MovieSceneTracks.MovieSceneVector3dKeyStruct
// Struct Size::0x0040
struct FMovieSceneVector3dKeyStruct : public FMovieSceneDoubleVectorKeyStructBase
{
    FVector3d                                     Vector;                                                       // 0x0028(0x0018)
};


// ScriptStruct  MovieSceneTracks.MovieSceneVector4dKeyStruct
// Struct Size::0x0050
struct FMovieSceneVector4dKeyStruct : public FMovieSceneDoubleVectorKeyStructBase
{
    char                                          pa_0028[0x0008]                                               // 0x0028(0x0008)
    FVector4d                                     Vector;                                                       // 0x0030(0x0020)
};


// ScriptStruct  MovieSceneTracks.MovieSceneEventTriggerData
// Struct Size::0x0048
struct FMovieSceneEventTriggerData
{
    FMovieSceneEventPtrs                          Ptrs;                                                         // 0x0000(0x0028)
    FGuid                                         ObjectBindingID;                                              // 0x0028(0x0010)
    char                                          pa_0038[0x0010]                                               // 0x0038(0x0010)
};


// ScriptStruct  MovieSceneTracks.MovieSceneSkeletalAnimRootMotionTrackParams
// Struct Size::0x0030
struct FMovieSceneSkeletalAnimRootMotionTrackParams
{
    char                                          pa_0000[0x0030]                                               // 0x0000(0x0030)
};


// ScriptStruct  UMG.WidgetNavigationData
// Struct Size::0x0024
struct FWidgetNavigationData
{
    enum class EUINavigationRule                  Rule;                                                         // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FName                                         WidgetToFocus;                                                // 0x0004(0x0008)
    TWeakObjectPtr<UWidget>                       Widget;                                                       // 0x000C(0x0008)
    FDelegate                                     CustomDelegate;                                               // 0x0014(0x0010)
};


// ScriptStruct  UMG.MovieScene2DTransformMask
// Struct Size::0x0004
struct FMovieScene2DTransformMask
{
    uint32_t                                      mask;                                                         // 0x0000(0x0004)
};


// ScriptStruct  UMG.SequenceTickManagerWidgetData
// Struct Size::0x0003
struct FSequenceTickManagerWidgetData
{
    char                                          pa_0000[0x0003]                                               // 0x0000(0x0003)
};


// ScriptStruct  UMG.WidgetAnimationBinding
// Struct Size::0x0024
struct FWidgetAnimationBinding
{
    FName                                         WidgetName;                                                   // 0x0000(0x0008)
    FName                                         SlotWidgetName;                                               // 0x0008(0x0008)
    FGuid                                         AnimationGuid;                                                // 0x0010(0x0010)
    bool                                          bIsRootWidget;                                                // 0x0020(0x0001)
    char                                          pa_0021[0x0003]                                               // 0x0021(0x0003)
};


// ScriptStruct  UMG.BlueprintWidgetAnimationDelegateBinding
// Struct Size::0x001C
struct FBlueprintWidgetAnimationDelegateBinding
{
    enum class EWidgetAnimationEvent              Action;                                                       // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FName                                         AnimationToBind;                                              // 0x0004(0x0008)
    FName                                         FunctionNameToBind;                                           // 0x000C(0x0008)
    FName                                         UserTag;                                                      // 0x0014(0x0008)
};


// ScriptStruct  UMG.DynamicPropertyPath
// Struct Size::0x0028
struct FDynamicPropertyPath : public FCachedPropertyPath
{
};


// ScriptStruct  UMG.GameViewportWidgetSlot
// Struct Size::0x0048
struct FGameViewportWidgetSlot
{
    FAnchors                                      Anchors;                                                      // 0x0000(0x0020)
    FMargin                                       Offsets;                                                      // 0x0020(0x0010)
    FVector2D                                     Alignment;                                                    // 0x0030(0x0010)
    int32_t                                       ZOrder;                                                       // 0x0040(0x0004)
    char                                          pa_0044[0x0004]                                               // 0x0044(0x0004)
};


// ScriptStruct  UMG.AnchorData
// Struct Size::0x0040
struct FAnchorData
{
    FMargin                                       Offsets;                                                      // 0x0000(0x0010)
    FAnchors                                      Anchors;                                                      // 0x0010(0x0020)
    FVector2D                                     Alignment;                                                    // 0x0030(0x0010)
};


// ScriptStruct  UMG.RichTextStyleRow
// Struct Size::0x0350
struct FRichTextStyleRow : public FTableRowBase
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FTextBlockStyle                               TextStyle;                                                    // 0x0010(0x0340)
};


// ScriptStruct  UMG.RichImageRow
// Struct Size::0x00E0
struct FRichImageRow : public FTableRowBase
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FSlateBrush                                   Brush;                                                        // 0x0010(0x00D0)
};


// ScriptStruct  Engine.InstanceCacheDataBase
// Struct Size::0x0058
struct FInstanceCacheDataBase
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    TArray<char>                                  SavedProperties;                                              // 0x0008(0x0010)
    FDataCacheDuplicatedObjectData                UniqueTransientPackage;                                       // 0x0018(0x0010)
    TArray<FDataCacheDuplicatedObjectData>        DuplicatedObjects;                                            // 0x0028(0x0010)
    TArray<UObject*>                              ReferencedObjects;                                            // 0x0038(0x0010)
    TArray<FName>                                 ReferencedNames;                                              // 0x0048(0x0010)
};


// ScriptStruct  Engine.DataCacheDuplicatedObjectData
// Struct Size::0x0010
struct FDataCacheDuplicatedObjectData
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
};


// ScriptStruct  Engine.ActorComponentInstanceData
// Struct Size::0x0068
struct FActorComponentInstanceData : public FInstanceCacheDataBase
{
    UObject*                                      SourceComponentTemplate;                                      // 0x0058(0x0008)
    enum class EComponentCreationMethod           SourceComponentCreationMethod;                                // 0x0060(0x0001)
    char                                          pa_0061[0x0003]                                               // 0x0061(0x0003)
    int32_t                                       SourceComponentTypeSerializedIndex;                           // 0x0064(0x0004)
};


// ScriptStruct  Engine.SceneComponentInstanceData
// Struct Size::0x00B8
struct FSceneComponentInstanceData : public FActorComponentInstanceData
{
    TMap<USceneComponent*,FTransform>             AttachedInstanceComponents;                                   // 0x0068(0x0050)
};


// ScriptStruct  UMG.WidgetComponentInstanceData
// Struct Size::0x00C8
struct FWidgetComponentInstanceData : public FSceneComponentInstanceData
{
    char                                          pa_00B8[0x0010]                                               // 0x00B8(0x0010)
};


// ScriptStruct  UMG.SlateMeshVertex
// Struct Size::0x003C
struct FSlateMeshVertex
{
    FVector2f                                     position;                                                     // 0x0000(0x0008)
    FColor                                        Color;                                                        // 0x0008(0x0004)
    FVector2f                                     UV0;                                                          // 0x000C(0x0008)
    FVector2f                                     UV1;                                                          // 0x0014(0x0008)
    FVector2f                                     UV2;                                                          // 0x001C(0x0008)
    FVector2f                                     UV3;                                                          // 0x0024(0x0008)
    FVector2f                                     UV4;                                                          // 0x002C(0x0008)
    FVector2f                                     UV5;                                                          // 0x0034(0x0008)
};


// ScriptStruct  UMG.DelegateRuntimeBinding
// Struct Size::0x0050
struct FDelegateRuntimeBinding
{
    FString                                       ObjectName;                                                   // 0x0000(0x0010)
    FName                                         PropertyName;                                                 // 0x0010(0x0008)
    FName                                         FunctionName;                                                 // 0x0018(0x0008)
    FDynamicPropertyPath                          SourcePath;                                                   // 0x0020(0x0028)
    enum class EBindingKind                       Kind;                                                         // 0x0048(0x0001)
    char                                          pa_0049[0x0007]                                               // 0x0049(0x0007)
};


// ScriptStruct  TypedElementRuntime.TypedElementSelectionNormalizationOptions
// Struct Size::0x0002
struct FTypedElementSelectionNormalizationOptions
{
    bool                                          bExpandGroups;                                                // 0x0000(0x0001)
    bool                                          bFollowAttachment;                                            // 0x0001(0x0001)
};


// ScriptStruct  CinematicCamera.CameraFilmbackSettings
// Struct Size::0x000C
struct FCameraFilmbackSettings
{
    float                                         SensorWidth;                                                  // 0x0000(0x0004)
    float                                         SensorHeight;                                                 // 0x0004(0x0004)
    float                                         SensorAspectRatio;                                            // 0x0008(0x0004)
};


// ScriptStruct  CinematicCamera.NamedFilmbackPreset
// Struct Size::0x0020
struct FNamedFilmbackPreset
{
    FString                                       Name;                                                         // 0x0000(0x0010)
    FCameraFilmbackSettings                       FilmbackSettings;                                             // 0x0010(0x000C)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  CinematicCamera.CameraLensSettings
// Struct Size::0x001C
struct FCameraLensSettings
{
    float                                         MinFocalLength;                                               // 0x0000(0x0004)
    float                                         MaxFocalLength;                                               // 0x0004(0x0004)
    float                                         MinFStop;                                                     // 0x0008(0x0004)
    float                                         MaxFStop;                                                     // 0x000C(0x0004)
    float                                         MinimumFocusDistance;                                         // 0x0010(0x0004)
    float                                         SqueezeFactor;                                                // 0x0014(0x0004)
    int32_t                                       DiaphragmBladeCount;                                          // 0x0018(0x0004)
};


// ScriptStruct  CinematicCamera.NamedLensPreset
// Struct Size::0x0030
struct FNamedLensPreset
{
    FString                                       Name;                                                         // 0x0000(0x0010)
    FCameraLensSettings                           LensSettings;                                                 // 0x0010(0x001C)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
};


// ScriptStruct  CinematicCamera.PlateCropSettings
// Struct Size::0x0004
struct FPlateCropSettings
{
    float                                         AspectRatio;                                                  // 0x0000(0x0004)
};


// ScriptStruct  CinematicCamera.NamedPlateCropPreset
// Struct Size::0x0018
struct FNamedPlateCropPreset
{
    FString                                       Name;                                                         // 0x0000(0x0010)
    FPlateCropSettings                            CropSettings;                                                 // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  CinematicCamera.CameraTrackingFocusSettings
// Struct Size::0x0050
struct FCameraTrackingFocusSettings
{
    TSoftObjectPtr<AActor>                        ActorToTrack;                                                 // 0x0000(0x0030)
    FVector                                       RelativeOffset;                                               // 0x0030(0x0018)
    char                                          bDrawDebugTrackingFocusPoint;                                 // 0x0048(0x0001)
    char                                          pa_0049[0x0007]                                               // 0x0049(0x0007)
};


// ScriptStruct  CinematicCamera.CameraFocusSettings
// Struct Size::0x0068
struct FCameraFocusSettings
{
    enum class ECameraFocusMethod                 FocusMethod;                                                  // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         ManualFocusDistance;                                          // 0x0004(0x0004)
    FCameraTrackingFocusSettings                  TrackingFocusSettings;                                        // 0x0008(0x0050)
    char                                          bSmoothFocusChanges;                                          // 0x0058(0x0001)
    char                                          pa_0059[0x0003]                                               // 0x0059(0x0003)
    float                                         FocusSmoothingInterpSpeed;                                    // 0x005C(0x0004)
    float                                         FocusOffset;                                                  // 0x0060(0x0004)
    char                                          pa_0064[0x0004]                                               // 0x0064(0x0004)
};


// ScriptStruct  CinematicCamera.CameraLookatTrackingSettings
// Struct Size::0x0070
struct FCameraLookatTrackingSettings
{
    char                                          bEnableLookAtTracking;                                        // 0x0000(0x0001)
    char                                          bDrawDebugLookAtTrackingPosition;                             // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         LookAtTrackingInterpSpeed;                                    // 0x0004(0x0004)
    char                                          pa_0008[0x0018]                                               // 0x0008(0x0018)
    TSoftObjectPtr<AActor>                        ActorToTrack;                                                 // 0x0020(0x0030)
    FVector                                       RelativeOffset;                                               // 0x0050(0x0018)
    char                                          bAllowRoll;                                                   // 0x0068(0x0001)
    char                                          pa_0069[0x0007]                                               // 0x0069(0x0007)
};


// ScriptStruct  AudioPlatformConfiguration.PlatformRuntimeAudioCompressionOverrides
// Struct Size::0x0010
struct FPlatformRuntimeAudioCompressionOverrides
{
    bool                                          bOverrideCompressionTimes;                                    // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         DurationThreshold;                                            // 0x0004(0x0004)
    int32_t                                       MaxNumRandomBranches;                                         // 0x0008(0x0004)
    int32_t                                       SoundCueQualityIndex;                                         // 0x000C(0x0004)
};


// ScriptStruct  AudioMixer.SubmixEffectDynamicProcessorFilterSettings
// Struct Size::0x000C
struct FSubmixEffectDynamicProcessorFilterSettings
{
    char                                          bEnabled;                                                     // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         Cutoff;                                                       // 0x0004(0x0004)
    float                                         GainDb;                                                       // 0x0008(0x0004)
};


// ScriptStruct  AudioMixer.SubmixEffectDynamicsProcessorSettings
// Struct Size::0x0060
struct FSubmixEffectDynamicsProcessorSettings
{
    enum class ESubmixEffectDynamicsProcessorType DynamicsProcessorType;                                        // 0x0000(0x0001)
    enum class ESubmixEffectDynamicsPeakMode      PeakMode;                                                     // 0x0001(0x0001)
    enum class ESubmixEffectDynamicsChannelLinkModeLinkMode;                                                    // 0x0002(0x0001)
    char                                          pa_0003[0x0001]                                               // 0x0003(0x0001)
    float                                         InputGainDb;                                                  // 0x0004(0x0004)
    float                                         ThresholdDb;                                                  // 0x0008(0x0004)
    float                                         Ratio;                                                        // 0x000C(0x0004)
    float                                         KneeBandwidthDb;                                              // 0x0010(0x0004)
    float                                         LookAheadMsec;                                                // 0x0014(0x0004)
    float                                         AttackTimeMsec;                                               // 0x0018(0x0004)
    float                                         ReleaseTimeMsec;                                              // 0x001C(0x0004)
    enum class ESubmixEffectDynamicsKeySource     KeySource;                                                    // 0x0020(0x0001)
    char                                          pa_0021[0x0007]                                               // 0x0021(0x0007)
    UAudioBus*                                    ExternalAudioBus;                                             // 0x0028(0x0008)
    USoundSubmix*                                 ExternalSubmix;                                               // 0x0030(0x0008)
    char                                          bChannelLinked;                                               // 0x0038(0x0001)
    char                                          bAnalogMode;                                                  // 0x0038(0x0001)
    char                                          bBypass;                                                      // 0x0038(0x0001)
    char                                          bKeyAudition;                                                 // 0x0038(0x0001)
    char                                          pa_0039[0x0003]                                               // 0x0039(0x0003)
    float                                         KeyGainDb;                                                    // 0x003C(0x0004)
    float                                         OutputGainDb;                                                 // 0x0040(0x0004)
    FSubmixEffectDynamicProcessorFilterSettings   KeyHighshelf;                                                 // 0x0044(0x000C)
    FSubmixEffectDynamicProcessorFilterSettings   KeyLowshelf;                                                  // 0x0050(0x000C)
    char                                          pa_005C[0x0004]                                               // 0x005C(0x0004)
};


// ScriptStruct  AudioMixer.SubmixEffectEQBand
// Struct Size::0x0010
struct FSubmixEffectEQBand
{
    float                                         Frequency;                                                    // 0x0000(0x0004)
    float                                         Bandwidth;                                                    // 0x0004(0x0004)
    float                                         GainDb;                                                       // 0x0008(0x0004)
    char                                          bEnabled;                                                     // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
};


// ScriptStruct  AudioMixer.SubmixEffectSubmixEQSettings
// Struct Size::0x0010
struct FSubmixEffectSubmixEQSettings
{
    TArray<FSubmixEffectEQBand>                   EQBands;                                                      // 0x0000(0x0010)
};


// ScriptStruct  AudioMixer.SubmixEffectReverbSettings
// Struct Size::0x0040
struct FSubmixEffectReverbSettings
{
    bool                                          bBypassEarlyReflections;                                      // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         ReflectionsDelay;                                             // 0x0004(0x0004)
    float                                         GainHF;                                                       // 0x0008(0x0004)
    float                                         ReflectionsGain;                                              // 0x000C(0x0004)
    bool                                          bBypassLateReflections;                                       // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
    float                                         LateDelay;                                                    // 0x0014(0x0004)
    float                                         DecayTime;                                                    // 0x0018(0x0004)
    float                                         Density;                                                      // 0x001C(0x0004)
    float                                         Diffusion;                                                    // 0x0020(0x0004)
    float                                         AirAbsorptionGainHF;                                          // 0x0024(0x0004)
    float                                         DecayHFRatio;                                                 // 0x0028(0x0004)
    float                                         LateGain;                                                     // 0x002C(0x0004)
    float                                         Gain;                                                         // 0x0030(0x0004)
    float                                         WetLevel;                                                     // 0x0034(0x0004)
    float                                         DryLevel;                                                     // 0x0038(0x0004)
    bool                                          bBypass;                                                      // 0x003C(0x0001)
    char                                          pa_003D[0x0003]                                               // 0x003D(0x0003)
};


// ScriptStruct  JsonUtilities.JsonObjectWrapper
// Struct Size::0x0020
struct FJsonObjectWrapper
{
    FString                                       JsonString;                                                   // 0x0000(0x0010)
    char                                          pa_0010[0x0010]                                               // 0x0010(0x0010)
};


// ScriptStruct  AssetRegistry.TagAndValue
// Struct Size::0x0018
struct FTagAndValue
{
    FName                                         Tag;                                                          // 0x0000(0x0008)
    FString                                       Value;                                                        // 0x0008(0x0010)
};


// ScriptStruct  AssetRegistry.AssetRegistryDependencyOptions
// Struct Size::0x0005
struct FAssetRegistryDependencyOptions
{
    bool                                          bIncludeSoftPackageReferences;                                // 0x0000(0x0001)
    bool                                          bIncludeHardPackageReferences;                                // 0x0001(0x0001)
    bool                                          bIncludeSearchableNames;                                      // 0x0002(0x0001)
    bool                                          bIncludeSoftManagementReferences;                             // 0x0003(0x0001)
    bool                                          bIncludeHardManagementReferences;                             // 0x0004(0x0001)
};


// ScriptStruct  EngineMessages.EngineServicePing
// Struct Size::0x0001
struct FEngineServicePing
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  EngineMessages.EngineServicePong
// Struct Size::0x0050
struct FEngineServicePong
{
    FString                                       CurrentLevel;                                                 // 0x0000(0x0010)
    int32_t                                       EngineVersion;                                                // 0x0010(0x0004)
    bool                                          HasBegunPlay;                                                 // 0x0014(0x0001)
    char                                          pa_0015[0x0003]                                               // 0x0015(0x0003)
    FGuid                                         InstanceId;                                                   // 0x0018(0x0010)
    FString                                       InstanceType;                                                 // 0x0028(0x0010)
    FGuid                                         SessionId;                                                    // 0x0038(0x0010)
    float                                         WorldTimeSeconds;                                             // 0x0048(0x0004)
    char                                          pa_004C[0x0004]                                               // 0x004C(0x0004)
};


// ScriptStruct  EngineMessages.EngineServiceAuthDeny
// Struct Size::0x0020
struct FEngineServiceAuthDeny
{
    FString                                       UserName;                                                     // 0x0000(0x0010)
    FString                                       UserToDeny;                                                   // 0x0010(0x0010)
};


// ScriptStruct  EngineMessages.EngineServiceAuthGrant
// Struct Size::0x0020
struct FEngineServiceAuthGrant
{
    FString                                       UserName;                                                     // 0x0000(0x0010)
    FString                                       UserToGrant;                                                  // 0x0010(0x0010)
};


// ScriptStruct  EngineMessages.EngineServiceExecuteCommand
// Struct Size::0x0020
struct FEngineServiceExecuteCommand
{
    FString                                       Command;                                                      // 0x0000(0x0010)
    FString                                       UserName;                                                     // 0x0010(0x0010)
};


// ScriptStruct  EngineMessages.EngineServiceTerminate
// Struct Size::0x0010
struct FEngineServiceTerminate
{
    FString                                       UserName;                                                     // 0x0000(0x0010)
};


// ScriptStruct  EngineMessages.EngineServiceNotification
// Struct Size::0x0018
struct FEngineServiceNotification
{
    FString                                       Text;                                                         // 0x0000(0x0010)
    double                                        TimeSeconds;                                                  // 0x0010(0x0008)
};


// ScriptStruct  IrisStub.PolymorphicArrayStructNetSerializerConfig
// Struct Size::0x0001
struct FPolymorphicArrayStructNetSerializerConfig : public FNetSerializerConfig
{
};


// ScriptStruct  GameplayTags.GameplayTagContainerNetSerializerConfig
// Struct Size::0x0001
struct FGameplayTagContainerNetSerializerConfig : public FNetSerializerConfig
{
};


// ScriptStruct  GameplayTags.GameplayTagNetSerializerConfig
// Struct Size::0x0001
struct FGameplayTagNetSerializerConfig : public FNetSerializerConfig
{
};


// ScriptStruct  GameplayTags.GameplayTagContainerNetSerializerSerializationHelper
// Struct Size::0x0010
struct FGameplayTagContainerNetSerializerSerializationHelper
{
    TArray<FGameplayTag>                          GameplayTags;                                                 // 0x0000(0x0010)
};


// ScriptStruct  GameplayTags.GameplayTagReferenceHelper
// Struct Size::0x0010
struct FGameplayTagReferenceHelper
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
};


// ScriptStruct  GameplayTags.GameplayTagCreationWidgetHelper
// Struct Size::0x0001
struct FGameplayTagCreationWidgetHelper
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  GameplayTags.GameplayTagRedirect
// Struct Size::0x0010
struct FGameplayTagRedirect
{
    FName                                         OldTagName;                                                   // 0x0000(0x0008)
    FName                                         NewTagName;                                                   // 0x0008(0x0008)
};


// ScriptStruct  GameplayTags.GameplayTagTableRow
// Struct Size::0x0020
struct FGameplayTagTableRow : public FTableRowBase
{
    FName                                         Tag;                                                          // 0x0008(0x0008)
    FString                                       DevComment;                                                   // 0x0010(0x0010)
};


// ScriptStruct  GameplayTags.RestrictedGameplayTagTableRow
// Struct Size::0x0028
struct FRestrictedGameplayTagTableRow : public FGameplayTagTableRow
{
    bool                                          bAllowNonRestrictedChildren;                                  // 0x0020(0x0001)
    char                                          pa_0021[0x0007]                                               // 0x0021(0x0007)
};


// ScriptStruct  GameplayTags.GameplayTagSource
// Struct Size::0x0020
struct FGameplayTagSource
{
    FName                                         SourceName;                                                   // 0x0000(0x0008)
    enum class EGameplayTagSourceType             SourceType;                                                   // 0x0008(0x0001)
    char                                          pa_0009[0x0007]                                               // 0x0009(0x0007)
    UGameplayTagsList*                            SourceTagList;                                                // 0x0010(0x0008)
    URestrictedGameplayTagsList*                  SourceRestrictedTagList;                                      // 0x0018(0x0008)
};


// ScriptStruct  GameplayTags.GameplayTagNode
// Struct Size::0x0050
struct FGameplayTagNode
{
    char                                          pa_0000[0x0050]                                               // 0x0000(0x0050)
};


// ScriptStruct  GameplayTags.GameplayTagCategoryRemap
// Struct Size::0x0020
struct FGameplayTagCategoryRemap
{
    FString                                       BaseCategory;                                                 // 0x0000(0x0010)
    TArray<FString>                               RemapCategories;                                              // 0x0010(0x0010)
};


// ScriptStruct  GameplayTags.RestrictedConfigInfo
// Struct Size::0x0020
struct FRestrictedConfigInfo
{
    FString                                       RestrictedConfigName;                                         // 0x0000(0x0010)
    TArray<FString>                               Owners;                                                       // 0x0010(0x0010)
};


// ScriptStruct  ClothingSystemRuntimeInterface.ClothCollisionPrim
// Struct Size::0x0020
struct FClothCollisionPrim
{
    int32_t                                       BoneIndex;                                                    // 0x0000(0x0004)
    float                                         Radius;                                                       // 0x0004(0x0004)
    FVector                                       LocalPosition;                                                // 0x0008(0x0018)
};


// ScriptStruct  ClothingSystemRuntimeInterface.ClothCollisionPrim
// Struct Size::0x0008
struct FClothCollisionPrim
{
    int32_t                                       SphereIndices;                                                // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
};


// ScriptStruct  ClothingSystemRuntimeInterface.ClothCollisionPrim
// Struct Size::0x0030
struct FClothCollisionPrim
{
    FPlane                                        Plane;                                                        // 0x0000(0x0020)
    TArray<int32_t>                               Indices;                                                      // 0x0020(0x0010)
};


// ScriptStruct  ClothingSystemRuntimeInterface.ClothCollisionPrim
// Struct Size::0x0028
struct FClothCollisionPrim
{
    TArray<FClothCollisionPrim>                   Faces;                                                        // 0x0000(0x0010)
    TArray<FVector>                               SurfacePoints;                                                // 0x0010(0x0010)
    int32_t                                       BoneIndex;                                                    // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
};


// ScriptStruct  ClothingSystemRuntimeInterface.ClothCollisionPrim
// Struct Size::0x0060
struct FClothCollisionPrim
{
    FVector                                       LocalPosition;                                                // 0x0000(0x0018)
    char                                          pa_0018[0x0008]                                               // 0x0018(0x0008)
    FQuat                                         LocalRotation;                                                // 0x0020(0x0020)
    FVector                                       HalfExtents;                                                  // 0x0040(0x0018)
    int32_t                                       BoneIndex;                                                    // 0x0058(0x0004)
    char                                          pa_005C[0x0004]                                               // 0x005C(0x0004)
};


// ScriptStruct  ClothingSystemRuntimeInterface.ClothVertBoneData
// Struct Size::0x004C
struct FClothVertBoneData
{
    int32_t                                       NumInfluences;                                                // 0x0000(0x0004)
    uint16_t                                      BoneIndices;                                                  // 0x0004(0x0002)
    char                                          pa_0006[0x0016]                                               // 0x0006(0x0016)
    float                                         BoneWeights;                                                  // 0x001C(0x0004)
    char                                          pa_0020[0x002C]                                               // 0x0020(0x002C)
};


// ScriptStruct  ClothingSystemRuntimeInterface.ClothCollisionData
// Struct Size::0x0040
struct FClothCollisionData
{
    TArray<FClothCollisionPrim>                   Spheres;                                                      // 0x0000(0x0010)
    TArray<FClothCollisionPrim>                   SphereConnections;                                            // 0x0010(0x0010)
    TArray<FClothCollisionPrim>                   Convexes;                                                     // 0x0020(0x0010)
    TArray<FClothCollisionPrim>                   Boxes;                                                        // 0x0030(0x0010)
};


// ScriptStruct  MediaUtils.MediaPlayerTrackOptions
// Struct Size::0x001C
struct FMediaPlayerTrackOptions
{
    int32_t                                       Audio;                                                        // 0x0000(0x0004)
    int32_t                                       Caption;                                                      // 0x0004(0x0004)
    int32_t                                       MetaData;                                                     // 0x0008(0x0004)
    int32_t                                       Script;                                                       // 0x000C(0x0004)
    int32_t                                       Subtitle;                                                     // 0x0010(0x0004)
    int32_t                                       Text;                                                         // 0x0014(0x0004)
    int32_t                                       Video;                                                        // 0x0018(0x0004)
};


// ScriptStruct  MediaUtils.MediaPlayerOptions
// Struct Size::0x0030
struct FMediaPlayerOptions
{
    FMediaPlayerTrackOptions                      Tracks;                                                       // 0x0000(0x001C)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    FTimespan                                     SeekTime;                                                     // 0x0020(0x0008)
    enum class EMediaPlayerOptionBooleanOverride  PlayOnOpen;                                                   // 0x0028(0x0001)
    enum class EMediaPlayerOptionBooleanOverride  Loop;                                                         // 0x0029(0x0001)
    char                                          pa_002A[0x0006]                                               // 0x002A(0x0006)
};


// ScriptStruct  MediaAssets.MediaSoundComponentSpectralData
// Struct Size::0x0008
struct FMediaSoundComponentSpectralData
{
    float                                         FrequencyHz;                                                  // 0x0000(0x0004)
    float                                         Magnitude;                                                    // 0x0004(0x0004)
};


// ScriptStruct  MediaAssets.MediaSourceCacheSettings
// Struct Size::0x0008
struct FMediaSourceCacheSettings
{
    bool                                          bOverride;                                                    // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         TimeToLookAhead;                                              // 0x0004(0x0004)
};


// ScriptStruct  MediaAssets.MediaCaptureDevice
// Struct Size::0x0028
struct FMediaCaptureDevice
{
    FText                                         DisplayName;                                                  // 0x0000(0x0018)
    FString                                       URL;                                                          // 0x0018(0x0010)
};


// ScriptStruct  Engine.RepAttachment
// Struct Size::0x0060
struct FRepAttachment
{
    AActor*                                       AttachParent;                                                 // 0x0000(0x0008)
    FVector                                       LocationOffset;                                               // 0x0008(0x0018)
    FVector                                       RelativeScale3D;                                              // 0x0020(0x0018)
    FRotator                                      RotationOffset;                                               // 0x0038(0x0018)
    FName                                         AttachSocket;                                                 // 0x0050(0x0008)
    USceneComponent*                              AttachComponent;                                              // 0x0058(0x0008)
};


// ScriptStruct  Engine.ActorTickFunction
// Struct Size::0x0030
struct FActorTickFunction : public FTickFunction
{
    char                                          pa_0028[0x0008]                                               // 0x0028(0x0008)
};


// ScriptStruct  LevelSequence.LevelSequenceCameraSettings
// Struct Size::0x0002
struct FLevelSequenceCameraSettings
{
    bool                                          bOverrideAspectRatioAxisConstraint;                           // 0x0000(0x0001)
    enum class EAspectRatioAxisConstraint         AspectRatioAxisConstraint;                                    // 0x0001(0x0001)
};


// ScriptStruct  LevelSequence.LevelSequenceLegacyObjectReference
// Struct Size::0x0020
struct FLevelSequenceLegacyObjectReference
{
    char                                          pa_0000[0x0020]                                               // 0x0000(0x0020)
};


// ScriptStruct  LevelSequence.LevelSequenceObjectReferenceMap
// Struct Size::0x0050
struct FLevelSequenceObjectReferenceMap
{
    char                                          pa_0000[0x0050]                                               // 0x0000(0x0050)
};


// ScriptStruct  LevelSequence.BoundActorProxy
// Struct Size::0x0001
struct FBoundActorProxy
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  LevelSequence.LevelSequenceAnimSequenceLinkItem
// Struct Size::0x0038
struct FLevelSequenceAnimSequenceLinkItem
{
    FGuid                                         SkelTrackGuid;                                                // 0x0000(0x0010)
    FSoftObjectPath                               PathToAnimSequence;                                           // 0x0010(0x0020)
    bool                                          bExportTransforms;                                            // 0x0030(0x0001)
    bool                                          bExportMorphTargets;                                          // 0x0031(0x0001)
    bool                                          bExportAttributeCurves;                                       // 0x0032(0x0001)
    bool                                          bExportMaterialCurves;                                        // 0x0033(0x0001)
    enum class EAnimInterpolationType             Interpolation;                                                // 0x0034(0x0001)
    enum class ERichCurveInterpMode               CurveInterpolation;                                           // 0x0035(0x0001)
    bool                                          bRecordInWorldSpace;                                          // 0x0036(0x0001)
    bool                                          bEvaluateAllSkeletalMeshComponents;                           // 0x0037(0x0001)
};


// ScriptStruct  LevelSequence.LevelSequenceBindingReference
// Struct Size::0x0040
struct FLevelSequenceBindingReference
{
    FString                                       PackageName;                                                  // 0x0000(0x0010)
    FSoftObjectPath                               ExternalObjectPath;                                           // 0x0010(0x0020)
    FString                                       ObjectPath;                                                   // 0x0030(0x0010)
};


// ScriptStruct  LevelSequence.LevelSequenceBindingReferenceArray
// Struct Size::0x0010
struct FLevelSequenceBindingReferenceArray
{
    TArray<FLevelSequenceBindingReference>        References;                                                   // 0x0000(0x0010)
};


// ScriptStruct  LevelSequence.LevelSequenceBindingReferences
// Struct Size::0x00F0
struct FLevelSequenceBindingReferences
{
    TMap<FGuid,FLevelSequenceBindingReferenceArray>BindingIdToReferences;                                       // 0x0000(0x0050)
    TSet<FGuid>                                   AnimSequenceInstances;                                        // 0x0050(0x0050)
    TSet<FGuid>                                   PostProcessInstances;                                         // 0x00A0(0x0050)
};


// ScriptStruct  LevelSequence.LevelSequenceObject
// Struct Size::0x0038
struct FLevelSequenceObject
{
    UObject*                                      ObjectOrOwner;                                                // 0x0000(0x001C)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    FString                                       ComponentName;                                                // 0x0020(0x0010)
    TWeakObjectPtr<UObject>                       CachedComponent;                                              // 0x0030(0x0008)
};


// ScriptStruct  LevelSequence.LevelSequenceSnapshotSettings
// Struct Size::0x0001
struct FLevelSequenceSnapshotSettings
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  LevelSequence.LevelSequencePlayerSnapshot
// Struct Size::0x00B0
struct FLevelSequencePlayerSnapshot
{
    FString                                       MasterName;                                                   // 0x0000(0x0010)
    FQualifiedFrameTime                           MasterTime;                                                   // 0x0010(0x0010)
    FQualifiedFrameTime                           SourceTime;                                                   // 0x0020(0x0010)
    FString                                       CurrentShotName;                                              // 0x0030(0x0010)
    FQualifiedFrameTime                           CurrentShotLocalTime;                                         // 0x0040(0x0010)
    FQualifiedFrameTime                           CurrentShotSourceTime;                                        // 0x0050(0x0010)
    FString                                       SourceTimecode;                                               // 0x0060(0x0010)
    TSoftObjectPtr<UCameraComponent>              CameraComponent;                                              // 0x0070(0x0030)
    ULevelSequence*                               ActiveShot;                                                   // 0x00A0(0x0008)
    FMovieSceneSequenceID                         ShotID;                                                       // 0x00A8(0x0004)
    char                                          pa_00AC[0x0004]                                               // 0x00AC(0x0004)
};


// ScriptStruct  MovieSceneCapture.CompositionGraphCapturePasses
// Struct Size::0x0010
struct FCompositionGraphCapturePasses
{
    TArray<FString>                               Value;                                                        // 0x0000(0x0010)
};


// ScriptStruct  MovieSceneCapture.CaptureResolution
// Struct Size::0x0008
struct FCaptureResolution
{
    int32_t                                       ResX;                                                         // 0x0000(0x0004)
    int32_t                                       ResY;                                                         // 0x0004(0x0004)
};


// ScriptStruct  MovieSceneCapture.MovieSceneCaptureSettings
// Struct Size::0x0070
struct FMovieSceneCaptureSettings
{
    FDirectoryPath                                OutputDirectory;                                              // 0x0000(0x0010)
    AGameModeBase*                                GameModeOverride;                                             // 0x0010(0x0008)
    FString                                       OutputFormat;                                                 // 0x0018(0x0010)
    bool                                          bOverwriteExisting;                                           // 0x0028(0x0001)
    bool                                          bUseRelativeFrameNumbers;                                     // 0x0029(0x0001)
    char                                          pa_002A[0x0002]                                               // 0x002A(0x0002)
    int32_t                                       HandleFrames;                                                 // 0x002C(0x0004)
    FString                                       MovieExtension;                                               // 0x0030(0x0010)
    char                                          ZeroPadFrameNumbers;                                          // 0x0040(0x0001)
    char                                          pa_0041[0x0003]                                               // 0x0041(0x0003)
    FFrameRate                                    FrameRate;                                                    // 0x0044(0x0008)
    bool                                          bUseCustomFrameRate;                                          // 0x004C(0x0001)
    char                                          pa_004D[0x0003]                                               // 0x004D(0x0003)
    FFrameRate                                    CustomFrameRate;                                              // 0x0050(0x0008)
    FCaptureResolution                            Resolution;                                                   // 0x0058(0x0008)
    bool                                          bEnableTextureStreaming;                                      // 0x0060(0x0001)
    bool                                          bCinematicEngineScalability;                                  // 0x0061(0x0001)
    bool                                          bCinematicMode;                                               // 0x0062(0x0001)
    bool                                          bAllowMovement;                                               // 0x0063(0x0001)
    bool                                          bAllowTurning;                                                // 0x0064(0x0001)
    bool                                          bShowPlayer;                                                  // 0x0065(0x0001)
    bool                                          bShowHUD;                                                     // 0x0066(0x0001)
    bool                                          bUsePathTracer;                                               // 0x0067(0x0001)
    int32_t                                       PathTracerSamplePerPixel;                                     // 0x0068(0x0004)
    char                                          pa_006C[0x0004]                                               // 0x006C(0x0004)
};


// ScriptStruct  MovieSceneCapture.FrameMetrics
// Struct Size::0x0010
struct FFrameMetrics
{
    float                                         TotalElapsedTime;                                             // 0x0000(0x0004)
    float                                         FrameDelta;                                                   // 0x0004(0x0004)
    int32_t                                       FrameNumber;                                                  // 0x0008(0x0004)
    int32_t                                       NumDroppedFrames;                                             // 0x000C(0x0004)
};


// ScriptStruct  MovieSceneCapture.CapturedPixelsID
// Struct Size::0x0050
struct FCapturedPixelsID
{
    TMap<FName,FName>                             Identifiers;                                                  // 0x0000(0x0050)
};


// ScriptStruct  MovieSceneCapture.CapturedPixels
// Struct Size::0x0010
struct FCapturedPixels
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
};


// ScriptStruct  Engine.ActorDataLayer
// Struct Size::0x0008
struct FActorDataLayer
{
    FName                                         Name;                                                         // 0x0000(0x0008)
};


// ScriptStruct  Engine.KAggregateGeom
// Struct Size::0x0068
struct FKAggregateGeom
{
    TArray<FKSphereElem>                          SphereElems;                                                  // 0x0000(0x0010)
    TArray<FKBoxElem>                             BoxElems;                                                     // 0x0010(0x0010)
    TArray<FKSphylElem>                           SphylElems;                                                   // 0x0020(0x0010)
    TArray<FKConvexElem>                          ConvexElems;                                                  // 0x0030(0x0010)
    TArray<FKTaperedCapsuleElem>                  TaperedCapsuleElems;                                          // 0x0040(0x0010)
    TArray<FKLevelSetElem>                        LevelSetElems;                                                // 0x0050(0x0010)
    char                                          pa_0060[0x0008]                                               // 0x0060(0x0008)
};


// ScriptStruct  Engine.KShapeElem
// Struct Size::0x0030
struct FKShapeElem
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    float                                         RestOffset;                                                   // 0x0008(0x0004)
    FName                                         Name;                                                         // 0x000C(0x0008)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    char                                          bContributeToMass;                                            // 0x0018(0x0001)
    enum class ECollisionEnabled                  CollisionEnabled;                                             // 0x0019(0x0001)
    char                                          pa_001A[0x0016]                                               // 0x001A(0x0016)
};


// ScriptStruct  Engine.KLevelSetElem
// Struct Size::0x00A0
struct FKLevelSetElem : public FKShapeElem
{
    FTransform                                    Transform;                                                    // 0x0030(0x0060)
    char                                          pa_0090[0x0010]                                               // 0x0090(0x0010)
};


// ScriptStruct  Engine.KTaperedCapsuleElem
// Struct Size::0x0070
struct FKTaperedCapsuleElem : public FKShapeElem
{
    FVector                                       Center;                                                       // 0x0030(0x0018)
    FRotator                                      Rotation;                                                     // 0x0048(0x0018)
    float                                         Radius0;                                                      // 0x0060(0x0004)
    float                                         Radius1;                                                      // 0x0064(0x0004)
    float                                         Length;                                                       // 0x0068(0x0004)
    char                                          pa_006C[0x0004]                                               // 0x006C(0x0004)
};


// ScriptStruct  Engine.KConvexElem
// Struct Size::0x0100
struct FKConvexElem : public FKShapeElem
{
    TArray<FVector>                               VertexData;                                                   // 0x0030(0x0010)
    TArray<int32_t>                               IndexData;                                                    // 0x0040(0x0010)
    FBox                                          ElemBox;                                                      // 0x0050(0x0038)
    char                                          pa_0088[0x0008]                                               // 0x0088(0x0008)
    FTransform                                    Transform;                                                    // 0x0090(0x0060)
    char                                          pa_00F0[0x0010]                                               // 0x00F0(0x0010)
};


// ScriptStruct  Engine.KSphylElem
// Struct Size::0x0068
struct FKSphylElem : public FKShapeElem
{
    FVector                                       Center;                                                       // 0x0030(0x0018)
    FRotator                                      Rotation;                                                     // 0x0048(0x0018)
    float                                         Radius;                                                       // 0x0060(0x0004)
    float                                         Length;                                                       // 0x0064(0x0004)
};


// ScriptStruct  Engine.KBoxElem
// Struct Size::0x0070
struct FKBoxElem : public FKShapeElem
{
    FVector                                       Center;                                                       // 0x0030(0x0018)
    FRotator                                      Rotation;                                                     // 0x0048(0x0018)
    float                                         X;                                                            // 0x0060(0x0004)
    float                                         Y;                                                            // 0x0064(0x0004)
    float                                         Z;                                                            // 0x0068(0x0004)
    char                                          pa_006C[0x0004]                                               // 0x006C(0x0004)
};


// ScriptStruct  Engine.KSphereElem
// Struct Size::0x0050
struct FKSphereElem : public FKShapeElem
{
    FVector                                       Center;                                                       // 0x0030(0x0018)
    float                                         Radius;                                                       // 0x0048(0x0004)
    char                                          pa_004C[0x0004]                                               // 0x004C(0x0004)
};


// ScriptStruct  Engine.NamedFloat
// Struct Size::0x000C
struct FNamedFloat
{
    float                                         Value;                                                        // 0x0000(0x0004)
    FName                                         Name;                                                         // 0x0004(0x0008)
};


// ScriptStruct  Engine.NamedVector
// Struct Size::0x0020
struct FNamedVector
{
    FVector                                       Value;                                                        // 0x0000(0x0018)
    FName                                         Name;                                                         // 0x0018(0x0008)
};


// ScriptStruct  Engine.NamedColor
// Struct Size::0x000C
struct FNamedColor
{
    FColor                                        Value;                                                        // 0x0000(0x0004)
    FName                                         Name;                                                         // 0x0004(0x0008)
};


// ScriptStruct  Engine.NamedTransform
// Struct Size::0x0070
struct FNamedTransform
{
    FTransform                                    Value;                                                        // 0x0000(0x0060)
    FName                                         Name;                                                         // 0x0060(0x0008)
    char                                          pa_0068[0x0008]                                               // 0x0068(0x0008)
};


// ScriptStruct  Engine.LocalSpacePose
// Struct Size::0x0020
struct FLocalSpacePose
{
    TArray<FTransform>                            Transforms;                                                   // 0x0000(0x0010)
    TArray<FName>                                 Names;                                                        // 0x0010(0x0010)
};


// ScriptStruct  Engine.ComponentSpacePose
// Struct Size::0x0020
struct FComponentSpacePose
{
    TArray<FTransform>                            Transforms;                                                   // 0x0000(0x0010)
    TArray<FName>                                 Names;                                                        // 0x0010(0x0010)
};


// ScriptStruct  Engine.AnimationErrorStats
// Struct Size::0x0010
struct FAnimationErrorStats
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
};


// ScriptStruct  Engine.AnimCurveBase
// Struct Size::0x0018
struct FAnimCurveBase
{
    FName                                         LastObservedName;                                             // 0x0000(0x0008)
    FSmartName                                    Name;                                                         // 0x0008(0x000C)
    int32_t                                       CurveTypeFlags;                                               // 0x0014(0x0004)
};


// ScriptStruct  Engine.SmartName
// Struct Size::0x000C
struct FSmartName
{
    FName                                         DisplayName;                                                  // 0x0000(0x0008)
    char                                          pa_0008[0x0004]                                               // 0x0008(0x0004)
};


// ScriptStruct  Engine.FloatCurve
// Struct Size::0x0098
struct FFloatCurve : public FAnimCurveBase
{
    FRichCurve                                    FloatCurve;                                                   // 0x0018(0x0080)
};


// ScriptStruct  Engine.VectorCurve
// Struct Size::0x0198
struct FVectorCurve : public FAnimCurveBase
{
    FRichCurve                                    FloatCurves;                                                  // 0x0018(0x0080)
    char                                          pa_0098[0x0100]                                               // 0x0098(0x0100)
};


// ScriptStruct  Engine.TransformCurve
// Struct Size::0x04E0
struct FTransformCurve : public FAnimCurveBase
{
    FVectorCurve                                  TranslationCurve;                                             // 0x0018(0x0198)
    FVectorCurve                                  RotationCurve;                                                // 0x01B0(0x0198)
    FVectorCurve                                  ScaleCurve;                                                   // 0x0348(0x0198)
};


// ScriptStruct  Engine.CachedFloatCurve
// Struct Size::0x0014
struct FCachedFloatCurve
{
    FName                                         CurveName;                                                    // 0x0000(0x0008)
    char                                          pa_0008[0x000C]                                               // 0x0008(0x000C)
};


// ScriptStruct  Engine.RawCurveTracks
// Struct Size::0x0010
struct FRawCurveTracks
{
    TArray<FFloatCurve>                           FloatCurves;                                                  // 0x0000(0x0010)
};


// ScriptStruct  Engine.EmptyPayload
// Struct Size::0x0001
struct FEmptyPayload
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  Engine.BracketPayload
// Struct Size::0x0010
struct FBracketPayload : public FEmptyPayload
{
    FString                                       Description;                                                  // 0x0000(0x0010)
};


// ScriptStruct  Engine.AnimationTrackPayload
// Struct Size::0x0008
struct FAnimationTrackPayload : public FEmptyPayload
{
    FName                                         Name;                                                         // 0x0000(0x0008)
};


// ScriptStruct  Engine.AnimationTrackAddedPayload
// Struct Size::0x000C
struct FAnimationTrackAddedPayload : public FAnimationTrackPayload
{
    int32_t                                       TrackIndex;                                                   // 0x0008(0x0004)
};


// ScriptStruct  Engine.SequenceLengthChangedPayload
// Struct Size::0x000C
struct FSequenceLengthChangedPayload : public FEmptyPayload
{
    float                                         PreviousLength;                                               // 0x0000(0x0004)
    float                                         T0;                                                           // 0x0004(0x0004)
    float                                         T1;                                                           // 0x0008(0x0004)
};


// ScriptStruct  Engine.FrameRateChangedPayload
// Struct Size::0x0008
struct FFrameRateChangedPayload : public FEmptyPayload
{
    FFrameRate                                    PreviousFrameRate;                                            // 0x0000(0x0008)
};


// ScriptStruct  Engine.CurvePayload
// Struct Size::0x0010
struct FCurvePayload : public FEmptyPayload
{
    FAnimationCurveIdentifier                     Identifier;                                                   // 0x0000(0x0010)
};


// ScriptStruct  Engine.AnimationCurveIdentifier
// Struct Size::0x0010
struct FAnimationCurveIdentifier
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
};


// ScriptStruct  Engine.CurveScaledPayload
// Struct Size::0x0018
struct FCurveScaledPayload : public FCurvePayload
{
    float                                         Factor;                                                       // 0x0010(0x0004)
    float                                         Origin;                                                       // 0x0014(0x0004)
};


// ScriptStruct  Engine.CurveRenamedPayload
// Struct Size::0x0020
struct FCurveRenamedPayload : public FCurvePayload
{
    FAnimationCurveIdentifier                     NewIdentifier;                                                // 0x0010(0x0010)
};


// ScriptStruct  Engine.CurveFlagsChangedPayload
// Struct Size::0x0014
struct FCurveFlagsChangedPayload : public FCurvePayload
{
    int32_t                                       OldFlags;                                                     // 0x0010(0x0004)
};


// ScriptStruct  Engine.AttributePayload
// Struct Size::0x0040
struct FAttributePayload : public FEmptyPayload
{
    FAnimationAttributeIdentifier                 Identifier;                                                   // 0x0000(0x0040)
};


// ScriptStruct  Engine.AnimationAttributeIdentifier
// Struct Size::0x0040
struct FAnimationAttributeIdentifier
{
    FName                                         Name;                                                         // 0x0000(0x0008)
    FName                                         BoneName;                                                     // 0x0008(0x0008)
    int32_t                                       BoneIndex;                                                    // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    UScriptStruct*                                ScriptStruct;                                                 // 0x0018(0x0008)
    FSoftObjectPath                               ScriptStructPath;                                             // 0x0020(0x0020)
};


// ScriptStruct  Engine.AnimNodeConstantData
// Struct Size::0x0018
struct FAnimNodeConstantData
{
    TScriptInterface<IAnimClassInterface>         AnimClassInterface;                                           // 0x0000(0x0010)
    int32_t                                       NodeIndex;                                                    // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  Engine.AnimSubsystem
// Struct Size::0x0008
struct FAnimSubsystem
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
};


// ScriptStruct  Engine.AnimSubsystemInstance
// Struct Size::0x0008
struct FAnimSubsystemInstance
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
};


// ScriptStruct  Engine.AnimSubsystem
// Struct Size::0x0018
struct FAnimSubsystem : public FAnimSubsystem
{
    TArray<UBlendSpace*>                          BlendSpaces;                                                  // 0x0008(0x0010)
};


// ScriptStruct  Engine.PerBoneBlendWeights
// Struct Size::0x0010
struct FPerBoneBlendWeights
{
    TArray<FPerBoneBlendWeight>                   BoneBlendWeights;                                             // 0x0000(0x0010)
};


// ScriptStruct  Engine.AnimLinkableElement
// Struct Size::0x0030
struct FAnimLinkableElement
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    UAnimMontage*                                 LinkedMontage;                                                // 0x0008(0x0008)
    int32_t                                       SlotIndex;                                                    // 0x0010(0x0004)
    int32_t                                       SegmentIndex;                                                 // 0x0014(0x0004)
    enum class EAnimLinkMethod                    LinkMethod;                                                   // 0x0018(0x0001)
    enum class EAnimLinkMethod                    CachedLinkMethod;                                             // 0x0019(0x0001)
    char                                          pa_001A[0x0002]                                               // 0x001A(0x0002)
    float                                         SegmentBeginTime;                                             // 0x001C(0x0004)
    float                                         SegmentLength;                                                // 0x0020(0x0004)
    float                                         LinkValue;                                                    // 0x0024(0x0004)
    UAnimSequenceBase*                            LinkedSequence;                                               // 0x0028(0x0008)
};


// ScriptStruct  Engine.AnimNotifyEvent
// Struct Size::0x00B8
struct FAnimNotifyEvent : public FAnimLinkableElement
{
    float                                         DisplayTime;                                                  // 0x0030(0x0004)
    float                                         TriggerTimeOffset;                                            // 0x0034(0x0004)
    float                                         EndTriggerTimeOffset;                                         // 0x0038(0x0004)
    float                                         TriggerWeightThreshold;                                       // 0x003C(0x0004)
    FName                                         NotifyName;                                                   // 0x0040(0x0008)
    UAnimNotify*                                  Notify;                                                       // 0x0048(0x0008)
    UAnimNotifyState*                             NotifyStateClass;                                             // 0x0050(0x0008)
    float                                         Duration;                                                     // 0x0058(0x0004)
    char                                          pa_005C[0x0004]                                               // 0x005C(0x0004)
    FAnimLinkableElement                          EndLink;                                                      // 0x0060(0x0030)
    bool                                          bConvertedFromBranchingPoint;                                 // 0x0090(0x0001)
    enum class EMontageNotifyTickType             MontageTickType;                                              // 0x0091(0x0001)
    char                                          pa_0092[0x0002]                                               // 0x0092(0x0002)
    float                                         NotifyTriggerChance;                                          // 0x0094(0x0004)
    enum class ENotifyFilterType                  NotifyFilterType;                                             // 0x0098(0x0001)
    char                                          pa_0099[0x0003]                                               // 0x0099(0x0003)
    int32_t                                       NotifyFilterLOD;                                              // 0x009C(0x0004)
    bool                                          bTriggerOnDedicatedServer;                                    // 0x00A0(0x0001)
    bool                                          bTriggerOnFollower;                                           // 0x00A1(0x0001)
    char                                          pa_00A2[0x0002]                                               // 0x00A2(0x0002)
    int32_t                                       TrackIndex;                                                   // 0x00A4(0x0004)
    char                                          pa_00A8[0x0010]                                               // 0x00A8(0x0010)
};


// ScriptStruct  Engine.AnimSyncMarker
// Struct Size::0x000C
struct FAnimSyncMarker
{
    FName                                         MarkerName;                                                   // 0x0000(0x0008)
    float                                         Time;                                                         // 0x0008(0x0004)
};


// ScriptStruct  Engine.AnimNotifyTrack
// Struct Size::0x0038
struct FAnimNotifyTrack
{
    FName                                         TrackName;                                                    // 0x0000(0x0008)
    FLinearColor                                  TrackColor;                                                   // 0x0008(0x0010)
    char                                          pa_0018[0x0020]                                               // 0x0018(0x0020)
};


// ScriptStruct  Engine.MarkerSyncData
// Struct Size::0x0020
struct FMarkerSyncData
{
    TArray<FAnimSyncMarker>                       AuthoredSyncMarkers;                                          // 0x0000(0x0010)
    char                                          pa_0010[0x0010]                                               // 0x0010(0x0010)
};


// ScriptStruct  Engine.TrackToSkeletonMap
// Struct Size::0x0004
struct FTrackToSkeletonMap
{
    int32_t                                       BoneTreeIndex;                                                // 0x0000(0x0004)
};


// ScriptStruct  Engine.AssetManagerRedirect
// Struct Size::0x0020
struct FAssetManagerRedirect
{
    FString                                       Old;                                                          // 0x0000(0x0010)
    FString                                       New;                                                          // 0x0010(0x0010)
};


// ScriptStruct  Engine.PrimaryAssetRulesOverride
// Struct Size::0x001C
struct FPrimaryAssetRulesOverride
{
    FPrimaryAssetId                               PrimaryAssetId;                                               // 0x0000(0x0010)
    FPrimaryAssetRules                            Rules;                                                        // 0x0010(0x000C)
};


// ScriptStruct  Engine.PrimaryAssetRules
// Struct Size::0x000C
struct FPrimaryAssetRules
{
    int32_t                                       Priority;                                                     // 0x0000(0x0004)
    int32_t                                       ChunkId;                                                      // 0x0004(0x0004)
    bool                                          bApplyRecursively;                                            // 0x0008(0x0001)
    enum class EPrimaryAssetCookRule              CookRule;                                                     // 0x0009(0x0001)
    char                                          pa_000A[0x0002]                                               // 0x000A(0x0002)
};


// ScriptStruct  Engine.PrimaryAssetRulesCustomOverride
// Struct Size::0x0038
struct FPrimaryAssetRulesCustomOverride
{
    FPrimaryAssetType                             PrimaryAssetType;                                             // 0x0000(0x0008)
    FDirectoryPath                                FilterDirectory;                                              // 0x0008(0x0010)
    FString                                       FilterString;                                                 // 0x0018(0x0010)
    FPrimaryAssetRules                            Rules;                                                        // 0x0028(0x000C)
    char                                          pa_0034[0x0004]                                               // 0x0034(0x0004)
};


// ScriptStruct  Engine.InterpolationParameter
// Struct Size::0x0010
struct FInterpolationParameter
{
    float                                         InterpolationTime;                                            // 0x0000(0x0004)
    float                                         DampingRatio;                                                 // 0x0004(0x0004)
    float                                         MaxSpeed;                                                     // 0x0008(0x0004)
    enum class EFilterInterpolationType           InterpolationType;                                            // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
};


// ScriptStruct  Engine.BlendParameter
// Struct Size::0x0020
struct FBlendParameter
{
    FString                                       DisplayName;                                                  // 0x0000(0x0010)
    float                                         Min;                                                          // 0x0010(0x0004)
    float                                         Max;                                                          // 0x0014(0x0004)
    int32_t                                       GridNum;                                                      // 0x0018(0x0004)
    bool                                          bSnapToGrid;                                                  // 0x001C(0x0001)
    bool                                          bWrapInput;                                                   // 0x001D(0x0001)
    char                                          pa_001E[0x0002]                                               // 0x001E(0x0002)
};


// ScriptStruct  Engine.BlendSample
// Struct Size::0x0028
struct FBlendSample
{
    UAnimSequence*                                Animation;                                                    // 0x0000(0x0008)
    FVector                                       SampleValue;                                                  // 0x0008(0x0018)
    float                                         RateScale;                                                    // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
};


// ScriptStruct  Engine.BlendSpaceSegment
// Struct Size::0x0010
struct FBlendSpaceSegment
{
    int32_t                                       SampleIndices;                                                // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    float                                         Vertices;                                                     // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
};


// ScriptStruct  Engine.BlendSpaceTriangleEdgeInfo
// Struct Size::0x0028
struct FBlendSpaceTriangleEdgeInfo
{
    FVector2D                                     Normal;                                                       // 0x0000(0x0010)
    int32_t                                       NeighbourTriangleIndex;                                       // 0x0010(0x0004)
    int32_t                                       AdjacentPerimeterTriangleIndices;                             // 0x0014(0x0004)
    char                                          pa_0018[0x0004]                                               // 0x0018(0x0004)
    int32_t                                       AdjacentPerimeterVertexIndices;                               // 0x001C(0x0004)
    char                                          pa_0020[0x0008]                                               // 0x0020(0x0008)
};


// ScriptStruct  Engine.BlendSpaceTriangle
// Struct Size::0x00B8
struct FBlendSpaceTriangle
{
    int32_t                                       SampleIndices;                                                // 0x0000(0x0004)
    char                                          pa_0004[0x000C]                                               // 0x0004(0x000C)
    FVector2D                                     Vertices;                                                     // 0x0010(0x0010)
    char                                          pa_0020[0x0020]                                               // 0x0020(0x0020)
    FBlendSpaceTriangleEdgeInfo                   EdgeInfo;                                                     // 0x0040(0x0028)
    char                                          pa_0068[0x0050]                                               // 0x0068(0x0050)
};


// ScriptStruct  Engine.WeightedBlendSample
// Struct Size::0x0008
struct FWeightedBlendSample
{
    int32_t                                       SampleIndex;                                                  // 0x0000(0x0004)
    float                                         SampleWeight;                                                 // 0x0004(0x0004)
};


// ScriptStruct  Engine.BlendSpaceData
// Struct Size::0x0020
struct FBlendSpaceData
{
    TArray<FBlendSpaceSegment>                    Segments;                                                     // 0x0000(0x0010)
    TArray<FBlendSpaceTriangle>                   Triangles;                                                    // 0x0010(0x0010)
};


// ScriptStruct  Engine.EditorElement
// Struct Size::0x0018
struct FEditorElement
{
    int32_t                                       Indices;                                                      // 0x0000(0x0004)
    char                                          pa_0004[0x0008]                                               // 0x0004(0x0008)
    float                                         Weights;                                                      // 0x000C(0x0004)
    char                                          pa_0010[0x0008]                                               // 0x0010(0x0008)
};


// ScriptStruct  Engine.GridBlendSample
// Struct Size::0x001C
struct FGridBlendSample
{
    FEditorElement                                GridElement;                                                  // 0x0000(0x0018)
    float                                         BlendWeight;                                                  // 0x0018(0x0004)
};


// ScriptStruct  Engine.PerBoneInterpolation
// Struct Size::0x0014
struct FPerBoneInterpolation
{
    FBoneReference                                BoneReference;                                                // 0x0000(0x0010)
    float                                         InterpolationSpeedPerSec;                                     // 0x0010(0x0004)
};


// ScriptStruct  Engine.CompilerNativizationOptions
// Struct Size::0x0080
struct FCompilerNativizationOptions
{
    FName                                         PlatformName;                                                 // 0x0000(0x0008)
    bool                                          ServerOnlyPlatform;                                           // 0x0008(0x0001)
    bool                                          ClientOnlyPlatform;                                           // 0x0009(0x0001)
    bool                                          bExcludeMonolithicHeaders;                                    // 0x000A(0x0001)
    char                                          pa_000B[0x0005]                                               // 0x000B(0x0005)
    TArray<FName>                                 ExcludedModules;                                              // 0x0010(0x0010)
    TSet<FSoftObjectPath>                         ExcludedAssets;                                               // 0x0020(0x0050)
    TArray<FString>                               ExcludedFolderPaths;                                          // 0x0070(0x0010)
};


// ScriptStruct  Engine.BlueprintMacroCosmeticInfo
// Struct Size::0x0001
struct FBlueprintMacroCosmeticInfo
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  Engine.BPVariableMetaDataEntry
// Struct Size::0x0018
struct FBPVariableMetaDataEntry
{
    FName                                         DataKey;                                                      // 0x0000(0x0008)
    FString                                       DataValue;                                                    // 0x0008(0x0010)
};


// ScriptStruct  Engine.BPVariableDescription
// Struct Size::0x00D0
struct FBPVariableDescription
{
    FName                                         VarName;                                                      // 0x0000(0x0008)
    FGuid                                         VarGuid;                                                      // 0x0008(0x0010)
    FEdGraphPinType                               VarType;                                                      // 0x0018(0x0058)
    FString                                       FriendlyName;                                                 // 0x0070(0x0010)
    FText                                         Category;                                                     // 0x0080(0x0018)
    uint64_t                                      PropertyFlags;                                                // 0x0098(0x0008)
    FName                                         RepNotifyFunc;                                                // 0x00A0(0x0008)
    enum class ELifetimeCondition                 ReplicationCondition;                                         // 0x00A8(0x0001)
    char                                          pa_00A9[0x0007]                                               // 0x00A9(0x0007)
    TArray<FBPVariableMetaDataEntry>              MetaDataArray;                                                // 0x00B0(0x0010)
    FString                                       DefaultValue;                                                 // 0x00C0(0x0010)
};


// ScriptStruct  Engine.EdGraphPinType
// Struct Size::0x0058
struct FEdGraphPinType
{
    FName                                         PinCategory;                                                  // 0x0000(0x0008)
    FName                                         PinSubCategory;                                               // 0x0008(0x0008)
    TWeakObjectPtr<UObject>                       PinSubCategoryObject;                                         // 0x0010(0x0008)
    FSimpleMemberReference                        PinSubCategoryMemberReference;                                // 0x0018(0x0020)
    FEdGraphTerminalType                          PinValueType;                                                 // 0x0038(0x001C)
    enum class EPinContainerType                  ContainerType;                                                // 0x0054(0x0001)
    char                                          bIsArray;                                                     // 0x0055(0x0001)
    char                                          bIsReference;                                                 // 0x0055(0x0001)
    char                                          bIsConst;                                                     // 0x0055(0x0001)
    char                                          bIsWeakPointer;                                               // 0x0055(0x0001)
    char                                          bIsUObjectWrapper;                                            // 0x0055(0x0001)
    char                                          bSerializeAsSinglePrecisionFloat;                             // 0x0055(0x0001)
    char                                          pa_0056[0x0002]                                               // 0x0056(0x0002)
};


// ScriptStruct  Engine.EdGraphTerminalType
// Struct Size::0x001C
struct FEdGraphTerminalType
{
    FName                                         TerminalCategory;                                             // 0x0000(0x0008)
    FName                                         TerminalSubCategory;                                          // 0x0008(0x0008)
    TWeakObjectPtr<UObject>                       TerminalSubCategoryObject;                                    // 0x0010(0x0008)
    bool                                          bTerminalIsConst;                                             // 0x0018(0x0001)
    bool                                          bTerminalIsWeakPointer;                                       // 0x0019(0x0001)
    bool                                          bTerminalIsUObjectWrapper;                                    // 0x001A(0x0001)
    char                                          pa_001B[0x0001]                                               // 0x001B(0x0001)
};


// ScriptStruct  Engine.SimpleMemberReference
// Struct Size::0x0020
struct FSimpleMemberReference
{
    UObject*                                      MemberParent;                                                 // 0x0000(0x0008)
    FName                                         MemberName;                                                   // 0x0008(0x0008)
    FGuid                                         MemberGuid;                                                   // 0x0010(0x0010)
};


// ScriptStruct  Engine.BPInterfaceDescription
// Struct Size::0x0018
struct FBPInterfaceDescription
{
    UInterface*                                   Interface;                                                    // 0x0000(0x0008)
    TArray<UEdGraph*>                             Graphs;                                                       // 0x0008(0x0010)
};


// ScriptStruct  Engine.EditedDocumentInfo
// Struct Size::0x0040
struct FEditedDocumentInfo
{
    FSoftObjectPath                               EditedObjectPath;                                             // 0x0000(0x0020)
    FVector2D                                     SavedViewOffset;                                              // 0x0020(0x0010)
    float                                         SavedZoomAmount;                                              // 0x0030(0x0004)
    char                                          pa_0034[0x0004]                                               // 0x0034(0x0004)
    UObject*                                      EditedObject;                                                 // 0x0038(0x0008)
};


// ScriptStruct  Engine.BPEditorBookmarkNode
// Struct Size::0x0038
struct FBPEditorBookmarkNode
{
    FGuid                                         NodeGuid;                                                     // 0x0000(0x0010)
    FGuid                                         ParentGuid;                                                   // 0x0010(0x0010)
    FText                                         DisplayName;                                                  // 0x0020(0x0018)
};


// ScriptStruct  Engine.Bookmark2DJumpToSettings
// Struct Size::0x0001
struct FBookmark2DJumpToSettings
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  Engine.BookmarkBaseJumpToSettings
// Struct Size::0x0001
struct FBookmarkBaseJumpToSettings
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  Engine.GeomSelection
// Struct Size::0x000C
struct FGeomSelection
{
    int32_t                                       Type;                                                         // 0x0000(0x0004)
    int32_t                                       Index;                                                        // 0x0004(0x0004)
    int32_t                                       SelectionIndex;                                               // 0x0008(0x0004)
};


// ScriptStruct  Engine.FloatAnimationAttribute
// Struct Size::0x0004
struct FFloatAnimationAttribute
{
    float                                         Value;                                                        // 0x0000(0x0004)
};


// ScriptStruct  Engine.IntegerAnimationAttribute
// Struct Size::0x0004
struct FIntegerAnimationAttribute
{
    int32_t                                       Value;                                                        // 0x0000(0x0004)
};


// ScriptStruct  Engine.StringAnimationAttribute
// Struct Size::0x0010
struct FStringAnimationAttribute
{
    FString                                       Value;                                                        // 0x0000(0x0010)
};


// ScriptStruct  Engine.TransformAnimationAttribute
// Struct Size::0x0060
struct FTransformAnimationAttribute
{
    FTransform                                    Value;                                                        // 0x0000(0x0060)
};


// ScriptStruct  Engine.VectorAnimationAttribute
// Struct Size::0x0018
struct FVectorAnimationAttribute
{
    FVector                                       Value;                                                        // 0x0000(0x0018)
};


// ScriptStruct  Engine.QuaternionAnimationAttribute
// Struct Size::0x0020
struct FQuaternionAnimationAttribute
{
    FQuat                                         Value;                                                        // 0x0000(0x0020)
};


// ScriptStruct  Engine.NonBlendableQuaternionAnimationAttribute
// Struct Size::0x0020
struct FNonBlendableQuaternionAnimationAttribute : public FQuaternionAnimationAttribute
{
};


// ScriptStruct  Engine.NonBlendableVectorAnimationAttribute
// Struct Size::0x0018
struct FNonBlendableVectorAnimationAttribute : public FVectorAnimationAttribute
{
};


// ScriptStruct  Engine.NonBlendableTransformAnimationAttribute
// Struct Size::0x0060
struct FNonBlendableTransformAnimationAttribute : public FTransformAnimationAttribute
{
};


// ScriptStruct  Engine.NonBlendableFloatAnimationAttribute
// Struct Size::0x0004
struct FNonBlendableFloatAnimationAttribute : public FFloatAnimationAttribute
{
};


// ScriptStruct  Engine.NonBlendableIntegerAnimationAttribute
// Struct Size::0x0004
struct FNonBlendableIntegerAnimationAttribute : public FIntegerAnimationAttribute
{
};


// ScriptStruct  Engine.MinimalViewInfo
// Struct Size::0x07C0
struct FMinimalViewInfo
{
    FVector                                       Location;                                                     // 0x0000(0x0018)
    FRotator                                      Rotation;                                                     // 0x0018(0x0018)
    float                                         FOV;                                                          // 0x0030(0x0004)
    float                                         DesiredFOV;                                                   // 0x0034(0x0004)
    float                                         FOVAlt;                                                       // 0x0038(0x0004)
    float                                         DesiredFOVAlt;                                                // 0x003C(0x0004)
    float                                         OrthoWidth;                                                   // 0x0040(0x0004)
    float                                         OrthoNearClipPlane;                                           // 0x0044(0x0004)
    float                                         OrthoFarClipPlane;                                            // 0x0048(0x0004)
    float                                         PerspectiveNearClipPlane;                                     // 0x004C(0x0004)
    float                                         AspectRatio;                                                  // 0x0050(0x0004)
    char                                          bConstrainAspectRatio;                                        // 0x0054(0x0001)
    char                                          bUseFieldOfViewForLOD;                                        // 0x0054(0x0001)
    char                                          pa_0055[0x0003]                                               // 0x0055(0x0003)
    enum class ECameraProjectionMode              ProjectionMode;                                               // 0x0058(0x0001)
    char                                          pa_0059[0x0003]                                               // 0x0059(0x0003)
    float                                         PostProcessBlendWeight;                                       // 0x005C(0x0004)
    FPostProcessSettings                          PostProcessSettings;                                          // 0x0060(0x06E0)
    FVector2D                                     OffCenterProjectionOffset;                                    // 0x0740(0x0010)
    char                                          pa_0750[0x0070]                                               // 0x0750(0x0070)
};


// ScriptStruct  Engine.TextSizingParameters
// Struct Size::0x0038
struct FTextSizingParameters
{
    float                                         DrawX;                                                        // 0x0000(0x0004)
    float                                         DrawY;                                                        // 0x0004(0x0004)
    float                                         DrawXL;                                                       // 0x0008(0x0004)
    float                                         DrawYL;                                                       // 0x000C(0x0004)
    FVector2D                                     Scaling;                                                      // 0x0010(0x0010)
    UFont*                                        DrawFont;                                                     // 0x0020(0x0008)
    FVector2D                                     SpacingAdjust;                                                // 0x0028(0x0010)
};


// ScriptStruct  Engine.WrappedStringElement
// Struct Size::0x0020
struct FWrappedStringElement
{
    FString                                       Value;                                                        // 0x0000(0x0010)
    FVector2D                                     LineExtent;                                                   // 0x0010(0x0010)
};


// ScriptStruct  Engine.CharacterNetworkSerializationPackedBits
// Struct Size::0x0098
struct FCharacterNetworkSerializationPackedBits
{
    char                                          pa_0000[0x0098]                                               // 0x0000(0x0098)
};


// ScriptStruct  Engine.CharacterServerMovePackedBits
// Struct Size::0x0098
struct FCharacterServerMovePackedBits : public FCharacterNetworkSerializationPackedBits
{
};


// ScriptStruct  Engine.CharacterMoveResponsePackedBits
// Struct Size::0x0098
struct FCharacterMoveResponsePackedBits : public FCharacterNetworkSerializationPackedBits
{
};


// ScriptStruct  Engine.CharacterNetworkSerializationPackedBitsNetSerializerConfig
// Struct Size::0x0008
struct FCharacterNetworkSerializationPackedBitsNetSerializerConfig : public FNetSerializerConfig
{
    uint32_t                                      MaxAllowedDataBits;                                           // 0x0000(0x0004)
    uint32_t                                      MaxAllowedObjectReferences;                                   // 0x0004(0x0004)
};


// ScriptStruct  Engine.MeshUVChannelInfo
// Struct Size::0x0014
struct FMeshUVChannelInfo
{
    bool                                          bInitialized;                                                 // 0x0000(0x0001)
    bool                                          bOverrideDensities;                                           // 0x0001(0x0001)
    char                                          pa_0002[0x0002]                                               // 0x0002(0x0002)
    float                                         LocalUVDensities;                                             // 0x0004(0x0004)
    char                                          pa_0008[0x000C]                                               // 0x0008(0x000C)
};


// ScriptStruct  Engine.CustomAttributeSetting
// Struct Size::0x0020
struct FCustomAttributeSetting
{
    FString                                       Name;                                                         // 0x0000(0x0010)
    FString                                       Meaning;                                                      // 0x0010(0x0010)
};


// ScriptStruct  Engine.TimecodeCustomAttributeNameSettings
// Struct Size::0x0038
struct FTimecodeCustomAttributeNameSettings
{
    FName                                         HourAttributeName;                                            // 0x0000(0x0008)
    FName                                         MinuteAttributeName;                                          // 0x0008(0x0008)
    FName                                         SecondAttributeName;                                          // 0x0010(0x0008)
    FName                                         FrameAttributeName;                                           // 0x0018(0x0008)
    FName                                         SubframeAttributeName;                                        // 0x0020(0x0008)
    FName                                         RateAttributeName;                                            // 0x0028(0x0008)
    FName                                         TakenameAttributeName;                                        // 0x0030(0x0008)
};


// ScriptStruct  Engine.CustomAttribute
// Struct Size::0x0001
struct FCustomAttribute
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  Engine.CustomAttributePerBoneData
// Struct Size::0x0001
struct FCustomAttributePerBoneData
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  Engine.BakedStringCustomAttribute
// Struct Size::0x0001
struct FBakedStringCustomAttribute
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  Engine.BakedIntegerCustomAttribute
// Struct Size::0x0001
struct FBakedIntegerCustomAttribute
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  Engine.BakedFloatCustomAttribute
// Struct Size::0x0001
struct FBakedFloatCustomAttribute
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  Engine.BakedCustomAttributePerBoneData
// Struct Size::0x0001
struct FBakedCustomAttributePerBoneData
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  Engine.DebugDisplayProperty
// Struct Size::0x0020
struct FDebugDisplayProperty
{
    UObject*                                      Obj;                                                          // 0x0000(0x0008)
    UObject*                                      WithinClass;                                                  // 0x0008(0x0008)
    char                                          pa_0010[0x0010]                                               // 0x0010(0x0010)
};


// ScriptStruct  Engine.DebugTextInfo
// Struct Size::0x0080
struct FDebugTextInfo
{
    AActor*                                       SrcActor;                                                     // 0x0000(0x0008)
    FVector                                       SrcActorOffset;                                               // 0x0008(0x0018)
    FVector                                       SrcActorDesiredOffset;                                        // 0x0020(0x0018)
    FString                                       DebugText;                                                    // 0x0038(0x0010)
    float                                         TimeRemaining;                                                // 0x0048(0x0004)
    float                                         Duration;                                                     // 0x004C(0x0004)
    FColor                                        TextColor;                                                    // 0x0050(0x0004)
    char                                          bAbsoluteLocation;                                            // 0x0054(0x0001)
    char                                          bKeepAttachedToActor;                                         // 0x0054(0x0001)
    char                                          bDrawShadow;                                                  // 0x0054(0x0001)
    char                                          pa_0055[0x0003]                                               // 0x0055(0x0003)
    FVector                                       OrigActorLocation;                                            // 0x0058(0x0018)
    UFont*                                        Font;                                                         // 0x0070(0x0008)
    float                                         FontScale;                                                    // 0x0078(0x0004)
    char                                          pa_007C[0x0004]                                               // 0x007C(0x0004)
};


// ScriptStruct  Engine.RawDistributionFloat
// Struct Size::0x0030
struct FRawDistributionFloat : public FRawDistribution
{
    float                                         MinValue;                                                     // 0x0020(0x0004)
    float                                         MaxValue;                                                     // 0x0024(0x0004)
    UDistributionFloat*                           Distribution;                                                 // 0x0028(0x0008)
};


// ScriptStruct  Engine.RawDistributionVector
// Struct Size::0x0060
struct FRawDistributionVector : public FRawDistribution
{
    float                                         MinValue;                                                     // 0x0020(0x0004)
    float                                         MaxValue;                                                     // 0x0024(0x0004)
    FVector                                       MinValueVec;                                                  // 0x0028(0x0018)
    FVector                                       MaxValueVec;                                                  // 0x0040(0x0018)
    UDistributionVector*                          Distribution;                                                 // 0x0058(0x0008)
};


// ScriptStruct  Engine.EdGraphPinReference
// Struct Size::0x0018
struct FEdGraphPinReference
{
    TWeakObjectPtr<UEdGraphNode>                  OwningNode;                                                   // 0x0000(0x0008)
    FGuid                                         PinId;                                                        // 0x0008(0x0010)
};


// ScriptStruct  Engine.EdGraphSchemaAction
// Struct Size::0x0100
struct FEdGraphSchemaAction
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    FText                                         MenuDescription;                                              // 0x0008(0x0018)
    FText                                         TooltipDescription;                                           // 0x0020(0x0018)
    FText                                         Category;                                                     // 0x0038(0x0018)
    FText                                         Keywords;                                                     // 0x0050(0x0018)
    int32_t                                       Grouping;                                                     // 0x0068(0x0004)
    int32_t                                       SectionID;                                                    // 0x006C(0x0004)
    TArray<FString>                               MenuDescriptionArray;                                         // 0x0070(0x0010)
    TArray<FString>                               FullSearchTitlesArray;                                        // 0x0080(0x0010)
    TArray<FString>                               FullSearchKeywordsArray;                                      // 0x0090(0x0010)
    TArray<FString>                               FullSearchCategoryArray;                                      // 0x00A0(0x0010)
    TArray<FString>                               LocalizedMenuDescriptionArray;                                // 0x00B0(0x0010)
    TArray<FString>                               LocalizedFullSearchTitlesArray;                               // 0x00C0(0x0010)
    TArray<FString>                               LocalizedFullSearchKeywordsArray;                             // 0x00D0(0x0010)
    TArray<FString>                               LocalizedFullSearchCategoryArray;                             // 0x00E0(0x0010)
    FString                                       SearchText;                                                   // 0x00F0(0x0010)
};


// ScriptStruct  Engine.EdGraphSchemaAction
// Struct Size::0x0108
struct FEdGraphSchemaAction : public FEdGraphSchemaAction
{
    UEdGraphNode*                                 NodeTemplate;                                                 // 0x0100(0x0008)
};


// ScriptStruct  Engine.FullyLoadedPackagesInfo
// Struct Size::0x0038
struct FFullyLoadedPackagesInfo
{
    enum class EFullyLoadPackageType              FullyLoadType;                                                // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    FString                                       Tag;                                                          // 0x0008(0x0010)
    TArray<FName>                                 PackagesToLoad;                                               // 0x0018(0x0010)
    TArray<UObject*>                              LoadedObjects;                                                // 0x0028(0x0010)
};


// ScriptStruct  Engine.LevelStreamingStatus
// Struct Size::0x0010
struct FLevelStreamingStatus
{
    FName                                         PackageName;                                                  // 0x0000(0x0008)
    char                                          bShouldBeLoaded;                                              // 0x0008(0x0001)
    char                                          bShouldBeVisible;                                             // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
    uint32_t                                      LODIndex;                                                     // 0x000C(0x0004)
};


// ScriptStruct  Engine.NetDriverDefinition
// Struct Size::0x001C
struct FNetDriverDefinition
{
    FName                                         DefName;                                                      // 0x0000(0x0008)
    FName                                         DriverClassName;                                              // 0x0008(0x0008)
    FName                                         DriverClassNameFallback;                                      // 0x0010(0x0008)
    int32_t                                       MaxChannelsOverride;                                          // 0x0018(0x0004)
};


// ScriptStruct  Engine.IrisNetDriverConfig
// Struct Size::0x0028
struct FIrisNetDriverConfig
{
    FName                                         NetDriverDefinition;                                          // 0x0000(0x0008)
    FName                                         NetDriverName;                                                // 0x0008(0x0008)
    FString                                       NetDriverWildcardName;                                        // 0x0010(0x0010)
    bool                                          bEnableIris;                                                  // 0x0020(0x0001)
    char                                          pa_0021[0x0007]                                               // 0x0021(0x0007)
};


// ScriptStruct  Engine.NamedNetDriver
// Struct Size::0x0010
struct FNamedNetDriver
{
    UNetDriver*                                   NetDriver;                                                    // 0x0000(0x0008)
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
};


// ScriptStruct  Engine.WorldContext
// Struct Size::0x02C8
struct FWorldContext
{
    char                                          pa_0000[0x00C0]                                               // 0x0000(0x00C0)
    FURL                                          LastURL;                                                      // 0x00C0(0x0068)
    FURL                                          LastRemoteURL;                                                // 0x0128(0x0068)
    UPendingNetGame*                              PendingNetGame;                                               // 0x0190(0x0008)
    TArray<FFullyLoadedPackagesInfo>              PackagesToFullyLoad;                                          // 0x0198(0x0010)
    char                                          pa_01A8[0x0010]                                               // 0x01A8(0x0010)
    TArray<ULevel*>                               LoadedLevelsForPendingMapChange;                              // 0x01B8(0x0010)
    char                                          pa_01C8[0x0018]                                               // 0x01C8(0x0018)
    TArray<UObjectReferencer*>                    ObjectReferencers;                                            // 0x01E0(0x0010)
    TArray<FLevelStreamingStatus>                 PendingLevelStreamingStatusUpdates;                           // 0x01F0(0x0010)
    UGameViewportClient*                          GameViewport;                                                 // 0x0200(0x0008)
    UGameInstance*                                OwningGameInstance;                                           // 0x0208(0x0008)
    TArray<FNamedNetDriver>                       ActiveNetDrivers;                                             // 0x0210(0x0010)
    char                                          pa_0220[0x00A8]                                               // 0x0220(0x00A8)
};


// ScriptStruct  Engine.URL
// Struct Size::0x0068
struct FURL
{
    FString                                       Protocol;                                                     // 0x0000(0x0010)
    FString                                       Host;                                                         // 0x0010(0x0010)
    int32_t                                       Port;                                                         // 0x0020(0x0004)
    int32_t                                       Valid;                                                        // 0x0024(0x0004)
    FString                                       Map;                                                          // 0x0028(0x0010)
    FString                                       RedirectUrl;                                                  // 0x0038(0x0010)
    TArray<FString>                               Op;                                                           // 0x0048(0x0010)
    FString                                       Portal;                                                       // 0x0058(0x0010)
};


// ScriptStruct  Engine.StatColorMapEntry
// Struct Size::0x0008
struct FStatColorMapEntry
{
    float                                         In;                                                           // 0x0000(0x0004)
    FColor                                        Out;                                                          // 0x0004(0x0004)
};


// ScriptStruct  Engine.StatColorMapping
// Struct Size::0x0028
struct FStatColorMapping
{
    FString                                       StatName;                                                     // 0x0000(0x0010)
    TArray<FStatColorMapEntry>                    ColorMap;                                                     // 0x0010(0x0010)
    char                                          DisableBlend;                                                 // 0x0020(0x0001)
    char                                          pa_0021[0x0007]                                               // 0x0021(0x0007)
};


// ScriptStruct  Engine.DropNoteInfo
// Struct Size::0x0040
struct FDropNoteInfo
{
    FVector                                       Location;                                                     // 0x0000(0x0018)
    FRotator                                      Rotation;                                                     // 0x0018(0x0018)
    FString                                       Comment;                                                      // 0x0030(0x0010)
};


// ScriptStruct  Engine.ScreenMessageString
// Struct Size::0x0038
struct FScreenMessageString
{
    uint64_t                                      Key;                                                          // 0x0000(0x0008)
    FString                                       ScreenMessage;                                                // 0x0008(0x0010)
    FColor                                        DisplayColor;                                                 // 0x0018(0x0004)
    float                                         TimeToDisplay;                                                // 0x001C(0x0004)
    float                                         CurrentTimeDisplayed;                                         // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
    FVector2D                                     TextScale;                                                    // 0x0028(0x0010)
};


// ScriptStruct  Engine.GameNameRedirect
// Struct Size::0x0010
struct FGameNameRedirect
{
    FName                                         OldGameName;                                                  // 0x0000(0x0008)
    FName                                         NewGameName;                                                  // 0x0008(0x0008)
};


// ScriptStruct  Engine.ClassRedirect
// Struct Size::0x003C
struct FClassRedirect
{
    FName                                         ObjectName;                                                   // 0x0000(0x0008)
    FName                                         OldClassName;                                                 // 0x0008(0x0008)
    FName                                         NewClassName;                                                 // 0x0010(0x0008)
    FName                                         OldSubobjName;                                                // 0x0018(0x0008)
    FName                                         NewSubobjName;                                                // 0x0020(0x0008)
    FName                                         NewClassClass;                                                // 0x0028(0x0008)
    FName                                         NewClassPackage;                                              // 0x0030(0x0008)
    bool                                          InstanceOnly;                                                 // 0x0038(0x0001)
    char                                          pa_0039[0x0003]                                               // 0x0039(0x0003)
};


// ScriptStruct  Engine.StructRedirect
// Struct Size::0x0010
struct FStructRedirect
{
    FName                                         OldStructName;                                                // 0x0000(0x0008)
    FName                                         NewStructName;                                                // 0x0008(0x0008)
};


// ScriptStruct  Engine.PluginRedirect
// Struct Size::0x0020
struct FPluginRedirect
{
    FString                                       OldPluginName;                                                // 0x0000(0x0010)
    FString                                       NewPluginName;                                                // 0x0010(0x0010)
};


// ScriptStruct  Engine.TickPrerequisite
// Struct Size::0x0010
struct FTickPrerequisite
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
};


// ScriptStruct  Engine.ExposureSettings
// Struct Size::0x0008
struct FExposureSettings
{
    float                                         FixedEV100;                                                   // 0x0000(0x0004)
    bool                                          bFixed;                                                       // 0x0004(0x0001)
    char                                          pa_0005[0x0003]                                               // 0x0005(0x0003)
};


// ScriptStruct  Engine.MaterialShadingModelField
// Struct Size::0x0002
struct FMaterialShadingModelField
{
    uint16_t                                      ShadingModelField;                                            // 0x0000(0x0002)
};


// ScriptStruct  Engine.StrataMaterialInfo
// Struct Size::0x0018
struct FStrataMaterialInfo
{
    uint16_t                                      ShadingModelField;                                            // 0x0000(0x0002)
    char                                          bHasShadingModelFromExpression;                               // 0x0002(0x0001)
    char                                          pa_0003[0x0001]                                               // 0x0003(0x0001)
    uint32_t                                      ConnectedProperties;                                          // 0x0004(0x0004)
    TArray<USubsurfaceProfile*>                   SubsurfaceProfiles;                                           // 0x0008(0x0010)
};


// ScriptStruct  Engine.RigidBodyErrorCorrection
// Struct Size::0x0034
struct FRigidBodyErrorCorrection
{
    float                                         PingExtrapolation;                                            // 0x0000(0x0004)
    float                                         PingLimit;                                                    // 0x0004(0x0004)
    float                                         ErrorPerLinearDifference;                                     // 0x0008(0x0004)
    float                                         ErrorPerAngularDifference;                                    // 0x000C(0x0004)
    float                                         MaxRestoredStateError;                                        // 0x0010(0x0004)
    float                                         MaxLinearHardSnapDistance;                                    // 0x0014(0x0004)
    float                                         PositionLerp;                                                 // 0x0018(0x0004)
    float                                         AngleLerp;                                                    // 0x001C(0x0004)
    float                                         LinearVelocityCoefficient;                                    // 0x0020(0x0004)
    float                                         AngularVelocityCoefficient;                                   // 0x0024(0x0004)
    float                                         ErrorAccumulationSeconds;                                     // 0x0028(0x0004)
    float                                         ErrorAccumulationDistanceSq;                                  // 0x002C(0x0004)
    float                                         ErrorAccumulationSimilarity;                                  // 0x0030(0x0004)
};


// ScriptStruct  Engine.RigidBodyContactInfo
// Struct Size::0x0048
struct FRigidBodyContactInfo
{
    FVector                                       ContactPosition;                                              // 0x0000(0x0018)
    FVector                                       ContactNormal;                                                // 0x0018(0x0018)
    float                                         ContactPenetration;                                           // 0x0030(0x0004)
    bool                                          bContactProbe;                                                // 0x0034(0x0001)
    char                                          pa_0035[0x0003]                                               // 0x0035(0x0003)
    UPhysicalMaterial*                            PhysMaterial;                                                 // 0x0038(0x0008)
    char                                          pa_0040[0x0008]                                               // 0x0040(0x0008)
};


// ScriptStruct  Engine.CollisionImpactData
// Struct Size::0x0048
struct FCollisionImpactData
{
    TArray<FRigidBodyContactInfo>                 ContactInfos;                                                 // 0x0000(0x0010)
    FVector                                       TotalNormalImpulse;                                           // 0x0010(0x0018)
    FVector                                       TotalFrictionImpulse;                                         // 0x0028(0x0018)
    bool                                          bIsVelocityDeltaUnderThreshold;                               // 0x0040(0x0001)
    char                                          pa_0041[0x0007]                                               // 0x0041(0x0007)
};


// ScriptStruct  Engine.FractureEffect
// Struct Size::0x0010
struct FFractureEffect
{
    UParticleSystem*                              ParticleSystem;                                               // 0x0000(0x0008)
    USoundBase*                                   Sound;                                                        // 0x0008(0x0008)
};


// ScriptStruct  Engine.BasedPosition
// Struct Size::0x0068
struct FBasedPosition
{
    AActor*                                       Base;                                                         // 0x0000(0x0008)
    FVector                                       position;                                                     // 0x0008(0x0018)
    FVector                                       CachedBaseLocation;                                           // 0x0020(0x0018)
    FRotator                                      CachedBaseRotation;                                           // 0x0038(0x0018)
    FVector                                       CachedTransPosition;                                          // 0x0050(0x0018)
};


// ScriptStruct  Engine.LightmassLightSettings
// Struct Size::0x000C
struct FLightmassLightSettings
{
    float                                         IndirectLightingSaturation;                                   // 0x0000(0x0004)
    float                                         ShadowExponent;                                               // 0x0004(0x0004)
    bool                                          bUseAreaShadowsForStationaryLight;                            // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
};


// ScriptStruct  Engine.LightmassPointLightSettings
// Struct Size::0x000C
struct FLightmassPointLightSettings : public FLightmassLightSettings
{
};


// ScriptStruct  Engine.LightmassDirectionalLightSettings
// Struct Size::0x0010
struct FLightmassDirectionalLightSettings : public FLightmassLightSettings
{
    float                                         LightSourceAngle;                                             // 0x000C(0x0004)
};


// ScriptStruct  Engine.LightmassPrimitiveSettings
// Struct Size::0x0018
struct FLightmassPrimitiveSettings
{
    char                                          bUseTwoSidedLighting;                                         // 0x0000(0x0001)
    char                                          bShadowIndirectOnly;                                          // 0x0000(0x0001)
    char                                          bUseEmissiveForStaticLighting;                                // 0x0000(0x0001)
    char                                          bUseVertexNormalForHemisphereGather;                          // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         EmissiveLightFalloffExponent;                                 // 0x0004(0x0004)
    float                                         EmissiveLightExplicitInfluenceRadius;                         // 0x0008(0x0004)
    float                                         EmissiveBoost;                                                // 0x000C(0x0004)
    float                                         DiffuseBoost;                                                 // 0x0010(0x0004)
    float                                         FullyOccludedSamplesFraction;                                 // 0x0014(0x0004)
};


// ScriptStruct  Engine.LightmassDebugOptions
// Struct Size::0x0010
struct FLightmassDebugOptions
{
    char                                          bDebugMode;                                                   // 0x0000(0x0001)
    char                                          bStatsEnabled;                                                // 0x0000(0x0001)
    char                                          bGatherBSPSurfacesAcrossComponents;                           // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         CoplanarTolerance;                                            // 0x0004(0x0004)
    char                                          bUseImmediateImport;                                          // 0x0008(0x0001)
    char                                          bImmediateProcessMappings;                                    // 0x0008(0x0001)
    char                                          bSortMappings;                                                // 0x0008(0x0001)
    char                                          bDumpBinaryFiles;                                             // 0x0008(0x0001)
    char                                          bDebugMaterials;                                              // 0x0008(0x0001)
    char                                          bPadMappings;                                                 // 0x0008(0x0001)
    char                                          bDebugPaddings;                                               // 0x0008(0x0001)
    char                                          bOnlyCalcDebugTexelMappings;                                  // 0x0008(0x0001)
    char                                          bUseRandomColors;                                             // 0x0009(0x0001)
    char                                          bColorBordersGreen;                                           // 0x0009(0x0001)
    char                                          bColorByExecutionTime;                                        // 0x0009(0x0001)
    char                                          pa_000A[0x0002]                                               // 0x000A(0x0002)
    float                                         ExecutionTimeDivisor;                                         // 0x000C(0x0004)
};


// ScriptStruct  Engine.SwarmDebugOptions
// Struct Size::0x0004
struct FSwarmDebugOptions
{
    char                                          bDistributionEnabled;                                         // 0x0000(0x0001)
    char                                          bForceContentExport;                                          // 0x0000(0x0001)
    char                                          bInitialized;                                                 // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
};


// ScriptStruct  Engine.MTDResult
// Struct Size::0x0020
struct FMTDResult
{
    FVector                                       Direction;                                                    // 0x0000(0x0018)
    float                                         Distance;                                                     // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  Engine.AnimSlotDesc
// Struct Size::0x000C
struct FAnimSlotDesc
{
    FName                                         SlotName;                                                     // 0x0000(0x0008)
    int32_t                                       NumChannels;                                                  // 0x0008(0x0004)
};


// ScriptStruct  Engine.AnimUpdateRateParameters
// Struct Size::0x0088
struct FAnimUpdateRateParameters
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
    enum class EUpdateRateShiftBucket             ShiftBucket;                                                  // 0x0001(0x0001)
    char                                          bInterpolateSkippedFrames;                                    // 0x0002(0x0001)
    char                                          bShouldUseLodMap;                                             // 0x0002(0x0001)
    char                                          bShouldUseMinLod;                                             // 0x0002(0x0001)
    char                                          bSkipUpdate;                                                  // 0x0002(0x0001)
    char                                          bSkipEvaluation;                                              // 0x0002(0x0001)
    char                                          pa_0003[0x0001]                                               // 0x0003(0x0001)
    int32_t                                       UpdateRate;                                                   // 0x0004(0x0004)
    int32_t                                       EvaluationRate;                                               // 0x0008(0x0004)
    float                                         TickedPoseOffestTime;                                         // 0x000C(0x0004)
    float                                         AdditionalTime;                                               // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    int32_t                                       BaseNonRenderedUpdateRate;                                    // 0x0018(0x0004)
    int32_t                                       MaxEvalRateForInterpolation;                                  // 0x001C(0x0004)
    TArray<float>                                 BaseVisibleDistanceFactorThesholds;                           // 0x0020(0x0010)
    TMap<int32_t,int32_t>                         LODToFrameSkipMap;                                            // 0x0030(0x0050)
    int32_t                                       SkippedUpdateFrames;                                          // 0x0080(0x0004)
    int32_t                                       SkippedEvalFrames;                                            // 0x0084(0x0004)
};


// ScriptStruct  Engine.POV
// Struct Size::0x0038
struct FPOV
{
    FVector                                       Location;                                                     // 0x0000(0x0018)
    FRotator                                      Rotation;                                                     // 0x0018(0x0018)
    float                                         FOV;                                                          // 0x0030(0x0004)
    char                                          pa_0034[0x0004]                                               // 0x0034(0x0004)
};


// ScriptStruct  Engine.MeshBuildSettings
// Struct Size::0x0048
struct FMeshBuildSettings
{
    char                                          bUseMikkTSpace;                                               // 0x0000(0x0001)
    char                                          bRecomputeNormals;                                            // 0x0000(0x0001)
    char                                          bRecomputeTangents;                                           // 0x0000(0x0001)
    char                                          bComputeWeightedNormals;                                      // 0x0000(0x0001)
    char                                          bRemoveDegenerates;                                           // 0x0000(0x0001)
    char                                          bBuildReversedIndexBuffer;                                    // 0x0000(0x0001)
    char                                          bUseHighPrecisionTangentBasis;                                // 0x0000(0x0001)
    char                                          bUseFullPrecisionUVs;                                         // 0x0000(0x0001)
    char                                          bUseBackwardsCompatibleF16TruncUVs;                           // 0x0001(0x0001)
    char                                          bGenerateLightmapUVs;                                         // 0x0001(0x0001)
    char                                          bGenerateDistanceFieldAsIfTwoSided;                           // 0x0001(0x0001)
    char                                          bSupportFaceRemap;                                            // 0x0001(0x0001)
    char                                          pa_0002[0x0002]                                               // 0x0002(0x0002)
    int32_t                                       MinLightmapResolution;                                        // 0x0004(0x0004)
    int32_t                                       SrcLightmapIndex;                                             // 0x0008(0x0004)
    int32_t                                       DstLightmapIndex;                                             // 0x000C(0x0004)
    float                                         BuildScale;                                                   // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FVector                                       BuildScale3D;                                                 // 0x0018(0x0018)
    float                                         DistanceFieldResolutionScale;                                 // 0x0030(0x0004)
    char                                          pa_0034[0x0004]                                               // 0x0034(0x0004)
    UStaticMesh*                                  DistanceFieldReplacementMesh;                                 // 0x0038(0x0008)
    int32_t                                       MaxLumenMeshCards;                                            // 0x0040(0x0004)
    char                                          pa_0044[0x0004]                                               // 0x0044(0x0004)
};


// ScriptStruct  Engine.SkeletalMeshBuildSettings
// Struct Size::0x0014
struct FSkeletalMeshBuildSettings
{
    char                                          bRecomputeNormals;                                            // 0x0000(0x0001)
    char                                          bRecomputeTangents;                                           // 0x0000(0x0001)
    char                                          bUseMikkTSpace;                                               // 0x0000(0x0001)
    char                                          bComputeWeightedNormals;                                      // 0x0000(0x0001)
    char                                          bRemoveDegenerates;                                           // 0x0000(0x0001)
    char                                          bUseHighPrecisionTangentBasis;                                // 0x0000(0x0001)
    char                                          bUseFullPrecisionUVs;                                         // 0x0000(0x0001)
    char                                          bUseBackwardsCompatibleF16TruncUVs;                           // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         ThresholdPosition;                                            // 0x0004(0x0004)
    float                                         ThresholdTangentNormal;                                       // 0x0008(0x0004)
    float                                         ThresholdUV;                                                  // 0x000C(0x0004)
    float                                         MorphThresholdPosition;                                       // 0x0010(0x0004)
};


// ScriptStruct  Engine.ConstrainComponentPropName
// Struct Size::0x0008
struct FConstrainComponentPropName
{
    FName                                         ComponentName;                                                // 0x0000(0x0008)
};


// ScriptStruct  Engine.CollectionReference
// Struct Size::0x0008
struct FCollectionReference
{
    FName                                         CollectionName;                                               // 0x0000(0x0008)
};


// ScriptStruct  Engine.Redirector
// Struct Size::0x0010
struct FRedirector
{
    FName                                         OldName;                                                      // 0x0000(0x0008)
    FName                                         NewName;                                                      // 0x0008(0x0008)
};


// ScriptStruct  Engine.DepthFieldGlowInfo
// Struct Size::0x0038
struct FDepthFieldGlowInfo
{
    char                                          bEnableGlow;                                                  // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FLinearColor                                  GlowColor;                                                    // 0x0004(0x0010)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FVector2D                                     GlowOuterRadius;                                              // 0x0018(0x0010)
    FVector2D                                     GlowInnerRadius;                                              // 0x0028(0x0010)
};


// ScriptStruct  Engine.FontRenderInfo
// Struct Size::0x0040
struct FFontRenderInfo
{
    char                                          bClipText;                                                    // 0x0000(0x0001)
    char                                          bEnableShadow;                                                // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    FDepthFieldGlowInfo                           GlowInfo;                                                     // 0x0008(0x0038)
};


// ScriptStruct  Engine.CanvasUVTri
// Struct Size::0x0090
struct FCanvasUVTri
{
    FVector2D                                     V0;                                                           // 0x0000(0x0010)
    FVector2D                                     V0;                                                           // 0x0010(0x0010)
    FLinearColor                                  V0;                                                           // 0x0020(0x0010)
    FVector2D                                     V1;                                                           // 0x0030(0x0010)
    FVector2D                                     V1;                                                           // 0x0040(0x0010)
    FLinearColor                                  V1;                                                           // 0x0050(0x0010)
    FVector2D                                     V2;                                                           // 0x0060(0x0010)
    FVector2D                                     V2;                                                           // 0x0070(0x0010)
    FLinearColor                                  V2;                                                           // 0x0080(0x0010)
};


// ScriptStruct  Engine.ExponentialHeightFogData
// Struct Size::0x000C
struct FExponentialHeightFogData
{
    float                                         FogDensity;                                                   // 0x0000(0x0004)
    float                                         FogHeightFalloff;                                             // 0x0004(0x0004)
    float                                         FogHeightOffset;                                              // 0x0008(0x0004)
};


// ScriptStruct  Engine.FontImportOptionsData
// Struct Size::0x00B0
struct FFontImportOptionsData
{
    FString                                       FontName;                                                     // 0x0000(0x0010)
    float                                         Height;                                                       // 0x0010(0x0004)
    char                                          bEnableAntialiasing;                                          // 0x0014(0x0001)
    char                                          bEnableBold;                                                  // 0x0014(0x0001)
    char                                          bEnableItalic;                                                // 0x0014(0x0001)
    char                                          bEnableUnderline;                                             // 0x0014(0x0001)
    char                                          bAlphaOnly;                                                   // 0x0014(0x0001)
    char                                          pa_0015[0x0003]                                               // 0x0015(0x0003)
    enum class EFontImportCharacterSet            CharacterSet;                                                 // 0x0018(0x0001)
    char                                          pa_0019[0x0007]                                               // 0x0019(0x0007)
    FString                                       Chars;                                                        // 0x0020(0x0010)
    FString                                       UnicodeRange;                                                 // 0x0030(0x0010)
    FString                                       CharsFilePath;                                                // 0x0040(0x0010)
    FString                                       CharsFileWildcard;                                            // 0x0050(0x0010)
    char                                          bCreatePrintableOnly;                                         // 0x0060(0x0001)
    char                                          bIncludeASCIIRange;                                           // 0x0060(0x0001)
    char                                          pa_0061[0x0003]                                               // 0x0061(0x0003)
    FLinearColor                                  ForegroundColor;                                              // 0x0064(0x0010)
    char                                          bEnableDropShadow;                                            // 0x0074(0x0001)
    char                                          pa_0075[0x0003]                                               // 0x0075(0x0003)
    int32_t                                       TexturePageWidth;                                             // 0x0078(0x0004)
    int32_t                                       TexturePageMaxHeight;                                         // 0x007C(0x0004)
    int32_t                                       XPadding;                                                     // 0x0080(0x0004)
    int32_t                                       YPadding;                                                     // 0x0084(0x0004)
    int32_t                                       ExtendBoxTop;                                                 // 0x0088(0x0004)
    int32_t                                       ExtendBoxBottom;                                              // 0x008C(0x0004)
    int32_t                                       ExtendBoxRight;                                               // 0x0090(0x0004)
    int32_t                                       ExtendBoxLeft;                                                // 0x0094(0x0004)
    char                                          bEnableLegacyMode;                                            // 0x0098(0x0001)
    char                                          pa_0099[0x0003]                                               // 0x0099(0x0003)
    int32_t                                       Kerning;                                                      // 0x009C(0x0004)
    char                                          bUseDistanceFieldAlpha;                                       // 0x00A0(0x0001)
    char                                          pa_00A1[0x0003]                                               // 0x00A1(0x0003)
    int32_t                                       DistanceFieldScaleFactor;                                     // 0x00A4(0x0004)
    float                                         DistanceFieldScanRadiusScale;                                 // 0x00A8(0x0004)
    char                                          pa_00AC[0x0004]                                               // 0x00AC(0x0004)
};


// ScriptStruct  Engine.BaseAttenuationSettings
// Struct Size::0x00C0
struct FBaseAttenuationSettings
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    enum class EAttenuationDistanceModel          DistanceAlgorithm;                                            // 0x0008(0x0001)
    enum class EAttenuationShape                  AttenuationShape;                                             // 0x0009(0x0001)
    enum class ENaturalSoundFalloffMode           FalloffMode;                                                  // 0x000A(0x0001)
    char                                          pa_000B[0x0001]                                               // 0x000B(0x0001)
    float                                         dBAttenuationAtMax;                                           // 0x000C(0x0004)
    FVector                                       AttenuationShapeExtents;                                      // 0x0010(0x0018)
    float                                         ConeOffset;                                                   // 0x0028(0x0004)
    float                                         FalloffDistance;                                              // 0x002C(0x0004)
    float                                         ConeSphereRadius;                                             // 0x0030(0x0004)
    float                                         ConeSphereFalloffDistance;                                    // 0x0034(0x0004)
    FRuntimeFloatCurve                            CustomAttenuationCurve;                                       // 0x0038(0x0088)
};


// ScriptStruct  Engine.ForceFeedbackAttenuationSettings
// Struct Size::0x00C0
struct FForceFeedbackAttenuationSettings : public FBaseAttenuationSettings
{
};


// ScriptStruct  Engine.PredictProjectilePathParams
// Struct Size::0x0078
struct FPredictProjectilePathParams
{
    FVector                                       StartLocation;                                                // 0x0000(0x0018)
    FVector                                       LaunchVelocity;                                               // 0x0018(0x0018)
    bool                                          bTraceWithCollision;                                          // 0x0030(0x0001)
    char                                          pa_0031[0x0003]                                               // 0x0031(0x0003)
    float                                         ProjectileRadius;                                             // 0x0034(0x0004)
    float                                         MaxSimTime;                                                   // 0x0038(0x0004)
    bool                                          bTraceWithChannel;                                            // 0x003C(0x0001)
    enum class ECollisionChannel                  TraceChannel;                                                 // 0x003D(0x0001)
    char                                          pa_003E[0x0002]                                               // 0x003E(0x0002)
    TArray<enum class EObjectTypeQuery>           ObjectTypes;                                                  // 0x0040(0x0010)
    TArray<AActor*>                               ActorsToIgnore;                                               // 0x0050(0x0010)
    float                                         SimFrequency;                                                 // 0x0060(0x0004)
    float                                         OverrideGravityZ;                                             // 0x0064(0x0004)
    enum class EDrawDebugTrace                    DrawDebugType;                                                // 0x0068(0x0001)
    char                                          pa_0069[0x0003]                                               // 0x0069(0x0003)
    float                                         DrawDebugTime;                                                // 0x006C(0x0004)
    bool                                          bTraceComplex;                                                // 0x0070(0x0001)
    char                                          pa_0071[0x0007]                                               // 0x0071(0x0007)
};


// ScriptStruct  Engine.PredictProjectilePathPointData
// Struct Size::0x0038
struct FPredictProjectilePathPointData
{
    FVector                                       Location;                                                     // 0x0000(0x0018)
    FVector                                       Velocity;                                                     // 0x0018(0x0018)
    float                                         Time;                                                         // 0x0030(0x0004)
    char                                          pa_0034[0x0004]                                               // 0x0034(0x0004)
};


// ScriptStruct  Engine.PredictProjectilePathResult
// Struct Size::0x0130
struct FPredictProjectilePathResult
{
    TArray<FPredictProjectilePathPointData>       PathData;                                                     // 0x0000(0x0010)
    FPredictProjectilePathPointData               LastTraceDestination;                                         // 0x0010(0x0038)
    FHitResult                                    HitResult;                                                    // 0x0048(0x00E8)
};


// ScriptStruct  Engine.ActiveHapticFeedbackEffect
// Struct Size::0x0048
struct FActiveHapticFeedbackEffect
{
    UHapticFeedbackEffect*                        HapticEffect;                                                 // 0x0000(0x0008)
    char                                          pa_0008[0x0040]                                               // 0x0008(0x0040)
};


// ScriptStruct  Engine.HapticFeedbackDetails
// Struct Size::0x0110
struct FHapticFeedbackDetails
{
    FRuntimeFloatCurve                            Frequency;                                                    // 0x0000(0x0088)
    FRuntimeFloatCurve                            Amplitude;                                                    // 0x0088(0x0088)
};


// ScriptStruct  Engine.ClusterNode
// Struct Size::0x0028
struct FClusterNode
{
    FVector3f                                     BoundMin;                                                     // 0x0000(0x000C)
    int32_t                                       FirstChild;                                                   // 0x000C(0x0004)
    FVector3f                                     BoundMax;                                                     // 0x0010(0x000C)
    int32_t                                       LastChild;                                                    // 0x001C(0x0004)
    int32_t                                       FirstInstance;                                                // 0x0020(0x0004)
    int32_t                                       LastInstance;                                                 // 0x0024(0x0004)
};


// ScriptStruct  Engine.ClusterNode
// Struct Size::0x0040
struct FClusterNode
{
    FVector3f                                     BoundMin;                                                     // 0x0000(0x000C)
    int32_t                                       FirstChild;                                                   // 0x000C(0x0004)
    FVector3f                                     BoundMax;                                                     // 0x0010(0x000C)
    int32_t                                       LastChild;                                                    // 0x001C(0x0004)
    int32_t                                       FirstInstance;                                                // 0x0020(0x0004)
    int32_t                                       LastInstance;                                                 // 0x0024(0x0004)
    FVector3f                                     MinInstanceScale;                                             // 0x0028(0x000C)
    FVector3f                                     MaxInstanceScale;                                             // 0x0034(0x000C)
};


// ScriptStruct  Engine.HLODSubActorDesc
// Struct Size::0x0001
struct FHLODSubActorDesc
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  Engine.HLODSubActor
// Struct Size::0x0001
struct FHLODSubActor
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  Engine.InstancedStaticMeshInstanceData
// Struct Size::0x0080
struct FInstancedStaticMeshInstanceData
{
    FMatrix                                       Transform;                                                    // 0x0000(0x0080)
};


// ScriptStruct  Engine.InstancedStaticMeshMappingInfo
// Struct Size::0x0008
struct FInstancedStaticMeshMappingInfo
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
};


// ScriptStruct  Engine.InstancedStaticMeshRandomSeed
// Struct Size::0x0008
struct FInstancedStaticMeshRandomSeed
{
    int32_t                                       StartInstanceIndex;                                           // 0x0000(0x0004)
    int32_t                                       RandomSeed;                                                   // 0x0004(0x0004)
};


// ScriptStruct  Engine.InstancedStaticMeshLightMapInstanceData
// Struct Size::0x0070
struct FInstancedStaticMeshLightMapInstanceData
{
    FTransform                                    Transform;                                                    // 0x0000(0x0060)
    TArray<FGuid>                                 MapBuildDataIds;                                              // 0x0060(0x0010)
};


// ScriptStruct  Engine.InstancedStaticMeshComponentInstanceData
// Struct Size::0x0190
struct FInstancedStaticMeshComponentInstanceData : public FSceneComponentInstanceData
{
    UStaticMesh*                                  StaticMesh;                                                   // 0x00B8(0x0008)
    FInstancedStaticMeshLightMapInstanceData      CachedStaticLighting;                                         // 0x00C0(0x0070)
    TArray<FInstancedStaticMeshInstanceData>      PerInstanceSMData;                                            // 0x0130(0x0010)
    TArray<float>                                 PerInstanceSMCustomData;                                      // 0x0140(0x0010)
    char                                          pa_0150[0x0020]                                               // 0x0150(0x0020)
    int32_t                                       InstancingRandomSeed;                                         // 0x0170(0x0004)
    char                                          pa_0174[0x0004]                                               // 0x0174(0x0004)
    TArray<FInstancedStaticMeshRandomSeed>        AdditionalRandomSeeds;                                        // 0x0178(0x0010)
    bool                                          bHasPerInstanceHitProxies;                                    // 0x0188(0x0001)
    char                                          pa_0189[0x0007]                                               // 0x0189(0x0007)
};


// ScriptStruct  Engine.UniqueNetIdReplNetSerializerStringStruct
// Struct Size::0x0010
struct FUniqueNetIdReplNetSerializerStringStruct
{
    FString                                       String;                                                       // 0x0000(0x0010)
};


// ScriptStruct  Engine.UniqueNetIdReplNetSerializerNameStruct
// Struct Size::0x0008
struct FUniqueNetIdReplNetSerializerNameStruct
{
    FName                                         Name;                                                         // 0x0000(0x0008)
};


// ScriptStruct  Engine.ISMClientHandle
// Struct Size::0x0014
struct FISMClientHandle
{
    int32_t                                       Index;                                                        // 0x0000(0x0004)
    FGuid                                         Guid;                                                         // 0x0004(0x0010)
};


// ScriptStruct  Engine.ISMClientInstanceManagerData
// Struct Size::0x0010
struct FISMClientInstanceManagerData
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
};


// ScriptStruct  Engine.NewLevelInstanceParams
// Struct Size::0x0048
struct FNewLevelInstanceParams
{
    enum class ELevelInstanceCreationType         Type;                                                         // 0x0000(0x0001)
    enum class ELevelInstancePivotType            PivotType;                                                    // 0x0001(0x0001)
    char                                          pa_0002[0x0006]                                               // 0x0002(0x0006)
    AActor*                                       PivotActor;                                                   // 0x0008(0x0008)
    bool                                          bAlwaysShowDialog;                                            // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
    UWorld*                                       TemplateWorld;                                                // 0x0018(0x0008)
    FString                                       LevelPackageName;                                             // 0x0020(0x0010)
    bool                                          bPromptForSave;                                               // 0x0030(0x0001)
    char                                          pa_0031[0x0007]                                               // 0x0031(0x0007)
    AActor*                                       LevelInstanceClass;                                           // 0x0038(0x0008)
    bool                                          bExternalActors;                                              // 0x0040(0x0001)
    bool                                          bForceExternalActors;                                         // 0x0041(0x0001)
    bool                                          bHideCreationType;                                            // 0x0042(0x0001)
    char                                          pa_0043[0x0005]                                               // 0x0043(0x0005)
};


// ScriptStruct  Engine.ParameterGroupData
// Struct Size::0x0018
struct FParameterGroupData
{
    FString                                       GroupName;                                                    // 0x0000(0x0010)
    int32_t                                       GroupSortPriority;                                            // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  Engine.ExpressionExecOutput
// Struct Size::0x0008
struct FExpressionExecOutput
{
    UMaterialExpression*                          Expression;                                                   // 0x0000(0x0008)
};


// ScriptStruct  Engine.MaterialExpressionCollection
// Struct Size::0x0030
struct FMaterialExpressionCollection
{
    TArray<UMaterialExpression*>                  Expressions;                                                  // 0x0000(0x0010)
    TArray<UMaterialExpressionComment*>           EditorComments;                                               // 0x0010(0x0010)
    UMaterialExpressionExecBegin*                 ExpressionExecBegin;                                          // 0x0020(0x0008)
    UMaterialExpressionExecEnd*                   ExpressionExecEnd;                                            // 0x0028(0x0008)
};


// ScriptStruct  Engine.CustomInput
// Struct Size::0x0030
struct FCustomInput
{
    FName                                         InputName;                                                    // 0x0000(0x0008)
    FExpressionInput                              Input;                                                        // 0x0008(0x0028)
};


// ScriptStruct  Engine.CustomOutput
// Struct Size::0x000C
struct FCustomOutput
{
    FName                                         OutputName;                                                   // 0x0000(0x0008)
    enum class ECustomMaterialOutputType          OutputType;                                                   // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
};


// ScriptStruct  Engine.CustomDefine
// Struct Size::0x0020
struct FCustomDefine
{
    FString                                       DefineName;                                                   // 0x0000(0x0010)
    FString                                       DefineValue;                                                  // 0x0010(0x0010)
};


// ScriptStruct  Engine.FunctionExpressionInput
// Struct Size::0x0040
struct FFunctionExpressionInput
{
    UMaterialExpressionFunctionInput*             ExpressionInput;                                              // 0x0000(0x0008)
    FGuid                                         ExpressionInputId;                                            // 0x0008(0x0010)
    FExpressionInput                              Input;                                                        // 0x0018(0x0028)
};


// ScriptStruct  Engine.FunctionExpressionOutput
// Struct Size::0x0038
struct FFunctionExpressionOutput
{
    UMaterialExpressionFunctionOutput*            ExpressionOutput;                                             // 0x0000(0x0008)
    FGuid                                         ExpressionOutputId;                                           // 0x0008(0x0010)
    FExpressionOutput                             Output;                                                       // 0x0018(0x001C)
    char                                          pa_0034[0x0004]                                               // 0x0034(0x0004)
};


// ScriptStruct  Engine.CompositeReroute
// Struct Size::0x0010
struct FCompositeReroute
{
    FName                                         Name;                                                         // 0x0000(0x0008)
    UMaterialExpressionReroute*                   Expression;                                                   // 0x0008(0x0008)
};


// ScriptStruct  Engine.MaterialInstanceBasePropertyOverrides
// Struct Size::0x0008
struct FMaterialInstanceBasePropertyOverrides
{
    char                                          bOverride;                                                    // 0x0000(0x0001)
    char                                          bOverride;                                                    // 0x0000(0x0001)
    char                                          bOverride;                                                    // 0x0000(0x0001)
    char                                          bOverride;                                                    // 0x0000(0x0001)
    char                                          bOverride;                                                    // 0x0000(0x0001)
    char                                          bOverride;                                                    // 0x0000(0x0001)
    char                                          bOverride;                                                    // 0x0000(0x0001)
    char                                          TwoSided;                                                     // 0x0000(0x0001)
    char                                          DitheredLODTransition;                                        // 0x0001(0x0001)
    char                                          bCastDynamicShadowAsMasked;                                   // 0x0001(0x0001)
    char                                          bOutputTranslucentVelocity;                                   // 0x0001(0x0001)
    enum class EBlendMode                         BlendMode;                                                    // 0x0002(0x0001)
    enum class EMaterialShadingModel              ShadingModel;                                                 // 0x0003(0x0001)
    float                                         OpacityMaskClipValue;                                         // 0x0004(0x0004)
};


// ScriptStruct  Engine.LightmassMaterialInterfaceSettings
// Struct Size::0x0010
struct FLightmassMaterialInterfaceSettings
{
    float                                         EmissiveBoost;                                                // 0x0000(0x0004)
    float                                         DiffuseBoost;                                                 // 0x0004(0x0004)
    float                                         ExportResolutionScale;                                        // 0x0008(0x0004)
    char                                          bCastShadowAsMasked;                                          // 0x000C(0x0001)
    char                                          bOverrideCastShadowAsMasked;                                  // 0x000C(0x0001)
    char                                          bOverrideEmissiveBoost;                                       // 0x000C(0x0001)
    char                                          bOverrideDiffuseBoost;                                        // 0x000C(0x0001)
    char                                          bOverrideExportResolutionScale;                               // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
};


// ScriptStruct  Engine.MaterialTextureInfo
// Struct Size::0x0010
struct FMaterialTextureInfo
{
    float                                         SamplingScale;                                                // 0x0000(0x0004)
    int32_t                                       UVChannelIndex;                                               // 0x0004(0x0004)
    FName                                         TextureName;                                                  // 0x0008(0x0008)
};


// ScriptStruct  Engine.MaterialLayersFunctionsEditorOnlyData
// Struct Size::0x0070
struct FMaterialLayersFunctionsEditorOnlyData
{
    TArray<bool>                                  LayerStates;                                                  // 0x0000(0x0010)
    TArray<FText>                                 LayerNames;                                                   // 0x0010(0x0010)
    TArray<bool>                                  RestrictToLayerRelatives;                                     // 0x0020(0x0010)
    TArray<bool>                                  RestrictToBlendRelatives;                                     // 0x0030(0x0010)
    TArray<FGuid>                                 LayerGuids;                                                   // 0x0040(0x0010)
    TArray<enum class EMaterialLayerLinkState>    LayerLinkStates;                                              // 0x0050(0x0010)
    TArray<FGuid>                                 DeletedParentLayerGuids;                                      // 0x0060(0x0010)
};


// ScriptStruct  Engine.MaterialLayersFunctionsRuntimeData
// Struct Size::0x0020
struct FMaterialLayersFunctionsRuntimeData
{
    TArray<UMaterialFunctionInterface*>           Layers;                                                       // 0x0000(0x0010)
    TArray<UMaterialFunctionInterface*>           Blends;                                                       // 0x0010(0x0010)
};


// ScriptStruct  Engine.MaterialLayersFunctions
// Struct Size::0x0100
struct FMaterialLayersFunctions : public FMaterialLayersFunctionsRuntimeData
{
    FMaterialLayersFunctionsEditorOnlyData        EditorOnly;                                                   // 0x0020(0x0070)
    TArray<bool>                                  LayerStates;                                                  // 0x0090(0x0010)
    TArray<FText>                                 LayerNames;                                                   // 0x00A0(0x0010)
    TArray<bool>                                  RestrictToLayerRelatives;                                     // 0x00B0(0x0010)
    TArray<bool>                                  RestrictToBlendRelatives;                                     // 0x00C0(0x0010)
    TArray<FGuid>                                 LayerGuids;                                                   // 0x00D0(0x0010)
    TArray<enum class EMaterialLayerLinkState>    LayerLinkStates;                                              // 0x00E0(0x0010)
    TArray<FGuid>                                 DeletedParentLayerGuids;                                      // 0x00F0(0x0010)
};


// ScriptStruct  Engine.MaterialProxySettings
// Struct Size::0x0094
struct FMaterialProxySettings
{
    enum class ETextureSizingType                 TextureSizingType;                                            // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FIntPoint                                     TextureSize;                                                  // 0x0004(0x0008)
    float                                         TargetTexelDensityPerMeter;                                   // 0x000C(0x0004)
    float                                         MeshMaxScreenSizePercent;                                     // 0x0010(0x0004)
    float                                         MeshMinDrawDistance;                                          // 0x0014(0x0004)
    float                                         GutterSpace;                                                  // 0x0018(0x0004)
    float                                         MetallicConstant;                                             // 0x001C(0x0004)
    float                                         RoughnessConstant;                                            // 0x0020(0x0004)
    float                                         AnisotropyConstant;                                           // 0x0024(0x0004)
    float                                         SpecularConstant;                                             // 0x0028(0x0004)
    float                                         OpacityConstant;                                              // 0x002C(0x0004)
    float                                         OpacityMaskConstant;                                          // 0x0030(0x0004)
    float                                         AmbientOcclusionConstant;                                     // 0x0034(0x0004)
    enum class EMaterialMergeType                 MaterialMergeType;                                            // 0x0038(0x0001)
    enum class EBlendMode                         BlendMode;                                                    // 0x0039(0x0001)
    char                                          bAllowTwoSidedMaterial;                                       // 0x003A(0x0001)
    char                                          bNormalMap;                                                   // 0x003A(0x0001)
    char                                          bTangentMap;                                                  // 0x003A(0x0001)
    char                                          bMetallicMap;                                                 // 0x003A(0x0001)
    char                                          bRoughnessMap;                                                // 0x003A(0x0001)
    char                                          bAnisotropyMap;                                               // 0x003A(0x0001)
    char                                          bSpecularMap;                                                 // 0x003A(0x0001)
    char                                          bEmissiveMap;                                                 // 0x003A(0x0001)
    char                                          bOpacityMap;                                                  // 0x003B(0x0001)
    char                                          bOpacityMaskMap;                                              // 0x003B(0x0001)
    char                                          bAmbientOcclusionMap;                                         // 0x003B(0x0001)
    FIntPoint                                     DiffuseTextureSize;                                           // 0x003C(0x0008)
    FIntPoint                                     NormalTextureSize;                                            // 0x0044(0x0008)
    FIntPoint                                     TangentTextureSize;                                           // 0x004C(0x0008)
    FIntPoint                                     MetallicTextureSize;                                          // 0x0054(0x0008)
    FIntPoint                                     RoughnessTextureSize;                                         // 0x005C(0x0008)
    FIntPoint                                     AnisotropyTextureSize;                                        // 0x0064(0x0008)
    FIntPoint                                     SpecularTextureSize;                                          // 0x006C(0x0008)
    FIntPoint                                     EmissiveTextureSize;                                          // 0x0074(0x0008)
    FIntPoint                                     OpacityTextureSize;                                           // 0x007C(0x0008)
    FIntPoint                                     OpacityMaskTextureSize;                                       // 0x0084(0x0008)
    FIntPoint                                     AmbientOcclusionTextureSize;                                  // 0x008C(0x0008)
};


// ScriptStruct  Engine.MaterialOverrideNanite
// Struct Size::0x0040
struct FMaterialOverrideNanite
{
    TSoftObjectPtr<UMaterialInterface>            OverrideMaterialRef;                                          // 0x0000(0x0030)
    bool                                          bEnableOverride;                                              // 0x0030(0x0001)
    char                                          pa_0031[0x0007]                                               // 0x0031(0x0007)
    UMaterialInterface*                           OverrideMaterial;                                             // 0x0038(0x0008)
};


// ScriptStruct  Engine.CollectionParameterBase
// Struct Size::0x0018
struct FCollectionParameterBase
{
    FName                                         ParameterName;                                                // 0x0000(0x0008)
    FGuid                                         ID;                                                           // 0x0008(0x0010)
};


// ScriptStruct  Engine.CollectionScalarParameter
// Struct Size::0x001C
struct FCollectionScalarParameter : public FCollectionParameterBase
{
    float                                         DefaultValue;                                                 // 0x0018(0x0004)
};


// ScriptStruct  Engine.CollectionVectorParameter
// Struct Size::0x0028
struct FCollectionVectorParameter : public FCollectionParameterBase
{
    FLinearColor                                  DefaultValue;                                                 // 0x0018(0x0010)
};


// ScriptStruct  Engine.MaterialParameterInfo
// Struct Size::0x0010
struct FMaterialParameterInfo
{
    FName                                         Name;                                                         // 0x0000(0x0008)
    enum class EMaterialParameterAssociation      Association;                                                  // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
    int32_t                                       Index;                                                        // 0x000C(0x0004)
};


// ScriptStruct  Engine.ParameterChannelNames
// Struct Size::0x0060
struct FParameterChannelNames
{
    FText                                         R;                                                            // 0x0000(0x0018)
    FText                                         G;                                                            // 0x0018(0x0018)
    FText                                         B;                                                            // 0x0030(0x0018)
    FText                                         A;                                                            // 0x0048(0x0018)
};


// ScriptStruct  Engine.StaticComponentMaskValue
// Struct Size::0x0004
struct FStaticComponentMaskValue
{
    bool                                          R;                                                            // 0x0000(0x0001)
    bool                                          G;                                                            // 0x0001(0x0001)
    bool                                          B;                                                            // 0x0002(0x0001)
    bool                                          A;                                                            // 0x0003(0x0001)
};


// ScriptStruct  Engine.PurchaseInfo
// Struct Size::0x0040
struct FPurchaseInfo
{
    FString                                       Identifier;                                                   // 0x0000(0x0010)
    FString                                       DisplayName;                                                  // 0x0010(0x0010)
    FString                                       DisplayDescription;                                           // 0x0020(0x0010)
    FString                                       DisplayPrice;                                                 // 0x0030(0x0010)
};


// ScriptStruct  Engine.NavAvoidanceMask
// Struct Size::0x0004
struct FNavAvoidanceMask
{
    char                                          bGroup0;                                                      // 0x0000(0x0001)
    char                                          bGroup1;                                                      // 0x0000(0x0001)
    char                                          bGroup2;                                                      // 0x0000(0x0001)
    char                                          bGroup3;                                                      // 0x0000(0x0001)
    char                                          bGroup4;                                                      // 0x0000(0x0001)
    char                                          bGroup5;                                                      // 0x0000(0x0001)
    char                                          bGroup6;                                                      // 0x0000(0x0001)
    char                                          bGroup7;                                                      // 0x0000(0x0001)
    char                                          bGroup8;                                                      // 0x0001(0x0001)
    char                                          bGroup9;                                                      // 0x0001(0x0001)
    char                                          bGroup10;                                                     // 0x0001(0x0001)
    char                                          bGroup11;                                                     // 0x0001(0x0001)
    char                                          bGroup12;                                                     // 0x0001(0x0001)
    char                                          bGroup13;                                                     // 0x0001(0x0001)
    char                                          bGroup14;                                                     // 0x0001(0x0001)
    char                                          bGroup15;                                                     // 0x0001(0x0001)
    char                                          bGroup16;                                                     // 0x0002(0x0001)
    char                                          bGroup17;                                                     // 0x0002(0x0001)
    char                                          bGroup18;                                                     // 0x0002(0x0001)
    char                                          bGroup19;                                                     // 0x0002(0x0001)
    char                                          bGroup20;                                                     // 0x0002(0x0001)
    char                                          bGroup21;                                                     // 0x0002(0x0001)
    char                                          bGroup22;                                                     // 0x0002(0x0001)
    char                                          bGroup23;                                                     // 0x0002(0x0001)
    char                                          bGroup24;                                                     // 0x0003(0x0001)
    char                                          bGroup25;                                                     // 0x0003(0x0001)
    char                                          bGroup26;                                                     // 0x0003(0x0001)
    char                                          bGroup27;                                                     // 0x0003(0x0001)
    char                                          bGroup28;                                                     // 0x0003(0x0001)
    char                                          bGroup29;                                                     // 0x0003(0x0001)
    char                                          bGroup30;                                                     // 0x0003(0x0001)
    char                                          bGroup31;                                                     // 0x0003(0x0001)
};


// ScriptStruct  Engine.NavigationLinkBase
// Struct Size::0x0030
struct FNavigationLinkBase
{
    float                                         LeftProjectHeight;                                            // 0x0000(0x0004)
    float                                         MaxFallDownLength;                                            // 0x0004(0x0004)
    char                                          pa_0008[0x0004]                                               // 0x0008(0x0004)
    float                                         SnapRadius;                                                   // 0x000C(0x0004)
    float                                         SnapHeight;                                                   // 0x0010(0x0004)
    FNavAgentSelector                             SupportedAgents;                                              // 0x0014(0x0004)
    char                                          bSupportsAgent0;                                              // 0x0018(0x0001)
    char                                          bSupportsAgent1;                                              // 0x0018(0x0001)
    char                                          bSupportsAgent2;                                              // 0x0018(0x0001)
    char                                          bSupportsAgent3;                                              // 0x0018(0x0001)
    char                                          bSupportsAgent4;                                              // 0x0018(0x0001)
    char                                          bSupportsAgent5;                                              // 0x0018(0x0001)
    char                                          bSupportsAgent6;                                              // 0x0018(0x0001)
    char                                          bSupportsAgent7;                                              // 0x0018(0x0001)
    char                                          bSupportsAgent8;                                              // 0x0019(0x0001)
    char                                          bSupportsAgent9;                                              // 0x0019(0x0001)
    char                                          bSupportsAgent10;                                             // 0x0019(0x0001)
    char                                          bSupportsAgent11;                                             // 0x0019(0x0001)
    char                                          bSupportsAgent12;                                             // 0x0019(0x0001)
    char                                          bSupportsAgent13;                                             // 0x0019(0x0001)
    char                                          bSupportsAgent14;                                             // 0x0019(0x0001)
    char                                          bSupportsAgent15;                                             // 0x0019(0x0001)
    char                                          pa_001A[0x0002]                                               // 0x001A(0x0002)
    enum class ENavLinkDirection                  Direction;                                                    // 0x001C(0x0001)
    char                                          bUseSnapHeight;                                               // 0x001D(0x0001)
    char                                          bSnapToCheapestArea;                                          // 0x001D(0x0001)
    char                                          bCustomFlag0;                                                 // 0x001D(0x0001)
    char                                          bCustomFlag1;                                                 // 0x001D(0x0001)
    char                                          bCustomFlag2;                                                 // 0x001D(0x0001)
    char                                          bCustomFlag3;                                                 // 0x001D(0x0001)
    char                                          bCustomFlag4;                                                 // 0x001D(0x0001)
    char                                          bCustomFlag5;                                                 // 0x001D(0x0001)
    char                                          bCustomFlag6;                                                 // 0x001E(0x0001)
    char                                          bCustomFlag7;                                                 // 0x001E(0x0001)
    char                                          pa_001F[0x0001]                                               // 0x001F(0x0001)
    UNavAreaBase*                                 AreaClass;                                                    // 0x0020(0x0008)
    char                                          pa_0028[0x0008]                                               // 0x0028(0x0008)
};


// ScriptStruct  Engine.NavAgentSelector
// Struct Size::0x0004
struct FNavAgentSelector
{
    char                                          bSupportsAgent0;                                              // 0x0000(0x0001)
    char                                          bSupportsAgent1;                                              // 0x0000(0x0001)
    char                                          bSupportsAgent2;                                              // 0x0000(0x0001)
    char                                          bSupportsAgent3;                                              // 0x0000(0x0001)
    char                                          bSupportsAgent4;                                              // 0x0000(0x0001)
    char                                          bSupportsAgent5;                                              // 0x0000(0x0001)
    char                                          bSupportsAgent6;                                              // 0x0000(0x0001)
    char                                          bSupportsAgent7;                                              // 0x0000(0x0001)
    char                                          bSupportsAgent8;                                              // 0x0001(0x0001)
    char                                          bSupportsAgent9;                                              // 0x0001(0x0001)
    char                                          bSupportsAgent10;                                             // 0x0001(0x0001)
    char                                          bSupportsAgent11;                                             // 0x0001(0x0001)
    char                                          bSupportsAgent12;                                             // 0x0001(0x0001)
    char                                          bSupportsAgent13;                                             // 0x0001(0x0001)
    char                                          bSupportsAgent14;                                             // 0x0001(0x0001)
    char                                          bSupportsAgent15;                                             // 0x0001(0x0001)
    char                                          pa_0002[0x0002]                                               // 0x0002(0x0002)
};


// ScriptStruct  Engine.NavigationLink
// Struct Size::0x0060
struct FNavigationLink : public FNavigationLinkBase
{
    FVector                                       Left;                                                         // 0x0030(0x0018)
    FVector                                       Right;                                                        // 0x0048(0x0018)
};


// ScriptStruct  Engine.NavigationSegmentLink
// Struct Size::0x0090
struct FNavigationSegmentLink : public FNavigationLinkBase
{
    FVector                                       LeftStart;                                                    // 0x0030(0x0018)
    FVector                                       LeftEnd;                                                      // 0x0048(0x0018)
    FVector                                       RightStart;                                                   // 0x0060(0x0018)
    FVector                                       RightEnd;                                                     // 0x0078(0x0018)
};


// ScriptStruct  Engine.OverlapResult
// Struct Size::0x0028
struct FOverlapResult
{
    FActorInstanceHandle                          OverlapObjectHandle;                                          // 0x0000(0x0018)
    TWeakObjectPtr<UPrimitiveComponent>           Component;                                                    // 0x0018(0x0008)
    char                                          pa_0020[0x0004]                                               // 0x0020(0x0004)
    char                                          bBlockingHit;                                                 // 0x0024(0x0001)
    char                                          pa_0025[0x0003]                                               // 0x0025(0x0003)
};


// ScriptStruct  Engine.ParticleBurst
// Struct Size::0x000C
struct FParticleBurst
{
    int32_t                                       Count;                                                        // 0x0000(0x0004)
    int32_t                                       CountLow;                                                     // 0x0004(0x0004)
    float                                         Time;                                                         // 0x0008(0x0004)
};


// ScriptStruct  Engine.ParticleCurvePair
// Struct Size::0x0018
struct FParticleCurvePair
{
    FString                                       CurveName;                                                    // 0x0000(0x0010)
    UObject*                                      CurveObject;                                                  // 0x0010(0x0008)
};


// ScriptStruct  Engine.ParticleRandomSeedInfo
// Struct Size::0x0020
struct FParticleRandomSeedInfo
{
    FName                                         ParameterName;                                                // 0x0000(0x0008)
    char                                          bGetSeedFromInstance;                                         // 0x0008(0x0001)
    char                                          bInstanceSeedIsIndex;                                         // 0x0008(0x0001)
    char                                          bResetSeedOnEmitterLooping;                                   // 0x0008(0x0001)
    char                                          bRandomlySelectSeedArray;                                     // 0x0008(0x0001)
    char                                          pa_0009[0x0007]                                               // 0x0009(0x0007)
    TArray<int32_t>                               RandomSeeds;                                                  // 0x0010(0x0010)
};


// ScriptStruct  Engine.BeamModifierOptions
// Struct Size::0x0004
struct FBeamModifierOptions
{
    char                                          bModify;                                                      // 0x0000(0x0001)
    char                                          bScale;                                                       // 0x0000(0x0001)
    char                                          Block;                                                        // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
};


// ScriptStruct  Engine.ParticleEvent
// Struct Size::0x0028
struct FParticleEvent
{
    enum class EParticleEventType                 Type;                                                         // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    int32_t                                       Frequency;                                                    // 0x0004(0x0004)
    int32_t                                       ParticleFrequency;                                            // 0x0008(0x0004)
    char                                          FirstTimeOnly;                                                // 0x000C(0x0001)
    char                                          LastTimeOnly;                                                 // 0x000C(0x0001)
    char                                          UseReflectedImpactVector;                                     // 0x000C(0x0001)
    char                                          bUseOrbitOffset;                                              // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
    FName                                         CustomName;                                                   // 0x0010(0x0008)
    TArray<UParticleModuleEventSendToGame*>       ParticleModuleEventsToSendToGame;                             // 0x0018(0x0010)
};


// ScriptStruct  Engine.LocationBoneSocketInfo
// Struct Size::0x0020
struct FLocationBoneSocketInfo
{
    FName                                         BoneSocketName;                                               // 0x0000(0x0008)
    FVector                                       Offset;                                                       // 0x0008(0x0018)
};


// ScriptStruct  Engine.OrbitOptions
// Struct Size::0x0004
struct FOrbitOptions
{
    char                                          bProcessDuringSpawn;                                          // 0x0000(0x0001)
    char                                          bProcessDuringUpdate;                                         // 0x0000(0x0001)
    char                                          bUseEmitterTime;                                              // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
};


// ScriptStruct  Engine.EmitterDynamicParameter
// Struct Size::0x0048
struct FEmitterDynamicParameter
{
    FName                                         ParamName;                                                    // 0x0000(0x0008)
    char                                          bUseEmitterTime;                                              // 0x0008(0x0001)
    char                                          bSpawnTimeOnly;                                               // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
    enum class EEmitterDynamicParameterValue      ValueMethod;                                                  // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
    char                                          bScaleVelocityByParamValue;                                   // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
    FRawDistributionFloat                         ParamValue;                                                   // 0x0018(0x0030)
};


// ScriptStruct  Engine.BeamTargetData
// Struct Size::0x000C
struct FBeamTargetData
{
    FName                                         TargetName;                                                   // 0x0000(0x0008)
    float                                         TargetPercentage;                                             // 0x0008(0x0004)
};


// ScriptStruct  Engine.GPUSpriteLocalVectorFieldInfo
// Struct Size::0x00D0
struct FGPUSpriteLocalVectorFieldInfo
{
    UVectorField*                                 Field;                                                        // 0x0000(0x0008)
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FTransform                                    Transform;                                                    // 0x0010(0x0060)
    FRotator                                      MinInitialRotation;                                           // 0x0070(0x0018)
    FRotator                                      MaxInitialRotation;                                           // 0x0088(0x0018)
    FRotator                                      RotationRate;                                                 // 0x00A0(0x0018)
    float                                         Intensity;                                                    // 0x00B8(0x0004)
    float                                         Tightness;                                                    // 0x00BC(0x0004)
    char                                          bIgnoreComponentTransform;                                    // 0x00C0(0x0001)
    char                                          bTileX;                                                       // 0x00C0(0x0001)
    char                                          bTileY;                                                       // 0x00C0(0x0001)
    char                                          bTileZ;                                                       // 0x00C0(0x0001)
    char                                          bUseFixDT;                                                    // 0x00C0(0x0001)
    char                                          pa_00C1[0x000F]                                               // 0x00C1(0x000F)
};


// ScriptStruct  Engine.GPUSpriteEmitterInfo
// Struct Size::0x0350
struct FGPUSpriteEmitterInfo
{
    UParticleModuleRequired*                      RequiredModule;                                               // 0x0000(0x0008)
    UParticleModuleSpawn*                         SpawnModule;                                                  // 0x0008(0x0008)
    UParticleModuleSpawnPerUnit*                  SpawnPerUnitModule;                                           // 0x0010(0x0008)
    TArray<UParticleModule*>                      SpawnModules;                                                 // 0x0018(0x0010)
    char                                          pa_0028[0x0008]                                               // 0x0028(0x0008)
    FGPUSpriteLocalVectorFieldInfo                LocalVectorField;                                             // 0x0030(0x00D0)
    FFloatDistribution                            VectorFieldScale;                                             // 0x0100(0x0020)
    FFloatDistribution                            DragCoefficient;                                              // 0x0120(0x0020)
    FFloatDistribution                            PointAttractorStrength;                                       // 0x0140(0x0020)
    FFloatDistribution                            Resilience;                                                   // 0x0160(0x0020)
    FVector                                       ConstantAcceleration;                                         // 0x0180(0x0018)
    FVector                                       PointAttractorPosition;                                       // 0x0198(0x0018)
    float                                         PointAttractorRadiusSq;                                       // 0x01B0(0x0004)
    char                                          pa_01B4[0x0004]                                               // 0x01B4(0x0004)
    FVector                                       OrbitOffsetBase;                                              // 0x01B8(0x0018)
    FVector                                       OrbitOffsetRange;                                             // 0x01D0(0x0018)
    FVector2D                                     InvMaxSize;                                                   // 0x01E8(0x0010)
    float                                         InvRotationRateScale;                                         // 0x01F8(0x0004)
    float                                         MaxLifetime;                                                  // 0x01FC(0x0004)
    int32_t                                       MaxParticleCount;                                             // 0x0200(0x0004)
    enum class EParticleScreenAlignment           ScreenAlignment;                                              // 0x0204(0x0001)
    enum class EParticleAxisLock                  LockAxisFlag;                                                 // 0x0205(0x0001)
    char                                          pa_0206[0x0002]                                               // 0x0206(0x0002)
    char                                          bEnableCollision;                                             // 0x0208(0x0001)
    char                                          pa_0209[0x0003]                                               // 0x0209(0x0003)
    enum class EParticleCollisionMode             CollisionMode;                                                // 0x020C(0x0001)
    char                                          pa_020D[0x0003]                                               // 0x020D(0x0003)
    char                                          bRemoveHMDRoll;                                               // 0x0210(0x0001)
    char                                          pa_0211[0x0003]                                               // 0x0211(0x0003)
    float                                         MinFacingCameraBlendDistance;                                 // 0x0214(0x0004)
    float                                         MaxFacingCameraBlendDistance;                                 // 0x0218(0x0004)
    char                                          pa_021C[0x0004]                                               // 0x021C(0x0004)
    FRawDistributionVector                        DynamicColor;                                                 // 0x0220(0x0060)
    FRawDistributionFloat                         DynamicAlpha;                                                 // 0x0280(0x0030)
    FRawDistributionVector                        DynamicColorScale;                                            // 0x02B0(0x0060)
    FRawDistributionFloat                         DynamicAlphaScale;                                            // 0x0310(0x0030)
    char                                          pa_0340[0x0010]                                               // 0x0340(0x0010)
};


// ScriptStruct  Engine.GPUSpriteResourceData
// Struct Size::0x0240
struct FGPUSpriteResourceData
{
    TArray<FColor>                                QuantizedColorSamples;                                        // 0x0000(0x0010)
    TArray<FColor>                                QuantizedMiscSamples;                                         // 0x0010(0x0010)
    TArray<FColor>                                QuantizedSimulationAttrSamples;                               // 0x0020(0x0010)
    FVector4                                      ColorScale;                                                   // 0x0030(0x0020)
    FVector4                                      ColorBias;                                                    // 0x0050(0x0020)
    FVector4                                      MiscScale;                                                    // 0x0070(0x0020)
    FVector4                                      MiscBias;                                                     // 0x0090(0x0020)
    FVector4                                      SimulationAttrCurveScale;                                     // 0x00B0(0x0020)
    FVector4                                      SimulationAttrCurveBias;                                      // 0x00D0(0x0020)
    FVector4                                      SubImageSize;                                                 // 0x00F0(0x0020)
    FVector4                                      SizeBySpeed;                                                  // 0x0110(0x0020)
    FVector                                       ConstantAcceleration;                                         // 0x0130(0x0018)
    FVector                                       OrbitOffsetBase;                                              // 0x0148(0x0018)
    FVector                                       OrbitOffsetRange;                                             // 0x0160(0x0018)
    FVector                                       OrbitFrequencyBase;                                           // 0x0178(0x0018)
    FVector                                       OrbitFrequencyRange;                                          // 0x0190(0x0018)
    FVector                                       OrbitPhaseBase;                                               // 0x01A8(0x0018)
    FVector                                       OrbitPhaseRange;                                              // 0x01C0(0x0018)
    float                                         GlobalVectorFieldScale;                                       // 0x01D8(0x0004)
    float                                         GlobalVectorFieldTightness;                                   // 0x01DC(0x0004)
    float                                         PerParticleVectorFieldScale;                                  // 0x01E0(0x0004)
    float                                         PerParticleVectorFieldBias;                                   // 0x01E4(0x0004)
    float                                         DragCoefficientScale;                                         // 0x01E8(0x0004)
    float                                         DragCoefficientBias;                                          // 0x01EC(0x0004)
    float                                         ResilienceScale;                                              // 0x01F0(0x0004)
    float                                         ResilienceBias;                                               // 0x01F4(0x0004)
    float                                         CollisionRadiusScale;                                         // 0x01F8(0x0004)
    float                                         CollisionRadiusBias;                                          // 0x01FC(0x0004)
    float                                         CollisionTimeBias;                                            // 0x0200(0x0004)
    float                                         CollisionRandomSpread;                                        // 0x0204(0x0004)
    float                                         CollisionRandomDistribution;                                  // 0x0208(0x0004)
    float                                         OneMinusFriction;                                             // 0x020C(0x0004)
    float                                         RotationRateScale;                                            // 0x0210(0x0004)
    float                                         CameraMotionBlurAmount;                                       // 0x0214(0x0004)
    enum class EParticleScreenAlignment           ScreenAlignment;                                              // 0x0218(0x0001)
    enum class EParticleAxisLock                  LockAxisFlag;                                                 // 0x0219(0x0001)
    char                                          pa_021A[0x0006]                                               // 0x021A(0x0006)
    FVector2D                                     PivotOffset;                                                  // 0x0220(0x0010)
    char                                          bRemoveHMDRoll;                                               // 0x0230(0x0001)
    char                                          pa_0231[0x0003]                                               // 0x0231(0x0003)
    float                                         MinFacingCameraBlendDistance;                                 // 0x0234(0x0004)
    float                                         MaxFacingCameraBlendDistance;                                 // 0x0238(0x0004)
    char                                          pa_023C[0x0004]                                               // 0x023C(0x0004)
};


// ScriptStruct  Engine.ParticleSystemLOD
// Struct Size::0x0001
struct FParticleSystemLOD
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  Engine.LODSoloTrack
// Struct Size::0x0010
struct FLODSoloTrack
{
    TArray<char>                                  SoloEnableSetting;                                            // 0x0000(0x0010)
};


// ScriptStruct  Engine.NamedEmitterMaterial
// Struct Size::0x0010
struct FNamedEmitterMaterial
{
    FName                                         Name;                                                         // 0x0000(0x0008)
    UMaterialInterface*                           Material;                                                     // 0x0008(0x0008)
};


// ScriptStruct  Engine.ParticleSysParam
// Struct Size::0x00E0
struct FParticleSysParam
{
    FName                                         Name;                                                         // 0x0000(0x0008)
    enum class EParticleSysParamType              ParamType;                                                    // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
    float                                         Scalar;                                                       // 0x000C(0x0004)
    float                                         Scalar;                                                       // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FVector                                       Vector;                                                       // 0x0018(0x0018)
    FVector                                       Vector;                                                       // 0x0030(0x0018)
    FColor                                        Color;                                                        // 0x0048(0x0004)
    char                                          pa_004C[0x0004]                                               // 0x004C(0x0004)
    AActor*                                       Actor;                                                        // 0x0050(0x0008)
    UMaterialInterface*                           Material;                                                     // 0x0058(0x0008)
    char                                          pa_0060[0x0080]                                               // 0x0060(0x0080)
};


// ScriptStruct  Engine.FXSystemSpawnParameters
// Struct Size::0x0078
struct FFXSystemSpawnParameters
{
    char                                          pa_0000[0x0078]                                               // 0x0000(0x0078)
};


// ScriptStruct  Engine.ParticleEmitterReplayFrame
// Struct Size::0x0010
struct FParticleEmitterReplayFrame
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
};


// ScriptStruct  Engine.ParticleSystemReplayFrame
// Struct Size::0x0010
struct FParticleSystemReplayFrame
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
};


// ScriptStruct  Engine.DelegateArray
// Struct Size::0x0010
struct FDelegateArray
{
    TArray<FDelegate>                             Delegates;                                                    // 0x0000(0x0010)
};


// ScriptStruct  Engine.CameraCacheEntry
// Struct Size::0x07D0
struct FCameraCacheEntry
{
    float                                         Timestamp;                                                    // 0x0000(0x0004)
    char                                          pa_0004[0x000C]                                               // 0x0004(0x000C)
    FMinimalViewInfo                              POV;                                                          // 0x0010(0x07C0)
};


// ScriptStruct  Engine.TViewTarget
// Struct Size::0x07E0
struct FTViewTarget
{
    AActor*                                       Target;                                                       // 0x0000(0x0008)
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FMinimalViewInfo                              POV;                                                          // 0x0010(0x07C0)
    APlayerState*                                 PlayerState;                                                  // 0x07D0(0x0008)
    char                                          pa_07D8[0x0008]                                               // 0x07D8(0x0008)
};


// ScriptStruct  Engine.ViewTargetTransitionParams
// Struct Size::0x0010
struct FViewTargetTransitionParams
{
    float                                         BlendTime;                                                    // 0x0000(0x0004)
    enum class EViewTargetBlendFunction           BlendFunction;                                                // 0x0004(0x0001)
    char                                          pa_0005[0x0003]                                               // 0x0005(0x0003)
    float                                         BlendExp;                                                     // 0x0008(0x0004)
    char                                          bLockOutgoing;                                                // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
};


// ScriptStruct  Engine.SpriteCategoryInfo
// Struct Size::0x0038
struct FSpriteCategoryInfo
{
    FName                                         Category;                                                     // 0x0000(0x0008)
    FText                                         DisplayName;                                                  // 0x0008(0x0018)
    FText                                         Description;                                                  // 0x0020(0x0018)
};


// ScriptStruct  Engine.PrimitiveComponentInstanceData
// Struct Size::0x0130
struct FPrimitiveComponentInstanceData : public FSceneComponentInstanceData
{
    char                                          pa_00B8[0x0008]                                               // 0x00B8(0x0008)
    FTransform                                    ComponentTransform;                                           // 0x00C0(0x0060)
    int32_t                                       VisibilityId;                                                 // 0x0120(0x0004)
    char                                          pa_0124[0x0004]                                               // 0x0124(0x0004)
    UPrimitiveComponent*                          LODParent;                                                    // 0x0128(0x0008)
};


// ScriptStruct  Engine.LevelNameAndTime
// Struct Size::0x0018
struct FLevelNameAndTime
{
    FString                                       LevelName;                                                    // 0x0000(0x0010)
    uint32_t                                      LevelChangeTimeInMS;                                          // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  Engine.RepMovementNetSerializerConfig
// Struct Size::0x0001
struct FRepMovementNetSerializerConfig : public FNetSerializerConfig
{
};


// ScriptStruct  Engine.ReverbSettings
// Struct Size::0x0020
struct FReverbSettings
{
    bool                                          bApplyReverb;                                                 // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    UReverbEffect*                                ReverbEffect;                                                 // 0x0008(0x0008)
    USoundEffectSubmixPreset*                     ReverbPluginEffect;                                           // 0x0010(0x0008)
    float                                         Volume;                                                       // 0x0018(0x0004)
    float                                         FadeTime;                                                     // 0x001C(0x0004)
};


// ScriptStruct  Engine.CompressedRichCurve
// Struct Size::0x0018
struct FCompressedRichCurve
{
    char                                          pa_0000[0x0018]                                               // 0x0000(0x0018)
};


// ScriptStruct  Engine.ColorGradePerRangeSettings
// Struct Size::0x00A0
struct FColorGradePerRangeSettings
{
    FVector4                                      Saturation;                                                   // 0x0000(0x0020)
    FVector4                                      Contrast;                                                     // 0x0020(0x0020)
    FVector4                                      Gamma;                                                        // 0x0040(0x0020)
    FVector4                                      Gain;                                                         // 0x0060(0x0020)
    FVector4                                      Offset;                                                       // 0x0080(0x0020)
};


// ScriptStruct  Engine.ColorGradingSettings
// Struct Size::0x0290
struct FColorGradingSettings
{
    FColorGradePerRangeSettings                   Global;                                                       // 0x0000(0x00A0)
    FColorGradePerRangeSettings                   Shadows;                                                      // 0x00A0(0x00A0)
    FColorGradePerRangeSettings                   Midtones;                                                     // 0x0140(0x00A0)
    FColorGradePerRangeSettings                   Highlights;                                                   // 0x01E0(0x00A0)
    float                                         ShadowsMax;                                                   // 0x0280(0x0004)
    float                                         HighlightsMin;                                                // 0x0284(0x0004)
    float                                         HighlightsMax;                                                // 0x0288(0x0004)
    char                                          pa_028C[0x0004]                                               // 0x028C(0x0004)
};


// ScriptStruct  Engine.FilmStockSettings
// Struct Size::0x0014
struct FFilmStockSettings
{
    float                                         Slope;                                                        // 0x0000(0x0004)
    float                                         Toe;                                                          // 0x0004(0x0004)
    float                                         Shoulder;                                                     // 0x0008(0x0004)
    float                                         BlackClip;                                                    // 0x000C(0x0004)
    float                                         WhiteClip;                                                    // 0x0010(0x0004)
};


// ScriptStruct  Engine.GaussianSumBloomSettings
// Struct Size::0x0084
struct FGaussianSumBloomSettings
{
    float                                         Intensity;                                                    // 0x0000(0x0004)
    float                                         Threshold;                                                    // 0x0004(0x0004)
    float                                         SizeScale;                                                    // 0x0008(0x0004)
    float                                         Filter1Size;                                                  // 0x000C(0x0004)
    float                                         Filter2Size;                                                  // 0x0010(0x0004)
    float                                         Filter3Size;                                                  // 0x0014(0x0004)
    float                                         Filter4Size;                                                  // 0x0018(0x0004)
    float                                         Filter5Size;                                                  // 0x001C(0x0004)
    float                                         Filter6Size;                                                  // 0x0020(0x0004)
    FLinearColor                                  Filter1Tint;                                                  // 0x0024(0x0010)
    FLinearColor                                  Filter2Tint;                                                  // 0x0034(0x0010)
    FLinearColor                                  Filter3Tint;                                                  // 0x0044(0x0010)
    FLinearColor                                  Filter4Tint;                                                  // 0x0054(0x0010)
    FLinearColor                                  Filter5Tint;                                                  // 0x0064(0x0010)
    FLinearColor                                  Filter6Tint;                                                  // 0x0074(0x0010)
};


// ScriptStruct  Engine.ConvolutionBloomSettings
// Struct Size::0x0030
struct FConvolutionBloomSettings
{
    UTexture2D*                                   Texture;                                                      // 0x0000(0x0008)
    float                                         ScatterDispersion;                                            // 0x0008(0x0004)
    float                                         Size;                                                         // 0x000C(0x0004)
    FVector2D                                     CenterUV;                                                     // 0x0010(0x0010)
    float                                         PreFilterMin;                                                 // 0x0020(0x0004)
    float                                         PreFilterMax;                                                 // 0x0024(0x0004)
    float                                         PreFilterMult;                                                // 0x0028(0x0004)
    float                                         BufferScale;                                                  // 0x002C(0x0004)
};


// ScriptStruct  Engine.LensBloomSettings
// Struct Size::0x00C0
struct FLensBloomSettings
{
    FGaussianSumBloomSettings                     GaussianSum;                                                  // 0x0000(0x0084)
    char                                          pa_0084[0x0004]                                               // 0x0084(0x0004)
    FConvolutionBloomSettings                     Convolution;                                                  // 0x0088(0x0030)
    enum class EBloomMethod                       Method;                                                       // 0x00B8(0x0001)
    char                                          pa_00B9[0x0007]                                               // 0x00B9(0x0007)
};


// ScriptStruct  Engine.LensImperfectionSettings
// Struct Size::0x0020
struct FLensImperfectionSettings
{
    UTexture*                                     DirtMask;                                                     // 0x0000(0x0008)
    float                                         DirtMaskIntensity;                                            // 0x0008(0x0004)
    FLinearColor                                  DirtMaskTint;                                                 // 0x000C(0x0010)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  Engine.LensSettings
// Struct Size::0x00E8
struct FLensSettings
{
    FLensBloomSettings                            Bloom;                                                        // 0x0000(0x00C0)
    FLensImperfectionSettings                     Imperfections;                                                // 0x00C0(0x0020)
    float                                         ChromaticAberration;                                          // 0x00E0(0x0004)
    char                                          pa_00E4[0x0004]                                               // 0x00E4(0x0004)
};


// ScriptStruct  Engine.CameraExposureSettings
// Struct Size::0x0040
struct FCameraExposureSettings
{
    enum class EAutoExposureMethod                Method;                                                       // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         LowPercent;                                                   // 0x0004(0x0004)
    float                                         HighPercent;                                                  // 0x0008(0x0004)
    float                                         MinBrightness;                                                // 0x000C(0x0004)
    float                                         MaxBrightness;                                                // 0x0010(0x0004)
    float                                         SpeedUp;                                                      // 0x0014(0x0004)
    float                                         SpeedDown;                                                    // 0x0018(0x0004)
    float                                         Bias;                                                         // 0x001C(0x0004)
    UCurveFloat*                                  BiasCurve;                                                    // 0x0020(0x0008)
    UTexture*                                     MeterMask;                                                    // 0x0028(0x0008)
    float                                         HistogramLogMin;                                              // 0x0030(0x0004)
    float                                         HistogramLogMax;                                              // 0x0034(0x0004)
    float                                         CalibrationConstant;                                          // 0x0038(0x0004)
    char                                          ApplyPhysicalCameraExposure;                                  // 0x003C(0x0001)
    char                                          pa_003D[0x0003]                                               // 0x003D(0x0003)
};


// ScriptStruct  Engine.SceneViewExtensionIsActiveFunctor
// Struct Size::0x0050
struct FSceneViewExtensionIsActiveFunctor
{
    char                                          pa_0000[0x0050]                                               // 0x0000(0x0050)
};


// ScriptStruct  Engine.SkeletalMeshOptimizationSettings
// Struct Size::0x003C
struct FSkeletalMeshOptimizationSettings
{
    enum class SkeletalMeshTerminationCriterion   TerminationCriterion;                                         // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         NumOfTrianglesPercentage;                                     // 0x0004(0x0004)
    float                                         NumOfVertPercentage;                                          // 0x0008(0x0004)
    uint32_t                                      MaxNumOfTriangles;                                            // 0x000C(0x0004)
    uint32_t                                      MaxNumOfVerts;                                                // 0x0010(0x0004)
    float                                         MaxDeviationPercentage;                                       // 0x0014(0x0004)
    enum class SkeletalMeshOptimizationType       ReductionMethod;                                              // 0x0018(0x0001)
    enum class SkeletalMeshOptimizationImportance SilhouetteImportance;                                         // 0x0019(0x0001)
    enum class SkeletalMeshOptimizationImportance TextureImportance;                                            // 0x001A(0x0001)
    enum class SkeletalMeshOptimizationImportance ShadingImportance;                                            // 0x001B(0x0001)
    enum class SkeletalMeshOptimizationImportance SkinningImportance;                                           // 0x001C(0x0001)
    char                                          bRemapMorphTargets;                                           // 0x001D(0x0001)
    char                                          bRecalcNormals;                                               // 0x001D(0x0001)
    char                                          pa_001E[0x0002]                                               // 0x001E(0x0002)
    float                                         WeldingThreshold;                                             // 0x0020(0x0004)
    float                                         NormalsThreshold;                                             // 0x0024(0x0004)
    int32_t                                       MaxBonesPerVertex;                                            // 0x0028(0x0004)
    char                                          bEnforceBoneBoundaries;                                       // 0x002C(0x0001)
    char                                          bMergeCoincidentVertBones;                                    // 0x002C(0x0001)
    char                                          pa_002D[0x0003]                                               // 0x002D(0x0003)
    float                                         VolumeImportance;                                             // 0x0030(0x0004)
    char                                          bLockEdges;                                                   // 0x0034(0x0001)
    char                                          bLockColorBounaries;                                          // 0x0034(0x0001)
    char                                          pa_0035[0x0003]                                               // 0x0035(0x0003)
    int32_t                                       BaseLOD;                                                      // 0x0038(0x0004)
};


// ScriptStruct  Engine.SectionReference
// Struct Size::0x0004
struct FSectionReference
{
    int32_t                                       SectionIndex;                                                 // 0x0000(0x0004)
};


// ScriptStruct  Engine.SkeletalMeshLODInfo
// Struct Size::0x00D0
struct FSkeletalMeshLODInfo
{
    FPerPlatformFloat                             ScreenSize;                                                   // 0x0000(0x0004)
    float                                         LODHysteresis;                                                // 0x0004(0x0004)
    TArray<int32_t>                               LODMaterialMap;                                               // 0x0008(0x0010)
    FSkeletalMeshBuildSettings                    BuildSettings;                                                // 0x0018(0x0014)
    FSkeletalMeshOptimizationSettings             ReductionSettings;                                            // 0x002C(0x003C)
    TArray<FBoneReference>                        BonesToRemove;                                                // 0x0068(0x0010)
    TArray<FBoneReference>                        BonesToPrioritize;                                            // 0x0078(0x0010)
    TArray<FSectionReference>                     SectionsToPrioritize;                                         // 0x0088(0x0010)
    float                                         WeightOfPrioritization;                                       // 0x0098(0x0004)
    char                                          pa_009C[0x0004]                                               // 0x009C(0x0004)
    UAnimSequence*                                BakePose;                                                     // 0x00A0(0x0008)
    UAnimSequence*                                BakePoseOverride;                                             // 0x00A8(0x0008)
    FString                                       SourceImportFilename;                                         // 0x00B0(0x0010)
    enum class ESkinCacheUsage                    SkinCacheUsage;                                               // 0x00C0(0x0001)
    char                                          pa_00C1[0x0003]                                               // 0x00C1(0x0003)
    float                                         MorphTargetPositionErrorTolerance;                            // 0x00C4(0x0004)
    char                                          bHasBeenSimplified;                                           // 0x00C8(0x0001)
    char                                          bHasPerLODVertexColors;                                       // 0x00C8(0x0001)
    char                                          bAllowCPUAccess;                                              // 0x00C8(0x0001)
    char                                          bSupportUniformlyDistributedSampling;                         // 0x00C8(0x0001)
    char                                          pa_00C9[0x0007]                                               // 0x00C9(0x0007)
};


// ScriptStruct  Engine.SkeletalMaterial
// Struct Size::0x0028
struct FSkeletalMaterial
{
    UMaterialInterface*                           MaterialInterface;                                            // 0x0000(0x0008)
    FName                                         MaterialSlotName;                                             // 0x0008(0x0008)
    FMeshUVChannelInfo                            UVChannelData;                                                // 0x0010(0x0014)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
};


// ScriptStruct  Engine.SkelMeshSkinWeightInfo
// Struct Size::0x003C
struct FSkelMeshSkinWeightInfo
{
    int32_t                                       Bones;                                                        // 0x0000(0x0004)
    char                                          pa_0004[0x002C]                                               // 0x0004(0x002C)
    char                                          Weights;                                                      // 0x0030(0x0001)
    char                                          pa_0031[0x000B]                                               // 0x0031(0x000B)
};


// ScriptStruct  Engine.SkelMeshComponentLODInfo
// Struct Size::0x0028
struct FSkelMeshComponentLODInfo
{
    TArray<bool>                                  HiddenMaterials;                                              // 0x0000(0x0010)
    char                                          pa_0010[0x0018]                                               // 0x0010(0x0018)
};


// ScriptStruct  Engine.VertexOffsetUsage
// Struct Size::0x0004
struct FVertexOffsetUsage
{
    int32_t                                       Usage;                                                        // 0x0000(0x0004)
};


// ScriptStruct  Engine.PrecomputedSkyLightInstanceData
// Struct Size::0x0170
struct FPrecomputedSkyLightInstanceData : public FSceneComponentInstanceData
{
    FGuid                                         LightGuid;                                                    // 0x00B8(0x0010)
    float                                         AverageBrightness;                                            // 0x00C8(0x0004)
    char                                          pa_00CC[0x00A4]                                               // 0x00CC(0x00A4)
};


// ScriptStruct  Engine.SoundAttenuationPluginSettings
// Struct Size::0x0040
struct FSoundAttenuationPluginSettings
{
    TArray<USpatializationPluginSourceSettingsBase*>SpatializationPluginSettingsArray;                          // 0x0000(0x0010)
    TArray<UOcclusionPluginSourceSettingsBase*>   OcclusionPluginSettingsArray;                                 // 0x0010(0x0010)
    TArray<UReverbPluginSourceSettingsBase*>      ReverbPluginSettingsArray;                                    // 0x0020(0x0010)
    TArray<USourceDataOverridePluginSourceSettingsBase*>SourceDataOverridePluginSettingsArray;                  // 0x0030(0x0010)
};


// ScriptStruct  Engine.AttenuationSubmixSendSettings
// Struct Size::0x00A8
struct FAttenuationSubmixSendSettings
{
    USoundSubmixBase*                             Submix;                                                       // 0x0000(0x0008)
    enum class ESubmixSendMethod                  SubmixSendMethod;                                             // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
    float                                         SubmixSendLevelMin;                                           // 0x000C(0x0004)
    float                                         SubmixSendLevelMax;                                           // 0x0010(0x0004)
    float                                         SubmixSendDistanceMin;                                        // 0x0014(0x0004)
    float                                         SubmixSendDistanceMax;                                        // 0x0018(0x0004)
    float                                         ManualSubmixSendLevel;                                        // 0x001C(0x0004)
    FRuntimeFloatCurve                            CustomSubmixSendCurve;                                        // 0x0020(0x0088)
};


// ScriptStruct  Engine.SoundAttenuationSettings
// Struct Size::0x03C8
struct FSoundAttenuationSettings : public FBaseAttenuationSettings
{
    char                                          bAttenuate;                                                   // 0x00C0(0x0001)
    char                                          bSpatialize;                                                  // 0x00C0(0x0001)
    char                                          bAttenuateWithLPF;                                            // 0x00C0(0x0001)
    char                                          bEnableListenerFocus;                                         // 0x00C0(0x0001)
    char                                          bEnableFocusInterpolation;                                    // 0x00C0(0x0001)
    char                                          bEnableOcclusion;                                             // 0x00C0(0x0001)
    char                                          bUseComplexCollisionForOcclusion;                             // 0x00C0(0x0001)
    char                                          bEnableReverbSend;                                            // 0x00C0(0x0001)
    char                                          bEnablePriorityAttenuation;                                   // 0x00C1(0x0001)
    char                                          bApplyNormalizationToStereoSounds;                            // 0x00C1(0x0001)
    char                                          bEnableLogFrequencyScaling;                                   // 0x00C1(0x0001)
    char                                          bEnableSubmixSends;                                           // 0x00C1(0x0001)
    char                                          bEnableSourceDataOverride;                                    // 0x00C1(0x0001)
    char                                          bEnableSendToAudioLink;                                       // 0x00C1(0x0001)
    enum class ESoundSpatializationAlgorithm      SpatializationAlgorithm;                                      // 0x00C2(0x0001)
    char                                          pa_00C3[0x0005]                                               // 0x00C3(0x0005)
    UAudioLinkSettingsAbstract*                   AudioLinkSettingsOverride;                                    // 0x00C8(0x0008)
    float                                         BinauralRadius;                                               // 0x00D0(0x0004)
    char                                          pa_00D4[0x0004]                                               // 0x00D4(0x0004)
    FRuntimeFloatCurve                            CustomLowpassAirAbsorptionCurve;                              // 0x00D8(0x0088)
    FRuntimeFloatCurve                            CustomHighpassAirAbsorptionCurve;                             // 0x0160(0x0088)
    enum class EAirAbsorptionMethod               AbsorptionMethod;                                             // 0x01E8(0x0001)
    enum class ECollisionChannel                  OcclusionTraceChannel;                                        // 0x01E9(0x0001)
    enum class EReverbSendMethod                  ReverbSendMethod;                                             // 0x01EA(0x0001)
    enum class EPriorityAttenuationMethod         PriorityAttenuationMethod;                                    // 0x01EB(0x0001)
    float                                         OmniRadius;                                                   // 0x01EC(0x0004)
    float                                         StereoSpread;                                                 // 0x01F0(0x0004)
    float                                         LPFRadiusMin;                                                 // 0x01F4(0x0004)
    float                                         LPFRadiusMax;                                                 // 0x01F8(0x0004)
    float                                         LPFFrequencyAtMin;                                            // 0x01FC(0x0004)
    float                                         LPFFrequencyAtMax;                                            // 0x0200(0x0004)
    float                                         HPFFrequencyAtMin;                                            // 0x0204(0x0004)
    float                                         HPFFrequencyAtMax;                                            // 0x0208(0x0004)
    float                                         FocusAzimuth;                                                 // 0x020C(0x0004)
    float                                         NonFocusAzimuth;                                              // 0x0210(0x0004)
    float                                         FocusDistanceScale;                                           // 0x0214(0x0004)
    float                                         NonFocusDistanceScale;                                        // 0x0218(0x0004)
    float                                         FocusPriorityScale;                                           // 0x021C(0x0004)
    float                                         NonFocusPriorityScale;                                        // 0x0220(0x0004)
    float                                         FocusVolumeAttenuation;                                       // 0x0224(0x0004)
    float                                         NonFocusVolumeAttenuation;                                    // 0x0228(0x0004)
    float                                         FocusAttackInterpSpeed;                                       // 0x022C(0x0004)
    float                                         FocusReleaseInterpSpeed;                                      // 0x0230(0x0004)
    float                                         OcclusionLowPassFilterFrequency;                              // 0x0234(0x0004)
    float                                         OcclusionVolumeAttenuation;                                   // 0x0238(0x0004)
    float                                         OcclusionInterpolationTime;                                   // 0x023C(0x0004)
    float                                         ReverbWetLevelMin;                                            // 0x0240(0x0004)
    float                                         ReverbWetLevelMax;                                            // 0x0244(0x0004)
    float                                         ReverbDistanceMin;                                            // 0x0248(0x0004)
    float                                         ReverbDistanceMax;                                            // 0x024C(0x0004)
    float                                         ManualReverbSendLevel;                                        // 0x0250(0x0004)
    float                                         PriorityAttenuationMin;                                       // 0x0254(0x0004)
    float                                         PriorityAttenuationMax;                                       // 0x0258(0x0004)
    float                                         PriorityAttenuationDistanceMin;                               // 0x025C(0x0004)
    float                                         PriorityAttenuationDistanceMax;                               // 0x0260(0x0004)
    float                                         ManualPriorityAttenuation;                                    // 0x0264(0x0004)
    FRuntimeFloatCurve                            CustomReverbSendCurve;                                        // 0x0268(0x0088)
    TArray<FAttenuationSubmixSendSettings>        SubmixSendSettings;                                           // 0x02F0(0x0010)
    FRuntimeFloatCurve                            CustomPriorityAttenuationCurve;                               // 0x0300(0x0088)
    FSoundAttenuationPluginSettings               PluginSettings;                                               // 0x0388(0x0040)
};


// ScriptStruct  Engine.SourceEffectChainEntry
// Struct Size::0x0010
struct FSourceEffectChainEntry
{
    USoundEffectSourcePreset*                     Preset;                                                       // 0x0000(0x0008)
    char                                          bBypass;                                                      // 0x0008(0x0001)
    char                                          pa_0009[0x0007]                                               // 0x0009(0x0007)
};


// ScriptStruct  Engine.SoundGroup
// Struct Size::0x0020
struct FSoundGroup
{
    enum class ESoundGroup                        SoundGroup;                                                   // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    FString                                       DisplayName;                                                  // 0x0008(0x0010)
    char                                          bAlwaysDecompressOnLoad;                                      // 0x0018(0x0001)
    char                                          pa_0019[0x0003]                                               // 0x0019(0x0003)
    float                                         DecompressedDuration;                                         // 0x001C(0x0004)
};


// ScriptStruct  Engine.ModulatorContinuousParams
// Struct Size::0x0020
struct FModulatorContinuousParams
{
    FName                                         ParameterName;                                                // 0x0000(0x0008)
    float                                         Default;                                                      // 0x0008(0x0004)
    float                                         MinInput;                                                     // 0x000C(0x0004)
    float                                         MaxInput;                                                     // 0x0010(0x0004)
    float                                         MinOutput;                                                    // 0x0014(0x0004)
    float                                         MaxOutput;                                                    // 0x0018(0x0004)
    enum class ModulationParamMode                ParamMode;                                                    // 0x001C(0x0001)
    char                                          pa_001D[0x0003]                                               // 0x001D(0x0003)
};


// ScriptStruct  Engine.SoundSourceBusSendInfo
// Struct Size::0x00B8
struct FSoundSourceBusSendInfo
{
    enum class ESourceBusSendLevelControlMethod   SourceBusSendLevelControlMethod;                              // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    USoundSourceBus*                              SoundSourceBus;                                               // 0x0008(0x0008)
    UAudioBus*                                    AudioBus;                                                     // 0x0010(0x0008)
    float                                         SendLevel;                                                    // 0x0018(0x0004)
    float                                         MinSendLevel;                                                 // 0x001C(0x0004)
    float                                         MaxSendLevel;                                                 // 0x0020(0x0004)
    float                                         MinSendDistance;                                              // 0x0024(0x0004)
    float                                         MaxSendDistance;                                              // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
    FRuntimeFloatCurve                            CustomSendLevelCurve;                                         // 0x0030(0x0088)
};


// ScriptStruct  Engine.SoundTimecodeOffset
// Struct Size::0x0008
struct FSoundTimecodeOffset
{
    double                                        NumOfSecondsSinceMidnight;                                    // 0x0000(0x0008)
};


// ScriptStruct  Engine.StreamedAudioPlatformData
// Struct Size::0x0018
struct FStreamedAudioPlatformData
{
    char                                          pa_0000[0x0018]                                               // 0x0000(0x0018)
};


// ScriptStruct  Engine.SoundWaveSpectralData
// Struct Size::0x000C
struct FSoundWaveSpectralData
{
    float                                         FrequencyHz;                                                  // 0x0000(0x0004)
    float                                         Magnitude;                                                    // 0x0004(0x0004)
    float                                         NormalizedMagnitude;                                          // 0x0008(0x0004)
};


// ScriptStruct  Engine.SoundWaveSpectralDataPerSound
// Struct Size::0x0020
struct FSoundWaveSpectralDataPerSound
{
    TArray<FSoundWaveSpectralData>                SpectralData;                                                 // 0x0000(0x0010)
    float                                         PlaybackTime;                                                 // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    USoundWave*                                   SoundWave;                                                    // 0x0018(0x0008)
};


// ScriptStruct  Engine.SoundWaveEnvelopeDataPerSound
// Struct Size::0x0010
struct FSoundWaveEnvelopeDataPerSound
{
    float                                         Envelope;                                                     // 0x0000(0x0004)
    float                                         PlaybackTime;                                                 // 0x0004(0x0004)
    USoundWave*                                   SoundWave;                                                    // 0x0008(0x0008)
};


// ScriptStruct  Engine.SoundWaveSpectralDataEntry
// Struct Size::0x0008
struct FSoundWaveSpectralDataEntry
{
    float                                         Magnitude;                                                    // 0x0000(0x0004)
    float                                         NormalizedMagnitude;                                          // 0x0004(0x0004)
};


// ScriptStruct  Engine.SoundWaveSpectralTimeData
// Struct Size::0x0018
struct FSoundWaveSpectralTimeData
{
    TArray<FSoundWaveSpectralDataEntry>           Data;                                                         // 0x0000(0x0010)
    float                                         TimeSec;                                                      // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  Engine.SoundWaveEnvelopeTimeData
// Struct Size::0x0008
struct FSoundWaveEnvelopeTimeData
{
    float                                         Amplitude;                                                    // 0x0000(0x0004)
    float                                         TimeSec;                                                      // 0x0004(0x0004)
};


// ScriptStruct  Engine.SoundWaveCuePoint
// Struct Size::0x0020
struct FSoundWaveCuePoint
{
    int32_t                                       CuePointID;                                                   // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FString                                       Label;                                                        // 0x0008(0x0010)
    int32_t                                       FramePosition;                                                // 0x0018(0x0004)
    int32_t                                       FrameLength;                                                  // 0x001C(0x0004)
};


// ScriptStruct  Engine.SoundWaveTimecodeInfo
// Struct Size::0x0070
struct FSoundWaveTimecodeInfo
{
    uint64_t                                      NumSamplesSinceMidnight;                                      // 0x0000(0x0008)
    uint32_t                                      NumSamplesPerSecond;                                          // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FString                                       Description;                                                  // 0x0010(0x0010)
    FString                                       OriginatorTime;                                               // 0x0020(0x0010)
    FString                                       OriginatorDate;                                               // 0x0030(0x0010)
    FString                                       OriginatorDescription;                                        // 0x0040(0x0010)
    FString                                       OriginatorReference;                                          // 0x0050(0x0010)
    FFrameRate                                    TimecodeRate;                                                 // 0x0060(0x0008)
    bool                                          bTimecodeIsDropFrame;                                         // 0x0068(0x0001)
    char                                          pa_0069[0x0007]                                               // 0x0069(0x0007)
};


// ScriptStruct  Engine.StaticMeshOptimizationSettings
// Struct Size::0x001C
struct FStaticMeshOptimizationSettings
{
    enum class EOptimizationType                  ReductionMethod;                                              // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         NumOfTrianglesPercentage;                                     // 0x0004(0x0004)
    float                                         MaxDeviationPercentage;                                       // 0x0008(0x0004)
    float                                         WeldingThreshold;                                             // 0x000C(0x0004)
    bool                                          bRecalcNormals;                                               // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
    float                                         NormalsThreshold;                                             // 0x0014(0x0004)
    char                                          SilhouetteImportance;                                         // 0x0018(0x0001)
    char                                          TextureImportance;                                            // 0x0019(0x0001)
    char                                          ShadingImportance;                                            // 0x001A(0x0001)
    char                                          pa_001B[0x0001]                                               // 0x001B(0x0001)
};


// ScriptStruct  Engine.MeshSectionInfo
// Struct Size::0x000C
struct FMeshSectionInfo
{
    int32_t                                       MaterialIndex;                                                // 0x0000(0x0004)
    bool                                          bEnableCollision;                                             // 0x0004(0x0001)
    bool                                          bCastShadow;                                                  // 0x0005(0x0001)
    bool                                          bVisibleInRayTracing;                                         // 0x0006(0x0001)
    bool                                          bAffectDistanceFieldLighting;                                 // 0x0007(0x0001)
    bool                                          bForceOpaque;                                                 // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
};


// ScriptStruct  Engine.MeshSectionInfoMap
// Struct Size::0x0050
struct FMeshSectionInfoMap
{
    TMap<uint32_t,FMeshSectionInfo>               Map;                                                          // 0x0000(0x0050)
};


// ScriptStruct  Engine.AssetEditorOrbitCameraPosition
// Struct Size::0x0050
struct FAssetEditorOrbitCameraPosition
{
    bool                                          bIsSet;                                                       // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    FVector                                       CamOrbitPoint;                                                // 0x0008(0x0018)
    FVector                                       CamOrbitZoom;                                                 // 0x0020(0x0018)
    FRotator                                      CamOrbitRotation;                                             // 0x0038(0x0018)
};


// ScriptStruct  Engine.StaticMaterial
// Struct Size::0x0030
struct FStaticMaterial
{
    UMaterialInterface*                           MaterialInterface;                                            // 0x0000(0x0008)
    FName                                         MaterialSlotName;                                             // 0x0008(0x0008)
    FName                                         ImportedMaterialSlotName;                                     // 0x0010(0x0008)
    FMeshUVChannelInfo                            UVChannelData;                                                // 0x0018(0x0014)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
};


// ScriptStruct  Engine.MaterialRemapIndex
// Struct Size::0x0018
struct FMaterialRemapIndex
{
    uint32_t                                      ImportVersionKey;                                             // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    TArray<int32_t>                               MaterialRemap;                                                // 0x0008(0x0010)
};


// ScriptStruct  Engine.StaticParameterBase
// Struct Size::0x0024
struct FStaticParameterBase
{
    FMaterialParameterInfo                        ParameterInfo;                                                // 0x0000(0x0010)
    bool                                          bOverride;                                                    // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
    FGuid                                         ExpressionGUID;                                               // 0x0014(0x0010)
};


// ScriptStruct  Engine.StaticSwitchParameter
// Struct Size::0x0028
struct FStaticSwitchParameter : public FStaticParameterBase
{
    bool                                          Value;                                                        // 0x0024(0x0001)
    char                                          pa_0025[0x0003]                                               // 0x0025(0x0003)
};


// ScriptStruct  Engine.StaticComponentMaskParameter
// Struct Size::0x0028
struct FStaticComponentMaskParameter : public FStaticParameterBase
{
    bool                                          R;                                                            // 0x0024(0x0001)
    bool                                          G;                                                            // 0x0025(0x0001)
    bool                                          B;                                                            // 0x0026(0x0001)
    bool                                          A;                                                            // 0x0027(0x0001)
};


// ScriptStruct  Engine.StaticTerrainLayerWeightParameter
// Struct Size::0x0034
struct FStaticTerrainLayerWeightParameter
{
    FMaterialParameterInfo                        ParameterInfo;                                                // 0x0000(0x0010)
    FGuid                                         ExpressionGUID;                                               // 0x0010(0x0010)
    bool                                          bOverride;                                                    // 0x0020(0x0001)
    char                                          pa_0021[0x0003]                                               // 0x0021(0x0003)
    FName                                         LayerName;                                                    // 0x0024(0x0008)
    int32_t                                       WeightmapIndex;                                               // 0x002C(0x0004)
    bool                                          bWeightBasedBlend;                                            // 0x0030(0x0001)
    char                                          pa_0031[0x0003]                                               // 0x0031(0x0003)
};


// ScriptStruct  Engine.StaticMaterialLayersParameter
// Struct Size::0x0128
struct FStaticMaterialLayersParameter : public FStaticParameterBase
{
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
    FMaterialLayersFunctions                      Value;                                                        // 0x0028(0x0100)
};


// ScriptStruct  Engine.StaticParameterSetRuntimeData
// Struct Size::0x0028
struct FStaticParameterSetRuntimeData
{
    FMaterialLayersFunctionsRuntimeData           MaterialLayers;                                               // 0x0000(0x0020)
    char                                          bHasMaterialLayers;                                           // 0x0020(0x0001)
    char                                          pa_0021[0x0007]                                               // 0x0021(0x0007)
};


// ScriptStruct  Engine.StaticParameterSetEditorOnlyData
// Struct Size::0x00A0
struct FStaticParameterSetEditorOnlyData
{
    TArray<FStaticSwitchParameter>                StaticSwitchParameters;                                       // 0x0000(0x0010)
    TArray<FStaticComponentMaskParameter>         StaticComponentMaskParameters;                                // 0x0010(0x0010)
    TArray<FStaticTerrainLayerWeightParameter>    TerrainLayerWeightParameters;                                 // 0x0020(0x0010)
    FMaterialLayersFunctionsEditorOnlyData        MaterialLayers;                                               // 0x0030(0x0070)
};


// ScriptStruct  Engine.StaticParameterSet
// Struct Size::0x0028
struct FStaticParameterSet : public FStaticParameterSetRuntimeData
{
};


// ScriptStruct  Engine.EquirectProps
// Struct Size::0x0090
struct FEquirectProps
{
    FBox2D                                        LeftUVRect;                                                   // 0x0000(0x0028)
    FBox2D                                        RightUVRect;                                                  // 0x0028(0x0028)
    FVector2D                                     LeftScale;                                                    // 0x0050(0x0010)
    FVector2D                                     RightScale;                                                   // 0x0060(0x0010)
    FVector2D                                     LeftBias;                                                     // 0x0070(0x0010)
    FVector2D                                     RightBias;                                                    // 0x0080(0x0010)
};


// ScriptStruct  Engine.TextureSourceBlock
// Struct Size::0x0018
struct FTextureSourceBlock
{
    int32_t                                       BlockX;                                                       // 0x0000(0x0004)
    int32_t                                       BlockY;                                                       // 0x0004(0x0004)
    int32_t                                       SizeX;                                                        // 0x0008(0x0004)
    int32_t                                       SizeY;                                                        // 0x000C(0x0004)
    int32_t                                       NumSlices;                                                    // 0x0010(0x0004)
    int32_t                                       NumMips;                                                      // 0x0014(0x0004)
};


// ScriptStruct  Engine.TextureSource
// Struct Size::0x0068
struct FTextureSource
{
    char                                          pa_0000[0x0068]                                               // 0x0000(0x0068)
};


// ScriptStruct  Engine.TexturePlatformData
// Struct Size::0x0030
struct FTexturePlatformData
{
    char                                          pa_0000[0x0030]                                               // 0x0000(0x0030)
};


// ScriptStruct  Engine.TextureFormatSettings
// Struct Size::0x0002
struct FTextureFormatSettings
{
    enum class TextureCompressionSettings         CompressionSettings;                                          // 0x0000(0x0001)
    char                                          CompressionNoAlpha;                                           // 0x0001(0x0001)
    char                                          CompressionForceAlpha;                                        // 0x0001(0x0001)
    char                                          CompressionNone;                                              // 0x0001(0x0001)
    char                                          CompressionYCoCg;                                             // 0x0001(0x0001)
    char                                          SRGB;                                                         // 0x0001(0x0001)
};


// ScriptStruct  Engine.TextureSourceColorSettings
// Struct Size::0x0050
struct FTextureSourceColorSettings
{
    enum class ETextureSourceEncoding             EncodingOverride;                                             // 0x0000(0x0001)
    enum class ETextureColorSpace                 ColorSpace;                                                   // 0x0001(0x0001)
    char                                          pa_0002[0x0006]                                               // 0x0002(0x0006)
    FVector2D                                     RedChromaticityCoordinate;                                    // 0x0008(0x0010)
    FVector2D                                     GreenChromaticityCoordinate;                                  // 0x0018(0x0010)
    FVector2D                                     BlueChromaticityCoordinate;                                   // 0x0028(0x0010)
    FVector2D                                     WhiteChromaticityCoordinate;                                  // 0x0038(0x0010)
    enum class ETextureChromaticAdaptationMethod  ChromaticAdaptationMethod;                                    // 0x0048(0x0001)
    char                                          pa_0049[0x0007]                                               // 0x0049(0x0007)
};


// ScriptStruct  Engine.StreamingRenderAssetPrimitiveInfo
// Struct Size::0x0050
struct FStreamingRenderAssetPrimitiveInfo
{
    UStreamableRenderAsset*                       RenderAsset;                                                  // 0x0000(0x0008)
    FBoxSphereBounds                              Bounds;                                                       // 0x0008(0x0038)
    float                                         TexelFactor;                                                  // 0x0040(0x0004)
    uint32_t                                      PackedRelativeBox;                                            // 0x0044(0x0004)
    char                                          bAllowInvalidTexelFactorWhenUnregistered;                     // 0x0048(0x0001)
    char                                          bAffectedByComponentScale;                                    // 0x0048(0x0001)
    char                                          pa_0049[0x0007]                                               // 0x0049(0x0007)
};


// ScriptStruct  Engine.StreamingTextureBuildInfo
// Struct Size::0x000C
struct FStreamingTextureBuildInfo
{
    uint32_t                                      PackedRelativeBox;                                            // 0x0000(0x0004)
    int32_t                                       TextureLevelIndex;                                            // 0x0004(0x0004)
    float                                         TexelFactor;                                                  // 0x0008(0x0004)
};


// ScriptStruct  Engine.TGFDeviceProfileThreshold
// Struct Size::0x0010
struct FTGFDeviceProfileThreshold
{
    TArray<int8_t>                                Threshold;                                                    // 0x0000(0x0010)
};


// ScriptStruct  Engine.TimelineEventEntry
// Struct Size::0x0014
struct FTimelineEventEntry
{
    float                                         Time;                                                         // 0x0000(0x0004)
    FDelegate                                     EventFunc;                                                    // 0x0004(0x0010)
};


// ScriptStruct  Engine.TimelineVectorTrack
// Struct Size::0x0040
struct FTimelineVectorTrack
{
    UCurveVector*                                 VectorCurve;                                                  // 0x0000(0x0008)
    FDelegate                                     InterpFunc;                                                   // 0x0008(0x0010)
    FName                                         TrackName;                                                    // 0x0018(0x0008)
    FName                                         VectorPropertyName;                                           // 0x0020(0x0008)
    char                                          pa_0028[0x0018]                                               // 0x0028(0x0018)
};


// ScriptStruct  Engine.TimelineFloatTrack
// Struct Size::0x0040
struct FTimelineFloatTrack
{
    UCurveFloat*                                  FloatCurve;                                                   // 0x0000(0x0008)
    FDelegate                                     InterpFunc;                                                   // 0x0008(0x0010)
    FName                                         TrackName;                                                    // 0x0018(0x0008)
    FName                                         FloatPropertyName;                                            // 0x0020(0x0008)
    char                                          pa_0028[0x0018]                                               // 0x0028(0x0018)
};


// ScriptStruct  Engine.TimelineLinearColorTrack
// Struct Size::0x0040
struct FTimelineLinearColorTrack
{
    UCurveLinearColor*                            LinearColorCurve;                                             // 0x0000(0x0008)
    FDelegate                                     InterpFunc;                                                   // 0x0008(0x0010)
    FName                                         TrackName;                                                    // 0x0018(0x0008)
    FName                                         LinearColorPropertyName;                                      // 0x0020(0x0008)
    char                                          pa_0028[0x0018]                                               // 0x0028(0x0018)
};


// ScriptStruct  Engine.Timeline
// Struct Size::0x0098
struct FTimeline
{
    enum class ETimelineLengthMode                LengthMode;                                                   // 0x0000(0x0001)
    char                                          bLooping;                                                     // 0x0001(0x0001)
    char                                          bReversePlayback;                                             // 0x0001(0x0001)
    char                                          bPlaying;                                                     // 0x0001(0x0001)
    char                                          pa_0002[0x0002]                                               // 0x0002(0x0002)
    float                                         Length;                                                       // 0x0004(0x0004)
    float                                         PlayRate;                                                     // 0x0008(0x0004)
    float                                         position;                                                     // 0x000C(0x0004)
    TArray<FTimelineEventEntry>                   Events;                                                       // 0x0010(0x0010)
    TArray<FTimelineVectorTrack>                  InterpVectors;                                                // 0x0020(0x0010)
    TArray<FTimelineFloatTrack>                   InterpFloats;                                                 // 0x0030(0x0010)
    TArray<FTimelineLinearColorTrack>             InterpLinearColors;                                           // 0x0040(0x0010)
    FDelegate                                     TimelinePostUpdateFunc;                                       // 0x0050(0x0010)
    FDelegate                                     TimelineFinishedFunc;                                         // 0x0060(0x0010)
    TWeakObjectPtr<UObject>                       PropertySetObject;                                            // 0x0070(0x0008)
    FName                                         DirectionPropertyName;                                        // 0x0078(0x0008)
    char                                          pa_0080[0x0018]                                               // 0x0080(0x0018)
};


// ScriptStruct  Engine.UniqueNetIdReplNetSerializerConfig
// Struct Size::0x0001
struct FUniqueNetIdReplNetSerializerConfig : public FNetSerializerConfig
{
};


// ScriptStruct  Engine.ActorContainerID
// Struct Size::0x0008
struct FActorContainerID
{
    uint64_t                                      ID;                                                           // 0x0000(0x0008)
};


// ScriptStruct  Engine.StreamingSourceShape
// Struct Size::0x0040
struct FStreamingSourceShape
{
    bool                                          bUseGridLoadingRange;                                         // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         Radius;                                                       // 0x0004(0x0004)
    bool                                          bIsSector;                                                    // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
    float                                         SectorAngle;                                                  // 0x000C(0x0004)
    FVector                                       Location;                                                     // 0x0010(0x0018)
    FRotator                                      Rotation;                                                     // 0x0028(0x0018)
};


// ScriptStruct  Engine.WorldPartitionStreamingQuerySource
// Struct Size::0x0088
struct FWorldPartitionStreamingQuerySource
{
    FVector                                       Location;                                                     // 0x0000(0x0018)
    float                                         Radius;                                                       // 0x0018(0x0004)
    bool                                          bUseGridLoadingRange;                                         // 0x001C(0x0001)
    char                                          pa_001D[0x0003]                                               // 0x001D(0x0003)
    TArray<FName>                                 DataLayers;                                                   // 0x0020(0x0010)
    bool                                          bDataLayersOnly;                                              // 0x0030(0x0001)
    bool                                          bSpatialQuery;                                                // 0x0031(0x0001)
    char                                          pa_0032[0x0056]                                               // 0x0032(0x0056)
};


// ScriptStruct  Engine.LightmassWorldInfoSettings
// Struct Size::0x004C
struct FLightmassWorldInfoSettings
{
    float                                         StaticLightingLevelScale;                                     // 0x0000(0x0004)
    int32_t                                       NumIndirectLightingBounces;                                   // 0x0004(0x0004)
    int32_t                                       NumSkyLightingBounces;                                        // 0x0008(0x0004)
    float                                         IndirectLightingQuality;                                      // 0x000C(0x0004)
    float                                         IndirectLightingSmoothness;                                   // 0x0010(0x0004)
    FColor                                        EnvironmentColor;                                             // 0x0014(0x0004)
    float                                         EnvironmentIntensity;                                         // 0x0018(0x0004)
    float                                         EmissiveBoost;                                                // 0x001C(0x0004)
    float                                         DiffuseBoost;                                                 // 0x0020(0x0004)
    enum class EVolumeLightingMethod              VolumeLightingMethod;                                         // 0x0024(0x0001)
    char                                          bUseAmbientOcclusion;                                         // 0x0025(0x0001)
    char                                          bGenerateAmbientOcclusionMaterialMask;                        // 0x0025(0x0001)
    char                                          bVisualizeMaterialDiffuse;                                    // 0x0025(0x0001)
    char                                          bVisualizeAmbientOcclusion;                                   // 0x0025(0x0001)
    char                                          bCompressLightmaps;                                           // 0x0025(0x0001)
    char                                          pa_0026[0x0002]                                               // 0x0026(0x0002)
    float                                         VolumetricLightmapDetailCellSize;                             // 0x0028(0x0004)
    float                                         VolumetricLightmapMaximumBrickMemoryMb;                       // 0x002C(0x0004)
    float                                         VolumetricLightmapSphericalHarmonicSmoothing;                 // 0x0030(0x0004)
    float                                         VolumeLightSamplePlacementScale;                              // 0x0034(0x0004)
    float                                         DirectIlluminationOcclusionFraction;                          // 0x0038(0x0004)
    float                                         IndirectIlluminationOcclusionFraction;                        // 0x003C(0x0004)
    float                                         OcclusionExponent;                                            // 0x0040(0x0004)
    float                                         FullyOccludedSamplesFraction;                                 // 0x0044(0x0004)
    float                                         MaxOcclusionDistance;                                         // 0x0048(0x0004)
};


// ScriptStruct  Engine.NetViewer
// Struct Size::0x0048
struct FNetViewer
{
    UNetConnection*                               Connection;                                                   // 0x0000(0x0008)
    AActor*                                       InViewer;                                                     // 0x0008(0x0008)
    AActor*                                       ViewTarget;                                                   // 0x0010(0x0008)
    FVector                                       ViewLocation;                                                 // 0x0018(0x0018)
    FVector                                       ViewDir;                                                      // 0x0030(0x0018)
};


// ScriptStruct  Engine.HierarchicalSimplification
// Struct Size::0x02D0
struct FHierarchicalSimplification
{
    float                                         TransitionScreenSize;                                         // 0x0000(0x0004)
    float                                         OverrideDrawDistance;                                         // 0x0004(0x0004)
    char                                          bUseOverrideDrawDistance;                                     // 0x0008(0x0001)
    char                                          bAllowSpecificExclusion;                                      // 0x0008(0x0001)
    char                                          bOnlyGenerateClustersForVolumes;                              // 0x0008(0x0001)
    char                                          bReusePreviousLevelClusters;                                  // 0x0008(0x0001)
    enum class EHierarchicalSimplificationMethod  SimplificationMethod;                                         // 0x0009(0x0001)
    char                                          pa_000A[0x0002]                                               // 0x000A(0x0002)
    FMeshProxySettings                            ProxySetting;                                                 // 0x000C(0x00D0)
    FMeshMergingSettings                          MergeSetting;                                                 // 0x00DC(0x00D0)
    FMeshApproximationSettings                    ApproximateSettings;                                          // 0x01AC(0x0118)
    float                                         DesiredBoundRadius;                                           // 0x02C4(0x0004)
    float                                         DesiredFillingPercentage;                                     // 0x02C8(0x0004)
    int32_t                                       MinNumberOfActorsToBuild;                                     // 0x02CC(0x0004)
};


// ScriptStruct  Engine.MeshApproximationSettings
// Struct Size::0x0118
struct FMeshApproximationSettings
{
    enum class EMeshApproximationType             OutputType;                                                   // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         ApproximationAccuracy;                                        // 0x0004(0x0004)
    int32_t                                       ClampVoxelDimension;                                          // 0x0008(0x0004)
    bool                                          bAttemptAutoThickening;                                       // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
    float                                         TargetMinThicknessMultiplier;                                 // 0x0010(0x0004)
    bool                                          bIgnoreTinyParts;                                             // 0x0014(0x0001)
    char                                          pa_0015[0x0003]                                               // 0x0015(0x0003)
    float                                         TinyPartSizeMultiplier;                                       // 0x0018(0x0004)
    enum class EMeshApproximationBaseCappingType  BaseCapping;                                                  // 0x001C(0x0001)
    char                                          pa_001D[0x0003]                                               // 0x001D(0x0003)
    float                                         WindingThreshold;                                             // 0x0020(0x0004)
    bool                                          bFillGaps;                                                    // 0x0024(0x0001)
    char                                          pa_0025[0x0003]                                               // 0x0025(0x0003)
    float                                         GapDistance;                                                  // 0x0028(0x0004)
    enum class EOccludedGeometryFilteringPolicy   OcclusionMethod;                                              // 0x002C(0x0001)
    bool                                          bOccludeFromBottom;                                           // 0x002D(0x0001)
    enum class EMeshApproximationSimplificationPolicySimplifyMethod;                                            // 0x002E(0x0001)
    char                                          pa_002F[0x0001]                                               // 0x002F(0x0001)
    int32_t                                       TargetTriCount;                                               // 0x0030(0x0004)
    float                                         TrianglesPerM;                                                // 0x0034(0x0004)
    float                                         GeometricDeviation;                                           // 0x0038(0x0004)
    enum class EMeshApproximationGroundPlaneClippingPolicyGroundClipping;                                       // 0x003C(0x0001)
    char                                          pa_003D[0x0003]                                               // 0x003D(0x0003)
    float                                         GroundClippingZHeight;                                        // 0x0040(0x0004)
    bool                                          bEstimateHardNormals;                                         // 0x0044(0x0001)
    char                                          pa_0045[0x0003]                                               // 0x0045(0x0003)
    float                                         HardNormalAngle;                                              // 0x0048(0x0004)
    enum class EMeshApproximationUVGenerationPolicyUVGenerationMethod;                                          // 0x004C(0x0001)
    char                                          pa_004D[0x0003]                                               // 0x004D(0x0003)
    int32_t                                       InitialPatchCount;                                            // 0x0050(0x0004)
    float                                         CurvatureAlignment;                                           // 0x0054(0x0004)
    float                                         MergingThreshold;                                             // 0x0058(0x0004)
    float                                         MaxAngleDeviation;                                            // 0x005C(0x0004)
    bool                                          bGenerateNaniteEnabledMesh;                                   // 0x0060(0x0001)
    char                                          pa_0061[0x0003]                                               // 0x0061(0x0003)
    float                                         NaniteProxyTrianglePercent;                                   // 0x0064(0x0004)
    bool                                          bSupportRayTracing;                                           // 0x0068(0x0001)
    bool                                          bAllowDistanceField;                                          // 0x0069(0x0001)
    char                                          pa_006A[0x0002]                                               // 0x006A(0x0002)
    int32_t                                       MultiSamplingAA;                                              // 0x006C(0x0004)
    int32_t                                       RenderCaptureResolution;                                      // 0x0070(0x0004)
    FMaterialProxySettings                        MaterialSettings;                                             // 0x0074(0x0094)
    float                                         CaptureFieldOfView;                                           // 0x0108(0x0004)
    float                                         NearPlaneDist;                                                // 0x010C(0x0004)
    bool                                          bUseRenderLODMeshes;                                          // 0x0110(0x0001)
    bool                                          bEnableSimplifyPrePass;                                       // 0x0111(0x0001)
    bool                                          bEnableParallelBaking;                                        // 0x0112(0x0001)
    bool                                          bPrintDebugMessages;                                          // 0x0113(0x0001)
    bool                                          bEmitFullDebugMesh;                                           // 0x0114(0x0001)
    char                                          pa_0115[0x0003]                                               // 0x0115(0x0003)
};


// ScriptStruct  Engine.MeshMergingSettings
// Struct Size::0x00D0
struct FMeshMergingSettings
{
    int32_t                                       TargetLightMapResolution;                                     // 0x0000(0x0004)
    enum class EUVOutput                          OutputUVs;                                                    // 0x0004(0x0001)
    char                                          pa_0005[0x0007]                                               // 0x0005(0x0007)
    FMaterialProxySettings                        MaterialSettings;                                             // 0x000C(0x0094)
    int32_t                                       GutterSize;                                                   // 0x00A0(0x0004)
    enum class EMeshLODSelectionType              LODSelectionType;                                             // 0x00A4(0x0001)
    char                                          pa_00A5[0x0003]                                               // 0x00A5(0x0003)
    int32_t                                       SpecificLOD;                                                  // 0x00A8(0x0004)
    char                                          bGenerateLightMapUV;                                          // 0x00AC(0x0001)
    char                                          bComputedLightMapResolution;                                  // 0x00AC(0x0001)
    char                                          bPivotPointAtZero;                                            // 0x00AC(0x0001)
    char                                          bMergePhysicsData;                                            // 0x00AC(0x0001)
    char                                          bMergeMaterials;                                              // 0x00AC(0x0001)
    char                                          bCreateMergedMaterial;                                        // 0x00AC(0x0001)
    char                                          bBakeVertexDataToMesh;                                        // 0x00AC(0x0001)
    char                                          bUseVertexDataForBakingMaterial;                              // 0x00AC(0x0001)
    char                                          bUseTextureBinning;                                           // 0x00AD(0x0001)
    char                                          bReuseMeshLightmapUVs;                                        // 0x00AD(0x0001)
    char                                          bMergeEquivalentMaterials;                                    // 0x00AD(0x0001)
    char                                          bUseLandscapeCulling;                                         // 0x00AD(0x0001)
    char                                          bIncludeImposters;                                            // 0x00AD(0x0001)
    char                                          bSupportRayTracing;                                           // 0x00AD(0x0001)
    char                                          bAllowDistanceField;                                          // 0x00AD(0x0001)
    char                                          pa_00AE[0x0002]                                               // 0x00AE(0x0002)
    FMeshNaniteSettings                           NaniteSettings;                                               // 0x00B0(0x001C)
    char                                          pa_00CC[0x0004]                                               // 0x00CC(0x0004)
};


// ScriptStruct  Engine.MeshProxySettings
// Struct Size::0x00D0
struct FMeshProxySettings
{
    int32_t                                       ScreenSize;                                                   // 0x0000(0x0004)
    float                                         VoxelSize;                                                    // 0x0004(0x0004)
    FMaterialProxySettings                        MaterialSettings;                                             // 0x0008(0x0094)
    float                                         MergeDistance;                                                // 0x009C(0x0004)
    FColor                                        UnresolvedGeometryColor;                                      // 0x00A0(0x0004)
    float                                         MaxRayCastDist;                                               // 0x00A4(0x0004)
    float                                         HardAngleThreshold;                                           // 0x00A8(0x0004)
    int32_t                                       LightMapResolution;                                           // 0x00AC(0x0004)
    enum class EProxyNormalComputationMethod      NormalCalculationMethod;                                      // 0x00B0(0x0001)
    enum class ELandscapeCullingPrecision         LandscapeCullingPrecision;                                    // 0x00B1(0x0001)
    char                                          bCalculateCorrectLODModel;                                    // 0x00B2(0x0001)
    char                                          bOverrideVoxelSize;                                           // 0x00B2(0x0001)
    char                                          bOverrideTransferDistance;                                    // 0x00B2(0x0001)
    char                                          bUseHardAngleThreshold;                                       // 0x00B2(0x0001)
    char                                          bComputeLightMapResolution;                                   // 0x00B2(0x0001)
    char                                          bRecalculateNormals;                                          // 0x00B2(0x0001)
    char                                          bUseLandscapeCulling;                                         // 0x00B2(0x0001)
    char                                          bSupportRayTracing;                                           // 0x00B2(0x0001)
    char                                          bAllowDistanceField;                                          // 0x00B3(0x0001)
    char                                          bReuseMeshLightmapUVs;                                        // 0x00B3(0x0001)
    char                                          bGroupIdenticalMeshesForBaking;                               // 0x00B3(0x0001)
    char                                          bCreateCollision;                                             // 0x00B3(0x0001)
    char                                          bAllowVertexColors;                                           // 0x00B3(0x0001)
    char                                          bGenerateLightmapUVs;                                         // 0x00B3(0x0001)
    FMeshNaniteSettings                           NaniteSettings;                                               // 0x00B4(0x001C)
};


// ScriptStruct  Engine.BroadphaseSettings
// Struct Size::0x0080
struct FBroadphaseSettings
{
    bool                                          bUseMBPOnClient;                                              // 0x0000(0x0001)
    bool                                          bUseMBPOnServer;                                              // 0x0001(0x0001)
    bool                                          bUseMBPOuterBounds;                                           // 0x0002(0x0001)
    char                                          pa_0003[0x0005]                                               // 0x0003(0x0005)
    FBox                                          MBPBounds;                                                    // 0x0008(0x0038)
    FBox                                          MBPOuterBounds;                                               // 0x0040(0x0038)
    uint32_t                                      MBPNumSubdivs;                                                // 0x0078(0x0004)
    char                                          pa_007C[0x0004]                                               // 0x007C(0x0004)
};


// ScriptStruct  Engine.AttributeKey
// Struct Size::0x0018
struct FAttributeKey
{
    float                                         Time;                                                         // 0x0000(0x0004)
    char                                          pa_0004[0x0014]                                               // 0x0004(0x0014)
};


// ScriptStruct  Engine.AttributeCurve
// Struct Size::0x00B0
struct FAttributeCurve : public FIndexedCurve
{
    TArray<FAttributeKey>                         Keys;                                                         // 0x0068(0x0010)
    FSoftObjectPath                               ScriptStructPath;                                             // 0x0078(0x0020)
    UScriptStruct*                                ScriptStruct;                                                 // 0x0098(0x0008)
    bool                                          bShouldInterpolate;                                           // 0x00A0(0x0001)
    char                                          pa_00A1[0x000F]                                               // 0x00A1(0x000F)
};


// ScriptStruct  Engine.QuartzPulseOverrideStep
// Struct Size::0x0008
struct FQuartzPulseOverrideStep
{
    int32_t                                       NumberOfPulses;                                               // 0x0000(0x0004)
    enum class EQuartzCommandQuantization         PulseDuration;                                                // 0x0004(0x0001)
    char                                          pa_0005[0x0003]                                               // 0x0005(0x0003)
};


// ScriptStruct  Engine.QuartzTimeSignature
// Struct Size::0x0018
struct FQuartzTimeSignature
{
    int32_t                                       NumBeats;                                                     // 0x0000(0x0004)
    enum class EQuartzTimeSignatureQuantization   BeatType;                                                     // 0x0004(0x0001)
    char                                          pa_0005[0x0003]                                               // 0x0005(0x0003)
    TArray<FQuartzPulseOverrideStep>              OptionalPulseOverride;                                        // 0x0008(0x0010)
};


// ScriptStruct  Engine.QuartzTransportTimeStamp
// Struct Size::0x0010
struct FQuartzTransportTimeStamp
{
    int32_t                                       Bars;                                                         // 0x0000(0x0004)
    int32_t                                       Beat;                                                         // 0x0004(0x0004)
    float                                         BeatFraction;                                                 // 0x0008(0x0004)
    float                                         Seconds;                                                      // 0x000C(0x0004)
};


// ScriptStruct  Engine.QuartzClockSettings
// Struct Size::0x0020
struct FQuartzClockSettings
{
    FQuartzTimeSignature                          TimeSignature;                                                // 0x0000(0x0018)
    bool                                          bIgnoreLevelChange;                                           // 0x0018(0x0001)
    char                                          pa_0019[0x0007]                                               // 0x0019(0x0007)
};


// ScriptStruct  Engine.QuartzQuantizationBoundary
// Struct Size::0x0020
struct FQuartzQuantizationBoundary
{
    enum class EQuartzCommandQuantization         Quantization;                                                 // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         Multiplier;                                                   // 0x0004(0x0004)
    enum class EQuarztQuantizationReference       CountingReferencePoint;                                       // 0x0008(0x0001)
    bool                                          bFireOnClockStart;                                            // 0x0009(0x0001)
    bool                                          bCancelCommandIfClockIsNotRunning;                            // 0x000A(0x0001)
    bool                                          bResetClockOnQueued;                                          // 0x000B(0x0001)
    bool                                          bResumeClockOnQueued;                                         // 0x000C(0x0001)
    char                                          pa_000D[0x0013]                                               // 0x000D(0x0013)
};


// ScriptStruct  Engine.NavAvoidanceData
// Struct Size::0x0058
struct FNavAvoidanceData
{
    char                                          pa_0000[0x0058]                                               // 0x0000(0x0058)
};


// ScriptStruct  Engine.MovementProperties
// Struct Size::0x0001
struct FMovementProperties
{
    char                                          bCanCrouch;                                                   // 0x0000(0x0001)
    char                                          bCanJump;                                                     // 0x0000(0x0001)
    char                                          bCanWalk;                                                     // 0x0000(0x0001)
    char                                          bCanSwim;                                                     // 0x0000(0x0001)
    char                                          bCanFly;                                                      // 0x0000(0x0001)
};


// ScriptStruct  Engine.NavAgentProperties
// Struct Size::0x0038
struct FNavAgentProperties : public FMovementProperties
{
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         AgentRadius;                                                  // 0x0004(0x0004)
    float                                         AgentHeight;                                                  // 0x0008(0x0004)
    float                                         AgentStepHeight;                                              // 0x000C(0x0004)
    float                                         NavWalkingSearchHeightScale;                                  // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FSoftClassPath                                PreferredNavData;                                             // 0x0018(0x0020)
};


// ScriptStruct  Engine.NavDataConfig
// Struct Size::0x0098
struct FNavDataConfig : public FNavAgentProperties
{
    FName                                         Name;                                                         // 0x0038(0x0008)
    FColor                                        Color;                                                        // 0x0040(0x0004)
    char                                          pa_0044[0x0004]                                               // 0x0044(0x0004)
    FVector                                       DefaultQueryExtent;                                           // 0x0048(0x0018)
    AActor*                                       NavigationDataClass;                                          // 0x0060(0x0008)
    TSoftClassPtr<UObject>                        NavDataClass;                                                 // 0x0068(0x0030)
};


// ScriptStruct  Engine.AlphaBlendArgs
// Struct Size::0x0010
struct FAlphaBlendArgs
{
    UCurveFloat*                                  CustomCurve;                                                  // 0x0000(0x0008)
    float                                         BlendTime;                                                    // 0x0008(0x0004)
    enum class EAlphaBlendOption                  BlendOption;                                                  // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
};


// ScriptStruct  Engine.BlendSampleData
// Struct Size::0x0060
struct FBlendSampleData
{
    int32_t                                       SampleDataIndex;                                              // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    UAnimSequence*                                Animation;                                                    // 0x0008(0x0008)
    float                                         TotalWeight;                                                  // 0x0010(0x0004)
    float                                         WeightRate;                                                   // 0x0014(0x0004)
    float                                         Time;                                                         // 0x0018(0x0004)
    float                                         PreviousTime;                                                 // 0x001C(0x0004)
    float                                         SamplePlayRate;                                               // 0x0020(0x0004)
    char                                          pa_0024[0x003C]                                               // 0x0024(0x003C)
};


// ScriptStruct  Engine.BlendFilter
// Struct Size::0x0010
struct FBlendFilter
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
};


// ScriptStruct  Engine.MarkerSyncAnimPosition
// Struct Size::0x0014
struct FMarkerSyncAnimPosition
{
    FName                                         PreviousMarkerName;                                           // 0x0000(0x0008)
    FName                                         NextMarkerName;                                               // 0x0008(0x0008)
    float                                         PositionBetweenMarkers;                                       // 0x0010(0x0004)
};


// ScriptStruct  Engine.AnimTickRecord
// Struct Size::0x0070
struct FAnimTickRecord
{
    UAnimationAsset*                              SourceAsset;                                                  // 0x0000(0x0008)
    char                                          pa_0008[0x0068]                                               // 0x0008(0x0068)
};


// ScriptStruct  Engine.AnimGroupInstance
// Struct Size::0x0078
struct FAnimGroupInstance
{
    char                                          pa_0000[0x0078]                                               // 0x0000(0x0078)
};


// ScriptStruct  Engine.AnimationGroupReference
// Struct Size::0x0010
struct FAnimationGroupReference
{
    enum class EAnimSyncMethod                    Method;                                                       // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FName                                         GroupName;                                                    // 0x0004(0x0008)
    enum class EAnimGroupRole                     GroupRole;                                                    // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
};


// ScriptStruct  Engine.EncounteredStateMachineStack
// Struct Size::0x0030
struct FEncounteredStateMachineStack
{
    char                                          pa_0000[0x0030]                                               // 0x0000(0x0030)
};


// ScriptStruct  Engine.AnimationRecordingSettings
// Struct Size::0x0038
struct FAnimationRecordingSettings
{
    bool                                          bRecordInWorldSpace;                                          // 0x0000(0x0001)
    bool                                          bRemoveRootAnimation;                                         // 0x0001(0x0001)
    bool                                          bAutoSaveAsset;                                               // 0x0002(0x0001)
    char                                          pa_0003[0x0001]                                               // 0x0003(0x0001)
    FFrameRate                                    SampleFrameRate;                                              // 0x0004(0x0008)
    float                                         Length;                                                       // 0x000C(0x0004)
    enum class EAnimInterpolationType             Interpolation;                                                // 0x0010(0x0001)
    enum class ERichCurveInterpMode               InterpMode;                                                   // 0x0011(0x0001)
    enum class ERichCurveTangentMode              TangentMode;                                                  // 0x0012(0x0001)
    char                                          pa_0013[0x0001]                                               // 0x0013(0x0001)
    bool                                          bRecordTransforms;                                            // 0x0014(0x0001)
    bool                                          bRecordMorphTargets;                                          // 0x0015(0x0001)
    bool                                          bRecordAttributeCurves;                                       // 0x0016(0x0001)
    bool                                          bRecordMaterialCurves;                                        // 0x0017(0x0001)
    TArray<FString>                               IncludeAnimationNames;                                        // 0x0018(0x0010)
    TArray<FString>                               ExcludeAnimationNames;                                        // 0x0028(0x0010)
};


// ScriptStruct  Engine.StateMachineStateDebugData
// Struct Size::0x0010
struct FStateMachineStateDebugData
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
};


// ScriptStruct  Engine.StateMachineDebugData
// Struct Size::0x0150
struct FStateMachineDebugData
{
    char                                          pa_0000[0x0150]                                               // 0x0000(0x0150)
};


// ScriptStruct  Engine.AnimationFrameSnapshot
// Struct Size::0x0001
struct FAnimationFrameSnapshot
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  Engine.AnimBlueprintDebugData
// Struct Size::0x0001
struct FAnimBlueprintDebugData
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  Engine.AnimBlueprintMutableData
// Struct Size::0x0001
struct FAnimBlueprintMutableData
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  Engine.AnimBlueprintConstantData
// Struct Size::0x0001
struct FAnimBlueprintConstantData
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  Engine.AnimBlueprintFunctionData
// Struct Size::0x0040
struct FAnimBlueprintFunctionData
{
    OutputPoseNodeProperty                        OutputPoseNodeProperty;                                       // 0x0000(0x0020)
    TArray<InputPoseNodeProperties>               InputPoseNodeProperties;                                      // 0x0020(0x0010)
    TArray<InputProperties>                       InputProperties;                                              // 0x0030(0x0010)
};


// ScriptStruct  Engine.AnimBlueprintFunction
// Struct Size::0x0078
struct FAnimBlueprintFunction
{
    FName                                         Name;                                                         // 0x0000(0x0008)
    FName                                         group;                                                        // 0x0008(0x0008)
    int32_t                                       OutputPoseNodeIndex;                                          // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    TArray<FName>                                 InputPoseNames;                                               // 0x0018(0x0010)
    TArray<int32_t>                               InputPoseNodeIndices;                                         // 0x0028(0x0010)
    char                                          pa_0038[0x0038]                                               // 0x0038(0x0038)
    bool                                          bImplemented;                                                 // 0x0070(0x0001)
    char                                          pa_0071[0x0007]                                               // 0x0071(0x0007)
};


// ScriptStruct  Engine.CachedPoseIndices
// Struct Size::0x0010
struct FCachedPoseIndices
{
    TArray<int32_t>                               OrderedSavedPoseNodeIndices;                                  // 0x0000(0x0010)
};


// ScriptStruct  Engine.GraphAssetPlayerInformation
// Struct Size::0x0010
struct FGraphAssetPlayerInformation
{
    TArray<int32_t>                               PlayerNodeIndices;                                            // 0x0000(0x0010)
};


// ScriptStruct  Engine.AnimGraphBlendOptions
// Struct Size::0x0020
struct FAnimGraphBlendOptions
{
    float                                         BlendInTime;                                                  // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    UBlendProfile*                                BlendInProfile;                                               // 0x0008(0x0008)
    float                                         BlendOutTime;                                                 // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    UBlendProfile*                                BlendOutProfile;                                              // 0x0018(0x0008)
};


// ScriptStruct  Engine.RootMotionExtractionStep
// Struct Size::0x0010
struct FRootMotionExtractionStep
{
    UAnimSequence*                                AnimSequence;                                                 // 0x0000(0x0008)
    float                                         StartPosition;                                                // 0x0008(0x0004)
    float                                         EndPosition;                                                  // 0x000C(0x0004)
};


// ScriptStruct  Engine.AnimSegment
// Struct Size::0x0020
struct FAnimSegment
{
    UAnimSequenceBase*                            AnimReference;                                                // 0x0000(0x0008)
    float                                         StartPos;                                                     // 0x0008(0x0004)
    float                                         AnimStartTime;                                                // 0x000C(0x0004)
    float                                         AnimEndTime;                                                  // 0x0010(0x0004)
    float                                         AnimPlayRate;                                                 // 0x0014(0x0004)
    int32_t                                       LoopingCount;                                                 // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  Engine.AnimTrack
// Struct Size::0x0010
struct FAnimTrack
{
    TArray<FAnimSegment>                          AnimSegments;                                                 // 0x0000(0x0010)
};


// ScriptStruct  Engine.BoneAnimationTrack
// Struct Size::0x0040
struct FBoneAnimationTrack
{
    FRawAnimSequenceTrack                         InternalTrackData;                                            // 0x0000(0x0030)
    int32_t                                       BoneTreeIndex;                                                // 0x0030(0x0004)
    FName                                         Name;                                                         // 0x0034(0x0008)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
};


// ScriptStruct  Engine.AnimationCurveData
// Struct Size::0x0020
struct FAnimationCurveData
{
    TArray<FFloatCurve>                           FloatCurves;                                                  // 0x0000(0x0010)
    TArray<FTransformCurve>                       TransformCurves;                                              // 0x0010(0x0010)
};


// ScriptStruct  Engine.AnimatedBoneAttribute
// Struct Size::0x00F0
struct FAnimatedBoneAttribute
{
    FAnimationAttributeIdentifier                 Identifier;                                                   // 0x0000(0x0040)
    FAttributeCurve                               Curve;                                                        // 0x0040(0x00B0)
};


// ScriptStruct  Engine.AnimExecutionContext
// Struct Size::0x0010
struct FAnimExecutionContext
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
};


// ScriptStruct  Engine.AnimInitializationContext
// Struct Size::0x0010
struct FAnimInitializationContext : public FAnimExecutionContext
{
};


// ScriptStruct  Engine.AnimUpdateContext
// Struct Size::0x0010
struct FAnimUpdateContext : public FAnimExecutionContext
{
};


// ScriptStruct  Engine.AnimPoseContext
// Struct Size::0x0010
struct FAnimPoseContext : public FAnimExecutionContext
{
};


// ScriptStruct  Engine.AnimComponentSpacePoseContext
// Struct Size::0x0010
struct FAnimComponentSpacePoseContext : public FAnimExecutionContext
{
};


// ScriptStruct  Engine.A2Pose
// Struct Size::0x0010
struct FA2Pose
{
    TArray<FTransform>                            Bones;                                                        // 0x0000(0x0010)
};


// ScriptStruct  Engine.A2CSPose
// Struct Size::0x0028
struct FA2CSPose : public FA2Pose
{
    char                                          pa_0010[0x0008]                                               // 0x0010(0x0008)
    TArray<char>                                  ComponentSpaceFlags;                                          // 0x0018(0x0010)
};


// ScriptStruct  Engine.SlotEvaluationPose
// Struct Size::0x0090
struct FSlotEvaluationPose
{
    enum class EAdditiveAnimationType             AdditiveType;                                                 // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         Weight;                                                       // 0x0004(0x0004)
    char                                          pa_0008[0x0088]                                               // 0x0008(0x0088)
};


// ScriptStruct  Engine.CompositeSection
// Struct Size::0x0058
struct FCompositeSection : public FAnimLinkableElement
{
    FName                                         SectionName;                                                  // 0x0030(0x0008)
    float                                         StartTime;                                                    // 0x0038(0x0004)
    FName                                         NextSectionName;                                              // 0x003C(0x0008)
    char                                          pa_0044[0x0004]                                               // 0x0044(0x0004)
    TArray<UAnimMetaData*>                        MetaData;                                                     // 0x0048(0x0010)
};


// ScriptStruct  Engine.SlotAnimationTrack
// Struct Size::0x0018
struct FSlotAnimationTrack
{
    FName                                         SlotName;                                                     // 0x0000(0x0008)
    FAnimTrack                                    AnimTrack;                                                    // 0x0008(0x0010)
};


// ScriptStruct  Engine.BranchingPoint
// Struct Size::0x0040
struct FBranchingPoint : public FAnimLinkableElement
{
    FName                                         EventName;                                                    // 0x0030(0x0008)
    float                                         DisplayTime;                                                  // 0x0038(0x0004)
    float                                         TriggerTimeOffset;                                            // 0x003C(0x0004)
};


// ScriptStruct  Engine.BranchingPointMarker
// Struct Size::0x000C
struct FBranchingPointMarker
{
    int32_t                                       NotifyIndex;                                                  // 0x0000(0x0004)
    float                                         TriggerTime;                                                  // 0x0004(0x0004)
    enum class EAnimNotifyEventType               NotifyEventType;                                              // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
};


// ScriptStruct  Engine.MontageBlendSettings
// Struct Size::0x0020
struct FMontageBlendSettings
{
    UBlendProfile*                                BlendProfile;                                                 // 0x0000(0x0008)
    FAlphaBlendArgs                               Blend;                                                        // 0x0008(0x0010)
    enum class EMontageBlendMode                  BlendMode;                                                    // 0x0018(0x0001)
    char                                          pa_0019[0x0007]                                               // 0x0019(0x0007)
};


// ScriptStruct  Engine.AnimMontageInstance
// Struct Size::0x01C8
struct FAnimMontageInstance
{
    UAnimMontage*                                 Montage;                                                      // 0x0000(0x0008)
    char                                          pa_0008[0x0020]                                               // 0x0008(0x0020)
    bool                                          bPlaying;                                                     // 0x0028(0x0001)
    char                                          pa_0029[0x0003]                                               // 0x0029(0x0003)
    float                                         DefaultBlendTimeMultiplier;                                   // 0x002C(0x0004)
    char                                          pa_0030[0x00C8]                                               // 0x0030(0x00C8)
    TArray<int32_t>                               NextSections;                                                 // 0x00F8(0x0010)
    TArray<int32_t>                               PrevSections;                                                 // 0x0108(0x0010)
    char                                          pa_0118[0x0010]                                               // 0x0118(0x0010)
    TArray<FAnimNotifyEvent>                      ActiveStateBranchingPoints;                                   // 0x0128(0x0010)
    float                                         position;                                                     // 0x0138(0x0004)
    float                                         PlayRate;                                                     // 0x013C(0x0004)
    FAlphaBlend                                   Blend;                                                        // 0x0140(0x0030)
    char                                          pa_0170[0x0034]                                               // 0x0170(0x0034)
    int32_t                                       DisableRootMotionCount;                                       // 0x01A4(0x0004)
    char                                          pa_01A8[0x0020]                                               // 0x01A8(0x0020)
};


// ScriptStruct  Engine.AnimNodeData
// Struct Size::0x0028
struct FAnimNodeData
{
    TScriptInterface<IAnimClassInterface>         AnimClassInterface;                                           // 0x0000(0x0010)
    TArray<uint32_t>                              Entries;                                                      // 0x0010(0x0010)
    int32_t                                       NodeIndex;                                                    // 0x0020(0x0004)
    enum class EAnimNodeDataFlags                 Flags;                                                        // 0x0024(0x0004)
};


// ScriptStruct  Engine.AnimNodeStructData
// Struct Size::0x0058
struct FAnimNodeStructData
{
    TMap<FName,int32_t>                           NameToIndexMap;                                               // 0x0000(0x0050)
    int32_t                                       NumProperties;                                                // 0x0050(0x0004)
    char                                          pa_0054[0x0004]                                               // 0x0054(0x0004)
};


// ScriptStruct  Engine.AnimNodeFunctionRef
// Struct Size::0x0020
struct FAnimNodeFunctionRef
{
    FName                                         ClassName;                                                    // 0x0000(0x0008)
    FName                                         FunctionName;                                                 // 0x0008(0x0008)
    UClass*                                       Class;                                                        // 0x0010(0x0008)
    UFunction*                                    Function;                                                     // 0x0018(0x0008)
};


// ScriptStruct  Engine.AnimNode
// Struct Size::0x0020
struct FAnimNode : public FAnimNode
{
    FComponentSpacePoseLink                       ComponentPose;                                                // 0x0010(0x0010)
};


// ScriptStruct  Engine.AnimNode
// Struct Size::0x0020
struct FAnimNode : public FAnimNode
{
    FPoseLink                                     LocalPose;                                                    // 0x0010(0x0010)
};


// ScriptStruct  Engine.AnimNode
// Struct Size::0x00D0
struct FAnimNode : public FAnimNode
{
    FPoseLink                                     Base;                                                         // 0x0010(0x0010)
    FPoseLink                                     Additive;                                                     // 0x0020(0x0010)
    enum class EAnimAlphaInputType                AlphaInputType;                                               // 0x0030(0x0001)
    char                                          pa_0031[0x0003]                                               // 0x0031(0x0003)
    float                                         Alpha;                                                        // 0x0034(0x0004)
    char                                          bAlphaBoolEnabled;                                            // 0x0038(0x0001)
    char                                          pa_0039[0x0007]                                               // 0x0039(0x0007)
    FInputAlphaBoolBlend                          AlphaBoolBlend;                                               // 0x0040(0x0048)
    FName                                         AlphaCurveName;                                               // 0x0088(0x0008)
    FInputScaleBias                               AlphaScaleBias;                                               // 0x0090(0x0008)
    FInputScaleBiasClamp                          AlphaScaleBiasClamp;                                          // 0x0098(0x0030)
    int32_t                                       LODThreshold;                                                 // 0x00C8(0x0004)
    char                                          pa_00CC[0x0004]                                               // 0x00CC(0x0004)
};


// ScriptStruct  Engine.InertializationRequest
// Struct Size::0x0010
struct FInertializationRequest
{
    float                                         Duration;                                                     // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    UBlendProfile*                                BlendProfile;                                                 // 0x0008(0x0008)
};


// ScriptStruct  Engine.InertializationPose
// Struct Size::0x00D0
struct FInertializationPose
{
    char                                          pa_0000[0x00D0]                                               // 0x0000(0x00D0)
};


// ScriptStruct  Engine.InertializationBoneDiff
// Struct Size::0x0060
struct FInertializationBoneDiff
{
    char                                          pa_0000[0x0060]                                               // 0x0000(0x0060)
};


// ScriptStruct  Engine.InertializationCurveDiff
// Struct Size::0x0008
struct FInertializationCurveDiff
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
};


// ScriptStruct  Engine.InertializationPoseDiff
// Struct Size::0x0028
struct FInertializationPoseDiff
{
    char                                          pa_0000[0x0028]                                               // 0x0000(0x0028)
};


// ScriptStruct  Engine.AnimNode
// Struct Size::0x0100
struct FAnimNode : public FAnimNode
{
    FPoseLink                                     Source;                                                       // 0x0010(0x0010)
    UBlendProfile*                                DefaultBlendProfile;                                          // 0x0020(0x0008)
    TArray<FName>                                 FilteredCurves;                                               // 0x0028(0x0010)
    char                                          pa_0038[0x0068]                                               // 0x0038(0x0068)
    TArray<FInertializationRequest>               RequestQueue;                                                 // 0x00A0(0x0010)
    char                                          pa_00B0[0x0050]                                               // 0x00B0(0x0050)
};


// ScriptStruct  Engine.AnimNode
// Struct Size::0x00B8
struct FAnimNode : public FAnimNode
{
    TArray<FPoseLink>                             InputPoses;                                                   // 0x0058(0x0010)
    TArray<FName>                                 InputPoseNames;                                               // 0x0068(0x0010)
    UAnimInstance*                                InstanceClass;                                                // 0x0078(0x0008)
    char                                          pa_0080[0x0018]                                               // 0x0080(0x0018)
    UBlendProfile*                                PendingBlendOutProfile;                                       // 0x0098(0x0008)
    char                                          pa_00A0[0x0008]                                               // 0x00A0(0x0008)
    UBlendProfile*                                PendingBlendInProfile;                                        // 0x00A8(0x0008)
    char                                          bReceiveNotifiesFromLinkedInstances;                          // 0x00B0(0x0001)
    char                                          bPropagateNotifiesToLinkedInstances;                          // 0x00B0(0x0001)
    char                                          pa_00B1[0x0007]                                               // 0x00B1(0x0007)
};


// ScriptStruct  Engine.AnimNode
// Struct Size::0x00C8
struct FAnimNode : public FAnimNode
{
    UAnimLayerInterface*                          Interface;                                                    // 0x00B8(0x0008)
    FName                                         Layer;                                                        // 0x00C0(0x0008)
};


// ScriptStruct  Engine.AnimNode
// Struct Size::0x00C8
struct FAnimNode : public FAnimNode
{
    FName                                         Name;                                                         // 0x0010(0x0008)
    FName                                         Graph;                                                        // 0x0018(0x0008)
    FPoseLink                                     InputPose;                                                    // 0x0020(0x0010)
    char                                          pa_0030[0x0098]                                               // 0x0030(0x0098)
};


// ScriptStruct  Engine.AnimNode
// Struct Size::0x0108
struct FAnimNode : public FAnimNode
{
    FPoseLink                                     Pose;                                                         // 0x0010(0x0010)
    FName                                         CachePoseName;                                                // 0x0020(0x0008)
    char                                          pa_0028[0x00E0]                                               // 0x0028(0x00E0)
};


// ScriptStruct  Engine.AnimNode
// Struct Size::0x0040
struct FAnimNode : public FAnimNode
{
    FInputScaleBiasClampState                     PlayRateScaleBiasClampState;                                  // 0x0038(0x0008)
};


// ScriptStruct  Engine.InputScaleBiasClampState
// Struct Size::0x0008
struct FInputScaleBiasClampState
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
};


// ScriptStruct  Engine.AnimNode
// Struct Size::0x0048
struct FAnimNode : public FAnimNode
{
    UAnimSequenceBase*                            Sequence;                                                     // 0x0040(0x0008)
};


// ScriptStruct  Engine.AnimNode
// Struct Size::0x0098
struct FAnimNode : public FAnimNode
{
    FName                                         GroupName;                                                    // 0x0040(0x0008)
    enum class EAnimGroupRole                     GroupRole;                                                    // 0x0048(0x0001)
    enum class EAnimSyncMethod                    Method;                                                       // 0x0049(0x0001)
    bool                                          bIgnoreForRelevancyTest;                                      // 0x004A(0x0001)
    char                                          pa_004B[0x0005]                                               // 0x004B(0x0005)
    UAnimSequenceBase*                            Sequence;                                                     // 0x0050(0x0008)
    float                                         PlayRateBasis;                                                // 0x0058(0x0004)
    float                                         PlayRate;                                                     // 0x005C(0x0004)
    FInputScaleBiasClampConstants                 PlayRateScaleBiasClampConstants;                              // 0x0060(0x002C)
    float                                         StartPosition;                                                // 0x008C(0x0004)
    bool                                          bLoopAnimation;                                               // 0x0090(0x0001)
    bool                                          bStartFromMatchingPose;                                       // 0x0091(0x0001)
    char                                          pa_0092[0x0006]                                               // 0x0092(0x0006)
};


// ScriptStruct  Engine.InputScaleBiasClampConstants
// Struct Size::0x002C
struct FInputScaleBiasClampConstants
{
    bool                                          bMapRange;                                                    // 0x0000(0x0001)
    bool                                          bClampResult;                                                 // 0x0001(0x0001)
    bool                                          bInterpResult;                                                // 0x0002(0x0001)
    char                                          pa_0003[0x0001]                                               // 0x0003(0x0001)
    FInputRange                                   InRange;                                                      // 0x0004(0x0008)
    FInputRange                                   OutRange;                                                     // 0x000C(0x0008)
    float                                         Scale;                                                        // 0x0014(0x0004)
    float                                         Bias;                                                         // 0x0018(0x0004)
    float                                         ClampMin;                                                     // 0x001C(0x0004)
    float                                         ClampMax;                                                     // 0x0020(0x0004)
    float                                         InterpSpeedIncreasing;                                        // 0x0024(0x0004)
    float                                         InterpSpeedDecreasing;                                        // 0x0028(0x0004)
};


// ScriptStruct  Engine.AnimationActiveTransitionEntry
// Struct Size::0x00C8
struct FAnimationActiveTransitionEntry
{
    char                                          pa_0000[0x00B8]                                               // 0x0000(0x00B8)
    UBlendProfile*                                BlendProfile;                                                 // 0x00B8(0x0008)
    char                                          pa_00C0[0x0008]                                               // 0x00C0(0x0008)
};


// ScriptStruct  Engine.AnimationPotentialTransition
// Struct Size::0x0030
struct FAnimationPotentialTransition
{
    char                                          pa_0000[0x0030]                                               // 0x0000(0x0030)
};


// ScriptStruct  Engine.AnimNode
// Struct Size::0x00C8
struct FAnimNode : public FAnimNode
{
    int32_t                                       StateMachineIndexInClass;                                     // 0x0010(0x0004)
    int32_t                                       MaxTransitionsPerFrame;                                       // 0x0014(0x0004)
    int32_t                                       MaxTransitionsRequests;                                       // 0x0018(0x0004)
    bool                                          bSkipFirstUpdateTransition;                                   // 0x001C(0x0001)
    bool                                          bReinitializeOnBecomingRelevant;                              // 0x001D(0x0001)
    bool                                          bCreateNotifyMetaData;                                        // 0x001E(0x0001)
    bool                                          bAllowConduitEntryStates;                                     // 0x001F(0x0001)
    char                                          pa_0020[0x00A8]                                               // 0x0020(0x00A8)
};


// ScriptStruct  Engine.AnimNode
// Struct Size::0x00B8
struct FAnimNode : public FAnimNode
{
    char                                          pa_0010[0x0088]                                               // 0x0010(0x0088)
    int32_t                                       FramesToCachePose;                                            // 0x0098(0x0004)
    char                                          pa_009C[0x0004]                                               // 0x009C(0x0004)
    enum class EEvaluatorDataSource               DataSource;                                                   // 0x00A0(0x0001)
    enum class EEvaluatorMode                     EvaluatorMode;                                                // 0x00A1(0x0001)
    char                                          pa_00A2[0x0016]                                               // 0x00A2(0x0016)
};


// ScriptStruct  Engine.AnimNode
// Struct Size::0x0028
struct FAnimNode : public FAnimNode
{
    bool                                          bCanEnterTransition;                                          // 0x0010(0x0001)
    char                                          pa_0011[0x0017]                                               // 0x0011(0x0017)
};


// ScriptStruct  Engine.AnimNode
// Struct Size::0x0028
struct FAnimNode : public FAnimNode
{
    FPoseLink                                     LinkToCachingNode;                                            // 0x0010(0x0010)
    FName                                         CachePoseName;                                                // 0x0020(0x0008)
};


// ScriptStruct  Engine.AnimNotifyEventReference
// Struct Size::0x0028
struct FAnimNotifyEventReference
{
    char                                          pa_0000[0x0018]                                               // 0x0000(0x0018)
    UMirrorDataTable*                             MirrorTable;                                                  // 0x0018(0x0008)
    UObject*                                      NotifySource;                                                 // 0x0020(0x0008)
};


// ScriptStruct  Engine.AnimNotifyArray
// Struct Size::0x0010
struct FAnimNotifyArray
{
    TArray<FAnimNotifyEventReference>             Notifies;                                                     // 0x0000(0x0010)
};


// ScriptStruct  Engine.AnimNotifyContext
// Struct Size::0x0018
struct FAnimNotifyContext
{
    char                                          pa_0000[0x0018]                                               // 0x0000(0x0018)
};


// ScriptStruct  Engine.AnimNotifyQueue
// Struct Size::0x0070
struct FAnimNotifyQueue
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
    TArray<FAnimNotifyEventReference>             AnimNotifies;                                                 // 0x0010(0x0010)
    TMap<FName,FAnimNotifyArray>                  UnfilteredMontageAnimNotifies;                                // 0x0020(0x0050)
};


// ScriptStruct  Engine.AnimSequenceTrackContainer
// Struct Size::0x0020
struct FAnimSequenceTrackContainer
{
    TArray<FRawAnimSequenceTrack>                 AnimationTracks;                                              // 0x0000(0x0010)
    TArray<FName>                                 TrackNames;                                                   // 0x0010(0x0010)
};


// ScriptStruct  Engine.TranslationTrack
// Struct Size::0x0020
struct FTranslationTrack
{
    TArray<FVector3f>                             PosKeys;                                                      // 0x0000(0x0010)
    TArray<float>                                 Times;                                                        // 0x0010(0x0010)
};


// ScriptStruct  Engine.RotationTrack
// Struct Size::0x0020
struct FRotationTrack
{
    TArray<FQuat4f>                               RotKeys;                                                      // 0x0000(0x0010)
    TArray<float>                                 Times;                                                        // 0x0010(0x0010)
};


// ScriptStruct  Engine.ScaleTrack
// Struct Size::0x0020
struct FScaleTrack
{
    TArray<FVector3f>                             ScaleKeys;                                                    // 0x0000(0x0010)
    TArray<float>                                 Times;                                                        // 0x0010(0x0010)
};


// ScriptStruct  Engine.CurveTrack
// Struct Size::0x0018
struct FCurveTrack
{
    FName                                         CurveName;                                                    // 0x0000(0x0008)
    TArray<float>                                 CurveWeights;                                                 // 0x0008(0x0010)
};


// ScriptStruct  Engine.CompressedTrack
// Struct Size::0x0038
struct FCompressedTrack
{
    TArray<char>                                  ByteStream;                                                   // 0x0000(0x0010)
    TArray<float>                                 Times;                                                        // 0x0010(0x0010)
    float                                         Mins;                                                         // 0x0020(0x0004)
    char                                          pa_0024[0x0008]                                               // 0x0024(0x0008)
    float                                         Ranges;                                                       // 0x002C(0x0004)
    char                                          pa_0030[0x0008]                                               // 0x0030(0x0008)
};


// ScriptStruct  Engine.AnimSetMeshLinkup
// Struct Size::0x0010
struct FAnimSetMeshLinkup
{
    TArray<int32_t>                               BoneToTrackTable;                                             // 0x0000(0x0010)
};


// ScriptStruct  Engine.AnimNode
// Struct Size::0x0030
struct FAnimNode : public FAnimNode
{
    FPoseLink                                     SourcePose;                                                   // 0x0010(0x0010)
    char                                          pa_0020[0x0010]                                               // 0x0020(0x0010)
};


// ScriptStruct  Engine.AnimSingleNodeInstanceProxy
// Struct Size::0x0980
struct FAnimSingleNodeInstanceProxy : public FAnimInstanceProxy
{
    char                                          pa_0880[0x0100]                                               // 0x0880(0x0100)
};


// ScriptStruct  Engine.AnimationTransitionRule
// Struct Size::0x0010
struct FAnimationTransitionRule
{
    FName                                         RuleToExecute;                                                // 0x0000(0x0008)
    bool                                          TransitionReturnVal;                                          // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
    int32_t                                       TransitionIndex;                                              // 0x000C(0x0004)
};


// ScriptStruct  Engine.AnimationStateBase
// Struct Size::0x0008
struct FAnimationStateBase
{
    FName                                         StateName;                                                    // 0x0000(0x0008)
};


// ScriptStruct  Engine.AnimationState
// Struct Size::0x0028
struct FAnimationState : public FAnimationStateBase
{
    TArray<FAnimationTransitionRule>              Transitions;                                                  // 0x0008(0x0010)
    int32_t                                       StateRootNodeIndex;                                           // 0x0018(0x0004)
    int32_t                                       StartNotify;                                                  // 0x001C(0x0004)
    int32_t                                       EndNotify;                                                    // 0x0020(0x0004)
    int32_t                                       FullyBlendedNotify;                                           // 0x0024(0x0004)
};


// ScriptStruct  Engine.AnimationTransitionBetweenStates
// Struct Size::0x0040
struct FAnimationTransitionBetweenStates : public FAnimationStateBase
{
    int32_t                                       PreviousState;                                                // 0x0008(0x0004)
    int32_t                                       NextState;                                                    // 0x000C(0x0004)
    float                                         CrossfadeDuration;                                            // 0x0010(0x0004)
    int32_t                                       StartNotify;                                                  // 0x0014(0x0004)
    int32_t                                       EndNotify;                                                    // 0x0018(0x0004)
    int32_t                                       InterruptNotify;                                              // 0x001C(0x0004)
    enum class EAlphaBlendOption                  BlendMode;                                                    // 0x0020(0x0001)
    char                                          pa_0021[0x0007]                                               // 0x0021(0x0007)
    UCurveFloat*                                  CustomCurve;                                                  // 0x0028(0x0008)
    UBlendProfile*                                BlendProfile;                                                 // 0x0030(0x0008)
    enum class ETransitionLogicType               LogicType;                                                    // 0x0038(0x0001)
    char                                          pa_0039[0x0007]                                               // 0x0039(0x0007)
};


// ScriptStruct  Engine.BakedStateExitTransition
// Struct Size::0x0028
struct FBakedStateExitTransition
{
    int32_t                                       CanTakeDelegateIndex;                                         // 0x0000(0x0004)
    int32_t                                       CustomResultNodeIndex;                                        // 0x0004(0x0004)
    int32_t                                       TransitionIndex;                                              // 0x0008(0x0004)
    bool                                          bDesiredTransitionReturnValue;                                // 0x000C(0x0001)
    bool                                          bAutomaticRemainingTimeRule;                                  // 0x000D(0x0001)
    char                                          pa_000E[0x0002]                                               // 0x000E(0x0002)
    FName                                         SyncGroupNameToRequireValidMarkersRule;                       // 0x0010(0x0008)
    TArray<int32_t>                               PoseEvaluatorLinks;                                           // 0x0018(0x0010)
};


// ScriptStruct  Engine.BakedAnimationState
// Struct Size::0x0058
struct FBakedAnimationState
{
    FName                                         StateName;                                                    // 0x0000(0x0008)
    TArray<FBakedStateExitTransition>             Transitions;                                                  // 0x0008(0x0010)
    int32_t                                       StateRootNodeIndex;                                           // 0x0018(0x0004)
    int32_t                                       StartNotify;                                                  // 0x001C(0x0004)
    int32_t                                       EndNotify;                                                    // 0x0020(0x0004)
    int32_t                                       FullyBlendedNotify;                                           // 0x0024(0x0004)
    bool                                          bIsAConduit;                                                  // 0x0028(0x0001)
    char                                          pa_0029[0x0003]                                               // 0x0029(0x0003)
    int32_t                                       EntryRuleNodeIndex;                                           // 0x002C(0x0004)
    TArray<int32_t>                               PlayerNodeIndices;                                            // 0x0030(0x0010)
    TArray<int32_t>                               LayerNodeIndices;                                             // 0x0040(0x0010)
    bool                                          bAlwaysResetOnEntry;                                          // 0x0050(0x0001)
    char                                          pa_0051[0x0007]                                               // 0x0051(0x0007)
};


// ScriptStruct  Engine.BakedAnimationStateMachine
// Struct Size::0x0030
struct FBakedAnimationStateMachine
{
    FName                                         MachineName;                                                  // 0x0000(0x0008)
    int32_t                                       InitialState;                                                 // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    TArray<FBakedAnimationState>                  States;                                                       // 0x0010(0x0010)
    TArray<FAnimationTransitionBetweenStates>     Transitions;                                                  // 0x0020(0x0010)
};


// ScriptStruct  Engine.AnimSubsystem
// Struct Size::0x0018
struct FAnimSubsystem : public FAnimSubsystem
{
    TArray<FExposedValueHandler>                  ExposedValueHandlers;                                         // 0x0008(0x0010)
};


// ScriptStruct  Engine.ExposedValueHandler
// Struct Size::0x0028
struct FExposedValueHandler
{
    TArray<FExposedValueCopyRecord>               CopyRecords;                                                  // 0x0000(0x0010)
    UFunction*                                    Function;                                                     // 0x0010(0x0008)
    char                                          pa_0018[0x0008]                                               // 0x0018(0x0008)
    FName                                         BoundFunction;                                                // 0x0020(0x0008)
};


// ScriptStruct  Engine.ExposedValueCopyRecord
// Struct Size::0x0008
struct FExposedValueCopyRecord
{
    int32_t                                       CopyIndex;                                                    // 0x0000(0x0004)
    enum class EPostCopyOperation                 PostCopyOperation;                                            // 0x0004(0x0001)
    char                                          pa_0005[0x0003]                                               // 0x0005(0x0003)
};


// ScriptStruct  Engine.AnimSubsystemInstance
// Struct Size::0x00A8
struct FAnimSubsystemInstance : public FAnimSubsystemInstance
{
    char                                          pa_0008[0x00A0]                                               // 0x0008(0x00A0)
};


// ScriptStruct  Engine.AnimSubsystem
// Struct Size::0x0080
struct FAnimSubsystem : public FAnimSubsystem
{
    FPropertyAccessLibrary                        Library;                                                      // 0x0008(0x0078)
};


// ScriptStruct  Engine.PropertyAccessLibrary
// Struct Size::0x0078
struct FPropertyAccessLibrary
{
    TArray<FPropertyAccessSegment>                PathSegments;                                                 // 0x0000(0x0010)
    TArray<FPropertyAccessPath>                   SrcPaths;                                                     // 0x0010(0x0010)
    TArray<FPropertyAccessPath>                   DestPaths;                                                    // 0x0020(0x0010)
    TArray<FPropertyAccessCopyBatch>              CopyBatchArray;                                               // 0x0030(0x0010)
    char                                          pa_0040[0x0038]                                               // 0x0040(0x0038)
};


// ScriptStruct  Engine.PropertyAccessCopyBatch
// Struct Size::0x0010
struct FPropertyAccessCopyBatch
{
    TArray<FPropertyAccessCopy>                   Copies;                                                       // 0x0000(0x0010)
};


// ScriptStruct  Engine.PropertyAccessCopy
// Struct Size::0x0010
struct FPropertyAccessCopy
{
    int32_t                                       AccessIndex;                                                  // 0x0000(0x0004)
    int32_t                                       DestAccessStartIndex;                                         // 0x0004(0x0004)
    int32_t                                       DestAccessEndIndex;                                           // 0x0008(0x0004)
    enum class EPropertyAccessCopyType            Type;                                                         // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
};


// ScriptStruct  Engine.PropertyAccessPath
// Struct Size::0x0008
struct FPropertyAccessPath
{
    int32_t                                       PathSegmentStartIndex;                                        // 0x0000(0x0004)
    int32_t                                       PathSegmentCount;                                             // 0x0004(0x0004)
};


// ScriptStruct  Engine.PropertyAccessSegment
// Struct Size::0x0040
struct FPropertyAccessSegment
{
    FName                                         Name;                                                         // 0x0000(0x0008)
    UStruct*                                      Struct;                                                       // 0x0008(0x0008)
    Property                                      Property;                                                     // 0x0010(0x0020)
    UFunction*                                    Function;                                                     // 0x0030(0x0008)
    int32_t                                       ArrayIndex;                                                   // 0x0038(0x0004)
    uint16_t                                      Flags;                                                        // 0x003C(0x0002)
    char                                          pa_003E[0x0002]                                               // 0x003E(0x0002)
};


// ScriptStruct  Engine.AnimSubsystem
// Struct Size::0x0060
struct FAnimSubsystem : public FAnimSubsystem
{
    TMap<FName,int32_t>                           NodeIndices;                                                  // 0x0008(0x0050)
    char                                          pa_0058[0x0008]                                               // 0x0058(0x0008)
};


// ScriptStruct  Engine.AssetMapping
// Struct Size::0x0010
struct FAssetMapping
{
    UAnimationAsset*                              SourceAsset;                                                  // 0x0000(0x0008)
    UAnimationAsset*                              TargetAsset;                                                  // 0x0008(0x0008)
};


// ScriptStruct  Engine.BlendProfileBoneEntry
// Struct Size::0x0014
struct FBlendProfileBoneEntry
{
    FBoneReference                                BoneReference;                                                // 0x0000(0x0010)
    float                                         BlendScale;                                                   // 0x0010(0x0004)
};


// ScriptStruct  Engine.CachedAnimStateData
// Struct Size::0x001C
struct FCachedAnimStateData
{
    FName                                         StateMachineName;                                             // 0x0000(0x0008)
    FName                                         StateName;                                                    // 0x0008(0x0008)
    char                                          pa_0010[0x000C]                                               // 0x0010(0x000C)
};


// ScriptStruct  Engine.CachedAnimStateArray
// Struct Size::0x0018
struct FCachedAnimStateArray
{
    TArray<FCachedAnimStateData>                  States;                                                       // 0x0000(0x0010)
    char                                          pa_0010[0x0008]                                               // 0x0010(0x0008)
};


// ScriptStruct  Engine.CachedAnimAssetPlayerData
// Struct Size::0x0018
struct FCachedAnimAssetPlayerData
{
    FName                                         StateMachineName;                                             // 0x0000(0x0008)
    FName                                         StateName;                                                    // 0x0008(0x0008)
    char                                          pa_0010[0x0008]                                               // 0x0010(0x0008)
};


// ScriptStruct  Engine.CachedAnimRelevancyData
// Struct Size::0x001C
struct FCachedAnimRelevancyData
{
    FName                                         StateMachineName;                                             // 0x0000(0x0008)
    FName                                         StateName;                                                    // 0x0008(0x0008)
    char                                          pa_0010[0x000C]                                               // 0x0010(0x000C)
};


// ScriptStruct  Engine.CachedAnimTransitionData
// Struct Size::0x0024
struct FCachedAnimTransitionData
{
    FName                                         StateMachineName;                                             // 0x0000(0x0008)
    FName                                         FromStateName;                                                // 0x0008(0x0008)
    FName                                         ToStateName;                                                  // 0x0010(0x0008)
    char                                          pa_0018[0x000C]                                               // 0x0018(0x000C)
};


// ScriptStruct  Engine.NamedCurveValue
// Struct Size::0x000C
struct FNamedCurveValue
{
    FName                                         Name;                                                         // 0x0000(0x0008)
    float                                         Value;                                                        // 0x0008(0x0004)
};


// ScriptStruct  Engine.InputClampState
// Struct Size::0x0008
struct FInputClampState
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
};


// ScriptStruct  Engine.MirrorTableRow
// Struct Size::0x0020
struct FMirrorTableRow : public FTableRowBase
{
    FName                                         Name;                                                         // 0x0008(0x0008)
    FName                                         MirroredName;                                                 // 0x0010(0x0008)
    enum class EMirrorRowType                     MirrorEntryType;                                              // 0x0018(0x0001)
    char                                          pa_0019[0x0007]                                               // 0x0019(0x0007)
};


// ScriptStruct  Engine.MirrorFindReplaceExpression
// Struct Size::0x0014
struct FMirrorFindReplaceExpression
{
    FName                                         FindExpression;                                               // 0x0000(0x0008)
    FName                                         ReplaceExpression;                                            // 0x0008(0x0008)
    enum class EMirrorFindReplaceMethod           FindReplaceMethod;                                            // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
};


// ScriptStruct  Engine.TrajectorySample
// Struct Size::0x0090
struct FTrajectorySample
{
    float                                         AccumulatedSeconds;                                           // 0x0000(0x0004)
    float                                         AccumulatedDistance;                                          // 0x0004(0x0004)
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FTransform                                    Transform;                                                    // 0x0010(0x0060)
    FVector                                       LinearVelocity;                                               // 0x0070(0x0018)
    char                                          pa_0088[0x0008]                                               // 0x0088(0x0008)
};


// ScriptStruct  Engine.TrajectorySampleRange
// Struct Size::0x0018
struct FTrajectorySampleRange
{
    TArray<FTrajectorySample>                     Samples;                                                      // 0x0000(0x0010)
    int32_t                                       SampleRate;                                                   // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  Engine.NodeItem
// Struct Size::0x0070
struct FNodeItem
{
    FName                                         ParentName;                                                   // 0x0000(0x0008)
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FTransform                                    Transform;                                                    // 0x0010(0x0060)
};


// ScriptStruct  Engine.PoseData
// Struct Size::0x0020
struct FPoseData
{
    TArray<FTransform>                            LocalSpacePose;                                               // 0x0000(0x0010)
    TArray<float>                                 CurveData;                                                    // 0x0010(0x0010)
};


// ScriptStruct  Engine.PoseAssetInfluence
// Struct Size::0x0008
struct FPoseAssetInfluence
{
    int32_t                                       PoseIndex;                                                    // 0x0000(0x0004)
    int32_t                                       BoneTransformIndex;                                           // 0x0004(0x0004)
};


// ScriptStruct  Engine.PoseAssetInfluences
// Struct Size::0x0010
struct FPoseAssetInfluences
{
    TArray<FPoseAssetInfluence>                   Influences;                                                   // 0x0000(0x0010)
};


// ScriptStruct  Engine.PoseDataContainer
// Struct Size::0x0060
struct FPoseDataContainer
{
    TArray<FSmartName>                            PoseNames;                                                    // 0x0000(0x0010)
    TArray<FName>                                 Tracks;                                                       // 0x0010(0x0010)
    TArray<int32_t>                               TrackBoneIndices;                                             // 0x0020(0x0010)
    TArray<FPoseAssetInfluences>                  TrackPoseInfluenceIndices;                                    // 0x0030(0x0010)
    TArray<FPoseData>                             Poses;                                                        // 0x0040(0x0010)
    TArray<FAnimCurveBase>                        Curves;                                                       // 0x0050(0x0010)
};


// ScriptStruct  Engine.PreviewAttachedObjectPair
// Struct Size::0x0040
struct FPreviewAttachedObjectPair
{
    TSoftObjectPtr<UObject>                       AttachedObject;                                               // 0x0000(0x0030)
    UObject*                                      Object;                                                       // 0x0030(0x0008)
    FName                                         AttachedTo;                                                   // 0x0038(0x0008)
};


// ScriptStruct  Engine.PreviewAssetAttachContainer
// Struct Size::0x0010
struct FPreviewAssetAttachContainer
{
    TArray<FPreviewAttachedObjectPair>            AttachedObjects;                                              // 0x0000(0x0010)
};


// ScriptStruct  Engine.PreviewMeshCollectionEntry
// Struct Size::0x0060
struct FPreviewMeshCollectionEntry
{
    TSoftObjectPtr<USkeletalMesh>                 SkeletalMesh;                                                 // 0x0000(0x0030)
    TSoftObjectPtr<UAnimBlueprint>                AnimBlueprint;                                                // 0x0030(0x0030)
};


// ScriptStruct  Engine.Node
// Struct Size::0x0090
struct FNode
{
    FName                                         Name;                                                         // 0x0000(0x0008)
    FName                                         ParentName;                                                   // 0x0008(0x0008)
    FTransform                                    Transform;                                                    // 0x0010(0x0060)
    FString                                       DisplayName;                                                  // 0x0070(0x0010)
    bool                                          bAdvanced;                                                    // 0x0080(0x0001)
    char                                          pa_0081[0x000F]                                               // 0x0081(0x000F)
};


// ScriptStruct  Engine.RigTransformConstraint
// Struct Size::0x0010
struct FRigTransformConstraint
{
    enum class EConstraintTransform               TranformType;                                                 // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FName                                         ParentSpace;                                                  // 0x0004(0x0008)
    float                                         Weight;                                                       // 0x000C(0x0004)
};


// ScriptStruct  Engine.TransformBaseConstraint
// Struct Size::0x0010
struct FTransformBaseConstraint
{
    TArray<FRigTransformConstraint>               TransformConstraints;                                         // 0x0000(0x0010)
};


// ScriptStruct  Engine.TransformBase
// Struct Size::0x0028
struct FTransformBase
{
    FName                                         Node;                                                         // 0x0000(0x0008)
    FTransformBaseConstraint                      Constraints;                                                  // 0x0008(0x0010)
    char                                          pa_0018[0x0010]                                               // 0x0018(0x0010)
};


// ScriptStruct  Engine.SkeletonToMeshLinkup
// Struct Size::0x0020
struct FSkeletonToMeshLinkup
{
    TArray<int32_t>                               SkeletonToMeshTable;                                          // 0x0000(0x0010)
    TArray<int32_t>                               MeshToSkeletonTable;                                          // 0x0010(0x0010)
};


// ScriptStruct  Engine.BoneNode
// Struct Size::0x0010
struct FBoneNode
{
    FName                                         Name;                                                         // 0x0000(0x0008)
    int32_t                                       ParentIndex;                                                  // 0x0008(0x0004)
    enum class EBoneTranslationRetargetingMode    TranslationRetargetingMode;                                   // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
};


// ScriptStruct  Engine.ReferencePose
// Struct Size::0x0018
struct FReferencePose
{
    FName                                         PoseName;                                                     // 0x0000(0x0008)
    TArray<FTransform>                            ReferencePose;                                                // 0x0008(0x0010)
};


// ScriptStruct  Engine.BoneReductionSetting
// Struct Size::0x0010
struct FBoneReductionSetting
{
    TArray<FName>                                 BonesToRemove;                                                // 0x0000(0x0010)
};


// ScriptStruct  Engine.NameMapping
// Struct Size::0x0010
struct FNameMapping
{
    FName                                         NodeName;                                                     // 0x0000(0x0008)
    FName                                         BoneName;                                                     // 0x0008(0x0008)
};


// ScriptStruct  Engine.RigConfiguration
// Struct Size::0x0018
struct FRigConfiguration
{
    URig*                                         Rig;                                                          // 0x0000(0x0008)
    TArray<FNameMapping>                          BoneMappingTable;                                             // 0x0008(0x0010)
};


// ScriptStruct  Engine.AnimSlotGroup
// Struct Size::0x0018
struct FAnimSlotGroup
{
    FName                                         GroupName;                                                    // 0x0000(0x0008)
    TArray<FName>                                 SlotNames;                                                    // 0x0008(0x0010)
};


// ScriptStruct  Engine.VirtualBone
// Struct Size::0x0018
struct FVirtualBone
{
    FName                                         SourceBoneName;                                               // 0x0000(0x0008)
    FName                                         TargetBoneName;                                               // 0x0008(0x0008)
    FName                                         VirtualBoneName;                                              // 0x0010(0x0008)
};


// ScriptStruct  Engine.SkinWeightProfileInfo
// Struct Size::0x0010
struct FSkinWeightProfileInfo
{
    FName                                         Name;                                                         // 0x0000(0x0008)
    FPerPlatformBool                              DefaultProfile;                                               // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
    FPerPlatformInt                               DefaultProfileFromLODIndex;                                   // 0x000C(0x0004)
};


// ScriptStruct  Engine.SkinWeightProfileManagerTickFunction
// Struct Size::0x0030
struct FSkinWeightProfileManagerTickFunction : public FTickFunction
{
    char                                          pa_0028[0x0008]                                               // 0x0028(0x0008)
};


// ScriptStruct  Engine.CurveMetaData
// Struct Size::0x0018
struct FCurveMetaData
{
    char                                          pa_0000[0x0018]                                               // 0x0000(0x0018)
};


// ScriptStruct  Engine.SmartNameMapping
// Struct Size::0x0070
struct FSmartNameMapping
{
    char                                          pa_0000[0x0070]                                               // 0x0000(0x0070)
};


// ScriptStruct  Engine.SmartNameContainer
// Struct Size::0x0050
struct FSmartNameContainer
{
    char                                          pa_0000[0x0050]                                               // 0x0000(0x0050)
};


// ScriptStruct  Engine.TimeStretchCurveMarker
// Struct Size::0x0010
struct FTimeStretchCurveMarker
{
    float                                         Time;                                                         // 0x0000(0x0004)
    char                                          pa_0004[0x0008]                                               // 0x0004(0x0008)
    float                                         Alpha;                                                        // 0x000C(0x0004)
};


// ScriptStruct  Engine.TimeStretchCurve
// Struct Size::0x0028
struct FTimeStretchCurve
{
    float                                         SamplingRate;                                                 // 0x0000(0x0004)
    float                                         CurveValueMinPrecision;                                       // 0x0004(0x0004)
    TArray<FTimeStretchCurveMarker>               Markers;                                                      // 0x0008(0x0010)
    float                                         Sum;                                                          // 0x0018(0x0004)
    char                                          pa_001C[0x000C]                                               // 0x001C(0x000C)
};


// ScriptStruct  Engine.TimeStretchCurveInstance
// Struct Size::0x0030
struct FTimeStretchCurveInstance
{
    bool                                          bHasValidData;                                                // 0x0000(0x0001)
    char                                          pa_0001[0x002F]                                               // 0x0001(0x002F)
};


// ScriptStruct  Engine.AnimGroupInfo
// Struct Size::0x0018
struct FAnimGroupInfo
{
    FName                                         Name;                                                         // 0x0000(0x0008)
    FLinearColor                                  Color;                                                        // 0x0008(0x0010)
};


// ScriptStruct  Engine.AnimParentNodeAssetOverride
// Struct Size::0x0018
struct FAnimParentNodeAssetOverride
{
    UAnimationAsset*                              NewAsset;                                                     // 0x0000(0x0008)
    FGuid                                         ParentNodeGuid;                                               // 0x0008(0x0010)
};


// ScriptStruct  Engine.AssetCompileData
// Struct Size::0x0008
struct FAssetCompileData
{
    TWeakObjectPtr<UObject>                       Asset;                                                        // 0x0000(0x0008)
};


// ScriptStruct  Engine.PrimaryAssetTypeInfo
// Struct Size::0x0090
struct FPrimaryAssetTypeInfo
{
    FName                                         PrimaryAssetType;                                             // 0x0000(0x0008)
    TSoftClassPtr<UObject>                        AssetBaseClass;                                               // 0x0008(0x0030)
    UClass*                                       AssetBaseClassLoaded;                                         // 0x0038(0x0008)
    bool                                          bHasBlueprintClasses;                                         // 0x0040(0x0001)
    bool                                          bIsEditorOnly;                                                // 0x0041(0x0001)
    char                                          pa_0042[0x0006]                                               // 0x0042(0x0006)
    TArray<FDirectoryPath>                        Directories;                                                  // 0x0048(0x0010)
    TArray<FSoftObjectPath>                       SpecificAssets;                                               // 0x0058(0x0010)
    FPrimaryAssetRules                            Rules;                                                        // 0x0068(0x000C)
    char                                          pa_0074[0x0004]                                               // 0x0074(0x0004)
    TArray<FString>                               AssetScanPaths;                                               // 0x0078(0x0010)
    bool                                          bIsDynamicAsset;                                              // 0x0088(0x0001)
    char                                          pa_0089[0x0003]                                               // 0x0089(0x0003)
    int32_t                                       NumberOfAssets;                                               // 0x008C(0x0004)
};


// ScriptStruct  Engine.AssetManagerSearchRules
// Struct Size::0x0050
struct FAssetManagerSearchRules
{
    TArray<FString>                               AssetScanPaths;                                               // 0x0000(0x0010)
    TArray<FString>                               IncludePatterns;                                              // 0x0010(0x0010)
    TArray<FString>                               ExcludePatterns;                                              // 0x0020(0x0010)
    UClass*                                       AssetBaseClass;                                               // 0x0030(0x0008)
    bool                                          bHasBlueprintClasses;                                         // 0x0038(0x0001)
    bool                                          bForceSynchronousScan;                                        // 0x0039(0x0001)
    bool                                          bSkipVirtualPathExpansion;                                    // 0x003A(0x0001)
    bool                                          bSkipManagerIncludeCheck;                                     // 0x003B(0x0001)
    char                                          pa_003C[0x0014]                                               // 0x003C(0x0014)
};


// ScriptStruct  Engine.AudioEffectParameters
// Struct Size::0x0008
struct FAudioEffectParameters
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
};


// ScriptStruct  Engine.AudioReverbEffect
// Struct Size::0x0048
struct FAudioReverbEffect : public FAudioEffectParameters
{
    char                                          pa_0008[0x0040]                                               // 0x0008(0x0040)
};


// ScriptStruct  Engine.AudioQualitySettings
// Struct Size::0x0020
struct FAudioQualitySettings
{
    FText                                         DisplayName;                                                  // 0x0000(0x0018)
    int32_t                                       MaxChannels;                                                  // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  Engine.SoundDebugEntry
// Struct Size::0x0028
struct FSoundDebugEntry
{
    FName                                         DebugName;                                                    // 0x0000(0x0008)
    FSoftObjectPath                               Sound;                                                        // 0x0008(0x0020)
};


// ScriptStruct  Engine.DefaultAudioBusSettings
// Struct Size::0x0020
struct FDefaultAudioBusSettings
{
    FSoftObjectPath                               AudioBus;                                                     // 0x0000(0x0020)
};


// ScriptStruct  Engine.AudioVolumeSubmixSendSettings
// Struct Size::0x0018
struct FAudioVolumeSubmixSendSettings
{
    enum class EAudioVolumeLocationState          ListenerLocationState;                                        // 0x0000(0x0001)
    enum class EAudioVolumeLocationState          SourceLocationState;                                          // 0x0001(0x0001)
    char                                          pa_0002[0x0006]                                               // 0x0002(0x0006)
    TArray<FSoundSubmixSendInfo>                  SubmixSends;                                                  // 0x0008(0x0010)
};


// ScriptStruct  Engine.SoundSubmixSendInfo
// Struct Size::0x00B0
struct FSoundSubmixSendInfo
{
    enum class ESendLevelControlMethod            SendLevelControlMethod;                                       // 0x0000(0x0001)
    enum class ESubmixSendStage                   SendStage;                                                    // 0x0001(0x0001)
    char                                          pa_0002[0x0006]                                               // 0x0002(0x0006)
    USoundSubmixBase*                             SoundSubmix;                                                  // 0x0008(0x0008)
    float                                         SendLevel;                                                    // 0x0010(0x0004)
    bool                                          DisableManualSendClamp;                                       // 0x0014(0x0001)
    char                                          pa_0015[0x0003]                                               // 0x0015(0x0003)
    float                                         MinSendLevel;                                                 // 0x0018(0x0004)
    float                                         MaxSendLevel;                                                 // 0x001C(0x0004)
    float                                         MinSendDistance;                                              // 0x0020(0x0004)
    float                                         MaxSendDistance;                                              // 0x0024(0x0004)
    FRuntimeFloatCurve                            CustomSendLevelCurve;                                         // 0x0028(0x0088)
};


// ScriptStruct  Engine.AudioVolumeSubmixOverrideSettings
// Struct Size::0x0020
struct FAudioVolumeSubmixOverrideSettings
{
    USoundSubmix*                                 Submix;                                                       // 0x0000(0x0008)
    TArray<USoundEffectSubmixPreset*>             SubmixEffectChain;                                            // 0x0008(0x0010)
    float                                         CrossfadeTime;                                                // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  Engine.InteriorSettings
// Struct Size::0x0024
struct FInteriorSettings
{
    bool                                          bIsWorldSettings;                                             // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         ExteriorVolume;                                               // 0x0004(0x0004)
    float                                         ExteriorTime;                                                 // 0x0008(0x0004)
    float                                         ExteriorLPF;                                                  // 0x000C(0x0004)
    float                                         ExteriorLPFTime;                                              // 0x0010(0x0004)
    float                                         InteriorVolume;                                               // 0x0014(0x0004)
    float                                         InteriorTime;                                                 // 0x0018(0x0004)
    float                                         InteriorLPF;                                                  // 0x001C(0x0004)
    float                                         InteriorLPFTime;                                              // 0x0020(0x0004)
};


// ScriptStruct  Engine.NodeToCodeAssociation
// Struct Size::0x0014
struct FNodeToCodeAssociation
{
    char                                          pa_0000[0x0014]                                               // 0x0000(0x0014)
};


// ScriptStruct  Engine.DebuggingInfoForSingleFunction
// Struct Size::0x0190
struct FDebuggingInfoForSingleFunction
{
    char                                          pa_0000[0x0190]                                               // 0x0000(0x0190)
};


// ScriptStruct  Engine.PointerToUberGraphFrame
// Struct Size::0x0008
struct FPointerToUberGraphFrame
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
};


// ScriptStruct  Engine.BlueprintDebugData
// Struct Size::0x0001
struct FBlueprintDebugData
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  Engine.EventGraphFastCallPair
// Struct Size::0x0010
struct FEventGraphFastCallPair
{
    UFunction*                                    FunctionToPatch;                                              // 0x0000(0x0008)
    int32_t                                       EventGraphCallOffset;                                         // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
};


// ScriptStruct  Engine.BlueprintComponentChangedPropertyInfo
// Struct Size::0x0018
struct FBlueprintComponentChangedPropertyInfo
{
    FName                                         PropertyName;                                                 // 0x0000(0x0008)
    int32_t                                       ArrayIndex;                                                   // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    UStruct*                                      PropertyScope;                                                // 0x0010(0x0008)
};


// ScriptStruct  Engine.BlueprintCookedComponentInstancingData
// Struct Size::0x0048
struct FBlueprintCookedComponentInstancingData
{
    TArray<FBlueprintComponentChangedPropertyInfo>ChangedPropertyList;                                          // 0x0000(0x0010)
    char                                          pa_0010[0x0011]                                               // 0x0010(0x0011)
    bool                                          bHasValidCookedData;                                          // 0x0021(0x0001)
    char                                          pa_0022[0x0026]                                               // 0x0022(0x0026)
};


// ScriptStruct  Engine.BPComponentClassOverride
// Struct Size::0x0010
struct FBPComponentClassOverride
{
    FName                                         ComponentName;                                                // 0x0000(0x0008)
    UClass*                                       ComponentClass;                                               // 0x0008(0x0008)
};


// ScriptStruct  Engine.AnimCurveType
// Struct Size::0x0002
struct FAnimCurveType
{
    char                                          pa_0000[0x0002]                                               // 0x0000(0x0002)
};


// ScriptStruct  Engine.BookmarkJumpToSettings
// Struct Size::0x0001
struct FBookmarkJumpToSettings : public FBookmarkBaseJumpToSettings
{
};


// ScriptStruct  Engine.BuilderPoly
// Struct Size::0x0020
struct FBuilderPoly
{
    TArray<int32_t>                               VertexIndices;                                                // 0x0000(0x0010)
    int32_t                                       Direction;                                                    // 0x0010(0x0004)
    FName                                         ItemName;                                                     // 0x0014(0x0008)
    int32_t                                       PolyFlags;                                                    // 0x001C(0x0004)
};


// ScriptStruct  Engine.CameraLensInterfaceClassSupport
// Struct Size::0x0008
struct FCameraLensInterfaceClassSupport
{
    AActor*                                       Class;                                                        // 0x0000(0x0008)
};


// ScriptStruct  Engine.PooledCameraShakes
// Struct Size::0x0010
struct FPooledCameraShakes
{
    TArray<UCameraShakeBase*>                     PooledShakes;                                                 // 0x0000(0x0010)
};


// ScriptStruct  Engine.ActiveCameraShakeInfo
// Struct Size::0x0018
struct FActiveCameraShakeInfo
{
    UCameraShakeBase*                             ShakeInstance;                                                // 0x0000(0x0008)
    TWeakObjectPtr<UCameraShakeSourceComponent>   ShakeSource;                                                  // 0x0008(0x0008)
    bool                                          bIsCustomInitialized;                                         // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
};


// ScriptStruct  Engine.CameraShakeStartParams
// Struct Size::0x0001
struct FCameraShakeStartParams
{
    bool                                          bIsRestarting;                                                // 0x0000(0x0001)
};


// ScriptStruct  Engine.CameraShakeUpdateParams
// Struct Size::0x07D0
struct FCameraShakeUpdateParams
{
    float                                         DeltaTime;                                                    // 0x0000(0x0004)
    float                                         ShakeScale;                                                   // 0x0004(0x0004)
    float                                         DynamicScale;                                                 // 0x0008(0x0004)
    float                                         BlendingWeight;                                               // 0x000C(0x0004)
    FMinimalViewInfo                              POV;                                                          // 0x0010(0x07C0)
};


// ScriptStruct  Engine.CameraShakeScrubParams
// Struct Size::0x07D0
struct FCameraShakeScrubParams
{
    float                                         AbsoluteTime;                                                 // 0x0000(0x0004)
    float                                         ShakeScale;                                                   // 0x0004(0x0004)
    float                                         DynamicScale;                                                 // 0x0008(0x0004)
    float                                         BlendingWeight;                                               // 0x000C(0x0004)
    FMinimalViewInfo                              POV;                                                          // 0x0010(0x07C0)
};


// ScriptStruct  Engine.CameraShakeUpdateResult
// Struct Size::0x0730
struct FCameraShakeUpdateResult
{
    char                                          pa_0000[0x0730]                                               // 0x0000(0x0730)
};


// ScriptStruct  Engine.CameraShakeStopParams
// Struct Size::0x0001
struct FCameraShakeStopParams
{
    bool                                          bImmediately;                                                 // 0x0000(0x0001)
};


// ScriptStruct  Engine.CameraShakeDuration
// Struct Size::0x0008
struct FCameraShakeDuration
{
    float                                         Duration;                                                     // 0x0000(0x0004)
    enum class ECameraShakeDurationType           Type;                                                         // 0x0004(0x0001)
    char                                          pa_0005[0x0003]                                               // 0x0005(0x0003)
};


// ScriptStruct  Engine.CameraShakeInfo
// Struct Size::0x0010
struct FCameraShakeInfo
{
    FCameraShakeDuration                          Duration;                                                     // 0x0000(0x0008)
    float                                         BlendIn;                                                      // 0x0008(0x0004)
    float                                         BlendOut;                                                     // 0x000C(0x0004)
};


// ScriptStruct  Engine.DummySpacerCameraTypes
// Struct Size::0x0001
struct FDummySpacerCameraTypes
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  Engine.RepRootMotionMontage
// Struct Size::0x00D8
struct FRepRootMotionMontage
{
    bool                                          bIsActive;                                                    // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    UAnimMontage*                                 AnimMontage;                                                  // 0x0008(0x0008)
    float                                         position;                                                     // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FVector                                       Location;                                                     // 0x0018(0x0018)
    FRotator                                      Rotation;                                                     // 0x0030(0x0018)
    UPrimitiveComponent*                          MovementBase;                                                 // 0x0048(0x0008)
    FName                                         MovementBaseBoneName;                                         // 0x0050(0x0008)
    bool                                          bRelativePosition;                                            // 0x0058(0x0001)
    bool                                          bRelativeRotation;                                            // 0x0059(0x0001)
    char                                          pa_005A[0x0006]                                               // 0x005A(0x0006)
    FRootMotionSourceGroup                        AuthoritativeRootMotion;                                      // 0x0060(0x0048)
    FVector                                       Acceleration;                                                 // 0x00A8(0x0018)
    FVector                                       LinearVelocity;                                               // 0x00C0(0x0018)
};


// ScriptStruct  Engine.RootMotionSourceGroup
// Struct Size::0x0048
struct FRootMotionSourceGroup
{
    char                                          pa_0000[0x0028]                                               // 0x0000(0x0028)
    char                                          bHasAdditiveSources;                                          // 0x0028(0x0001)
    char                                          bHasOverrideSources;                                          // 0x0028(0x0001)
    char                                          bHasOverrideSourcesWithIgnoreZAccumulate;                     // 0x0028(0x0001)
    char                                          bIsAdditiveVelocityApplied;                                   // 0x0028(0x0001)
    FRootMotionSourceSettings                     LastAccumulatedSettings;                                      // 0x0029(0x0001)
    char                                          pa_002A[0x0006]                                               // 0x002A(0x0006)
    FVector                                       LastPreAdditiveVelocity;                                      // 0x0030(0x0018)
};


// ScriptStruct  Engine.SimulatedRootMotionReplicatedMove
// Struct Size::0x00E0
struct FSimulatedRootMotionReplicatedMove
{
    float                                         Time;                                                         // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FRepRootMotionMontage                         RootMotion;                                                   // 0x0008(0x00D8)
};


// ScriptStruct  Engine.BasedMovementInfo
// Struct Size::0x0048
struct FBasedMovementInfo
{
    UPrimitiveComponent*                          MovementBase;                                                 // 0x0000(0x0008)
    FName                                         BoneName;                                                     // 0x0008(0x0008)
    FVector                                       Location;                                                     // 0x0010(0x0018)
    FRotator                                      Rotation;                                                     // 0x0028(0x0018)
    bool                                          bServerHasBaseComponent;                                      // 0x0040(0x0001)
    bool                                          bRelativeRotation;                                            // 0x0041(0x0001)
    bool                                          bServerHasVelocity;                                           // 0x0042(0x0001)
    char                                          pa_0043[0x0005]                                               // 0x0043(0x0005)
};


// ScriptStruct  Engine.FindFloorResult
// Struct Size::0x00F8
struct FFindFloorResult
{
    char                                          bBlockingHit;                                                 // 0x0000(0x0001)
    char                                          bWalkableFloor;                                               // 0x0000(0x0001)
    char                                          bLineTrace;                                                   // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         FloorDist;                                                    // 0x0004(0x0004)
    float                                         LineDist;                                                     // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FHitResult                                    HitResult;                                                    // 0x0010(0x00E8)
};


// ScriptStruct  Engine.CollisionResponseTemplate
// Struct Size::0x0048
struct FCollisionResponseTemplate
{
    FName                                         Name;                                                         // 0x0000(0x0008)
    enum class ECollisionEnabled                  CollisionEnabled;                                             // 0x0008(0x0001)
    char                                          pa_0009[0x0001]                                               // 0x0009(0x0001)
    bool                                          bCanModify;                                                   // 0x000A(0x0001)
    char                                          pa_000B[0x0021]                                               // 0x000B(0x0021)
    FName                                         ObjectTypeName;                                               // 0x002C(0x0008)
    char                                          pa_0034[0x0004]                                               // 0x0034(0x0004)
    TArray<FResponseChannel>                      CustomResponses;                                              // 0x0038(0x0010)
};


// ScriptStruct  Engine.CustomChannelSetup
// Struct Size::0x000C
struct FCustomChannelSetup
{
    enum class ECollisionChannel                  Channel;                                                      // 0x0000(0x0001)
    enum class ECollisionResponse                 DefaultResponse;                                              // 0x0001(0x0001)
    bool                                          bTraceType;                                                   // 0x0002(0x0001)
    bool                                          bStaticObject;                                                // 0x0003(0x0001)
    FName                                         Name;                                                         // 0x0004(0x0008)
};


// ScriptStruct  Engine.CustomProfile
// Struct Size::0x0018
struct FCustomProfile
{
    FName                                         Name;                                                         // 0x0000(0x0008)
    TArray<FResponseChannel>                      CustomResponses;                                              // 0x0008(0x0010)
};


// ScriptStruct  Engine.BlueprintComponentDelegateBinding
// Struct Size::0x0018
struct FBlueprintComponentDelegateBinding
{
    FName                                         ComponentPropertyName;                                        // 0x0000(0x0008)
    FName                                         DelegatePropertyName;                                         // 0x0008(0x0008)
    FName                                         FunctionNameToBind;                                           // 0x0010(0x0008)
};


// ScriptStruct  Engine.ActorComponentInstanceSourceInfo
// Struct Size::0x0010
struct FActorComponentInstanceSourceInfo
{
    UObject*                                      SourceComponentTemplate;                                      // 0x0000(0x0008)
    enum class EComponentCreationMethod           SourceComponentCreationMethod;                                // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
    int32_t                                       SourceComponentTypeSerializedIndex;                           // 0x000C(0x0004)
};


// ScriptStruct  Engine.ActorInstanceData
// Struct Size::0x0060
struct FActorInstanceData : public FInstanceCacheDataBase
{
    AActor*                                       ActorClass;                                                   // 0x0058(0x0008)
};


// ScriptStruct  Engine.AudioComponentParam
// Struct Size::0x00A8
struct FAudioComponentParam : public FAudioParameter
{
    USoundWave*                                   SoundWaveParam;                                               // 0x00A0(0x0008)
};


// ScriptStruct  Engine.CharacterMovementComponentPostPhysicsTickFunction
// Struct Size::0x0030
struct FCharacterMovementComponentPostPhysicsTickFunction : public FTickFunction
{
    char                                          pa_0028[0x0008]                                               // 0x0028(0x0008)
};


// ScriptStruct  Engine.CharacterMovementComponentPrePhysicsTickFunction
// Struct Size::0x0030
struct FCharacterMovementComponentPrePhysicsTickFunction : public FTickFunction
{
    char                                          pa_0028[0x0008]                                               // 0x0028(0x0008)
};


// ScriptStruct  Engine.ChildActorAttachedActorInfo
// Struct Size::0x0070
struct FChildActorAttachedActorInfo
{
    TWeakObjectPtr<AActor>                        Actor;                                                        // 0x0000(0x0008)
    FName                                         SocketName;                                                   // 0x0008(0x0008)
    FTransform                                    RelativeTransform;                                            // 0x0010(0x0060)
};


// ScriptStruct  Engine.ChildActorComponentInstanceData
// Struct Size::0x00F8
struct FChildActorComponentInstanceData : public FSceneComponentInstanceData
{
    AActor*                                       ChildActorClass;                                              // 0x00B8(0x0008)
    FName                                         ChildActorName;                                               // 0x00C0(0x0008)
    TArray<FChildActorAttachedActorInfo>          AttachedActors;                                               // 0x00C8(0x0010)
    char                                          pa_00D8[0x0020]                                               // 0x00D8(0x0020)
};


// ScriptStruct  Engine.CachedKeyToActionInfo
// Struct Size::0x0070
struct FCachedKeyToActionInfo
{
    TWeakObjectPtr<UPlayerInput>                  PlayerInput;                                                  // 0x0000(0x0008)
    char                                          pa_0008[0x0068]                                               // 0x0008(0x0068)
};


// ScriptStruct  Engine.PrecomputedLightInstanceData
// Struct Size::0x0140
struct FPrecomputedLightInstanceData : public FSceneComponentInstanceData
{
    char                                          pa_00B8[0x0008]                                               // 0x00B8(0x0008)
    FTransform                                    Transform;                                                    // 0x00C0(0x0060)
    FGuid                                         LightGuid;                                                    // 0x0120(0x0010)
    int32_t                                       PreviewShadowMapChannel;                                      // 0x0130(0x0004)
    char                                          pa_0134[0x000C]                                               // 0x0134(0x000C)
};


// ScriptStruct  Engine.BatchedLine
// Struct Size::0x0050
struct FBatchedLine
{
    FVector                                       Start;                                                        // 0x0000(0x0018)
    FVector                                       End;                                                          // 0x0018(0x0018)
    FLinearColor                                  Color;                                                        // 0x0030(0x0010)
    float                                         Thickness;                                                    // 0x0040(0x0004)
    float                                         RemainingLifeTime;                                            // 0x0044(0x0004)
    char                                          DepthPriority;                                                // 0x0048(0x0001)
    char                                          pa_0049[0x0007]                                               // 0x0049(0x0007)
};


// ScriptStruct  Engine.BatchedPoint
// Struct Size::0x0038
struct FBatchedPoint
{
    FVector                                       position;                                                     // 0x0000(0x0018)
    FLinearColor                                  Color;                                                        // 0x0018(0x0010)
    float                                         PointSize;                                                    // 0x0028(0x0004)
    float                                         RemainingLifeTime;                                            // 0x002C(0x0004)
    char                                          DepthPriority;                                                // 0x0030(0x0001)
    char                                          pa_0031[0x0007]                                               // 0x0031(0x0007)
};


// ScriptStruct  Engine.LODMappingData
// Struct Size::0x0020
struct FLODMappingData
{
    TArray<int32_t>                               Mapping;                                                      // 0x0000(0x0010)
    TArray<int32_t>                               InverseMapping;                                               // 0x0010(0x0010)
};


// ScriptStruct  Engine.ComponentSync
// Struct Size::0x000C
struct FComponentSync
{
    FName                                         Name;                                                         // 0x0000(0x0008)
    enum class ESyncOption                        SyncOption;                                                   // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
};


// ScriptStruct  Engine.MaterialSpriteElement
// Struct Size::0x0028
struct FMaterialSpriteElement
{
    UMaterialInterface*                           Material;                                                     // 0x0000(0x0008)
    UCurveFloat*                                  DistanceToOpacityCurve;                                       // 0x0008(0x0008)
    char                                          bSizeIsInScreenSpace;                                         // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
    float                                         BaseSizeX;                                                    // 0x0014(0x0004)
    float                                         BaseSizeY;                                                    // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    UCurveFloat*                                  DistanceToSizeCurve;                                          // 0x0020(0x0008)
};


// ScriptStruct  Engine.EngineShowFlagsSetting
// Struct Size::0x0018
struct FEngineShowFlagsSetting
{
    FString                                       ShowFlagName;                                                 // 0x0000(0x0010)
    bool                                          Enabled;                                                      // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
};


// ScriptStruct  Engine.SkeletalMeshComponentEndPhysicsTickFunction
// Struct Size::0x0030
struct FSkeletalMeshComponentEndPhysicsTickFunction : public FTickFunction
{
    char                                          pa_0028[0x0008]                                               // 0x0028(0x0008)
};


// ScriptStruct  Engine.SkeletalMeshComponentClothTickFunction
// Struct Size::0x0030
struct FSkeletalMeshComponentClothTickFunction : public FTickFunction
{
    char                                          pa_0028[0x0008]                                               // 0x0028(0x0008)
};


// ScriptStruct  Engine.TentDistribution
// Struct Size::0x000C
struct FTentDistribution
{
    float                                         TipAltitude;                                                  // 0x0000(0x0004)
    float                                         TipValue;                                                     // 0x0004(0x0004)
    float                                         Width;                                                        // 0x0008(0x0004)
};


// ScriptStruct  Engine.SplineCurves
// Struct Size::0x0070
struct FSplineCurves
{
    FInterpCurveVector                            position;                                                     // 0x0000(0x0018)
    FInterpCurveQuat                              Rotation;                                                     // 0x0018(0x0018)
    FInterpCurveVector                            Scale;                                                        // 0x0030(0x0018)
    FInterpCurveFloat                             ReparamTable;                                                 // 0x0048(0x0018)
    USplineMetadata*                              MetaData;                                                     // 0x0060(0x0008)
    uint32_t                                      Version;                                                      // 0x0068(0x0004)
    char                                          pa_006C[0x0004]                                               // 0x006C(0x0004)
};


// ScriptStruct  Engine.SplinePoint
// Struct Size::0x0088
struct FSplinePoint
{
    float                                         InputKey;                                                     // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FVector                                       position;                                                     // 0x0008(0x0018)
    FVector                                       ArriveTangent;                                                // 0x0020(0x0018)
    FVector                                       LeaveTangent;                                                 // 0x0038(0x0018)
    FRotator                                      Rotation;                                                     // 0x0050(0x0018)
    FVector                                       Scale;                                                        // 0x0068(0x0018)
    enum class ESplinePointType                   Type;                                                         // 0x0080(0x0001)
    char                                          pa_0081[0x0007]                                               // 0x0081(0x0007)
};


// ScriptStruct  Engine.SplineInstanceData
// Struct Size::0x01A0
struct FSplineInstanceData : public FSceneComponentInstanceData
{
    bool                                          bSplineHasBeenEdited;                                         // 0x00B8(0x0001)
    char                                          pa_00B9[0x0007]                                               // 0x00B9(0x0007)
    FSplineCurves                                 SplineCurves;                                                 // 0x00C0(0x0070)
    FSplineCurves                                 SplineCurvesPreUCS;                                           // 0x0130(0x0070)
};


// ScriptStruct  Engine.SplineMeshParams
// Struct Size::0x00B0
struct FSplineMeshParams
{
    FVector                                       StartPos;                                                     // 0x0000(0x0018)
    FVector                                       StartTangent;                                                 // 0x0018(0x0018)
    FVector2D                                     StartScale;                                                   // 0x0030(0x0010)
    float                                         StartRoll;                                                    // 0x0040(0x0004)
    char                                          pa_0044[0x0004]                                               // 0x0044(0x0004)
    FVector2D                                     StartOffset;                                                  // 0x0048(0x0010)
    FVector                                       EndPos;                                                       // 0x0058(0x0018)
    FVector2D                                     EndScale;                                                     // 0x0070(0x0010)
    FVector                                       EndTangent;                                                   // 0x0080(0x0018)
    float                                         EndRoll;                                                      // 0x0098(0x0004)
    char                                          pa_009C[0x0004]                                               // 0x009C(0x0004)
    FVector2D                                     EndOffset;                                                    // 0x00A0(0x0010)
};


// ScriptStruct  Engine.StaticMeshComponentInstanceData
// Struct Size::0x0170
struct FStaticMeshComponentInstanceData : public FPrimitiveComponentInstanceData
{
    UStaticMesh*                                  StaticMesh;                                                   // 0x0130(0x0008)
    TArray<FStaticMeshVertexColorLODData>         VertexColorLODs;                                              // 0x0138(0x0010)
    TArray<FGuid>                                 CachedStaticLighting;                                         // 0x0148(0x0010)
    TArray<FStreamingTextureBuildInfo>            StreamingTextureData;                                         // 0x0158(0x0010)
    char                                          pa_0168[0x0008]                                               // 0x0168(0x0008)
};


// ScriptStruct  Engine.StaticMeshVertexColorLODData
// Struct Size::0x0028
struct FStaticMeshVertexColorLODData
{
    TArray<FPaintedVertex>                        PaintedVertices;                                              // 0x0000(0x0010)
    TArray<FColor>                                VertexBufferColors;                                           // 0x0010(0x0010)
    uint32_t                                      LODIndex;                                                     // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
};


// ScriptStruct  Engine.PaintedVertex
// Struct Size::0x0040
struct FPaintedVertex
{
    FVector                                       position;                                                     // 0x0000(0x0018)
    FColor                                        Color;                                                        // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    FVector4                                      Normal;                                                       // 0x0020(0x0020)
};


// ScriptStruct  Engine.SplineMeshInstanceData
// Struct Size::0x01D0
struct FSplineMeshInstanceData : public FStaticMeshComponentInstanceData
{
    FVector                                       StartPos;                                                     // 0x0168(0x0018)
    FVector                                       EndPos;                                                       // 0x0180(0x0018)
    FVector                                       StartTangent;                                                 // 0x0198(0x0018)
    FVector                                       EndTangent;                                                   // 0x01B0(0x0018)
    char                                          pa_01C8[0x0008]                                               // 0x01C8(0x0008)
};


// ScriptStruct  Engine.StaticMeshComponentLODInfo
// Struct Size::0x0090
struct FStaticMeshComponentLODInfo
{
    char                                          pa_0000[0x0090]                                               // 0x0000(0x0090)
};


// ScriptStruct  Engine.ObjectCookedMetaDataStore
// Struct Size::0x0050
struct FObjectCookedMetaDataStore
{
    TMap<FName,FString>                           ObjectMetaData;                                               // 0x0000(0x0050)
};


// ScriptStruct  Engine.FieldCookedMetaDataStore
// Struct Size::0x0050
struct FFieldCookedMetaDataStore
{
    TMap<FName,FString>                           FieldMetaData;                                                // 0x0000(0x0050)
};


// ScriptStruct  Engine.StructCookedMetaDataStore
// Struct Size::0x00A0
struct FStructCookedMetaDataStore
{
    FObjectCookedMetaDataStore                    ObjectMetaData;                                               // 0x0000(0x0050)
    TMap<FName,FFieldCookedMetaDataStore>         PropertiesMetaData;                                           // 0x0050(0x0050)
};


// ScriptStruct  Engine.CullDistanceSizePair
// Struct Size::0x0008
struct FCullDistanceSizePair
{
    float                                         Size;                                                         // 0x0000(0x0004)
    float                                         CullDistance;                                                 // 0x0004(0x0004)
};


// ScriptStruct  Engine.RuntimeCurveLinearColor
// Struct Size::0x0208
struct FRuntimeCurveLinearColor
{
    FRichCurve                                    ColorCurves;                                                  // 0x0000(0x0080)
    char                                          pa_0080[0x0180]                                               // 0x0080(0x0180)
    UCurveLinearColor*                            ExternalCurve;                                                // 0x0200(0x0008)
};


// ScriptStruct  Engine.CurveAtlasColorAdjustments
// Struct Size::0x0024
struct FCurveAtlasColorAdjustments
{
    char                                          bChromaKeyTexture;                                            // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         AdjustBrightness;                                             // 0x0004(0x0004)
    float                                         AdjustBrightnessCurve;                                        // 0x0008(0x0004)
    float                                         AdjustVibrance;                                               // 0x000C(0x0004)
    float                                         AdjustSaturation;                                             // 0x0010(0x0004)
    float                                         AdjustRGBCurve;                                               // 0x0014(0x0004)
    float                                         AdjustHue;                                                    // 0x0018(0x0004)
    float                                         AdjustMinAlpha;                                               // 0x001C(0x0004)
    float                                         AdjustMaxAlpha;                                               // 0x0020(0x0004)
};


// ScriptStruct  Engine.RuntimeVectorCurve
// Struct Size::0x0188
struct FRuntimeVectorCurve
{
    FRichCurve                                    VectorCurves;                                                 // 0x0000(0x0080)
    char                                          pa_0080[0x0100]                                               // 0x0080(0x0100)
    UCurveVector*                                 ExternalCurve;                                                // 0x0180(0x0008)
};


// ScriptStruct  Engine.IntegralKey
// Struct Size::0x0008
struct FIntegralKey
{
    float                                         Time;                                                         // 0x0000(0x0004)
    int32_t                                       Value;                                                        // 0x0004(0x0004)
};


// ScriptStruct  Engine.IntegralCurve
// Struct Size::0x0080
struct FIntegralCurve : public FIndexedCurve
{
    TArray<FIntegralKey>                          Keys;                                                         // 0x0068(0x0010)
    int32_t                                       DefaultValue;                                                 // 0x0078(0x0004)
    bool                                          bUseDefaultValueBeforeFirstKey;                               // 0x007C(0x0001)
    char                                          pa_007D[0x0003]                                               // 0x007D(0x0003)
};


// ScriptStruct  Engine.NameCurveKey
// Struct Size::0x000C
struct FNameCurveKey
{
    float                                         Time;                                                         // 0x0000(0x0004)
    FName                                         Value;                                                        // 0x0004(0x0008)
};


// ScriptStruct  Engine.NameCurve
// Struct Size::0x0078
struct FNameCurve : public FIndexedCurve
{
    TArray<FNameCurveKey>                         Keys;                                                         // 0x0068(0x0010)
};


// ScriptStruct  Engine.SimpleCurveKey
// Struct Size::0x0008
struct FSimpleCurveKey
{
    float                                         Time;                                                         // 0x0000(0x0004)
    float                                         Value;                                                        // 0x0004(0x0004)
};


// ScriptStruct  Engine.SimpleCurve
// Struct Size::0x0088
struct FSimpleCurve : public FRealCurve
{
    enum class ERichCurveInterpMode               InterpMode;                                                   // 0x0070(0x0001)
    char                                          pa_0071[0x0007]                                               // 0x0071(0x0007)
    TArray<FSimpleCurveKey>                       Keys;                                                         // 0x0078(0x0010)
};


// ScriptStruct  Engine.StringCurveKey
// Struct Size::0x0018
struct FStringCurveKey
{
    float                                         Time;                                                         // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FString                                       Value;                                                        // 0x0008(0x0010)
};


// ScriptStruct  Engine.StringCurve
// Struct Size::0x0088
struct FStringCurve : public FIndexedCurve
{
    FString                                       DefaultValue;                                                 // 0x0068(0x0010)
    TArray<FStringCurveKey>                       Keys;                                                         // 0x0078(0x0010)
};


// ScriptStruct  Engine.DataDrivenConsoleVariable
// Struct Size::0x0050
struct FDataDrivenConsoleVariable
{
    enum class FDataDrivenCVarType                Type;                                                         // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    FString                                       Name;                                                         // 0x0008(0x0010)
    FString                                       ToolTip;                                                      // 0x0018(0x0010)
    float                                         DefaultValueFloat;                                            // 0x0028(0x0004)
    int32_t                                       DefaultValueInt;                                              // 0x002C(0x0004)
    bool                                          DefaultValueBool;                                             // 0x0030(0x0001)
    char                                          pa_0031[0x001F]                                               // 0x0031(0x001F)
};


// ScriptStruct  Engine.DataTableCategoryHandle
// Struct Size::0x0018
struct FDataTableCategoryHandle
{
    UDataTable*                                   DataTable;                                                    // 0x0000(0x0008)
    FName                                         ColumnName;                                                   // 0x0008(0x0008)
    FName                                         RowContents;                                                  // 0x0010(0x0008)
};


// ScriptStruct  Engine.DebugCameraControllerSettingsViewModeIndex
// Struct Size::0x0010
struct FDebugCameraControllerSettingsViewModeIndex
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    enum class EViewModeIndex                     ViewModeIndex;                                                // 0x0008(0x0001)
    char                                          pa_0009[0x0007]                                               // 0x0009(0x0007)
};


// ScriptStruct  Engine.RollbackNetStartupActorInfo
// Struct Size::0x00D0
struct FRollbackNetStartupActorInfo
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    UObject*                                      Archetype;                                                    // 0x0008(0x0008)
    char                                          pa_0010[0x00B0]                                               // 0x0010(0x00B0)
    TArray<UObject*>                              ObjReferences;                                                // 0x00C0(0x0010)
};


// ScriptStruct  Engine.MulticastRecordOptions
// Struct Size::0x0018
struct FMulticastRecordOptions
{
    FString                                       FuncPathName;                                                 // 0x0000(0x0010)
    bool                                          bServerSkip;                                                  // 0x0010(0x0001)
    bool                                          bClientSkip;                                                  // 0x0011(0x0001)
    char                                          pa_0012[0x0006]                                               // 0x0012(0x0006)
};


// ScriptStruct  Engine.SelectedFragmentProperties
// Struct Size::0x0020
struct FSelectedFragmentProperties
{
    FName                                         Tag;                                                          // 0x0000(0x0008)
    FString                                       Fragment;                                                     // 0x0008(0x0010)
    bool                                          bEnabled;                                                     // 0x0018(0x0001)
    char                                          pa_0019[0x0007]                                               // 0x0019(0x0007)
};


// ScriptStruct  Engine.DPMatchingIfCondition
// Struct Size::0x0028
struct FDPMatchingIfCondition
{
    FName                                         Operator;                                                     // 0x0000(0x0008)
    FString                                       Arg1;                                                         // 0x0008(0x0010)
    FString                                       Arg2;                                                         // 0x0018(0x0010)
};


// ScriptStruct  Engine.DPMatchingRulestructBase
// Struct Size::0x0048
struct FDPMatchingRulestructBase
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    FString                                       RuleName;                                                     // 0x0008(0x0010)
    TArray<FDPMatchingIfCondition>                IfConditions;                                                 // 0x0018(0x0010)
    FString                                       AppendFragments;                                              // 0x0028(0x0010)
    FString                                       SetUserVar;                                                   // 0x0038(0x0010)
};


// ScriptStruct  Engine.DPMatchingRulestructA
// Struct Size::0x0068
struct FDPMatchingRulestructA : public FDPMatchingRulestructBase
{
    TArray<FDPMatchingRulestructBase>             OnTrue;                                                       // 0x0048(0x0010)
    TArray<FDPMatchingRulestructBase>             OnFalse;                                                      // 0x0058(0x0010)
};


// ScriptStruct  Engine.DPMatchingRulestructB
// Struct Size::0x0068
struct FDPMatchingRulestructB : public FDPMatchingRulestructBase
{
    TArray<FDPMatchingRulestructA>                OnTrue;                                                       // 0x0048(0x0010)
    TArray<FDPMatchingRulestructA>                OnFalse;                                                      // 0x0058(0x0010)
};


// ScriptStruct  Engine.DPMatchingRulestructC
// Struct Size::0x0068
struct FDPMatchingRulestructC : public FDPMatchingRulestructBase
{
    TArray<FDPMatchingRulestructB>                OnTrue;                                                       // 0x0048(0x0010)
    TArray<FDPMatchingRulestructB>                OnFalse;                                                      // 0x0058(0x0010)
};


// ScriptStruct  Engine.DPMatchingRulestructD
// Struct Size::0x0068
struct FDPMatchingRulestructD : public FDPMatchingRulestructBase
{
    TArray<FDPMatchingRulestructC>                OnTrue;                                                       // 0x0048(0x0010)
    TArray<FDPMatchingRulestructC>                OnFalse;                                                      // 0x0058(0x0010)
};


// ScriptStruct  Engine.DPMatchingRulestructE
// Struct Size::0x0068
struct FDPMatchingRulestructE : public FDPMatchingRulestructBase
{
    TArray<FDPMatchingRulestructD>                OnTrue;                                                       // 0x0048(0x0010)
    TArray<FDPMatchingRulestructD>                OnFalse;                                                      // 0x0058(0x0010)
};


// ScriptStruct  Engine.DPMatchingRulestruct
// Struct Size::0x0068
struct FDPMatchingRulestruct : public FDPMatchingRulestructBase
{
    TArray<FDPMatchingRulestructE>                OnTrue;                                                       // 0x0048(0x0010)
    TArray<FDPMatchingRulestructE>                OnFalse;                                                      // 0x0058(0x0010)
};


// ScriptStruct  Engine.DialogueContext
// Struct Size::0x0018
struct FDialogueContext
{
    UDialogueVoice*                               Speaker;                                                      // 0x0000(0x0008)
    TArray<UDialogueVoice*>                       Targets;                                                      // 0x0008(0x0010)
};


// ScriptStruct  Engine.DialogueWaveParameter
// Struct Size::0x0020
struct FDialogueWaveParameter
{
    UDialogueWave*                                DialogueWave;                                                 // 0x0000(0x0008)
    FDialogueContext                              Context;                                                      // 0x0008(0x0018)
};


// ScriptStruct  Engine.DialogueContextMapping
// Struct Size::0x0038
struct FDialogueContextMapping
{
    FDialogueContext                              Context;                                                      // 0x0000(0x0018)
    USoundWave*                                   SoundWave;                                                    // 0x0018(0x0008)
    FString                                       LocalizationKeyFormat;                                        // 0x0020(0x0010)
    UDialogueSoundWaveProxy*                      Proxy;                                                        // 0x0030(0x0008)
};


// ScriptStruct  Engine.GraphReference
// Struct Size::0x0020
struct FGraphReference
{
    UEdGraph*                                     MacroGraph;                                                   // 0x0000(0x0008)
    UBlueprint*                                   GraphBlueprint;                                               // 0x0008(0x0008)
    FGuid                                         GraphGuid;                                                    // 0x0010(0x0010)
};


// ScriptStruct  Engine.AssetImportInfo
// Struct Size::0x0001
struct FAssetImportInfo
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  Engine.TypedElementDeletionOptions
// Struct Size::0x0003
struct FTypedElementDeletionOptions
{
    bool                                          bVerifyDeletionCanHappen;                                     // 0x0000(0x0001)
    bool                                          bWarnAboutReferences;                                         // 0x0001(0x0001)
    bool                                          bWarnAboutSoftReferences;                                     // 0x0002(0x0001)
};


// ScriptStruct  Engine.DamageEvent
// Struct Size::0x0010
struct FDamageEvent
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    UDamageType*                                  DamageTypeClass;                                              // 0x0008(0x0008)
};


// ScriptStruct  Engine.PointDamageEvent
// Struct Size::0x0118
struct FPointDamageEvent : public FDamageEvent
{
    float                                         Damage;                                                       // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FVector                                       ShotDirection;                                                // 0x0018(0x0018)
    FHitResult                                    HitInfo;                                                      // 0x0030(0x00E8)
};


// ScriptStruct  Engine.RadialDamageParams
// Struct Size::0x0014
struct FRadialDamageParams
{
    float                                         BaseDamage;                                                   // 0x0000(0x0004)
    float                                         MinimumDamage;                                                // 0x0004(0x0004)
    float                                         InnerRadius;                                                  // 0x0008(0x0004)
    float                                         OuterRadius;                                                  // 0x000C(0x0004)
    float                                         DamageFalloff;                                                // 0x0010(0x0004)
};


// ScriptStruct  Engine.RadialDamageEvent
// Struct Size::0x0050
struct FRadialDamageEvent : public FDamageEvent
{
    FRadialDamageParams                           Params;                                                       // 0x0010(0x0014)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
    FVector                                       Origin;                                                       // 0x0028(0x0018)
    TArray<FHitResult>                            ComponentHits;                                                // 0x0040(0x0010)
};


// ScriptStruct  Engine.RigidBodyState
// Struct Size::0x0080
struct FRigidBodyState
{
    FVector                                       position;                                                     // 0x0000(0x0018)
    char                                          pa_0018[0x0008]                                               // 0x0018(0x0008)
    FQuat                                         Quaternion;                                                   // 0x0020(0x0020)
    FVector                                       LinVel;                                                       // 0x0040(0x0018)
    FVector                                       AngVel;                                                       // 0x0058(0x0018)
    char                                          Flags;                                                        // 0x0070(0x0001)
    char                                          pa_0071[0x000F]                                               // 0x0071(0x000F)
};


// ScriptStruct  Engine.FontCharacter
// Struct Size::0x0018
struct FFontCharacter
{
    int32_t                                       StartU;                                                       // 0x0000(0x0004)
    int32_t                                       StartV;                                                       // 0x0004(0x0004)
    int32_t                                       USize;                                                        // 0x0008(0x0004)
    int32_t                                       VSize;                                                        // 0x000C(0x0004)
    char                                          TextureIndex;                                                 // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
    int32_t                                       VerticalOffset;                                               // 0x0014(0x0004)
};


// ScriptStruct  Engine.ForceFeedbackChannelDetails
// Struct Size::0x0090
struct FForceFeedbackChannelDetails
{
    char                                          bAffectsLeftLarge;                                            // 0x0000(0x0001)
    char                                          bAffectsLeftSmall;                                            // 0x0000(0x0001)
    char                                          bAffectsRightLarge;                                           // 0x0000(0x0001)
    char                                          bAffectsRightSmall;                                           // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    FRuntimeFloatCurve                            Curve;                                                        // 0x0008(0x0088)
};


// ScriptStruct  Engine.ForceFeedbackParameters
// Struct Size::0x000C
struct FForceFeedbackParameters
{
    FName                                         Tag;                                                          // 0x0000(0x0008)
    bool                                          bLooping;                                                     // 0x0008(0x0001)
    bool                                          bIgnoreTimeDilation;                                          // 0x0009(0x0001)
    bool                                          bPlayWhilePaused;                                             // 0x000A(0x0001)
    char                                          pa_000B[0x0001]                                               // 0x000B(0x0001)
};


// ScriptStruct  Engine.ActiveForceFeedbackEffect
// Struct Size::0x0018
struct FActiveForceFeedbackEffect
{
    UForceFeedbackEffect*                         ForceFeedbackEffect;                                          // 0x0000(0x0008)
    char                                          pa_0008[0x0010]                                               // 0x0008(0x0010)
};


// ScriptStruct  Engine.RootMotionSource
// Struct Size::0x0140
struct FRootMotionSource : public FRootMotionSource
{
    FVector                                       Location;                                                     // 0x00D8(0x0018)
    AActor*                                       LocationActor;                                                // 0x00F0(0x0008)
    float                                         Radius;                                                       // 0x00F8(0x0004)
    float                                         Strength;                                                     // 0x00FC(0x0004)
    bool                                          bIsPush;                                                      // 0x0100(0x0001)
    bool                                          bNoZForce;                                                    // 0x0101(0x0001)
    char                                          pa_0102[0x0006]                                               // 0x0102(0x0006)
    UCurveFloat*                                  StrengthDistanceFalloff;                                      // 0x0108(0x0008)
    UCurveFloat*                                  StrengthOverTime;                                             // 0x0110(0x0008)
    bool                                          bUseFixedWorldDirection;                                      // 0x0118(0x0001)
    char                                          pa_0119[0x0007]                                               // 0x0119(0x0007)
    FRotator                                      FixedWorldDirection;                                          // 0x0120(0x0018)
    char                                          pa_0138[0x0008]                                               // 0x0138(0x0008)
};


// ScriptStruct  Engine.RootMotionSource
// Struct Size::0x0140
struct FRootMotionSource : public FRootMotionSource
{
    FVector                                       StartLocation;                                                // 0x00D8(0x0018)
    FVector                                       InitialTargetLocation;                                        // 0x00F0(0x0018)
    FVector                                       TargetLocation;                                               // 0x0108(0x0018)
    bool                                          bRestrictSpeedToExpected;                                     // 0x0120(0x0001)
    char                                          pa_0121[0x0007]                                               // 0x0121(0x0007)
    UCurveVector*                                 PathOffsetCurve;                                              // 0x0128(0x0008)
    UCurveFloat*                                  TimeMappingCurve;                                             // 0x0130(0x0008)
    char                                          pa_0138[0x0008]                                               // 0x0138(0x0008)
};


// ScriptStruct  Engine.RootMotionSource
// Struct Size::0x0130
struct FRootMotionSource : public FRootMotionSource
{
    FRotator                                      Rotation;                                                     // 0x00D8(0x0018)
    float                                         Distance;                                                     // 0x00F0(0x0004)
    float                                         Height;                                                       // 0x00F4(0x0004)
    bool                                          bDisableTimeout;                                              // 0x00F8(0x0001)
    char                                          pa_00F9[0x0007]                                               // 0x00F9(0x0007)
    UCurveVector*                                 PathOffsetCurve;                                              // 0x0100(0x0008)
    UCurveFloat*                                  TimeMappingCurve;                                             // 0x0108(0x0008)
    char                                          pa_0110[0x0020]                                               // 0x0110(0x0020)
};


// ScriptStruct  Engine.TouchInputControl
// Struct Size::0x0090
struct FTouchInputControl
{
    UTexture2D*                                   Image1;                                                       // 0x0000(0x0008)
    UTexture2D*                                   Image2;                                                       // 0x0008(0x0008)
    FVector2D                                     Center;                                                       // 0x0010(0x0010)
    FVector2D                                     VisualSize;                                                   // 0x0020(0x0010)
    FVector2D                                     ThumbSize;                                                    // 0x0030(0x0010)
    FVector2D                                     InteractionSize;                                              // 0x0040(0x0010)
    FVector2D                                     InputScale;                                                   // 0x0050(0x0010)
    FKey                                          MainInputKey;                                                 // 0x0060(0x0018)
    FKey                                          AltInputKey;                                                  // 0x0078(0x0018)
};


// ScriptStruct  Engine.NetLevelVisibilityTransactionId
// Struct Size::0x0004
struct FNetLevelVisibilityTransactionId
{
    uint32_t                                      Data;                                                         // 0x0000(0x0004)
};


// ScriptStruct  Engine.UpdateLevelVisibilityLevelInfo
// Struct Size::0x0018
struct FUpdateLevelVisibilityLevelInfo
{
    FName                                         PackageName;                                                  // 0x0000(0x0008)
    FName                                         Filename;                                                     // 0x0008(0x0008)
    FNetLevelVisibilityTransactionId              VisibilityRequestId;                                          // 0x0010(0x0004)
    char                                          bIsVisible;                                                   // 0x0014(0x0001)
    char                                          bTryMakeVisible;                                              // 0x0014(0x0001)
    char                                          pa_0015[0x0003]                                               // 0x0015(0x0003)
};


// ScriptStruct  Engine.HLODISMComponentDesc
// Struct Size::0x0030
struct FHLODISMComponentDesc
{
    UStaticMesh*                                  StaticMesh;                                                   // 0x0000(0x0008)
    UMaterialInterface*                           Material;                                                     // 0x0008(0x0008)
    TArray<FTransform>                            Instances;                                                    // 0x0010(0x0010)
    TArray<FCustomPrimitiveData>                  InstancesCustomPrimitiveData;                                 // 0x0020(0x0010)
};


// ScriptStruct  Engine.HLODProxyMesh
// Struct Size::0x0030
struct FHLODProxyMesh
{
    ALODActor*                                    LODActor;                                                     // 0x0000(0x001C)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    UStaticMesh*                                  StaticMesh;                                                   // 0x0020(0x0008)
    FName                                         Key;                                                          // 0x0028(0x0008)
};


// ScriptStruct  Engine.ComponentKey
// Struct Size::0x0020
struct FComponentKey
{
    UClass*                                       OwnerClass;                                                   // 0x0000(0x0008)
    FName                                         SCSVariableName;                                              // 0x0008(0x0008)
    FGuid                                         AssociatedGuid;                                               // 0x0010(0x0010)
};


// ScriptStruct  Engine.ComponentOverrideRecord
// Struct Size::0x0078
struct FComponentOverrideRecord
{
    UClass*                                       ComponentClass;                                               // 0x0000(0x0008)
    UActorComponent*                              ComponentTemplate;                                            // 0x0008(0x0008)
    FComponentKey                                 ComponentKey;                                                 // 0x0010(0x0020)
    FBlueprintCookedComponentInstancingData       CookedComponentInstancingData;                                // 0x0030(0x0048)
};


// ScriptStruct  Engine.BlueprintInputDelegateBinding
// Struct Size::0x0004
struct FBlueprintInputDelegateBinding
{
    char                                          bConsumeInput;                                                // 0x0000(0x0001)
    char                                          bExecuteWhenPaused;                                           // 0x0000(0x0001)
    char                                          bOverrideParentBinding;                                       // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
};


// ScriptStruct  Engine.BlueprintInputActionDelegateBinding
// Struct Size::0x0018
struct FBlueprintInputActionDelegateBinding : public FBlueprintInputDelegateBinding
{
    FName                                         InputActionName;                                              // 0x0004(0x0008)
    enum class EInputEvent                        InputKeyEvent;                                                // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
    FName                                         FunctionNameToBind;                                           // 0x0010(0x0008)
};


// ScriptStruct  Engine.BlueprintInputAxisDelegateBinding
// Struct Size::0x0014
struct FBlueprintInputAxisDelegateBinding : public FBlueprintInputDelegateBinding
{
    FName                                         InputAxisName;                                                // 0x0004(0x0008)
    FName                                         FunctionNameToBind;                                           // 0x000C(0x0008)
};


// ScriptStruct  Engine.BlueprintInputAxisKeyDelegateBinding
// Struct Size::0x0028
struct FBlueprintInputAxisKeyDelegateBinding : public FBlueprintInputDelegateBinding
{
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FKey                                          AxisKey;                                                      // 0x0008(0x0018)
    FName                                         FunctionNameToBind;                                           // 0x0020(0x0008)
};


// ScriptStruct  Engine.BlueprintInputKeyDelegateBinding
// Struct Size::0x0038
struct FBlueprintInputKeyDelegateBinding : public FBlueprintInputDelegateBinding
{
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FInputChord                                   InputChord;                                                   // 0x0008(0x0020)
    enum class EInputEvent                        InputKeyEvent;                                                // 0x0028(0x0001)
    char                                          pa_0029[0x0003]                                               // 0x0029(0x0003)
    FName                                         FunctionNameToBind;                                           // 0x002C(0x0008)
    char                                          pa_0034[0x0004]                                               // 0x0034(0x0004)
};


// ScriptStruct  Engine.BlueprintInputTouchDelegateBinding
// Struct Size::0x0010
struct FBlueprintInputTouchDelegateBinding : public FBlueprintInputDelegateBinding
{
    enum class EInputEvent                        InputKeyEvent;                                                // 0x0004(0x0001)
    char                                          pa_0005[0x0003]                                               // 0x0005(0x0003)
    FName                                         FunctionNameToBind;                                           // 0x0008(0x0008)
};


// ScriptStruct  Engine.CurveEdEntry
// Struct Size::0x0038
struct FCurveEdEntry
{
    UObject*                                      CurveObject;                                                  // 0x0000(0x0008)
    FColor                                        CurveColor;                                                   // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FString                                       CurveName;                                                    // 0x0010(0x0010)
    int32_t                                       bHideCurve;                                                   // 0x0020(0x0004)
    int32_t                                       bColorCurve;                                                  // 0x0024(0x0004)
    int32_t                                       bFloatingPointColorCurve;                                     // 0x0028(0x0004)
    int32_t                                       bClamp;                                                       // 0x002C(0x0004)
    float                                         ClampLow;                                                     // 0x0030(0x0004)
    float                                         ClampHigh;                                                    // 0x0034(0x0004)
};


// ScriptStruct  Engine.CurveEdTab
// Struct Size::0x0030
struct FCurveEdTab
{
    FString                                       TabName;                                                      // 0x0000(0x0010)
    TArray<FCurveEdEntry>                         Curves;                                                       // 0x0010(0x0010)
    float                                         ViewStartInput;                                               // 0x0020(0x0004)
    float                                         ViewEndInput;                                                 // 0x0024(0x0004)
    float                                         ViewStartOutput;                                              // 0x0028(0x0004)
    float                                         ViewEndOutput;                                                // 0x002C(0x0004)
};


// ScriptStruct  Engine.ISMComponentInstance
// Struct Size::0x000C
struct FISMComponentInstance
{
    int32_t                                       ClientIndex;                                                  // 0x0000(0x0004)
    int32_t                                       InstanceIndex;                                                // 0x0004(0x0004)
    int32_t                                       InstanceSubIndex;                                             // 0x0008(0x0004)
};


// ScriptStruct  Engine.ISMClientInstance
// Struct Size::0x0010
struct FISMClientInstance
{
    TArray<int32_t>                               ComponentIndices;                                             // 0x0000(0x0010)
};


// ScriptStruct  Engine.ISMClientData
// Struct Size::0x0010
struct FISMClientData
{
    TArray<FISMClientInstance>                    Instances;                                                    // 0x0000(0x0010)
};


// ScriptStruct  Engine.ISMComponentData
// Struct Size::0x0001
struct FISMComponentData
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  Engine.ISMComponentDescriptor
// Struct Size::0x0001
struct FISMComponentDescriptor
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  Engine.SlateModifierKeysState
// Struct Size::0x0001
struct FSlateModifierKeysState
{
    char                                          ModifierKeysStateMask;                                        // 0x0000(0x0001)
};


// ScriptStruct  Engine.DrawToRenderTargetContext
// Struct Size::0x0008
struct FDrawToRenderTargetContext
{
    UTextureRenderTarget2D*                       RenderTarget;                                                 // 0x0000(0x0008)
};


// ScriptStruct  Engine.ImportanceTexture
// Struct Size::0x0050
struct FImportanceTexture
{
    FIntPoint                                     Size;                                                         // 0x0000(0x0008)
    int32_t                                       NumMips;                                                      // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    TArray<float>                                 MarginalCDF;                                                  // 0x0010(0x0010)
    TArray<float>                                 ConditionalCDF;                                               // 0x0020(0x0010)
    TArray<FColor>                                TextureData;                                                  // 0x0030(0x0010)
    TWeakObjectPtr<UTexture2D>                    Texture;                                                      // 0x0040(0x0008)
    enum class EImportanceWeight                  Weighting;                                                    // 0x0048(0x0001)
    char                                          pa_0049[0x0007]                                               // 0x0049(0x0007)
};


// ScriptStruct  Engine.LatentActionManager
// Struct Size::0x0060
struct FLatentActionManager
{
    char                                          pa_0000[0x0060]                                               // 0x0000(0x0060)
};


// ScriptStruct  Engine.LayerActorStats
// Struct Size::0x0010
struct FLayerActorStats
{
    UClass*                                       Type;                                                         // 0x0000(0x0008)
    int32_t                                       Total;                                                        // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
};


// ScriptStruct  Engine.ActorFolderSet
// Struct Size::0x0050
struct FActorFolderSet
{
    TSet<UActorFolder*>                           ActorFolders;                                                 // 0x0000(0x0050)
};


// ScriptStruct  Engine.StreamableTextureInstance
// Struct Size::0x0048
struct FStreamableTextureInstance
{
    char                                          pa_0000[0x0048]                                               // 0x0000(0x0048)
};


// ScriptStruct  Engine.DynamicTextureInstance
// Struct Size::0x0058
struct FDynamicTextureInstance : public FStreamableTextureInstance
{
    UTexture2D*                                   Texture;                                                      // 0x0048(0x0008)
    bool                                          bAttached;                                                    // 0x0050(0x0001)
    char                                          pa_0051[0x0003]                                               // 0x0051(0x0003)
    float                                         OriginalRadius;                                               // 0x0054(0x0004)
};


// ScriptStruct  Engine.LevelSimplificationDetails
// Struct Size::0x013C
struct FLevelSimplificationDetails
{
    bool                                          bCreatePackagePerAsset;                                       // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         DetailsPercentage;                                            // 0x0004(0x0004)
    FMaterialProxySettings                        StaticMeshMaterialSettings;                                   // 0x0008(0x0094)
    bool                                          bOverrideLandscapeExportLOD;                                  // 0x009C(0x0001)
    char                                          pa_009D[0x0003]                                               // 0x009D(0x0003)
    int32_t                                       LandscapeExportLOD;                                           // 0x00A0(0x0004)
    FMaterialProxySettings                        LandscapeMaterialSettings;                                    // 0x00A4(0x0094)
    bool                                          bBakeFoliageToLandscape;                                      // 0x0138(0x0001)
    bool                                          bBakeGrassToLandscape;                                        // 0x0139(0x0001)
    char                                          pa_013A[0x0002]                                               // 0x013A(0x0002)
};


// ScriptStruct  Engine.ReplicatedStaticActorDestructionInfo
// Struct Size::0x0040
struct FReplicatedStaticActorDestructionInfo
{
    char                                          pa_0000[0x0038]                                               // 0x0000(0x0038)
    UClass*                                       ObjClass;                                                     // 0x0038(0x0008)
};


// ScriptStruct  Engine.ClientReceiveData
// Struct Size::0x0040
struct FClientReceiveData
{
    APlayerController*                            LocalPC;                                                      // 0x0000(0x0008)
    FName                                         MessageType;                                                  // 0x0008(0x0008)
    int32_t                                       MessageIndex;                                                 // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FString                                       MessageString;                                                // 0x0018(0x0010)
    APlayerState*                                 RelatedPlayerState;                                           // 0x0028(0x0008)
    APlayerState*                                 RelatedPlayerState;                                           // 0x0030(0x0008)
    UObject*                                      OptionalObject;                                               // 0x0038(0x0008)
};


// ScriptStruct  Engine.HLODInstancingKey
// Struct Size::0x0010
struct FHLODInstancingKey
{
    UStaticMesh*                                  StaticMesh;                                                   // 0x0000(0x0008)
    UMaterialInterface*                           Material;                                                     // 0x0008(0x0008)
};


// ScriptStruct  Engine.MaterialFunctionInfo
// Struct Size::0x0018
struct FMaterialFunctionInfo
{
    FGuid                                         StateId;                                                      // 0x0000(0x0010)
    UMaterialFunctionInterface*                   Function;                                                     // 0x0010(0x0008)
};


// ScriptStruct  Engine.MaterialParameterCollectionInfo
// Struct Size::0x0018
struct FMaterialParameterCollectionInfo
{
    FGuid                                         StateId;                                                      // 0x0000(0x0010)
    UMaterialParameterCollection*                 ParameterCollection;                                          // 0x0010(0x0008)
};


// ScriptStruct  Engine.MaterialCachedParameterEditorInfo
// Struct Size::0x0030
struct FMaterialCachedParameterEditorInfo
{
    FString                                       Description;                                                  // 0x0000(0x0010)
    FName                                         group;                                                        // 0x0010(0x0008)
    int32_t                                       SortPriority;                                                 // 0x0018(0x0004)
    int32_t                                       AssetIndex;                                                   // 0x001C(0x0004)
    FGuid                                         ExpressionGUID;                                               // 0x0020(0x0010)
};


// ScriptStruct  Engine.MaterialCachedParameterEntry
// Struct Size::0x0050
struct FMaterialCachedParameterEntry
{
    TSet<FMaterialParameterInfo>                  ParameterInfoSet;                                             // 0x0000(0x0050)
};


// ScriptStruct  Engine.MaterialCachedParameterEditorEntry
// Struct Size::0x0010
struct FMaterialCachedParameterEditorEntry
{
    TArray<FMaterialCachedParameterEditorInfo>    EditorInfo;                                                   // 0x0000(0x0010)
};


// ScriptStruct  Engine.MaterialCachedExpressionEditorOnlyData
// Struct Size::0x0230
struct FMaterialCachedExpressionEditorOnlyData
{
    FMaterialCachedParameterEntry                 EditorOnlyEntries;                                            // 0x0000(0x0050)
    char                                          pa_0050[0x0050]                                               // 0x0050(0x0050)
    FMaterialCachedParameterEditorEntry           EditorEntries;                                                // 0x00A0(0x0010)
    char                                          pa_00B0[0x0070]                                               // 0x00B0(0x0070)
    TArray<bool>                                  StaticSwitchValues;                                           // 0x0120(0x0010)
    TArray<FStaticComponentMaskValue>             StaticComponentMaskValues;                                    // 0x0130(0x0010)
    TArray<FVector2D>                             ScalarMinMaxValues;                                           // 0x0140(0x0010)
    TArray<TSoftObjectPtr<UCurveLinearColor>>     ScalarCurveValues;                                            // 0x0150(0x0010)
    TArray<TSoftObjectPtr<UCurveLinearColorAtlas>>ScalarCurveAtlasValues;                                       // 0x0160(0x0010)
    TArray<FParameterChannelNames>                VectorChannelNameValues;                                      // 0x0170(0x0010)
    TArray<bool>                                  VectorUsedAsChannelMaskValues;                                // 0x0180(0x0010)
    TArray<FParameterChannelNames>                TextureChannelNameValues;                                     // 0x0190(0x0010)
    FMaterialLayersFunctionsEditorOnlyData        MaterialLayers;                                               // 0x01A0(0x0070)
    TArray<FString>                               AssetPaths;                                                   // 0x0210(0x0010)
    TArray<FName>                                 LandscapeLayerNames;                                          // 0x0220(0x0010)
};


// ScriptStruct  Engine.MaterialCachedExpressionData
// Struct Size::0x02F8
struct FMaterialCachedExpressionData
{
    FMaterialCachedParameterEntry                 RuntimeEntries;                                               // 0x0000(0x0050)
    char                                          pa_0050[0x0190]                                               // 0x0050(0x0190)
    TArray<int32_t>                               ScalarPrimitiveDataIndexValues;                               // 0x01E0(0x0010)
    TArray<int32_t>                               VectorPrimitiveDataIndexValues;                               // 0x01F0(0x0010)
    TArray<float>                                 ScalarValues;                                                 // 0x0200(0x0010)
    TArray<FLinearColor>                          VectorValues;                                                 // 0x0210(0x0010)
    TArray<FVector4d>                             DoubleVectorValues;                                           // 0x0220(0x0010)
    TArray<TSoftObjectPtr<UTexture>>              TextureValues;                                                // 0x0230(0x0010)
    TArray<TSoftObjectPtr<UFont>>                 FontValues;                                                   // 0x0240(0x0010)
    TArray<int32_t>                               FontPageValues;                                               // 0x0250(0x0010)
    TArray<TSoftObjectPtr<URuntimeVirtualTexture>>RuntimeVirtualTextureValues;                                  // 0x0260(0x0010)
    TArray<UObject*>                              ReferencedTextures;                                           // 0x0270(0x0010)
    TArray<FMaterialFunctionInfo>                 FunctionInfos;                                                // 0x0280(0x0010)
    TArray<FMaterialParameterCollectionInfo>      ParameterCollectionInfos;                                     // 0x0290(0x0010)
    TArray<ULandscapeGrassType*>                  GrassTypes;                                                   // 0x02A0(0x0010)
    FMaterialLayersFunctionsRuntimeData           MaterialLayers;                                               // 0x02B0(0x0020)
    TArray<FName>                                 DynamicParameterNames;                                        // 0x02D0(0x0010)
    TArray<bool>                                  QualityLevelsUsed;                                            // 0x02E0(0x0010)
    char                                          bHasMaterialLayers;                                           // 0x02F0(0x0001)
    char                                          bHasRuntimeVirtualTextureOutput;                              // 0x02F0(0x0001)
    char                                          bHasSceneColor;                                               // 0x02F0(0x0001)
    char                                          bHasPerInstanceCustomData;                                    // 0x02F0(0x0001)
    char                                          bHasPerInstanceRandom;                                        // 0x02F0(0x0001)
    char                                          bHasVertexInterpolator;                                       // 0x02F0(0x0001)
    char                                          pa_02F1[0x0003]                                               // 0x02F1(0x0003)
    uint32_t                                      PropertyConnectedBitmask;                                     // 0x02F4(0x0004)
};


// ScriptStruct  Engine.ScalarParameterAtlasInstanceData
// Struct Size::0x0068
struct FScalarParameterAtlasInstanceData
{
    bool                                          bIsUsedAsAtlasPosition;                                       // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    TSoftObjectPtr<UCurveLinearColor>             Curve;                                                        // 0x0008(0x0030)
    TSoftObjectPtr<UCurveLinearColorAtlas>        Atlas;                                                        // 0x0038(0x0030)
};


// ScriptStruct  Engine.ScalarParameterValue
// Struct Size::0x0024
struct FScalarParameterValue
{
    FMaterialParameterInfo                        ParameterInfo;                                                // 0x0000(0x0010)
    float                                         ParameterValue;                                               // 0x0010(0x0004)
    FGuid                                         ExpressionGUID;                                               // 0x0014(0x0010)
};


// ScriptStruct  Engine.VectorParameterValue
// Struct Size::0x0030
struct FVectorParameterValue
{
    FMaterialParameterInfo                        ParameterInfo;                                                // 0x0000(0x0010)
    FLinearColor                                  ParameterValue;                                               // 0x0010(0x0010)
    FGuid                                         ExpressionGUID;                                               // 0x0020(0x0010)
};


// ScriptStruct  Engine.DoubleVectorParameterValue
// Struct Size::0x0040
struct FDoubleVectorParameterValue
{
    FMaterialParameterInfo                        ParameterInfo;                                                // 0x0000(0x0010)
    FVector4d                                     ParameterValue;                                               // 0x0010(0x0020)
    FGuid                                         ExpressionGUID;                                               // 0x0030(0x0010)
};


// ScriptStruct  Engine.TextureParameterValue
// Struct Size::0x0028
struct FTextureParameterValue
{
    FMaterialParameterInfo                        ParameterInfo;                                                // 0x0000(0x0010)
    UTexture*                                     ParameterValue;                                               // 0x0010(0x0008)
    FGuid                                         ExpressionGUID;                                               // 0x0018(0x0010)
};


// ScriptStruct  Engine.RuntimeVirtualTextureParameterValue
// Struct Size::0x0028
struct FRuntimeVirtualTextureParameterValue
{
    FMaterialParameterInfo                        ParameterInfo;                                                // 0x0000(0x0010)
    URuntimeVirtualTexture*                       ParameterValue;                                               // 0x0010(0x0008)
    FGuid                                         ExpressionGUID;                                               // 0x0018(0x0010)
};


// ScriptStruct  Engine.FontParameterValue
// Struct Size::0x0030
struct FFontParameterValue
{
    FMaterialParameterInfo                        ParameterInfo;                                                // 0x0000(0x0010)
    UFont*                                        FontValue;                                                    // 0x0010(0x0008)
    int32_t                                       FontPage;                                                     // 0x0018(0x0004)
    FGuid                                         ExpressionGUID;                                               // 0x001C(0x0010)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
};


// ScriptStruct  Engine.MaterialInstanceCachedData
// Struct Size::0x0010
struct FMaterialInstanceCachedData
{
    TArray<int32_t>                               ParentLayerIndexRemap;                                        // 0x0000(0x0010)
};


// ScriptStruct  Engine.MemberReference
// Struct Size::0x0038
struct FMemberReference
{
    UObject*                                      MemberParent;                                                 // 0x0000(0x0008)
    FString                                       MemberScope;                                                  // 0x0008(0x0010)
    FName                                         MemberName;                                                   // 0x0018(0x0008)
    FGuid                                         MemberGuid;                                                   // 0x0020(0x0010)
    bool                                          bSelfContext;                                                 // 0x0030(0x0001)
    bool                                          bWasDeprecated;                                               // 0x0031(0x0001)
    char                                          pa_0032[0x0006]                                               // 0x0032(0x0006)
};


// ScriptStruct  Engine.MeshReductionSettings
// Struct Size::0x0024
struct FMeshReductionSettings
{
    float                                         PercentTriangles;                                             // 0x0000(0x0004)
    float                                         PercentVertices;                                              // 0x0004(0x0004)
    float                                         MaxDeviation;                                                 // 0x0008(0x0004)
    float                                         PixelError;                                                   // 0x000C(0x0004)
    float                                         WeldingThreshold;                                             // 0x0010(0x0004)
    float                                         HardAngleThreshold;                                           // 0x0014(0x0004)
    int32_t                                       BaseLODModel;                                                 // 0x0018(0x0004)
    enum class EMeshFeatureImportance             SilhouetteImportance;                                         // 0x001C(0x0001)
    enum class EMeshFeatureImportance             TextureImportance;                                            // 0x001D(0x0001)
    enum class EMeshFeatureImportance             ShadingImportance;                                            // 0x001E(0x0001)
    char                                          bRecalculateNormals;                                          // 0x001F(0x0001)
    char                                          bGenerateUniqueLightmapUVs;                                   // 0x001F(0x0001)
    char                                          bKeepSymmetry;                                                // 0x001F(0x0001)
    char                                          bVisibilityAided;                                             // 0x001F(0x0001)
    char                                          bCullOccluded;                                                // 0x001F(0x0001)
    enum class EStaticMeshReductionTerimationCriterionTerminationCriterion;                                     // 0x0020(0x0001)
    enum class EMeshFeatureImportance             VisibilityAggressiveness;                                     // 0x0021(0x0001)
    enum class EMeshFeatureImportance             VertexColorImportance;                                        // 0x0022(0x0001)
    char                                          pa_0023[0x0001]                                               // 0x0023(0x0001)
};


// ScriptStruct  Engine.MeshInstancingSettings
// Struct Size::0x0018
struct FMeshInstancingSettings
{
    AActor*                                       ActorClassToUse;                                              // 0x0000(0x0008)
    int32_t                                       InstanceReplacementThreshold;                                 // 0x0008(0x0004)
    bool                                          bSkipMeshesWithVertexColors;                                  // 0x000C(0x0001)
    bool                                          bUseHLODVolumes;                                              // 0x000D(0x0001)
    char                                          pa_000E[0x0002]                                               // 0x000E(0x0002)
    UInstancedStaticMeshComponent*                ISMComponentToUse;                                            // 0x0010(0x0008)
};


// ScriptStruct  Engine.PacketSimulationSettings
// Struct Size::0x0034
struct FPacketSimulationSettings
{
    int32_t                                       PktLoss;                                                      // 0x0000(0x0004)
    int32_t                                       PktLossMaxSize;                                               // 0x0004(0x0004)
    int32_t                                       PktLossMinSize;                                               // 0x0008(0x0004)
    int32_t                                       PktOrder;                                                     // 0x000C(0x0004)
    int32_t                                       PktDup;                                                       // 0x0010(0x0004)
    int32_t                                       PktLag;                                                       // 0x0014(0x0004)
    int32_t                                       PktLagVariance;                                               // 0x0018(0x0004)
    int32_t                                       PktLagMin;                                                    // 0x001C(0x0004)
    int32_t                                       PktLagMax;                                                    // 0x0020(0x0004)
    int32_t                                       PktIncomingLagMin;                                            // 0x0024(0x0004)
    int32_t                                       PktIncomingLagMax;                                            // 0x0028(0x0004)
    int32_t                                       PktIncomingLoss;                                              // 0x002C(0x0004)
    int32_t                                       PktJitter;                                                    // 0x0030(0x0004)
};


// ScriptStruct  Engine.ChannelDefinition
// Struct Size::0x0020
struct FChannelDefinition
{
    FName                                         ChannelName;                                                  // 0x0000(0x0008)
    FName                                         ClassName;                                                    // 0x0008(0x0008)
    UClass*                                       ChannelClass;                                                 // 0x0010(0x0008)
    int32_t                                       StaticChannelIndex;                                           // 0x0018(0x0004)
    char                                          bTickOnCreate;                                                // 0x001C(0x0001)
    char                                          bServerOpen;                                                  // 0x001C(0x0001)
    char                                          bClientOpen;                                                  // 0x001C(0x0001)
    char                                          bInitialServer;                                               // 0x001C(0x0001)
    char                                          bInitialClient;                                               // 0x001C(0x0001)
    char                                          pa_001D[0x0003]                                               // 0x001D(0x0003)
};


// ScriptStruct  Engine.NetworkEmulationProfileDescription
// Struct Size::0x0020
struct FNetworkEmulationProfileDescription
{
    FString                                       ProfileName;                                                  // 0x0000(0x0010)
    FString                                       ToolTip;                                                      // 0x0010(0x0010)
};


// ScriptStruct  Engine.BandwidthTestItem
// Struct Size::0x0010
struct FBandwidthTestItem
{
    TArray<char>                                  Kilobyte;                                                     // 0x0000(0x0010)
};


// ScriptStruct  Engine.BandwidthTestGenerator
// Struct Size::0x0020
struct FBandwidthTestGenerator
{
    TArray<FBandwidthTestItem>                    ReplicatedBuffers;                                            // 0x0000(0x0010)
    char                                          pa_0010[0x0010]                                               // 0x0010(0x0010)
};


// ScriptStruct  Engine.RPCDoSState
// Struct Size::0x0048
struct FRPCDoSState
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    bool                                          bLogEscalate;                                                 // 0x0008(0x0001)
    bool                                          bSendEscalateAnalytics;                                       // 0x0009(0x0001)
    bool                                          bKickPlayer;                                                  // 0x000A(0x0001)
    bool                                          bTrackRecentRPCs;                                             // 0x000B(0x0001)
    int16_t                                       EscalateQuotaRPCsPerFrame;                                    // 0x000C(0x0002)
    int16_t                                       EscalateTimeQuotaMSPerFrame;                                  // 0x000E(0x0002)
    int16_t                                       EscalateQuotaRPCsPerPeriod;                                   // 0x0010(0x0002)
    int16_t                                       EscalateTimeQuotaMSPerPeriod;                                 // 0x0012(0x0002)
    int8_t                                        EscalateQuotaTimePeriod;                                      // 0x0014(0x0001)
    int8_t                                        EscalationCountTolerance;                                     // 0x0015(0x0001)
    int16_t                                       EscalationTimeToleranceMS;                                    // 0x0016(0x0002)
    int16_t                                       RPCRepeatLimitPerPeriod;                                      // 0x0018(0x0002)
    int16_t                                       RPCRepeatLimitMSPerPeriod;                                    // 0x001A(0x0002)
    int8_t                                        RPCRepeatLimitTimePeriod;                                     // 0x001C(0x0001)
    char                                          pa_001D[0x0001]                                               // 0x001D(0x0001)
    int16_t                                       CooloffTime;                                                  // 0x001E(0x0002)
    int16_t                                       AutoEscalateTime;                                             // 0x0020(0x0002)
    char                                          pa_0022[0x0026]                                               // 0x0022(0x0026)
};


// ScriptStruct  Engine.RPCDoSStateConfig
// Struct Size::0x0078
struct FRPCDoSStateConfig : public FRPCDoSState
{
    char                                          pa_0048[0x0030]                                               // 0x0048(0x0030)
};


// ScriptStruct  Engine.RPCAnalyticsThreshold
// Struct Size::0x0018
struct FRPCAnalyticsThreshold
{
    FName                                         RPC;                                                          // 0x0000(0x0008)
    int32_t                                       CountPerSec;                                                  // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    double                                        TimePerSec;                                                   // 0x0010(0x0008)
};


// ScriptStruct  Engine.ParticleSystemWorldManagerTickFunction
// Struct Size::0x0030
struct FParticleSystemWorldManagerTickFunction : public FTickFunction
{
    char                                          pa_0028[0x0008]                                               // 0x0028(0x0008)
};


// ScriptStruct  Engine.PSCPoolElem
// Struct Size::0x0010
struct FPSCPoolElem
{
    UParticleSystemComponent*                     PSC;                                                          // 0x0000(0x0008)
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
};


// ScriptStruct  Engine.PSCPool
// Struct Size::0x0010
struct FPSCPool
{
    TArray<FPSCPoolElem>                          FreeElements;                                                 // 0x0000(0x0010)
};


// ScriptStruct  Engine.WorldPSCPool
// Struct Size::0x0058
struct FWorldPSCPool
{
    TMap<UParticleSystem*,FPSCPool>               WorldParticleSystemPools;                                     // 0x0000(0x0050)
    char                                          pa_0050[0x0008]                                               // 0x0050(0x0008)
};


// ScriptStruct  Engine.FreezablePerPlatformInt
// Struct Size::0x0004
struct FFreezablePerPlatformInt
{
    char                                          pa_0000[0x0004]                                               // 0x0000(0x0004)
};


// ScriptStruct  Engine.PerQualityLevelInt
// Struct Size::0x0068
struct FPerQualityLevelInt
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
    int32_t                                       Default;                                                      // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    TMap<int32_t,int32_t>                         PerQuality;                                                   // 0x0018(0x0050)
};


// ScriptStruct  Engine.ConstraintDrive
// Struct Size::0x0010
struct FConstraintDrive
{
    float                                         Stiffness;                                                    // 0x0000(0x0004)
    float                                         Damping;                                                      // 0x0004(0x0004)
    float                                         MaxForce;                                                     // 0x0008(0x0004)
    char                                          bEnablePositionDrive;                                         // 0x000C(0x0001)
    char                                          bEnableVelocityDrive;                                         // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
};


// ScriptStruct  Engine.LinearDriveConstraint
// Struct Size::0x0068
struct FLinearDriveConstraint
{
    FVector                                       PositionTarget;                                               // 0x0000(0x0018)
    FVector                                       VelocityTarget;                                               // 0x0018(0x0018)
    FConstraintDrive                              XDrive;                                                       // 0x0030(0x0010)
    FConstraintDrive                              YDrive;                                                       // 0x0040(0x0010)
    FConstraintDrive                              ZDrive;                                                       // 0x0050(0x0010)
    char                                          bEnablePositionDrive;                                         // 0x0060(0x0001)
    char                                          pa_0061[0x0007]                                               // 0x0061(0x0007)
};


// ScriptStruct  Engine.AngularDriveConstraint
// Struct Size::0x0068
struct FAngularDriveConstraint
{
    FConstraintDrive                              TwistDrive;                                                   // 0x0000(0x0010)
    FConstraintDrive                              SwingDrive;                                                   // 0x0010(0x0010)
    FConstraintDrive                              SlerpDrive;                                                   // 0x0020(0x0010)
    FRotator                                      OrientationTarget;                                            // 0x0030(0x0018)
    FVector                                       AngularVelocityTarget;                                        // 0x0048(0x0018)
    enum class EAngularDriveMode                  AngularDriveMode;                                             // 0x0060(0x0001)
    char                                          pa_0061[0x0007]                                               // 0x0061(0x0007)
};


// ScriptStruct  Engine.ConstraintProfileProperties
// Struct Size::0x0160
struct FConstraintProfileProperties
{
    float                                         ProjectionLinearTolerance;                                    // 0x0000(0x0004)
    float                                         ProjectionAngularTolerance;                                   // 0x0004(0x0004)
    float                                         ProjectionLinearAlpha;                                        // 0x0008(0x0004)
    float                                         ProjectionAngularAlpha;                                       // 0x000C(0x0004)
    float                                         ShockPropagationAlpha;                                        // 0x0010(0x0004)
    float                                         LinearBreakThreshold;                                         // 0x0014(0x0004)
    float                                         LinearPlasticityThreshold;                                    // 0x0018(0x0004)
    float                                         AngularBreakThreshold;                                        // 0x001C(0x0004)
    float                                         AngularPlasticityThreshold;                                   // 0x0020(0x0004)
    float                                         ContactTransferScale;                                         // 0x0024(0x0004)
    FLinearConstraint                             LinearLimit;                                                  // 0x0028(0x001C)
    FConeConstraint                               ConeLimit;                                                    // 0x0044(0x0020)
    FTwistConstraint                              TwistLimit;                                                   // 0x0064(0x001C)
    char                                          bDisableCollision;                                            // 0x0080(0x0001)
    char                                          bParentDominates;                                             // 0x0080(0x0001)
    char                                          bEnableShockPropagation;                                      // 0x0080(0x0001)
    char                                          bEnableProjection;                                            // 0x0080(0x0001)
    char                                          bAngularBreakable;                                            // 0x0080(0x0001)
    char                                          bAngularPlasticity;                                           // 0x0080(0x0001)
    char                                          bLinearBreakable;                                             // 0x0080(0x0001)
    char                                          bLinearPlasticity;                                            // 0x0080(0x0001)
    char                                          pa_0081[0x0007]                                               // 0x0081(0x0007)
    FLinearDriveConstraint                        LinearDrive;                                                  // 0x0088(0x0068)
    FAngularDriveConstraint                       AngularDrive;                                                 // 0x00F0(0x0068)
    enum class EConstraintPlasticityType          LinearPlasticityType;                                         // 0x0158(0x0001)
    char                                          pa_0159[0x0007]                                               // 0x0159(0x0007)
};


// ScriptStruct  Engine.ConstraintBaseParams
// Struct Size::0x0014
struct FConstraintBaseParams
{
    float                                         Stiffness;                                                    // 0x0000(0x0004)
    float                                         Damping;                                                      // 0x0004(0x0004)
    float                                         Restitution;                                                  // 0x0008(0x0004)
    float                                         ContactDistance;                                              // 0x000C(0x0004)
    char                                          bSoftConstraint;                                              // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
};


// ScriptStruct  Engine.TwistConstraint
// Struct Size::0x001C
struct FTwistConstraint : public FConstraintBaseParams
{
    float                                         TwistLimitDegrees;                                            // 0x0014(0x0004)
    enum class EAngularConstraintMotion           TwistMotion;                                                  // 0x0018(0x0001)
    char                                          pa_0019[0x0003]                                               // 0x0019(0x0003)
};


// ScriptStruct  Engine.ConeConstraint
// Struct Size::0x0020
struct FConeConstraint : public FConstraintBaseParams
{
    float                                         Swing1LimitDegrees;                                           // 0x0014(0x0004)
    float                                         Swing2LimitDegrees;                                           // 0x0018(0x0004)
    enum class EAngularConstraintMotion           Swing1Motion;                                                 // 0x001C(0x0001)
    enum class EAngularConstraintMotion           Swing2Motion;                                                 // 0x001D(0x0001)
    char                                          pa_001E[0x0002]                                               // 0x001E(0x0002)
};


// ScriptStruct  Engine.LinearConstraint
// Struct Size::0x001C
struct FLinearConstraint : public FConstraintBaseParams
{
    float                                         Limit;                                                        // 0x0014(0x0004)
    enum class ELinearConstraintMotion            XMotion;                                                      // 0x0018(0x0001)
    enum class ELinearConstraintMotion            YMotion;                                                      // 0x0019(0x0001)
    enum class ELinearConstraintMotion            ZMotion;                                                      // 0x001A(0x0001)
    char                                          pa_001B[0x0001]                                               // 0x001B(0x0001)
};


// ScriptStruct  Engine.ConstraintInstanceBase
// Struct Size::0x0038
struct FConstraintInstanceBase
{
    char                                          pa_0000[0x0038]                                               // 0x0000(0x0038)
};


// ScriptStruct  Engine.ConstraintInstance
// Struct Size::0x0278
struct FConstraintInstance : public FConstraintInstanceBase
{
    FName                                         JointName;                                                    // 0x0038(0x0008)
    FName                                         ConstraintBone1;                                              // 0x0040(0x0008)
    FName                                         ConstraintBone2;                                              // 0x0048(0x0008)
    char                                          pa_0050[0x0008]                                               // 0x0050(0x0008)
    FVector                                       Pos1;                                                         // 0x0058(0x0018)
    FVector                                       PriAxis1;                                                     // 0x0070(0x0018)
    FVector                                       SecAxis1;                                                     // 0x0088(0x0018)
    FVector                                       Pos2;                                                         // 0x00A0(0x0018)
    FVector                                       PriAxis2;                                                     // 0x00B8(0x0018)
    FVector                                       SecAxis2;                                                     // 0x00D0(0x0018)
    FRotator                                      AngularRotationOffset;                                        // 0x00E8(0x0018)
    char                                          bScaleLinearLimits;                                           // 0x0100(0x0001)
    char                                          pa_0101[0x0007]                                               // 0x0101(0x0007)
    FConstraintProfileProperties                  ProfileInstance;                                              // 0x0108(0x0160)
    char                                          pa_0268[0x0010]                                               // 0x0268(0x0010)
};


// ScriptStruct  Engine.ConstraintInstanceAccessor
// Struct Size::0x000C
struct FConstraintInstanceAccessor
{
    TWeakObjectPtr<UObject>                       Owner;                                                        // 0x0000(0x0008)
    uint32_t                                      Index;                                                        // 0x0008(0x0004)
};


// ScriptStruct  Engine.PhysicalAnimationData
// Struct Size::0x0024
struct FPhysicalAnimationData
{
    FName                                         BodyName;                                                     // 0x0000(0x0008)
    char                                          bIsLocalSimulation;                                           // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
    float                                         OrientationStrength;                                          // 0x000C(0x0004)
    float                                         AngularVelocityStrength;                                      // 0x0010(0x0004)
    float                                         PositionStrength;                                             // 0x0014(0x0004)
    float                                         VelocityStrength;                                             // 0x0018(0x0004)
    float                                         MaxLinearForce;                                               // 0x001C(0x0004)
    float                                         MaxAngularForce;                                              // 0x0020(0x0004)
};


// ScriptStruct  Engine.PhysicsAssetSolverSettings
// Struct Size::0x001C
struct FPhysicsAssetSolverSettings
{
    int32_t                                       PositionIterations;                                           // 0x0000(0x0004)
    int32_t                                       VelocityIterations;                                           // 0x0004(0x0004)
    int32_t                                       ProjectionIterations;                                         // 0x0008(0x0004)
    float                                         CullDistance;                                                 // 0x000C(0x0004)
    float                                         MaxDepenetrationVelocity;                                     // 0x0010(0x0004)
    float                                         FixedTimeStep;                                                // 0x0014(0x0004)
    bool                                          bUseLinearJointSolver;                                        // 0x0018(0x0001)
    char                                          pa_0019[0x0003]                                               // 0x0019(0x0003)
};


// ScriptStruct  Engine.SolverIterations
// Struct Size::0x0018
struct FSolverIterations
{
    int32_t                                       SolverIterations;                                             // 0x0000(0x0004)
    int32_t                                       JointIterations;                                              // 0x0004(0x0004)
    int32_t                                       CollisionIterations;                                          // 0x0008(0x0004)
    int32_t                                       SolverPushOutIterations;                                      // 0x000C(0x0004)
    int32_t                                       JointPushOutIterations;                                       // 0x0010(0x0004)
    int32_t                                       CollisionPushOutIterations;                                   // 0x0014(0x0004)
};


// ScriptStruct  Engine.PhysicalAnimationProfile
// Struct Size::0x002C
struct FPhysicalAnimationProfile
{
    FName                                         ProfileName;                                                  // 0x0000(0x0008)
    FPhysicalAnimationData                        PhysicalAnimationData;                                        // 0x0008(0x0024)
};


// ScriptStruct  Engine.PhysicsConstraintProfileHandle
// Struct Size::0x0168
struct FPhysicsConstraintProfileHandle
{
    FConstraintProfileProperties                  ProfileProperties;                                            // 0x0000(0x0160)
    FName                                         ProfileName;                                                  // 0x0160(0x0008)
};


// ScriptStruct  Engine.PhysicalSurfaceName
// Struct Size::0x000C
struct FPhysicalSurfaceName
{
    enum class EPhysicalSurface                   Type;                                                         // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FName                                         Name;                                                         // 0x0004(0x0008)
};


// ScriptStruct  Engine.ChaosPhysicsSettings
// Struct Size::0x0003
struct FChaosPhysicsSettings
{
    enum class EChaosThreadingMode                DefaultThreadingModel;                                        // 0x0000(0x0001)
    enum class EChaosSolverTickMode               DedicatedThreadTickMode;                                      // 0x0001(0x0001)
    enum class EChaosBufferMode                   DedicatedThreadBufferMode;                                    // 0x0002(0x0001)
};


// ScriptStruct  Engine.UpdateLevelStreamingLevelStatus
// Struct Size::0x0010
struct FUpdateLevelStreamingLevelStatus
{
    FName                                         PackageName;                                                  // 0x0000(0x0008)
    int32_t                                       LODIndex;                                                     // 0x0008(0x0004)
    bool                                          bNewShouldBeLoaded;                                           // 0x000C(0x0001)
    bool                                          bNewShouldBeVisible;                                          // 0x000D(0x0001)
    bool                                          bNewShouldBlockOnLoad;                                        // 0x000E(0x0001)
    char                                          pa_000F[0x0001]                                               // 0x000F(0x0001)
};


// ScriptStruct  Engine.AsyncPhysicsTimestamp
// Struct Size::0x0008
struct FAsyncPhysicsTimestamp
{
    int32_t                                       ServerFrame;                                                  // 0x0000(0x0004)
    int32_t                                       LocalFrame;                                                   // 0x0004(0x0004)
};


// ScriptStruct  Engine.PlayerMuteList
// Struct Size::0x0058
struct FPlayerMuteList
{
    char                                          pa_0000[0x0050]                                               // 0x0000(0x0050)
    bool                                          bHasVoiceHandshakeCompleted;                                  // 0x0050(0x0001)
    char                                          pa_0051[0x0003]                                               // 0x0051(0x0003)
    int32_t                                       VoiceChannelIdx;                                              // 0x0054(0x0004)
};


// ScriptStruct  Engine.PropertyAccessIndirection
// Struct Size::0x0040
struct FPropertyAccessIndirection
{
    Property                                      Property;                                                     // 0x0000(0x0020)
    UFunction*                                    Function;                                                     // 0x0020(0x0008)
    int32_t                                       ReturnBufferSize;                                             // 0x0028(0x0004)
    int32_t                                       ReturnBufferAlignment;                                        // 0x002C(0x0004)
    int32_t                                       ArrayIndex;                                                   // 0x0030(0x0004)
    uint32_t                                      Offset;                                                       // 0x0034(0x0004)
    enum class EPropertyAccessObjectType          ObjectType;                                                   // 0x0038(0x0001)
    enum class EPropertyAccessIndirectionType     Type;                                                         // 0x0039(0x0001)
    char                                          pa_003A[0x0006]                                               // 0x003A(0x0006)
};


// ScriptStruct  Engine.PropertyAccessIndirectionChain
// Struct Size::0x0028
struct FPropertyAccessIndirectionChain
{
    Property                                      Property;                                                     // 0x0000(0x0020)
    int32_t                                       IndirectionStartIndex;                                        // 0x0020(0x0004)
    int32_t                                       IndirectionEndIndex;                                          // 0x0024(0x0004)
};


// ScriptStruct  Engine.SubsurfaceProfileStruct
// Struct Size::0x009C
struct FSubsurfaceProfileStruct
{
    FLinearColor                                  SurfaceAlbedo;                                                // 0x0000(0x0010)
    FLinearColor                                  MeanFreePathColor;                                            // 0x0010(0x0010)
    float                                         MeanFreePathDistance;                                         // 0x0020(0x0004)
    float                                         WorldUnitScale;                                               // 0x0024(0x0004)
    bool                                          bEnableBurley;                                                // 0x0028(0x0001)
    bool                                          bEnableMeanFreePath;                                          // 0x0029(0x0001)
    char                                          pa_002A[0x0002]                                               // 0x002A(0x0002)
    FLinearColor                                  Tint;                                                         // 0x002C(0x0010)
    float                                         ScatterRadius;                                                // 0x003C(0x0004)
    FLinearColor                                  SubsurfaceColor;                                              // 0x0040(0x0010)
    FLinearColor                                  FalloffColor;                                                 // 0x0050(0x0010)
    FLinearColor                                  BoundaryColorBleed;                                           // 0x0060(0x0010)
    float                                         ExtinctionScale;                                              // 0x0070(0x0004)
    float                                         NormalScale;                                                  // 0x0074(0x0004)
    float                                         ScatteringDistribution;                                       // 0x0078(0x0004)
    float                                         IOR;                                                          // 0x007C(0x0004)
    float                                         Roughness0;                                                   // 0x0080(0x0004)
    float                                         Roughness1;                                                   // 0x0084(0x0004)
    float                                         LobeMix;                                                      // 0x0088(0x0004)
    FLinearColor                                  TransmissionTintColor;                                        // 0x008C(0x0010)
};


// ScriptStruct  Engine.SingleAnimationPlayData
// Struct Size::0x0018
struct FSingleAnimationPlayData
{
    UAnimationAsset*                              AnimToPlay;                                                   // 0x0000(0x0008)
    char                                          bSavedLooping;                                                // 0x0008(0x0001)
    char                                          bSavedPlaying;                                                // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
    float                                         SavedPosition;                                                // 0x000C(0x0004)
    float                                         SavedPlayRate;                                                // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  Engine.BoneMirrorInfo
// Struct Size::0x0008
struct FBoneMirrorInfo
{
    int32_t                                       SourceIndex;                                                  // 0x0000(0x0004)
    enum class EAxis                              BoneFlipAxis;                                                 // 0x0004(0x0001)
    char                                          pa_0005[0x0003]                                               // 0x0005(0x0003)
};


// ScriptStruct  Engine.BoneMirrorExport
// Struct Size::0x0014
struct FBoneMirrorExport
{
    FName                                         BoneName;                                                     // 0x0000(0x0008)
    FName                                         SourceBoneName;                                               // 0x0008(0x0008)
    enum class EAxis                              BoneFlipAxis;                                                 // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
};


// ScriptStruct  Engine.SkeletalMeshClothBuildParams
// Struct Size::0x0060
struct FSkeletalMeshClothBuildParams
{
    TWeakObjectPtr<UClothingAssetBase>            TargetAsset;                                                  // 0x0000(0x0008)
    int32_t                                       TargetLod;                                                    // 0x0008(0x0004)
    bool                                          bRemapParameters;                                             // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
    FString                                       AssetName;                                                    // 0x0010(0x0010)
    int32_t                                       LODIndex;                                                     // 0x0020(0x0004)
    int32_t                                       SourceSection;                                                // 0x0024(0x0004)
    bool                                          bRemoveFromMesh;                                              // 0x0028(0x0001)
    char                                          pa_0029[0x0007]                                               // 0x0029(0x0007)
    TSoftObjectPtr<UPhysicsAsset>                 PhysicsAsset;                                                 // 0x0030(0x0030)
};


// ScriptStruct  Engine.ClothPhysicsProperties
// Struct Size::0x0050
struct FClothPhysicsProperties
{
    float                                         VerticalResistance;                                           // 0x0000(0x0004)
    float                                         HorizontalResistance;                                         // 0x0004(0x0004)
    float                                         BendResistance;                                               // 0x0008(0x0004)
    float                                         ShearResistance;                                              // 0x000C(0x0004)
    float                                         Friction;                                                     // 0x0010(0x0004)
    float                                         Damping;                                                      // 0x0014(0x0004)
    float                                         TetherStiffness;                                              // 0x0018(0x0004)
    float                                         TetherLimit;                                                  // 0x001C(0x0004)
    float                                         Drag;                                                         // 0x0020(0x0004)
    float                                         StiffnessFrequency;                                           // 0x0024(0x0004)
    float                                         GravityScale;                                                 // 0x0028(0x0004)
    float                                         MassScale;                                                    // 0x002C(0x0004)
    float                                         InertiaBlend;                                                 // 0x0030(0x0004)
    float                                         SelfCollisionThickness;                                       // 0x0034(0x0004)
    float                                         SelfCollisionSquashScale;                                     // 0x0038(0x0004)
    float                                         SelfCollisionStiffness;                                       // 0x003C(0x0004)
    float                                         SolverFrequency;                                              // 0x0040(0x0004)
    float                                         FiberCompression;                                             // 0x0044(0x0004)
    float                                         FiberExpansion;                                               // 0x0048(0x0004)
    float                                         FiberResistance;                                              // 0x004C(0x0004)
};


// ScriptStruct  Engine.ClothingAssetData
// Struct Size::0x0070
struct FClothingAssetData
{
    FName                                         AssetName;                                                    // 0x0000(0x0008)
    FString                                       ApexFileName;                                                 // 0x0008(0x0010)
    bool                                          bClothPropertiesChanged;                                      // 0x0018(0x0001)
    char                                          pa_0019[0x0003]                                               // 0x0019(0x0003)
    FClothPhysicsProperties                       PhysicsProperties;                                            // 0x001C(0x0050)
    char                                          pa_006C[0x0004]                                               // 0x006C(0x0004)
};


// ScriptStruct  Engine.BoneFilter
// Struct Size::0x000C
struct FBoneFilter
{
    bool                                          bExcludeSelf;                                                 // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FName                                         BoneName;                                                     // 0x0004(0x0008)
};


// ScriptStruct  Engine.SkeletalMeshLODGroupSettings
// Struct Size::0x0090
struct FSkeletalMeshLODGroupSettings
{
    FPerPlatformFloat                             ScreenSize;                                                   // 0x0000(0x0004)
    float                                         LODHysteresis;                                                // 0x0004(0x0004)
    enum class EBoneFilterActionOption            BoneFilterActionOption;                                       // 0x0008(0x0001)
    char                                          pa_0009[0x0007]                                               // 0x0009(0x0007)
    TArray<FBoneFilter>                           BoneList;                                                     // 0x0010(0x0010)
    TArray<FName>                                 BonesToPrioritize;                                            // 0x0020(0x0010)
    TArray<int32_t>                               SectionsToPrioritize;                                         // 0x0030(0x0010)
    float                                         WeightOfPrioritization;                                       // 0x0040(0x0004)
    char                                          pa_0044[0x0004]                                               // 0x0044(0x0004)
    UAnimSequence*                                BakePose;                                                     // 0x0048(0x0008)
    FSkeletalMeshOptimizationSettings             ReductionSettings;                                            // 0x0050(0x003C)
    char                                          pa_008C[0x0004]                                               // 0x008C(0x0004)
};


// ScriptStruct  Engine.SkelMeshMergeUVTransformMapping
// Struct Size::0x0010
struct FSkelMeshMergeUVTransformMapping
{
    TArray<FSkelMeshMergeMeshUVTransforms>        UVTransformsPerMesh;                                          // 0x0000(0x0010)
};


// ScriptStruct  Engine.SkeletalMeshSamplingRegionBuiltData
// Struct Size::0x0078
struct FSkeletalMeshSamplingRegionBuiltData
{
    char                                          pa_0000[0x0078]                                               // 0x0000(0x0078)
};


// ScriptStruct  Engine.SkeletalMeshSamplingLODBuiltData
// Struct Size::0x0048
struct FSkeletalMeshSamplingLODBuiltData
{
    char                                          pa_0000[0x0048]                                               // 0x0000(0x0048)
};


// ScriptStruct  Engine.SkeletalMeshSamplingBuiltData
// Struct Size::0x0020
struct FSkeletalMeshSamplingBuiltData
{
    TArray<FSkeletalMeshSamplingLODBuiltData>     WholeMeshBuiltData;                                           // 0x0000(0x0010)
    TArray<FSkeletalMeshSamplingRegionBuiltData>  RegionBuiltData;                                              // 0x0010(0x0010)
};


// ScriptStruct  Engine.SkeletalMeshSamplingRegionBoneFilter
// Struct Size::0x000C
struct FSkeletalMeshSamplingRegionBoneFilter
{
    FName                                         BoneName;                                                     // 0x0000(0x0008)
    char                                          bIncludeOrExclude;                                            // 0x0008(0x0001)
    char                                          bApplyToChildren;                                             // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
};


// ScriptStruct  Engine.SkeletalMeshSamplingRegionMaterialFilter
// Struct Size::0x0008
struct FSkeletalMeshSamplingRegionMaterialFilter
{
    FName                                         MaterialName;                                                 // 0x0000(0x0008)
};


// ScriptStruct  Engine.SkeletalMeshSamplingRegion
// Struct Size::0x0030
struct FSkeletalMeshSamplingRegion
{
    FName                                         Name;                                                         // 0x0000(0x0008)
    int32_t                                       LODIndex;                                                     // 0x0008(0x0004)
    char                                          bSupportUniformlyDistributedSampling;                         // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
    TArray<FSkeletalMeshSamplingRegionMaterialFilter>MaterialFilters;                                           // 0x0010(0x0010)
    TArray<FSkeletalMeshSamplingRegionBoneFilter> BoneFilters;                                                  // 0x0020(0x0010)
};


// ScriptStruct  Engine.SkeletalMeshSamplingInfo
// Struct Size::0x0030
struct FSkeletalMeshSamplingInfo
{
    TArray<FSkeletalMeshSamplingRegion>           Regions;                                                      // 0x0000(0x0010)
    FSkeletalMeshSamplingBuiltData                BuiltData;                                                    // 0x0010(0x0020)
};


// ScriptStruct  Engine.SoundClassEditorData
// Struct Size::0x0008
struct FSoundClassEditorData
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
};


// ScriptStruct  Engine.SoundClassProperties
// Struct Size::0x01B8
struct FSoundClassProperties
{
    float                                         Volume;                                                       // 0x0000(0x0004)
    float                                         Pitch;                                                        // 0x0004(0x0004)
    float                                         LowPassFilterFrequency;                                       // 0x0008(0x0004)
    float                                         AttenuationDistanceScale;                                     // 0x000C(0x0004)
    float                                         LFEBleed;                                                     // 0x0010(0x0004)
    float                                         VoiceCenterChannelVolume;                                     // 0x0014(0x0004)
    float                                         RadioFilterVolume;                                            // 0x0018(0x0004)
    float                                         RadioFilterVolumeThreshold;                                   // 0x001C(0x0004)
    char                                          bApplyEffects;                                                // 0x0020(0x0001)
    char                                          bAlwaysPlay;                                                  // 0x0020(0x0001)
    char                                          bIsUISound;                                                   // 0x0020(0x0001)
    char                                          bIsMusic;                                                     // 0x0020(0x0001)
    char                                          bCenterChannelOnly;                                           // 0x0020(0x0001)
    char                                          bApplyAmbientVolumes;                                         // 0x0020(0x0001)
    char                                          bReverb;                                                      // 0x0020(0x0001)
    char                                          pa_0021[0x0003]                                               // 0x0021(0x0003)
    float                                         Default2DReverbSendAmount;                                    // 0x0024(0x0004)
    FSoundModulationDefaultSettings               ModulationSettings;                                           // 0x0028(0x0180)
    enum class EAudioOutputTarget                 OutputTarget;                                                 // 0x01A8(0x0001)
    enum class ESoundWaveLoadingBehavior          LoadingBehavior;                                              // 0x01A9(0x0001)
    char                                          pa_01AA[0x0006]                                               // 0x01AA(0x0006)
    USoundSubmix*                                 DefaultSubmix;                                                // 0x01B0(0x0008)
};


// ScriptStruct  Engine.SoundModulationDefaultSettings
// Struct Size::0x0180
struct FSoundModulationDefaultSettings
{
    FSoundModulationDestinationSettings           VolumeModulationDestination;                                  // 0x0000(0x0060)
    FSoundModulationDestinationSettings           PitchModulationDestination;                                   // 0x0060(0x0060)
    FSoundModulationDestinationSettings           HighpassModulationDestination;                                // 0x00C0(0x0060)
    FSoundModulationDestinationSettings           LowpassModulationDestination;                                 // 0x0120(0x0060)
};


// ScriptStruct  Engine.PassiveSoundMixModifier
// Struct Size::0x0010
struct FPassiveSoundMixModifier
{
    USoundMix*                                    SoundMix;                                                     // 0x0000(0x0008)
    float                                         MinVolumeThreshold;                                           // 0x0008(0x0004)
    float                                         MaxVolumeThreshold;                                           // 0x000C(0x0004)
};


// ScriptStruct  Engine.SoundConcurrencySettings
// Struct Size::0x0020
struct FSoundConcurrencySettings
{
    int32_t                                       MaxCount;                                                     // 0x0000(0x0004)
    char                                          bLimitToOwner;                                                // 0x0004(0x0001)
    char                                          bVolumeScaleCanRelease;                                       // 0x0004(0x0001)
    enum class EMaxConcurrentResolutionRule       ResolutionRule;                                               // 0x0005(0x0001)
    char                                          pa_0006[0x0002]                                               // 0x0006(0x0002)
    float                                         RetriggerTime;                                                // 0x0008(0x0004)
    float                                         VolumeScale;                                                  // 0x000C(0x0004)
    enum class EConcurrencyVolumeScaleMode        VolumeScaleMode;                                              // 0x0010(0x0004)
    float                                         VolumeScaleAttackTime;                                        // 0x0014(0x0004)
    float                                         VolumeScaleReleaseTime;                                       // 0x0018(0x0004)
    float                                         VoiceStealReleaseTime;                                        // 0x001C(0x0004)
};


// ScriptStruct  Engine.SoundNodeEditorData
// Struct Size::0x0008
struct FSoundNodeEditorData
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
};


// ScriptStruct  Engine.AudioEQEffect
// Struct Size::0x0040
struct FAudioEQEffect : public FAudioEffectParameters
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    float                                         FrequencyCenter0;                                             // 0x0010(0x0004)
    float                                         Gain0;                                                        // 0x0014(0x0004)
    float                                         Bandwidth0;                                                   // 0x0018(0x0004)
    float                                         FrequencyCenter1;                                             // 0x001C(0x0004)
    float                                         Gain1;                                                        // 0x0020(0x0004)
    float                                         Bandwidth1;                                                   // 0x0024(0x0004)
    float                                         FrequencyCenter2;                                             // 0x0028(0x0004)
    float                                         Gain2;                                                        // 0x002C(0x0004)
    float                                         Bandwidth2;                                                   // 0x0030(0x0004)
    float                                         FrequencyCenter3;                                             // 0x0034(0x0004)
    float                                         Gain3;                                                        // 0x0038(0x0004)
    float                                         Bandwidth3;                                                   // 0x003C(0x0004)
};


// ScriptStruct  Engine.SoundClassAdjuster
// Struct Size::0x0020
struct FSoundClassAdjuster
{
    USoundClass*                                  SoundClassObject;                                             // 0x0000(0x0008)
    float                                         VolumeAdjuster;                                               // 0x0008(0x0004)
    float                                         PitchAdjuster;                                                // 0x000C(0x0004)
    float                                         LowPassFilterFrequency;                                       // 0x0010(0x0004)
    char                                          bApplyToChildren;                                             // 0x0014(0x0001)
    char                                          pa_0015[0x0003]                                               // 0x0015(0x0003)
    float                                         VoiceCenterChannelVolumeAdjuster;                             // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  Engine.SoundModulationDefaultRoutingSettings
// Struct Size::0x0188
struct FSoundModulationDefaultRoutingSettings : public FSoundModulationDefaultSettings
{
    enum class EModulationRouting                 VolumeRouting;                                                // 0x0180(0x0001)
    enum class EModulationRouting                 PitchRouting;                                                 // 0x0181(0x0001)
    enum class EModulationRouting                 HighpassRouting;                                              // 0x0182(0x0001)
    enum class EModulationRouting                 LowpassRouting;                                               // 0x0183(0x0001)
    char                                          pa_0184[0x0004]                                               // 0x0184(0x0004)
};


// ScriptStruct  Engine.DistanceDatum
// Struct Size::0x0014
struct FDistanceDatum
{
    float                                         FadeInDistanceStart;                                          // 0x0000(0x0004)
    float                                         FadeInDistanceEnd;                                            // 0x0004(0x0004)
    float                                         FadeOutDistanceStart;                                         // 0x0008(0x0004)
    float                                         FadeOutDistanceEnd;                                           // 0x000C(0x0004)
    float                                         Volume;                                                       // 0x0010(0x0004)
};


// ScriptStruct  Engine.SoundSubmixSpectralAnalysisBandSettings
// Struct Size::0x0010
struct FSoundSubmixSpectralAnalysisBandSettings
{
    float                                         BandFrequency;                                                // 0x0000(0x0004)
    int32_t                                       AttackTimeMsec;                                               // 0x0004(0x0004)
    int32_t                                       ReleaseTimeMsec;                                              // 0x0008(0x0004)
    float                                         QFactor;                                                      // 0x000C(0x0004)
};


// ScriptStruct  Engine.StaticMeshSourceModel
// Struct Size::0x0088
struct FStaticMeshSourceModel
{
    FMeshBuildSettings                            BuildSettings;                                                // 0x0000(0x0048)
    FMeshReductionSettings                        ReductionSettings;                                            // 0x0048(0x0024)
    float                                         LODDistance;                                                  // 0x006C(0x0004)
    FPerPlatformFloat                             ScreenSize;                                                   // 0x0070(0x0004)
    char                                          pa_0074[0x0004]                                               // 0x0074(0x0004)
    FString                                       SourceImportFilename;                                         // 0x0078(0x0010)
};


// ScriptStruct  Engine.StreamableTexture
// Struct Size::0x0001
struct FStreamableTexture
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  Engine.ExternalToolDefinition
// Struct Size::0x0060
struct FExternalToolDefinition
{
    FString                                       ToolName;                                                     // 0x0000(0x0010)
    FFilePath                                     ExecutablePath;                                               // 0x0010(0x0010)
    FString                                       CommandLineOptions;                                           // 0x0020(0x0010)
    FDirectoryPath                                WorkingDirectory;                                             // 0x0030(0x0010)
    FString                                       ScriptExtension;                                              // 0x0040(0x0010)
    FDirectoryPath                                ScriptDirectory;                                              // 0x0050(0x0010)
};


// ScriptStruct  Engine.ImportFactorySettingValues
// Struct Size::0x0020
struct FImportFactorySettingValues
{
    FString                                       SettingName;                                                  // 0x0000(0x0010)
    FString                                       Value;                                                        // 0x0010(0x0010)
};


// ScriptStruct  Engine.EditorImportExportTestDefinition
// Struct Size::0x0038
struct FEditorImportExportTestDefinition
{
    FFilePath                                     ImportFilePath;                                               // 0x0000(0x0010)
    FString                                       ExportFileExtension;                                          // 0x0010(0x0010)
    bool                                          bSkipExport;                                                  // 0x0020(0x0001)
    char                                          pa_0021[0x0007]                                               // 0x0021(0x0007)
    TArray<FImportFactorySettingValues>           FactorySettings;                                              // 0x0028(0x0010)
};


// ScriptStruct  Engine.EditorImportWorkflowDefinition
// Struct Size::0x0020
struct FEditorImportWorkflowDefinition
{
    FFilePath                                     ImportFilePath;                                               // 0x0000(0x0010)
    TArray<FImportFactorySettingValues>           FactorySettings;                                              // 0x0010(0x0010)
};


// ScriptStruct  Engine.BuildPromotionImportWorkflowSettings
// Struct Size::0x0150
struct FBuildPromotionImportWorkflowSettings
{
    FEditorImportWorkflowDefinition               Diffuse;                                                      // 0x0000(0x0020)
    FEditorImportWorkflowDefinition               Normal;                                                       // 0x0020(0x0020)
    FEditorImportWorkflowDefinition               StaticMesh;                                                   // 0x0040(0x0020)
    FEditorImportWorkflowDefinition               ReimportStaticMesh;                                           // 0x0060(0x0020)
    FEditorImportWorkflowDefinition               BlendShapeMesh;                                               // 0x0080(0x0020)
    FEditorImportWorkflowDefinition               MorphMesh;                                                    // 0x00A0(0x0020)
    FEditorImportWorkflowDefinition               SkeletalMesh;                                                 // 0x00C0(0x0020)
    FEditorImportWorkflowDefinition               Animation;                                                    // 0x00E0(0x0020)
    FEditorImportWorkflowDefinition               Sound;                                                        // 0x0100(0x0020)
    FEditorImportWorkflowDefinition               SurroundSound;                                                // 0x0120(0x0020)
    TArray<FEditorImportWorkflowDefinition>       OtherAssetsToImport;                                          // 0x0140(0x0010)
};


// ScriptStruct  Engine.BuildPromotionOpenAssetSettings
// Struct Size::0x0060
struct FBuildPromotionOpenAssetSettings
{
    FFilePath                                     BlueprintAsset;                                               // 0x0000(0x0010)
    FFilePath                                     MaterialAsset;                                                // 0x0010(0x0010)
    FFilePath                                     ParticleSystemAsset;                                          // 0x0020(0x0010)
    FFilePath                                     SkeletalMeshAsset;                                            // 0x0030(0x0010)
    FFilePath                                     StaticMeshAsset;                                              // 0x0040(0x0010)
    FFilePath                                     TextureAsset;                                                 // 0x0050(0x0010)
};


// ScriptStruct  Engine.BuildPromotionNewProjectSettings
// Struct Size::0x0020
struct FBuildPromotionNewProjectSettings
{
    FDirectoryPath                                NewProjectFolderOverride;                                     // 0x0000(0x0010)
    FString                                       NewProjectNameOverride;                                       // 0x0010(0x0010)
};


// ScriptStruct  Engine.MaterialEditorPromotionSettings
// Struct Size::0x0030
struct FMaterialEditorPromotionSettings
{
    FFilePath                                     DefaultMaterialAsset;                                         // 0x0000(0x0010)
    FFilePath                                     DefaultDiffuseTexture;                                        // 0x0010(0x0010)
    FFilePath                                     DefaultNormalTexture;                                         // 0x0020(0x0010)
};


// ScriptStruct  Engine.ParticleEditorPromotionSettings
// Struct Size::0x0010
struct FParticleEditorPromotionSettings
{
    FFilePath                                     DefaultParticleAsset;                                         // 0x0000(0x0010)
};


// ScriptStruct  Engine.BlueprintEditorPromotionSettings
// Struct Size::0x0030
struct FBlueprintEditorPromotionSettings
{
    FFilePath                                     FirstMeshPath;                                                // 0x0000(0x0010)
    FFilePath                                     SecondMeshPath;                                               // 0x0010(0x0010)
    FFilePath                                     DefaultParticleAsset;                                         // 0x0020(0x0010)
};


// ScriptStruct  Engine.BuildPromotionTestSettings
// Struct Size::0x01F0
struct FBuildPromotionTestSettings
{
    FFilePath                                     DefaultStaticMeshAsset;                                       // 0x0000(0x0010)
    FBuildPromotionImportWorkflowSettings         ImportWorkflow;                                               // 0x0010(0x0150)
    FBuildPromotionOpenAssetSettings              OpenAssets;                                                   // 0x0160(0x0060)
    FBuildPromotionNewProjectSettings             NewProjectSettings;                                           // 0x01C0(0x0020)
    FFilePath                                     SourceControlMaterial;                                        // 0x01E0(0x0010)
};


// ScriptStruct  Engine.EditorMapPerformanceTestDefinition
// Struct Size::0x0028
struct FEditorMapPerformanceTestDefinition
{
    FSoftObjectPath                               PerformanceTestmap;                                           // 0x0000(0x0020)
    int32_t                                       TestTimer;                                                    // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
};


// ScriptStruct  Engine.LaunchOnTestSettings
// Struct Size::0x0020
struct FLaunchOnTestSettings
{
    FFilePath                                     LaunchOnTestmap;                                              // 0x0000(0x0010)
    FString                                       DeviceID;                                                     // 0x0010(0x0010)
};


// ScriptStruct  Engine.TextureLODGroup
// Struct Size::0x0064
struct FTextureLODGroup
{
    enum class TextureGroup                       group;                                                        // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    int32_t                                       LODBias;                                                      // 0x0008(0x0004)
    int32_t                                       LODBias;                                                      // 0x000C(0x0004)
    int32_t                                       LODBias;                                                      // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    int32_t                                       NumStreamedMips;                                              // 0x0018(0x0004)
    enum class TextureMipGenSettings              MipGenSettings;                                               // 0x001C(0x0001)
    char                                          pa_001D[0x0003]                                               // 0x001D(0x0003)
    int32_t                                       MinLODSize;                                                   // 0x0020(0x0004)
    int32_t                                       MaxLODSize;                                                   // 0x0024(0x0004)
    int32_t                                       MaxLODSize;                                                   // 0x0028(0x0004)
    int32_t                                       MaxLODSize;                                                   // 0x002C(0x0004)
    int32_t                                       MaxLODSize;                                                   // 0x0030(0x0004)
    int32_t                                       OptionalLODBias;                                              // 0x0034(0x0004)
    int32_t                                       OptionalMaxLODSize;                                           // 0x0038(0x0004)
    FName                                         MinMagFilter;                                                 // 0x003C(0x0008)
    FName                                         MipFilter;                                                    // 0x0044(0x0008)
    enum class ETextureMipLoadOptions             MipLoadOptions;                                               // 0x004C(0x0001)
    bool                                          HighPriorityLoad;                                             // 0x004D(0x0001)
    bool                                          DuplicateNonOptionalMips;                                     // 0x004E(0x0001)
    char                                          pa_004F[0x0001]                                               // 0x004F(0x0001)
    float                                         Downscale;                                                    // 0x0050(0x0004)
    enum class ETextureDownscaleOptions           DownscaleOptions;                                             // 0x0054(0x0001)
    char                                          pa_0055[0x0003]                                               // 0x0055(0x0003)
    int32_t                                       VirtualTextureTileCountBias;                                  // 0x0058(0x0004)
    int32_t                                       VirtualTextureTileSizeBias;                                   // 0x005C(0x0004)
    enum class ETextureLossyCompressionAmount     LossyCompressionAmount;                                       // 0x0060(0x0001)
    char                                          pa_0061[0x0003]                                               // 0x0061(0x0003)
};


// ScriptStruct  Engine.TTTrackBase
// Struct Size::0x0018
struct FTTTrackBase
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    FName                                         TrackName;                                                    // 0x0008(0x0008)
    bool                                          bIsExternalCurve;                                             // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
};


// ScriptStruct  Engine.TTTrackId
// Struct Size::0x0008
struct FTTTrackId
{
    int32_t                                       TrackType;                                                    // 0x0000(0x0004)
    int32_t                                       TrackIndex;                                                   // 0x0004(0x0004)
};


// ScriptStruct  Engine.TTEventTrack
// Struct Size::0x0028
struct FTTEventTrack : public FTTTrackBase
{
    FName                                         FunctionName;                                                 // 0x0018(0x0008)
    UCurveFloat*                                  CurveKeys;                                                    // 0x0020(0x0008)
};


// ScriptStruct  Engine.TTPropertyTrack
// Struct Size::0x0020
struct FTTPropertyTrack : public FTTTrackBase
{
    FName                                         PropertyName;                                                 // 0x0018(0x0008)
};


// ScriptStruct  Engine.TTFloatTrack
// Struct Size::0x0028
struct FTTFloatTrack : public FTTPropertyTrack
{
    UCurveFloat*                                  CurveFloat;                                                   // 0x0020(0x0008)
};


// ScriptStruct  Engine.TTVectorTrack
// Struct Size::0x0028
struct FTTVectorTrack : public FTTPropertyTrack
{
    UCurveVector*                                 CurveVector;                                                  // 0x0020(0x0008)
};


// ScriptStruct  Engine.TTLinearColorTrack
// Struct Size::0x0028
struct FTTLinearColorTrack : public FTTPropertyTrack
{
    UCurveLinearColor*                            CurveLinearColor;                                             // 0x0020(0x0008)
};


// ScriptStruct  Engine.HardwareCursorReference
// Struct Size::0x0018
struct FHardwareCursorReference
{
    FName                                         CursorPath;                                                   // 0x0000(0x0008)
    FVector2D                                     HotSpot;                                                      // 0x0008(0x0010)
};


// ScriptStruct  Engine.CanvasIcon
// Struct Size::0x0018
struct FCanvasIcon
{
    UTexture*                                     Texture;                                                      // 0x0000(0x0008)
    float                                         U;                                                            // 0x0008(0x0004)
    float                                         V;                                                            // 0x000C(0x0004)
    float                                         UL;                                                           // 0x0010(0x0004)
    float                                         VL;                                                           // 0x0014(0x0004)
};


// ScriptStruct  Engine.AutoCompleteNode
// Struct Size::0x0028
struct FAutoCompleteNode
{
    int32_t                                       IndexChar;                                                    // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    TArray<int32_t>                               AutoCompleteListIndices;                                      // 0x0008(0x0010)
    char                                          pa_0018[0x0010]                                               // 0x0018(0x0010)
};


// ScriptStruct  Engine.KeyBind
// Struct Size::0x0030
struct FKeyBind
{
    FKey                                          Key;                                                          // 0x0000(0x0018)
    FString                                       Command;                                                      // 0x0018(0x0010)
    char                                          Control;                                                      // 0x0028(0x0001)
    char                                          Shift;                                                        // 0x0028(0x0001)
    char                                          Alt;                                                          // 0x0028(0x0001)
    char                                          Cmd;                                                          // 0x0028(0x0001)
    char                                          bIgnoreCtrl;                                                  // 0x0028(0x0001)
    char                                          bIgnoreShift;                                                 // 0x0028(0x0001)
    char                                          bIgnoreAlt;                                                   // 0x0028(0x0001)
    char                                          bIgnoreCmd;                                                   // 0x0028(0x0001)
    char                                          bDisabled;                                                    // 0x0029(0x0001)
    char                                          pa_002A[0x0006]                                               // 0x002A(0x0006)
};


// ScriptStruct  Engine.InputAxisProperties
// Struct Size::0x0010
struct FInputAxisProperties
{
    float                                         DeadZone;                                                     // 0x0000(0x0004)
    float                                         Sensitivity;                                                  // 0x0004(0x0004)
    float                                         Exponent;                                                     // 0x0008(0x0004)
    char                                          bInvert;                                                      // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
};


// ScriptStruct  Engine.InputAxisConfigEntry
// Struct Size::0x0018
struct FInputAxisConfigEntry
{
    FName                                         AxisKeyName;                                                  // 0x0000(0x0008)
    FInputAxisProperties                          AxisProperties;                                               // 0x0008(0x0010)
};


// ScriptStruct  Engine.InputActionKeyMapping
// Struct Size::0x0028
struct FInputActionKeyMapping
{
    FName                                         ActionName;                                                   // 0x0000(0x0008)
    char                                          bShift;                                                       // 0x0008(0x0001)
    char                                          bCtrl;                                                        // 0x0008(0x0001)
    char                                          bAlt;                                                         // 0x0008(0x0001)
    char                                          bCmd;                                                         // 0x0008(0x0001)
    char                                          pa_0009[0x0007]                                               // 0x0009(0x0007)
    FKey                                          Key;                                                          // 0x0010(0x0018)
};


// ScriptStruct  Engine.InputAxisKeyMapping
// Struct Size::0x0028
struct FInputAxisKeyMapping
{
    FName                                         AxisName;                                                     // 0x0000(0x0008)
    float                                         Scale;                                                        // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FKey                                          Key;                                                          // 0x0010(0x0018)
};


// ScriptStruct  Engine.InputActionSpeechMapping
// Struct Size::0x0010
struct FInputActionSpeechMapping
{
    FName                                         ActionName;                                                   // 0x0000(0x0008)
    FName                                         SpeechKeyword;                                                // 0x0008(0x0008)
};


// ScriptStruct  Engine.VoiceSettings
// Struct Size::0x0018
struct FVoiceSettings
{
    USceneComponent*                              ComponentToAttachTo;                                          // 0x0000(0x0008)
    USoundAttenuation*                            AttenuationSettings;                                          // 0x0008(0x0008)
    USoundEffectSourcePresetChain*                SourceEffectChain;                                            // 0x0010(0x0008)
};


// ScriptStruct  Engine.VirtualTextureBuildSettings
// Struct Size::0x0008
struct FVirtualTextureBuildSettings
{
    int32_t                                       TileSize;                                                     // 0x0000(0x0004)
    int32_t                                       TileBorderSize;                                               // 0x0004(0x0004)
};


// ScriptStruct  Engine.VirtualTextureSpacePoolConfig
// Struct Size::0x0030
struct FVirtualTextureSpacePoolConfig
{
    int32_t                                       MinTileSize;                                                  // 0x0000(0x0004)
    int32_t                                       MaxTileSize;                                                  // 0x0004(0x0004)
    TArray<enum class EPixelFormat>               Formats;                                                      // 0x0008(0x0010)
    int32_t                                       SizeInMegabyte;                                               // 0x0018(0x0004)
    bool                                          bEnableResidencyMipMapBias;                                   // 0x001C(0x0001)
    bool                                          bAllowSizeScale;                                              // 0x001D(0x0001)
    char                                          pa_001E[0x0002]                                               // 0x001E(0x0002)
    uint32_t                                      ScalabilityGroup;                                             // 0x0020(0x0004)
    int32_t                                       MinScaledSizeInMegabyte;                                      // 0x0024(0x0004)
    int32_t                                       MaxScaledSizeInMegabyte;                                      // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
};


// ScriptStruct  Engine.LevelViewportInfo
// Struct Size::0x0038
struct FLevelViewportInfo
{
    FVector                                       CamPosition;                                                  // 0x0000(0x0018)
    FRotator                                      CamRotation;                                                  // 0x0018(0x0018)
    float                                         CamOrthoZoom;                                                 // 0x0030(0x0004)
    bool                                          CamUpdated;                                                   // 0x0034(0x0001)
    char                                          pa_0035[0x0003]                                               // 0x0035(0x0003)
};


// ScriptStruct  Engine.StartPhysicsTickFunction
// Struct Size::0x0030
struct FStartPhysicsTickFunction : public FTickFunction
{
    char                                          pa_0028[0x0008]                                               // 0x0028(0x0008)
};


// ScriptStruct  Engine.EndPhysicsTickFunction
// Struct Size::0x0030
struct FEndPhysicsTickFunction : public FTickFunction
{
    char                                          pa_0028[0x0008]                                               // 0x0028(0x0008)
};


// ScriptStruct  Engine.LevelCollection
// Struct Size::0x0078
struct FLevelCollection
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    AGameStateBase*                               GameState;                                                    // 0x0008(0x0008)
    UNetDriver*                                   NetDriver;                                                    // 0x0010(0x0008)
    UDemoNetDriver*                               DemoNetDriver;                                                // 0x0018(0x0008)
    ULevel*                                       PersistentLevel;                                              // 0x0020(0x0008)
    TSet<ULevel*>                                 Levels;                                                       // 0x0028(0x0050)
};


// ScriptStruct  Engine.StreamingLevelsToConsider
// Struct Size::0x0028
struct FStreamingLevelsToConsider
{
    TArray<ULevelStreaming*>                      StreamingLevels;                                              // 0x0000(0x0010)
    char                                          pa_0010[0x0018]                                               // 0x0010(0x0018)
};


// ScriptStruct  Engine.ActorDesc
// Struct Size::0x0098
struct FActorDesc
{
    FGuid                                         Guid;                                                         // 0x0000(0x0010)
    FSoftObjectPath                               Class;                                                        // 0x0010(0x0020)
    FName                                         Name;                                                         // 0x0030(0x0008)
    FName                                         Label;                                                        // 0x0038(0x0008)
    FBox                                          Bounds;                                                       // 0x0040(0x0038)
    FName                                         RuntimeGrid;                                                  // 0x0078(0x0008)
    bool                                          bIsSpatiallyLoaded;                                           // 0x0080(0x0001)
    bool                                          bActorIsEditorOnly;                                           // 0x0081(0x0001)
    char                                          pa_0082[0x0002]                                               // 0x0082(0x0002)
    FName                                         ActorPackage;                                                 // 0x0084(0x0008)
    FName                                         ActorPath;                                                    // 0x008C(0x0008)
    char                                          pa_0094[0x0004]                                               // 0x0094(0x0004)
};


// ScriptStruct  Engine.ActorPlacementDataLayers
// Struct Size::0x0018
struct FActorPlacementDataLayers
{
    TArray<FName>                                 DataLayerInstanceNames;                                       // 0x0000(0x0010)
    int32_t                                       ContextID;                                                    // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  Engine.WorldPartitionPerWorldSettings
// Struct Size::0x0001
struct FWorldPartitionPerWorldSettings
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  Engine.WorldPartitionRuntimeCellObjectMapping
// Struct Size::0x0001
struct FWorldPartitionRuntimeCellObjectMapping
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  Engine.WorldPartitionRuntimeCellDebugInfo
// Struct Size::0x0030
struct FWorldPartitionRuntimeCellDebugInfo
{
    FString                                       Name;                                                         // 0x0000(0x0010)
    FName                                         GridName;                                                     // 0x0010(0x0008)
    int64_t                                       CoordX;                                                       // 0x0018(0x0008)
    int64_t                                       CoordY;                                                       // 0x0020(0x0008)
    int64_t                                       CoordZ;                                                       // 0x0028(0x0008)
};


// ScriptStruct  Engine.SpatialHashStreamingGridLayerCell
// Struct Size::0x0010
struct FSpatialHashStreamingGridLayerCell
{
    TArray<UWorldPartitionRuntimeSpatialHashCell*>GridCells;                                                    // 0x0000(0x0010)
};


// ScriptStruct  Engine.SpatialHashStreamingGridLevel
// Struct Size::0x0060
struct FSpatialHashStreamingGridLevel
{
    TArray<FSpatialHashStreamingGridLayerCell>    LayerCells;                                                   // 0x0000(0x0010)
    TMap<int64_t,int32_t>                         LayerCellsMapping;                                            // 0x0010(0x0050)
};


// ScriptStruct  Engine.SpatialHashStreamingGrid
// Struct Size::0x00A8
struct FSpatialHashStreamingGrid
{
    FName                                         GridName;                                                     // 0x0000(0x0008)
    FVector                                       Origin;                                                       // 0x0008(0x0018)
    int32_t                                       CellSize;                                                     // 0x0020(0x0004)
    float                                         LoadingRange;                                                 // 0x0024(0x0004)
    bool                                          bBlockOnSlowStreaming;                                        // 0x0028(0x0001)
    char                                          pa_0029[0x0003]                                               // 0x0029(0x0003)
    FLinearColor                                  DebugColor;                                                   // 0x002C(0x0010)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
    TArray<FSpatialHashStreamingGridLevel>        GridLevels;                                                   // 0x0040(0x0010)
    FBox                                          WorldBounds;                                                  // 0x0050(0x0038)
    bool                                          bClientOnlyVisible;                                           // 0x0088(0x0001)
    char                                          pa_0089[0x0007]                                               // 0x0089(0x0007)
    UHLODLayer*                                   HLODLayer;                                                    // 0x0090(0x0008)
    char                                          pa_0098[0x0010]                                               // 0x0098(0x0010)
};


// ScriptStruct  Engine.SpatialHashRuntimeGrid
// Struct Size::0x0001
struct FSpatialHashRuntimeGrid
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  Engine.WorldPartitionRuntimeSpatialHashGridPreviewer
// Struct Size::0x0001
struct FWorldPartitionRuntimeSpatialHashGridPreviewer
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  Serialization.StructSerializerNumericTestStruct
// Struct Size::0x0030
struct FStructSerializerNumericTestStruct
{
    int8_t                                        Int8;                                                         // 0x0000(0x0001)
    char                                          pa_0001[0x0001]                                               // 0x0001(0x0001)
    int16_t                                       Int16;                                                        // 0x0002(0x0002)
    int32_t                                       int32;                                                        // 0x0004(0x0004)
    int64_t                                       Int64;                                                        // 0x0008(0x0008)
    char                                          uint8;                                                        // 0x0010(0x0001)
    char                                          pa_0011[0x0001]                                               // 0x0011(0x0001)
    uint16_t                                      uint16;                                                       // 0x0012(0x0002)
    uint32_t                                      uint32;                                                       // 0x0014(0x0004)
    uint64_t                                      UInt64;                                                       // 0x0018(0x0008)
    float                                         float;                                                        // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
    double                                        Double;                                                       // 0x0028(0x0008)
};


// ScriptStruct  Serialization.StructSerializerBooleanTestStruct
// Struct Size::0x0003
struct FStructSerializerBooleanTestStruct
{
    bool                                          BoolFalse;                                                    // 0x0000(0x0001)
    bool                                          BoolTrue;                                                     // 0x0001(0x0001)
    char                                          Bitfield0;                                                    // 0x0002(0x0001)
    char                                          Bitfield1;                                                    // 0x0002(0x0001)
    char                                          Bitfield2Set;                                                 // 0x0002(0x0001)
    char                                          Bitfield3;                                                    // 0x0002(0x0001)
    char                                          Bitfield4Set;                                                 // 0x0002(0x0001)
    char                                          Bitfield5Set;                                                 // 0x0002(0x0001)
    char                                          Bitfield6;                                                    // 0x0002(0x0001)
    char                                          Bitfield7Set;                                                 // 0x0002(0x0001)
};


// ScriptStruct  Serialization.StructSerializerObjectTestStruct
// Struct Size::0x00D0
struct FStructSerializerObjectTestStruct
{
    UClass*                                       RawClass;                                                     // 0x0000(0x0008)
    UClass*                                       WrappedClass;                                                 // 0x0008(0x0008)
    UMetaData*                                    SubClass;                                                     // 0x0010(0x0008)
    TSoftClassPtr<UObject>                        SoftClass;                                                    // 0x0018(0x0030)
    UObject*                                      RawObject;                                                    // 0x0048(0x0008)
    UObject*                                      WrappedObject;                                                // 0x0050(0x0008)
    TWeakObjectPtr<UMetaData>                     WeakObject;                                                   // 0x0058(0x0008)
    TSoftObjectPtr<UMetaData>                     SoftObject;                                                   // 0x0060(0x0030)
    FSoftClassPath                                ClassPath;                                                    // 0x0090(0x0020)
    FSoftObjectPath                               ObjectPath;                                                   // 0x00B0(0x0020)
};


// ScriptStruct  Serialization.StructSerializerBuiltinTestStruct
// Struct Size::0x00D0
struct FStructSerializerBuiltinTestStruct
{
    FGuid                                         Guid;                                                         // 0x0000(0x0010)
    FName                                         Name;                                                         // 0x0010(0x0008)
    FString                                       String;                                                       // 0x0018(0x0010)
    FText                                         Text;                                                         // 0x0028(0x0018)
    FVector                                       Vector;                                                       // 0x0040(0x0018)
    char                                          pa_0058[0x0008]                                               // 0x0058(0x0008)
    FVector4                                      Vector4;                                                      // 0x0060(0x0020)
    FRotator                                      Rotator;                                                      // 0x0080(0x0018)
    char                                          pa_0098[0x0008]                                               // 0x0098(0x0008)
    FQuat                                         Quat;                                                         // 0x00A0(0x0020)
    FColor                                        Color;                                                        // 0x00C0(0x0004)
    char                                          pa_00C4[0x000C]                                               // 0x00C4(0x000C)
};


// ScriptStruct  Serialization.StructSerializerLWCTypesTest
// Struct Size::0x0360
struct FStructSerializerLWCTypesTest
{
    FVector                                       Vector;                                                       // 0x0000(0x0018)
    FVector2D                                     Vector2D;                                                     // 0x0018(0x0010)
    char                                          pa_0028[0x0008]                                               // 0x0028(0x0008)
    FVector4                                      Vector4;                                                      // 0x0030(0x0020)
    FMatrix                                       Matrix;                                                       // 0x0050(0x0080)
    FPlane                                        Plane;                                                        // 0x00D0(0x0020)
    FQuat                                         Quat;                                                         // 0x00F0(0x0020)
    FRotator                                      Rotator;                                                      // 0x0110(0x0018)
    char                                          pa_0128[0x0008]                                               // 0x0128(0x0008)
    FTransform                                    Transform;                                                    // 0x0130(0x0060)
    FBox                                          Box;                                                          // 0x0190(0x0038)
    FBox2D                                        Box2D;                                                        // 0x01C8(0x0028)
    FBoxSphereBounds                              BoxSphereBounds;                                              // 0x01F0(0x0038)
    FOrientedBox                                  OrientedBox;                                                  // 0x0228(0x0078)
    float                                         float;                                                        // 0x02A0(0x0004)
    char                                          pa_02A4[0x0004]                                               // 0x02A4(0x0004)
    double                                        Double;                                                       // 0x02A8(0x0008)
    TArray<FVector>                               VectorArray;                                                  // 0x02B0(0x0010)
    TMap<FString,FVector>                         StrToVec;                                                     // 0x02C0(0x0050)
    TSet<FVector>                                 VectorSet;                                                    // 0x0310(0x0050)
};


// ScriptStruct  Serialization.OrientedBoxFloat
// Struct Size::0x003C
struct FOrientedBoxFloat
{
    FVector3f                                     Center;                                                       // 0x0000(0x000C)
    FVector3f                                     AxisX;                                                        // 0x000C(0x000C)
    FVector3f                                     AxisY;                                                        // 0x0018(0x000C)
    FVector3f                                     AxisZ;                                                        // 0x0024(0x000C)
    float                                         ExtentX;                                                      // 0x0030(0x0004)
    float                                         ExtentY;                                                      // 0x0034(0x0004)
    float                                         ExtentZ;                                                      // 0x0038(0x0004)
};


// ScriptStruct  Serialization.StructSerializerNonLWCTypesTest
// Struct Size::0x0220
struct FStructSerializerNonLWCTypesTest
{
    FVector3f                                     Vector;                                                       // 0x0000(0x000C)
    FVector2f                                     Vector2D;                                                     // 0x000C(0x0008)
    char                                          pa_0014[0x000C]                                               // 0x0014(0x000C)
    FVector4f                                     Vector4;                                                      // 0x0020(0x0010)
    FMatrix44f                                    Matrix;                                                       // 0x0030(0x0040)
    FPlane4f                                      Plane;                                                        // 0x0070(0x0010)
    FQuat4f                                       Quat;                                                         // 0x0080(0x0010)
    FRotator3f                                    Rotator;                                                      // 0x0090(0x000C)
    char                                          pa_009C[0x0004]                                               // 0x009C(0x0004)
    FTransform3f                                  Transform;                                                    // 0x00A0(0x0030)
    FBox3f                                        Box;                                                          // 0x00D0(0x001C)
    FBox2f                                        Box2D;                                                        // 0x00EC(0x0014)
    FBoxSphereBounds3f                            BoxSphereBounds;                                              // 0x0100(0x001C)
    FOrientedBoxFloat                             OrientedBox;                                                  // 0x011C(0x003C)
    float                                         float;                                                        // 0x0158(0x0004)
    char                                          pa_015C[0x0004]                                               // 0x015C(0x0004)
    double                                        Double;                                                       // 0x0160(0x0008)
    TArray<FVector3f>                             VectorArray;                                                  // 0x0168(0x0010)
    TMap<FString,FVector3f>                       StrToVec;                                                     // 0x0178(0x0050)
    TSet<FVector3f>                               VectorSet;                                                    // 0x01C8(0x0050)
    char                                          pa_0218[0x0008]                                               // 0x0218(0x0008)
};


// ScriptStruct  Serialization.StructSerializerByteArray
// Struct Size::0x0038
struct FStructSerializerByteArray
{
    int32_t                                       Dummy1;                                                       // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    TArray<char>                                  ByteArray;                                                    // 0x0008(0x0010)
    int32_t                                       Dummy2;                                                       // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    TArray<int8_t>                                Int8Array;                                                    // 0x0020(0x0010)
    int32_t                                       Dummy3;                                                       // 0x0030(0x0004)
    char                                          pa_0034[0x0004]                                               // 0x0034(0x0004)
};


// ScriptStruct  Serialization.StructSerializerArrayTestStruct
// Struct Size::0x0060
struct FStructSerializerArrayTestStruct
{
    TArray<int32_t>                               Int32Array;                                                   // 0x0000(0x0010)
    TArray<char>                                  ByteArray;                                                    // 0x0010(0x0010)
    int32_t                                       StaticSingleElement;                                          // 0x0020(0x0004)
    int32_t                                       StaticInt32Array;                                             // 0x0024(0x0004)
    char                                          pa_0028[0x0008]                                               // 0x0028(0x0008)
    float                                         StaticFloatArray;                                             // 0x0030(0x0004)
    char                                          pa_0034[0x000C]                                               // 0x0034(0x000C)
    TArray<FVector>                               VectorArray;                                                  // 0x0040(0x0010)
    TArray<FStructSerializerBuiltinTestStruct>    StructArray;                                                  // 0x0050(0x0010)
};


// ScriptStruct  Serialization.StructSerializerMapTestStruct
// Struct Size::0x0140
struct FStructSerializerMapTestStruct
{
    TMap<int32_t,FString>                         IntToStr;                                                     // 0x0000(0x0050)
    TMap<FString,FString>                         StrToStr;                                                     // 0x0050(0x0050)
    TMap<FString,FVector>                         StrToVec;                                                     // 0x00A0(0x0050)
    TMap<FString,FStructSerializerBuiltinTestStruct>StrToStruct;                                                // 0x00F0(0x0050)
};


// ScriptStruct  Serialization.StructSerializerSetTestStruct
// Struct Size::0x0140
struct FStructSerializerSetTestStruct
{
    TSet<FString>                                 StrSet;                                                       // 0x0000(0x0050)
    TSet<int32_t>                                 IntSet;                                                       // 0x0050(0x0050)
    TSet<FName>                                   NameSet;                                                      // 0x00A0(0x0050)
    TSet<FStructSerializerBuiltinTestStruct>      StructSet;                                                    // 0x00F0(0x0050)
};


// ScriptStruct  Serialization.StructSerializerTestStruct
// Struct Size::0x0820
struct FStructSerializerTestStruct
{
    FStructSerializerNumericTestStruct            Numerics;                                                     // 0x0000(0x0030)
    FStructSerializerBooleanTestStruct            Booleans;                                                     // 0x0030(0x0003)
    char                                          pa_0033[0x0005]                                               // 0x0033(0x0005)
    FStructSerializerObjectTestStruct             Objects;                                                      // 0x0038(0x00D0)
    char                                          pa_0108[0x0008]                                               // 0x0108(0x0008)
    FStructSerializerBuiltinTestStruct            Builtins;                                                     // 0x0110(0x00D0)
    FStructSerializerArrayTestStruct              Arrays;                                                       // 0x01E0(0x0060)
    FStructSerializerMapTestStruct                Maps;                                                         // 0x0240(0x0140)
    FStructSerializerSetTestStruct                Sets;                                                         // 0x0380(0x0140)
    FStructSerializerLWCTypesTest                 LWCTypes;                                                     // 0x04C0(0x0360)
};


// ScriptStruct  Overlay.OverlayItem
// Struct Size::0x0030
struct FOverlayItem
{
    FTimespan                                     StartTime;                                                    // 0x0000(0x0008)
    FTimespan                                     EndTime;                                                      // 0x0008(0x0008)
    FString                                       Text;                                                         // 0x0010(0x0010)
    FVector2D                                     position;                                                     // 0x0020(0x0010)
};


// ScriptStruct  ClothingSystemRuntimeCommon.ClothConstraintSetup
// Struct Size::0x0010
struct FClothConstraintSetup
{
    float                                         Stiffness;                                                    // 0x0000(0x0004)
    float                                         StiffnessMultiplier;                                          // 0x0004(0x0004)
    float                                         StretchLimit;                                                 // 0x0008(0x0004)
    float                                         CompressionLimit;                                             // 0x000C(0x0004)
};


// ScriptStruct  ClothingSystemRuntimeCommon.ClothConfig
// Struct Size::0x0130
struct FClothConfig
{
    enum class EClothingWindMethod                WindMethod;                                                   // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FClothConstraintSetup                         VerticalConstraintConfig;                                     // 0x0004(0x0010)
    FClothConstraintSetup                         HorizontalConstraintConfig;                                   // 0x0014(0x0010)
    FClothConstraintSetup                         BendConstraintConfig;                                         // 0x0024(0x0010)
    FClothConstraintSetup                         ShearConstraintConfig;                                        // 0x0034(0x0010)
    float                                         SelfCollisionRadius;                                          // 0x0044(0x0004)
    float                                         SelfCollisionStiffness;                                       // 0x0048(0x0004)
    float                                         SelfCollisionCullScale;                                       // 0x004C(0x0004)
    FVector                                       Damping;                                                      // 0x0050(0x0018)
    float                                         Friction;                                                     // 0x0068(0x0004)
    float                                         WindDragCoefficient;                                          // 0x006C(0x0004)
    float                                         WindLiftCoefficient;                                          // 0x0070(0x0004)
    char                                          pa_0074[0x0004]                                               // 0x0074(0x0004)
    FVector                                       LinearDrag;                                                   // 0x0078(0x0018)
    FVector                                       AngularDrag;                                                  // 0x0090(0x0018)
    FVector                                       LinearInertiaScale;                                           // 0x00A8(0x0018)
    FVector                                       AngularInertiaScale;                                          // 0x00C0(0x0018)
    FVector                                       CentrifugalInertiaScale;                                      // 0x00D8(0x0018)
    float                                         SolverFrequency;                                              // 0x00F0(0x0004)
    float                                         StiffnessFrequency;                                           // 0x00F4(0x0004)
    float                                         GravityScale;                                                 // 0x00F8(0x0004)
    char                                          pa_00FC[0x0004]                                               // 0x00FC(0x0004)
    FVector                                       GravityOverride;                                              // 0x0100(0x0018)
    bool                                          bUseGravityOverride;                                          // 0x0118(0x0001)
    char                                          pa_0119[0x0003]                                               // 0x0119(0x0003)
    float                                         TetherStiffness;                                              // 0x011C(0x0004)
    float                                         TetherLimit;                                                  // 0x0120(0x0004)
    float                                         CollisionThickness;                                           // 0x0124(0x0004)
    float                                         AnimDriveSpringStiffness;                                     // 0x0128(0x0004)
    float                                         AnimDriveDamperStiffness;                                     // 0x012C(0x0004)
};


// ScriptStruct  ClothingSystemRuntimeCommon.PointWeightMap
// Struct Size::0x0010
struct FPointWeightMap
{
    TArray<float>                                 Values;                                                       // 0x0000(0x0010)
};


// ScriptStruct  ClothingSystemRuntimeCommon.ClothLODDataCommon
// Struct Size::0x0148
struct FClothLODDataCommon
{
    FClothPhysicalMeshData                        PhysicalMeshData;                                             // 0x0000(0x00D8)
    FClothCollisionData                           CollisionData;                                                // 0x00D8(0x0040)
    bool                                          bUseMultipleInfluences;                                       // 0x0118(0x0001)
    char                                          pa_0119[0x0003]                                               // 0x0119(0x0003)
    float                                         SkinningKernelRadius;                                         // 0x011C(0x0004)
    bool                                          bSmoothTransition;                                            // 0x0120(0x0001)
    char                                          pa_0121[0x0027]                                               // 0x0121(0x0027)
};


// ScriptStruct  ClothingSystemRuntimeCommon.ClothPhysicalMeshData
// Struct Size::0x00D8
struct FClothPhysicalMeshData
{
    TArray<FVector3f>                             Vertices;                                                     // 0x0000(0x0010)
    TArray<FVector3f>                             Normals;                                                      // 0x0010(0x0010)
    TArray<uint32_t>                              Indices;                                                      // 0x0020(0x0010)
    TMap<uint32_t,FPointWeightMap>                WeightMaps;                                                   // 0x0030(0x0050)
    TArray<float>                                 InverseMasses;                                                // 0x0080(0x0010)
    TArray<FClothVertBoneData>                    BoneData;                                                     // 0x0090(0x0010)
    TArray<uint32_t>                              SelfCollisionIndices;                                         // 0x00A0(0x0010)
    FClothTetherData                              EuclideanTethers;                                             // 0x00B0(0x0010)
    FClothTetherData                              GeodesicTethers;                                              // 0x00C0(0x0010)
    int32_t                                       MaxBoneWeights;                                               // 0x00D0(0x0004)
    int32_t                                       NumFixedVerts;                                                // 0x00D4(0x0004)
};


// ScriptStruct  ClothingSystemRuntimeCommon.ClothTetherData
// Struct Size::0x0010
struct FClothTetherData
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
};


// ScriptStruct  ClothingSystemRuntimeCommon.ClothParameterMask
// Struct Size::0x0030
struct FClothParameterMask
{
    FName                                         MaskName;                                                     // 0x0000(0x0008)
    enum class EWeightMapTargetCommon             CurrentTarget;                                                // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
    float                                         MaxValue;                                                     // 0x000C(0x0004)
    float                                         MinValue;                                                     // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    TArray<float>                                 Values;                                                       // 0x0018(0x0010)
    bool                                          bEnabled;                                                     // 0x0028(0x0001)
    char                                          pa_0029[0x0007]                                               // 0x0029(0x0007)
};


// ScriptStruct  ClothingSystemRuntimeNv.ClothConstraintSetupNv
// Struct Size::0x0010
struct FClothConstraintSetupNv
{
    float                                         Stiffness;                                                    // 0x0000(0x0004)
    float                                         StiffnessMultiplier;                                          // 0x0004(0x0004)
    float                                         StretchLimit;                                                 // 0x0008(0x0004)
    float                                         CompressionLimit;                                             // 0x000C(0x0004)
};


// ScriptStruct  SessionMessages.SessionServicePing
// Struct Size::0x0010
struct FSessionServicePing
{
    FString                                       UserName;                                                     // 0x0000(0x0010)
};


// ScriptStruct  SessionMessages.SessionServicePong
// Struct Size::0x0090
struct FSessionServicePong
{
    bool                                          Authorized;                                                   // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    FString                                       BuildDate;                                                    // 0x0008(0x0010)
    FString                                       DeviceName;                                                   // 0x0018(0x0010)
    FGuid                                         InstanceId;                                                   // 0x0028(0x0010)
    FString                                       InstanceName;                                                 // 0x0038(0x0010)
    FString                                       PlatformName;                                                 // 0x0048(0x0010)
    FGuid                                         SessionId;                                                    // 0x0058(0x0010)
    FString                                       SessionName;                                                  // 0x0068(0x0010)
    FString                                       SessionOwner;                                                 // 0x0078(0x0010)
    bool                                          Standalone;                                                   // 0x0088(0x0001)
    char                                          pa_0089[0x0007]                                               // 0x0089(0x0007)
};


// ScriptStruct  SessionMessages.SessionServiceLog
// Struct Size::0x0038
struct FSessionServiceLog
{
    FName                                         Category;                                                     // 0x0000(0x0008)
    FString                                       Data;                                                         // 0x0008(0x0010)
    FGuid                                         InstanceId;                                                   // 0x0018(0x0010)
    double                                        TimeSeconds;                                                  // 0x0028(0x0008)
    char                                          Verbosity;                                                    // 0x0030(0x0001)
    char                                          pa_0031[0x0007]                                               // 0x0031(0x0007)
};


// ScriptStruct  SessionMessages.SessionServiceLogSubscribe
// Struct Size::0x0001
struct FSessionServiceLogSubscribe
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  SessionMessages.SessionServiceLogUnsubscribe
// Struct Size::0x0001
struct FSessionServiceLogUnsubscribe
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  NavigationSystem.NavCollisionCylinder
// Struct Size::0x0020
struct FNavCollisionCylinder
{
    FVector                                       Offset;                                                       // 0x0000(0x0018)
    float                                         Radius;                                                       // 0x0018(0x0004)
    float                                         Height;                                                       // 0x001C(0x0004)
};


// ScriptStruct  NavigationSystem.NavCollisionBox
// Struct Size::0x0030
struct FNavCollisionBox
{
    FVector                                       Offset;                                                       // 0x0000(0x0018)
    FVector                                       Extent;                                                       // 0x0018(0x0018)
};


// ScriptStruct  NavigationSystem.NavigationFilterArea
// Struct Size::0x0018
struct FNavigationFilterArea
{
    UNavArea*                                     AreaClass;                                                    // 0x0000(0x0008)
    float                                         TravelCostOverride;                                           // 0x0008(0x0004)
    float                                         EnteringCostOverride;                                         // 0x000C(0x0004)
    char                                          bIsExcluded;                                                  // 0x0010(0x0001)
    char                                          bOverrideTravelCost;                                          // 0x0010(0x0001)
    char                                          bOverrideEnteringCost;                                        // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
};


// ScriptStruct  NavigationSystem.NavigationFilterFlags
// Struct Size::0x0004
struct FNavigationFilterFlags
{
    char                                          bNavFlag0;                                                    // 0x0000(0x0001)
    char                                          bNavFlag1;                                                    // 0x0000(0x0001)
    char                                          bNavFlag2;                                                    // 0x0000(0x0001)
    char                                          bNavFlag3;                                                    // 0x0000(0x0001)
    char                                          bNavFlag4;                                                    // 0x0000(0x0001)
    char                                          bNavFlag5;                                                    // 0x0000(0x0001)
    char                                          bNavFlag6;                                                    // 0x0000(0x0001)
    char                                          bNavFlag7;                                                    // 0x0000(0x0001)
    char                                          bNavFlag8;                                                    // 0x0001(0x0001)
    char                                          bNavFlag9;                                                    // 0x0001(0x0001)
    char                                          bNavFlag10;                                                   // 0x0001(0x0001)
    char                                          bNavFlag11;                                                   // 0x0001(0x0001)
    char                                          bNavFlag12;                                                   // 0x0001(0x0001)
    char                                          bNavFlag13;                                                   // 0x0001(0x0001)
    char                                          bNavFlag14;                                                   // 0x0001(0x0001)
    char                                          bNavFlag15;                                                   // 0x0001(0x0001)
    char                                          pa_0002[0x0002]                                               // 0x0002(0x0002)
};


// ScriptStruct  NavigationSystem.NavGraphEdge
// Struct Size::0x0018
struct FNavGraphEdge
{
    char                                          pa_0000[0x0018]                                               // 0x0000(0x0018)
};


// ScriptStruct  NavigationSystem.NavGraphNode
// Struct Size::0x0018
struct FNavGraphNode
{
    UObject*                                      Owner;                                                        // 0x0000(0x0008)
    char                                          pa_0008[0x0010]                                               // 0x0008(0x0010)
};


// ScriptStruct  NavigationSystem.SupportedAreaData
// Struct Size::0x0020
struct FSupportedAreaData
{
    FString                                       AreaClassName;                                                // 0x0000(0x0010)
    int32_t                                       AreaId;                                                       // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    UClass*                                       AreaClass;                                                    // 0x0018(0x0008)
};


// ScriptStruct  NavigationSystem.NavLinkCustomInstanceData
// Struct Size::0x0070
struct FNavLinkCustomInstanceData : public FActorComponentInstanceData
{
    uint32_t                                      NavLinkUserId;                                                // 0x0068(0x0004)
    char                                          pa_006C[0x0004]                                               // 0x006C(0x0004)
};


// ScriptStruct  NavigationSystem.RecastNavMeshGenerationProperties
// Struct Size::0x0040
struct FRecastNavMeshGenerationProperties
{
    int32_t                                       TilePoolSize;                                                 // 0x0000(0x0004)
    float                                         TileSizeUU;                                                   // 0x0004(0x0004)
    float                                         CellSize;                                                     // 0x0008(0x0004)
    float                                         CellHeight;                                                   // 0x000C(0x0004)
    float                                         AgentRadius;                                                  // 0x0010(0x0004)
    float                                         AgentHeight;                                                  // 0x0014(0x0004)
    float                                         AgentMaxSlope;                                                // 0x0018(0x0004)
    float                                         AgentMaxStepHeight;                                           // 0x001C(0x0004)
    float                                         MinRegionArea;                                                // 0x0020(0x0004)
    float                                         MergeRegionSize;                                              // 0x0024(0x0004)
    float                                         MaxSimplificationError;                                       // 0x0028(0x0004)
    int32_t                                       TileNumberHardLimit;                                          // 0x002C(0x0004)
    enum class ERecastPartitioning                RegionPartitioning;                                           // 0x0030(0x0001)
    enum class ERecastPartitioning                LayerPartitioning;                                            // 0x0031(0x0001)
    char                                          pa_0032[0x0002]                                               // 0x0032(0x0002)
    int32_t                                       RegionChunkSplits;                                            // 0x0034(0x0004)
    int32_t                                       LayerChunkSplits;                                             // 0x0038(0x0004)
    char                                          bSortNavigationAreasByCost;                                   // 0x003C(0x0001)
    char                                          bPerformVoxelFiltering;                                       // 0x003C(0x0001)
    char                                          bMarkLowHeightAreas;                                          // 0x003C(0x0001)
    char                                          bUseExtraTopCellWhenMarkingAreas;                             // 0x003C(0x0001)
    char                                          bFilterLowSpanSequences;                                      // 0x003C(0x0001)
    char                                          bFilterLowSpanFromTileCache;                                  // 0x003C(0x0001)
    char                                          bFixedTilePoolSize;                                           // 0x003C(0x0001)
    char                                          bIsWorldPartitioned;                                          // 0x003C(0x0001)
    char                                          pa_003D[0x0003]                                               // 0x003D(0x0003)
};


// ScriptStruct  NavigationSystem.RecastNavMeshTileGenerationDebug
// Struct Size::0x0014
struct FRecastNavMeshTileGenerationDebug
{
    char                                          bEnabled;                                                     // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FIntVector                                    TileCoordinate;                                               // 0x0004(0x000C)
    char                                          bHeightfieldSolidFromRasterization;                           // 0x0010(0x0001)
    char                                          bHeightfieldSolidPostInclusionBoundsFiltering;                // 0x0010(0x0001)
    char                                          bHeightfieldSolidPostHeightFiltering;                         // 0x0010(0x0001)
    char                                          bCompactHeightfield;                                          // 0x0010(0x0001)
    char                                          bCompactHeightfieldEroded;                                    // 0x0010(0x0001)
    char                                          bCompactHeightfieldRegions;                                   // 0x0010(0x0001)
    char                                          bCompactHeightfieldDistances;                                 // 0x0010(0x0001)
    char                                          bTileCacheLayerAreas;                                         // 0x0010(0x0001)
    char                                          bTileCacheLayerRegions;                                       // 0x0011(0x0001)
    char                                          bTileCacheContours;                                           // 0x0011(0x0001)
    char                                          bTileCachePolyMesh;                                           // 0x0011(0x0001)
    char                                          bTileCacheDetailMesh;                                         // 0x0011(0x0001)
    char                                          pa_0012[0x0002]                                               // 0x0012(0x0002)
};


// ScriptStruct  AIModule.AIMoveRequest
// Struct Size::0x0048
struct FAIMoveRequest
{
    TWeakObjectPtr<AActor>                        GoalActor;                                                    // 0x0000(0x0008)
    char                                          pa_0008[0x0040]                                               // 0x0008(0x0040)
};


// ScriptStruct  AIModule.IntervalCountdown
// Struct Size::0x0008
struct FIntervalCountdown
{
    float                                         Interval;                                                     // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
};


// ScriptStruct  AIModule.EnvNamedValue
// Struct Size::0x0010
struct FEnvNamedValue
{
    FName                                         ParamName;                                                    // 0x0000(0x0008)
    enum class EAIParamType                       ParamType;                                                    // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
    float                                         Value;                                                        // 0x000C(0x0004)
};


// ScriptStruct  AIModule.EnvDirection
// Struct Size::0x0020
struct FEnvDirection
{
    UEnvQueryContext*                             LineFrom;                                                     // 0x0000(0x0008)
    UEnvQueryContext*                             LineTo;                                                       // 0x0008(0x0008)
    UEnvQueryContext*                             Rotation;                                                     // 0x0010(0x0008)
    enum class EEnvDirection                      DirMode;                                                      // 0x0018(0x0001)
    char                                          pa_0019[0x0007]                                               // 0x0019(0x0007)
};


// ScriptStruct  AIModule.EnvTraceData
// Struct Size::0x0040
struct FEnvTraceData
{
    int32_t                                       VersionNum;                                                   // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    UNavigationQueryFilter*                       NavigationFilter;                                             // 0x0008(0x0008)
    float                                         ProjectDown;                                                  // 0x0010(0x0004)
    float                                         ProjectUp;                                                    // 0x0014(0x0004)
    float                                         ExtentX;                                                      // 0x0018(0x0004)
    float                                         ExtentY;                                                      // 0x001C(0x0004)
    float                                         ExtentZ;                                                      // 0x0020(0x0004)
    float                                         PostProjectionVerticalOffset;                                 // 0x0024(0x0004)
    enum class ETraceTypeQuery                    TraceChannel;                                                 // 0x0028(0x0001)
    enum class ECollisionChannel                  SerializedChannel;                                            // 0x0029(0x0001)
    char                                          pa_002A[0x0002]                                               // 0x002A(0x0002)
    FName                                         TraceProfileName;                                             // 0x002C(0x0008)
    enum class EEnvTraceShape                     TraceShape;                                                   // 0x0034(0x0001)
    enum class EEnvQueryTrace                     TraceMode;                                                    // 0x0035(0x0001)
    char                                          pa_0036[0x0002]                                               // 0x0036(0x0002)
    char                                          bTraceComplex;                                                // 0x0038(0x0001)
    char                                          bOnlyBlockingHits;                                            // 0x0038(0x0001)
    char                                          bCanTraceOnNavMesh;                                           // 0x0038(0x0001)
    char                                          bCanTraceOnGeometry;                                          // 0x0038(0x0001)
    char                                          bCanDisableTrace;                                             // 0x0038(0x0001)
    char                                          bCanProjectDown;                                              // 0x0038(0x0001)
    char                                          pa_0039[0x0007]                                               // 0x0039(0x0007)
};


// ScriptStruct  AIModule.EnvOverlapData
// Struct Size::0x0030
struct FEnvOverlapData
{
    float                                         ExtentX;                                                      // 0x0000(0x0004)
    float                                         ExtentY;                                                      // 0x0004(0x0004)
    float                                         ExtentZ;                                                      // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FVector                                       ShapeOffset;                                                  // 0x0010(0x0018)
    enum class ECollisionChannel                  OverlapChannel;                                               // 0x0028(0x0001)
    enum class EEnvOverlapShape                   OverlapShape;                                                 // 0x0029(0x0001)
    char                                          pa_002A[0x0002]                                               // 0x002A(0x0002)
    char                                          bOnlyBlockingHits;                                            // 0x002C(0x0001)
    char                                          bOverlapComplex;                                              // 0x002C(0x0001)
    char                                          bSkipOverlapQuerier;                                          // 0x002C(0x0001)
    char                                          pa_002D[0x0003]                                               // 0x002D(0x0003)
};


// ScriptStruct  AIModule.EnvQueryResult
// Struct Size::0x0040
struct FEnvQueryResult
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
    UEnvQueryItemType*                            ItemType;                                                     // 0x0010(0x0008)
    char                                          pa_0018[0x0014]                                               // 0x0018(0x0014)
    int32_t                                       OptionIndex;                                                  // 0x002C(0x0004)
    int32_t                                       QueryID;                                                      // 0x0030(0x0004)
    char                                          pa_0034[0x000C]                                               // 0x0034(0x000C)
};


// ScriptStruct  AIModule.AIDynamicParam
// Struct Size::0x0038
struct FAIDynamicParam
{
    FName                                         ParamName;                                                    // 0x0000(0x0008)
    enum class EAIParamType                       ParamType;                                                    // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
    float                                         Value;                                                        // 0x000C(0x0004)
    FBlackboardKeySelector                        BBKey;                                                        // 0x0010(0x0028)
};


// ScriptStruct  AIModule.BlackboardKeySelector
// Struct Size::0x0028
struct FBlackboardKeySelector
{
    TArray<UBlackboardKeyType*>                   AllowedTypes;                                                 // 0x0000(0x0010)
    FName                                         SelectedKeyName;                                              // 0x0010(0x0008)
    UBlackboardKeyType*                           SelectedKeyType;                                              // 0x0018(0x0008)
    char                                          SelectedKeyID;                                                // 0x0020(0x0001)
    char                                          pa_0021[0x0003]                                               // 0x0021(0x0003)
    char                                          bNoneIsAllowedValue;                                          // 0x0024(0x0001)
    char                                          pa_0025[0x0003]                                               // 0x0025(0x0003)
};


// ScriptStruct  AIModule.EQSParametrizedQueryExecutionRequest
// Struct Size::0x0048
struct FEQSParametrizedQueryExecutionRequest
{
    UEnvQuery*                                    QueryTemplate;                                                // 0x0000(0x0008)
    TArray<FAIDynamicParam>                       QueryConfig;                                                  // 0x0008(0x0010)
    FBlackboardKeySelector                        EQSQueryBlackboardKey;                                        // 0x0018(0x0028)
    enum class EEnvQueryRunMode                   RunMode;                                                      // 0x0040(0x0001)
    char                                          pa_0041[0x0003]                                               // 0x0041(0x0003)
    char                                          bUseBBKeyForQueryTemplate;                                    // 0x0044(0x0001)
    char                                          pa_0045[0x0003]                                               // 0x0045(0x0003)
};


// ScriptStruct  AIModule.GenericTeamId
// Struct Size::0x0001
struct FGenericTeamId
{
    char                                          TeamId;                                                       // 0x0000(0x0001)
};


// ScriptStruct  AIModule.SimpleIndexedHandleBase
// Struct Size::0x0004
struct FSimpleIndexedHandleBase
{
    char                                          pa_0000[0x0004]                                               // 0x0000(0x0004)
};


// ScriptStruct  AIModule.IndexedHandleBase
// Struct Size::0x0008
struct FIndexedHandleBase : public FSimpleIndexedHandleBase
{
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
};


// ScriptStruct  AIModule.CompactIndexedHandleBase
// Struct Size::0x0004
struct FCompactIndexedHandleBase
{
    char                                          pa_0000[0x0004]                                               // 0x0000(0x0004)
};


// ScriptStruct  AIModule.SequentialIDBase
// Struct Size::0x0004
struct FSequentialIDBase
{
    uint32_t                                      Value;                                                        // 0x0000(0x0004)
};


// ScriptStruct  AIModule.PawnActionEvent
// Struct Size::0x0018
struct FPawnActionEvent
{
    UPawnAction*                                  Action;                                                       // 0x0000(0x0008)
    char                                          pa_0008[0x0010]                                               // 0x0008(0x0010)
};


// ScriptStruct  AIModule.PawnActionStack
// Struct Size::0x0008
struct FPawnActionStack
{
    UPawnAction*                                  TopAction;                                                    // 0x0000(0x0008)
};


// ScriptStruct  AIModule.BehaviorTreeTemplateInfo
// Struct Size::0x0018
struct FBehaviorTreeTemplateInfo
{
    UBehaviorTree*                                Asset;                                                        // 0x0000(0x0008)
    UBTCompositeNode*                             Template;                                                     // 0x0008(0x0008)
    char                                          pa_0010[0x0008]                                               // 0x0010(0x0008)
};


// ScriptStruct  AIModule.BlackboardEntry
// Struct Size::0x0018
struct FBlackboardEntry
{
    FName                                         EntryName;                                                    // 0x0000(0x0008)
    UBlackboardKeyType*                           KeyType;                                                      // 0x0008(0x0008)
    char                                          bInstanceSynced;                                              // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
};


// ScriptStruct  AIModule.BTDecoratorLogic
// Struct Size::0x0004
struct FBTDecoratorLogic
{
    enum class EBTDecoratorLogic                  Operation;                                                    // 0x0000(0x0001)
    char                                          pa_0001[0x0001]                                               // 0x0001(0x0001)
    uint16_t                                      Number;                                                       // 0x0002(0x0002)
};


// ScriptStruct  AIModule.BTCompositeChild
// Struct Size::0x0030
struct FBTCompositeChild
{
    UBTCompositeNode*                             ChildComposite;                                               // 0x0000(0x0008)
    UBTTaskNode*                                  ChildTask;                                                    // 0x0008(0x0008)
    TArray<UBTDecorator*>                         Decorators;                                                   // 0x0010(0x0010)
    TArray<FBTDecoratorLogic>                     DecoratorOps;                                                 // 0x0020(0x0010)
};


// ScriptStruct  AIModule.AIDataProviderValue
// Struct Size::0x0020
struct FAIDataProviderValue
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
    UAIDataProvider*                              DataBinding;                                                  // 0x0010(0x0008)
    FName                                         DataField;                                                    // 0x0018(0x0008)
};


// ScriptStruct  AIModule.AIDataProviderTypedValue
// Struct Size::0x0030
struct FAIDataProviderTypedValue : public FAIDataProviderValue
{
    UClass*                                       PropertyType;                                                 // 0x0020(0x0008)
    char                                          pa_0028[0x0008]                                               // 0x0028(0x0008)
};


// ScriptStruct  AIModule.AIDataProviderStructValue
// Struct Size::0x0030
struct FAIDataProviderStructValue : public FAIDataProviderValue
{
    char                                          pa_0020[0x0010]                                               // 0x0020(0x0010)
};


// ScriptStruct  AIModule.AIDataProviderIntValue
// Struct Size::0x0038
struct FAIDataProviderIntValue : public FAIDataProviderTypedValue
{
    int32_t                                       DefaultValue;                                                 // 0x0030(0x0004)
    char                                          pa_0034[0x0004]                                               // 0x0034(0x0004)
};


// ScriptStruct  AIModule.AIDataProviderFloatValue
// Struct Size::0x0038
struct FAIDataProviderFloatValue : public FAIDataProviderTypedValue
{
    float                                         DefaultValue;                                                 // 0x0030(0x0004)
    char                                          pa_0034[0x0004]                                               // 0x0034(0x0004)
};


// ScriptStruct  AIModule.AIDataProviderBoolValue
// Struct Size::0x0038
struct FAIDataProviderBoolValue : public FAIDataProviderTypedValue
{
    bool                                          DefaultValue;                                                 // 0x0030(0x0001)
    char                                          pa_0031[0x0007]                                               // 0x0031(0x0007)
};


// ScriptStruct  AIModule.EnvQueryManagerConfig
// Struct Size::0x0030
struct FEnvQueryManagerConfig
{
    float                                         MaxAllowedTestingTime;                                        // 0x0000(0x0004)
    bool                                          bTestQueriesUsingBreadth;                                     // 0x0004(0x0001)
    char                                          pa_0005[0x0003]                                               // 0x0005(0x0003)
    int32_t                                       QueryCountWarningThreshold;                                   // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    double                                        QueryCountWarningInterval;                                    // 0x0010(0x0008)
    double                                        ExecutionTimeWarningSeconds;                                  // 0x0018(0x0008)
    double                                        HandlingResultTimeWarningSeconds;                             // 0x0020(0x0008)
    double                                        GenerationTimeWarningSeconds;                                 // 0x0028(0x0008)
};


// ScriptStruct  AIModule.EnvQueryRequest
// Struct Size::0x0068
struct FEnvQueryRequest
{
    UEnvQuery*                                    QueryTemplate;                                                // 0x0000(0x0008)
    UObject*                                      Owner;                                                        // 0x0008(0x0008)
    UWorld*                                       World;                                                        // 0x0010(0x0008)
    char                                          pa_0018[0x0050]                                               // 0x0018(0x0050)
};


// ScriptStruct  AIModule.EnvQueryInstanceCache
// Struct Size::0x0178
struct FEnvQueryInstanceCache
{
    UEnvQuery*                                    Template;                                                     // 0x0000(0x0008)
    char                                          pa_0008[0x0170]                                               // 0x0008(0x0170)
};


// ScriptStruct  AIModule.CrowdAvoidanceConfig
// Struct Size::0x001C
struct FCrowdAvoidanceConfig
{
    float                                         VelocityBias;                                                 // 0x0000(0x0004)
    float                                         DesiredVelocityWeight;                                        // 0x0004(0x0004)
    float                                         CurrentVelocityWeight;                                        // 0x0008(0x0004)
    float                                         SideBiasWeight;                                               // 0x000C(0x0004)
    float                                         ImpactTimeWeight;                                             // 0x0010(0x0004)
    float                                         ImpactTimeRange;                                              // 0x0014(0x0004)
    char                                          CustomPatternIdx;                                             // 0x0018(0x0001)
    char                                          AdaptiveDivisions;                                            // 0x0019(0x0001)
    char                                          AdaptiveRings;                                                // 0x001A(0x0001)
    char                                          AdaptiveDepth;                                                // 0x001B(0x0001)
};


// ScriptStruct  AIModule.CrowdAvoidanceSamplingPattern
// Struct Size::0x0020
struct FCrowdAvoidanceSamplingPattern
{
    TArray<float>                                 Angles;                                                       // 0x0000(0x0010)
    TArray<float>                                 Radii;                                                        // 0x0010(0x0010)
};


// ScriptStruct  AIModule.RecastGraphWrapper
// Struct Size::0x00B0
struct FRecastGraphWrapper
{
    ARecastNavMesh*                               RecastNavMeshActor;                                           // 0x0000(0x0008)
    char                                          pa_0008[0x00A8]                                               // 0x0008(0x00A8)
};


// ScriptStruct  AIModule.ActorPerceptionBlueprintInfo
// Struct Size::0x0020
struct FActorPerceptionBlueprintInfo
{
    AActor*                                       Target;                                                       // 0x0000(0x0008)
    TArray<FAIStimulus>                           LastSensedStimuli;                                            // 0x0008(0x0010)
    char                                          bIsHostile;                                                   // 0x0018(0x0001)
    char                                          pa_0019[0x0007]                                               // 0x0019(0x0007)
};


// ScriptStruct  AIModule.AISenseAffiliationFilter
// Struct Size::0x0004
struct FAISenseAffiliationFilter
{
    char                                          bDetectEnemies;                                               // 0x0000(0x0001)
    char                                          bDetectNeutrals;                                              // 0x0000(0x0001)
    char                                          bDetectFriendlies;                                            // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
};


// ScriptStruct  AIModule.AIDamageEvent
// Struct Size::0x0050
struct FAIDamageEvent
{
    float                                         Amount;                                                       // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FVector                                       Location;                                                     // 0x0008(0x0018)
    FVector                                       HitLocation;                                                  // 0x0020(0x0018)
    AActor*                                       DamagedActor;                                                 // 0x0038(0x0008)
    AActor*                                       Instigator;                                                   // 0x0040(0x0008)
    FName                                         Tag;                                                          // 0x0048(0x0008)
};


// ScriptStruct  AIModule.AINoiseEvent
// Struct Size::0x0040
struct FAINoiseEvent
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    FVector                                       NoiseLocation;                                                // 0x0008(0x0018)
    float                                         Loudness;                                                     // 0x0020(0x0004)
    float                                         MaxRange;                                                     // 0x0024(0x0004)
    AActor*                                       Instigator;                                                   // 0x0028(0x0008)
    FName                                         Tag;                                                          // 0x0030(0x0008)
    char                                          pa_0038[0x0008]                                               // 0x0038(0x0008)
};


// ScriptStruct  AIModule.AIPredictionEvent
// Struct Size::0x0018
struct FAIPredictionEvent
{
    AActor*                                       Requestor;                                                    // 0x0000(0x0008)
    AActor*                                       PredictedActor;                                               // 0x0008(0x0008)
    char                                          pa_0010[0x0008]                                               // 0x0010(0x0008)
};


// ScriptStruct  AIModule.AISightEvent
// Struct Size::0x0018
struct FAISightEvent
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    AActor*                                       SeenActor;                                                    // 0x0008(0x0008)
    AActor*                                       Observer;                                                     // 0x0010(0x0008)
};


// ScriptStruct  AIModule.AITeamStimulusEvent
// Struct Size::0x0050
struct FAITeamStimulusEvent
{
    char                                          pa_0000[0x0040]                                               // 0x0000(0x0040)
    AActor*                                       Broadcaster;                                                  // 0x0040(0x0008)
    AActor*                                       Enemy;                                                        // 0x0048(0x0008)
};


// ScriptStruct  AIModule.AITouchEvent
// Struct Size::0x0028
struct FAITouchEvent
{
    char                                          pa_0000[0x0018]                                               // 0x0000(0x0018)
    AActor*                                       TouchReceiver;                                                // 0x0018(0x0008)
    AActor*                                       OtherActor;                                                   // 0x0020(0x0008)
};


// ScriptStruct  WidgetCarousel.WidgetCarouselNavigationButtonStyle
// Struct Size::0x05A0
struct FWidgetCarouselNavigationButtonStyle : public FSlateWidgetStyle
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FButtonStyle                                  InnerButtonStyle;                                             // 0x0010(0x03F0)
    FSlateBrush                                   NavigationButtonLeftImage;                                    // 0x0400(0x00D0)
    FSlateBrush                                   NavigationButtonRightImage;                                   // 0x04D0(0x00D0)
};


// ScriptStruct  WidgetCarousel.WidgetCarouselNavigationBarStyle
// Struct Size::0x0CB0
struct FWidgetCarouselNavigationBarStyle : public FSlateWidgetStyle
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FSlateBrush                                   HighlightBrush;                                               // 0x0010(0x00D0)
    FButtonStyle                                  LeftButtonStyle;                                              // 0x00E0(0x03F0)
    FButtonStyle                                  CenterButtonStyle;                                            // 0x04D0(0x03F0)
    FButtonStyle                                  RightButtonStyle;                                             // 0x08C0(0x03F0)
};


// ScriptStruct  WebBrowser.WebJSCallbackBase
// Struct Size::0x0020
struct FWebJSCallbackBase
{
    char                                          pa_0000[0x0020]                                               // 0x0000(0x0020)
};


// ScriptStruct  WebBrowser.WebJSFunction
// Struct Size::0x0020
struct FWebJSFunction : public FWebJSCallbackBase
{
};


// ScriptStruct  WebBrowser.WebJSResponse
// Struct Size::0x0020
struct FWebJSResponse : public FWebJSCallbackBase
{
};


// ScriptStruct  InteractiveToolsFramework.GizmoElementColorAttribute
// Struct Size::0x0014
struct FGizmoElementColorAttribute
{
    FLinearColor                                  Value;                                                        // 0x0000(0x0010)
    bool                                          bHasValue;                                                    // 0x0010(0x0001)
    bool                                          bOverridesChildState;                                         // 0x0011(0x0001)
    char                                          pa_0012[0x0002]                                               // 0x0012(0x0002)
};


// ScriptStruct  InteractiveToolsFramework.GizmoElementMaterialAttribute
// Struct Size::0x000C
struct FGizmoElementMaterialAttribute
{
    TWeakObjectPtr<UMaterialInterface>            Value;                                                        // 0x0000(0x0008)
    bool                                          bOverridesChildState;                                         // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
};


// ScriptStruct  InteractiveToolsFramework.GizmoElementMeshRenderStateAttributes
// Struct Size::0x0060
struct FGizmoElementMeshRenderStateAttributes
{
    FGizmoElementMaterialAttribute                Material;                                                     // 0x0000(0x000C)
    FGizmoElementMaterialAttribute                HoverMaterial;                                                // 0x000C(0x000C)
    FGizmoElementMaterialAttribute                InteractMaterial;                                             // 0x0018(0x000C)
    FGizmoElementColorAttribute                   VertexColor;                                                  // 0x0024(0x0014)
    FGizmoElementColorAttribute                   HoverVertexColor;                                             // 0x0038(0x0014)
    FGizmoElementColorAttribute                   InteractVertexColor;                                          // 0x004C(0x0014)
};


// ScriptStruct  InteractiveToolsFramework.GizmoElementLineRenderStateAttributes
// Struct Size::0x003C
struct FGizmoElementLineRenderStateAttributes
{
    FGizmoElementColorAttribute                   LineColor;                                                    // 0x0000(0x0014)
    FGizmoElementColorAttribute                   HoverLineColor;                                               // 0x0014(0x0014)
    FGizmoElementColorAttribute                   InteractLineColor;                                            // 0x0028(0x0014)
};


// ScriptStruct  InteractiveToolsFramework.GizmoVec2ParameterChange
// Struct Size::0x0020
struct FGizmoVec2ParameterChange
{
    FVector2D                                     InitialValue;                                                 // 0x0000(0x0010)
    FVector2D                                     CurrentValue;                                                 // 0x0010(0x0010)
};


// ScriptStruct  InteractiveToolsFramework.GizmoFloatParameterChange
// Struct Size::0x0008
struct FGizmoFloatParameterChange
{
    float                                         InitialValue;                                                 // 0x0000(0x0004)
    float                                         CurrentValue;                                                 // 0x0004(0x0004)
};


// ScriptStruct  InteractiveToolsFramework.BrushStampData
// Struct Size::0x0128
struct FBrushStampData
{
    char                                          pa_0000[0x0128]                                               // 0x0000(0x0128)
};


// ScriptStruct  InteractiveToolsFramework.BehaviorInfo
// Struct Size::0x0020
struct FBehaviorInfo
{
    UInputBehavior*                               Behavior;                                                     // 0x0000(0x0008)
    char                                          pa_0008[0x0018]                                               // 0x0008(0x0018)
};


// ScriptStruct  InteractiveToolsFramework.InputRayHit
// Struct Size::0x0038
struct FInputRayHit
{
    char                                          pa_0000[0x0038]                                               // 0x0000(0x0038)
};


// ScriptStruct  InteractiveToolsFramework.ActiveGizmo
// Struct Size::0x0030
struct FActiveGizmo
{
    UInteractiveGizmo*                            Gizmo;                                                        // 0x0000(0x0008)
    char                                          pa_0008[0x0028]                                               // 0x0008(0x0028)
};


// ScriptStruct  GeometryFramework.DynamicMeshChangeInfo
// Struct Size::0x0020
struct FDynamicMeshChangeInfo
{
    enum class EDynamicMeshChangeType             Type;                                                         // 0x0000(0x0001)
    enum class EDynamicMeshAttributeChangeFlags   Flags;                                                        // 0x0001(0x0001)
    bool                                          bIsRevertChange;                                              // 0x0002(0x0001)
    char                                          pa_0003[0x001D]                                               // 0x0003(0x001D)
};


// ScriptStruct  TGFFramework.HyperlinkStyleRow
// Struct Size::0x0760
struct FHyperlinkStyleRow : public FTableRowBase
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FHyperlinkStyle                               HyperlinkStyle;                                               // 0x0010(0x0750)
};


// ScriptStruct  TGFFramework.ImageCacheUpdateHandlerArray
// Struct Size::0x0010
struct FImageCacheUpdateHandlerArray
{
    TArray<int64_t>                               UpdateHandlerArray;                                           // 0x0000(0x0010)
};


// ScriptStruct  TGFFramework.ImageCacheUpdateCallback
// Struct Size::0x0050
struct FImageCacheUpdateCallback
{
    bool                                          bIsValid;                                                     // 0x0000(0x0001)
    char                                          pa_0001[0x004F]                                               // 0x0001(0x004F)
};


// ScriptStruct  TGFFramework.TGFWindowCacheArray
// Struct Size::0x0010
struct FTGFWindowCacheArray
{
    TArray<UTGFWindow*>                           CachedWindows;                                                // 0x0000(0x0010)
};


// ScriptStruct  LISlua425.INTLLuaBPVar
// Struct Size::0x0020
struct FINTLLuaBPVar
{
    char                                          pa_0000[0x0020]                                               // 0x0000(0x0020)
};


// ScriptStruct  TGFGame.BannerConfig
// Struct Size::0x0050
struct FBannerConfig
{
    bool                                          bIsValid;                                                     // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    int32_t                                       BannerId;                                                     // 0x0004(0x0004)
    bool                                          bIsEnable;                                                    // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
    int32_t                                       SortOrder;                                                    // 0x000C(0x0004)
    FDateTime                                     StartDateTime;                                                // 0x0010(0x0008)
    FDateTime                                     EndDateTime;                                                  // 0x0018(0x0008)
    FString                                       LocalImagePath;                                               // 0x0020(0x0010)
    FString                                       HttpImageUrl;                                                 // 0x0030(0x0010)
    FString                                       ClickHref;                                                    // 0x0040(0x0010)
};


// ScriptStruct  TGFGame.FlawlessStruct
// Struct Size::0x000C
struct FFlawlessStruct
{
    char                                          pa_0000[0x000C]                                               // 0x0000(0x000C)
};


// ScriptStruct  TGFGame.ChatChannelConfigRow
// Struct Size::0x0088
struct FChatChannelConfigRow : public FTableRowBase
{
    enum class ETGFProtoTgfEnChatChannelType      ChannelType;                                                  // 0x0008(0x0001)
    char                                          pa_0009[0x0007]                                               // 0x0009(0x0007)
    FText                                         ChannelName;                                                  // 0x0010(0x0018)
    int32_t                                       MaxCount;                                                     // 0x0028(0x0004)
    int32_t                                       MaxLength;                                                    // 0x002C(0x0004)
    float                                         SendInterval;                                                 // 0x0030(0x0004)
    bool                                          bShowInPanel;                                                 // 0x0034(0x0001)
    char                                          pa_0035[0x0003]                                               // 0x0035(0x0003)
    TSet<enum class ETGFProtoTgfEnChatChannelType>CanShowChannelSet;                                            // 0x0038(0x0050)
};


// ScriptStruct  TGFGame.SystemNotify
// Struct Size::0x0070
struct FSystemNotify
{
    bool                                          bIsValid;                                                     // 0x0000(0x0001)
    enum class ETGFProtoTgfEnChatMsgSendType      MsgSendType;                                                  // 0x0001(0x0001)
    char                                          pa_0002[0x0006]                                               // 0x0002(0x0006)
    FCultureTextMap                               CultureTextMap;                                               // 0x0008(0x0058)
    int64_t                                       RevocationSequence;                                           // 0x0060(0x0008)
    int64_t                                       ExpirationTimestamp;                                          // 0x0068(0x0008)
};


// ScriptStruct  TGFGame.CultureTextMap
// Struct Size::0x0058
struct FCultureTextMap
{
    bool                                          bIsValid;                                                     // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    TMap<enum class ETGFProtoTgfEnMutlLanguageType,FString>CultureTextMap;                                      // 0x0008(0x0050)
};


// ScriptStruct  TGFGame.ChatMessage
// Struct Size::0x00E0
struct FChatMessage
{
    bool                                          bIsValid;                                                     // 0x0000(0x0001)
    enum class ETGFProtoTgfEnChatChannelType      ChannelType;                                                  // 0x0001(0x0001)
    char                                          pa_0002[0x0006]                                               // 0x0002(0x0006)
    int64_t                                       Sequence;                                                     // 0x0008(0x0008)
    int64_t                                       SendTimeStamp;                                                // 0x0010(0x0008)
    int32_t                                       SendTimeNanos;                                                // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    FUserKey                                      SenderUserKey;                                                // 0x0020(0x0010)
    FRoleKey                                      SenderRoleKey;                                                // 0x0030(0x0010)
    FUserKey                                      ReceiverUserKey;                                              // 0x0040(0x0010)
    FRoleKey                                      ReceiverRoleKey;                                              // 0x0050(0x0010)
    FString                                       TextContent;                                                  // 0x0060(0x0010)
    FSystemNotify                                 SystemNotify;                                                 // 0x0070(0x0070)
};


// ScriptStruct  TGFGame.RoleKey
// Struct Size::0x0010
struct FRoleKey
{
    int32_t                                       ZoneId;                                                       // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    int64_t                                       RoleGuid;                                                     // 0x0008(0x0008)
};


// ScriptStruct  TGFGame.UserKey
// Struct Size::0x0010
struct FUserKey
{
    int32_t                                       ZoneId;                                                       // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    int64_t                                       UserId;                                                       // 0x0008(0x0008)
};


// ScriptStruct  TGFGame.TGFTradeProductSearchResultData
// Struct Size::0x0018
struct FTGFTradeProductSearchResultData
{
    TArray<UTGFTradeMarketProductData*>           ResultDatas;                                                  // 0x0000(0x0010)
    bool                                          HasNextPage;                                                  // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
};


// ScriptStruct  TGFGame.CraftTab
// Struct Size::0x0050
struct FCraftTab
{
    TMap<int32_t,UFusionItemData*>                Crafts;                                                       // 0x0000(0x0050)
};


// ScriptStruct  TGFGame.RpcGameClientServiceMethods
// Struct Size::0x0738
struct FRpcGameClientServiceMethods
{
    FName                                         PreLogin;                                                     // 0x0000(0x0008)
    FName                                         LoginNotifySync;                                              // 0x0008(0x0008)
    FName                                         Login;                                                        // 0x0010(0x0008)
    FName                                         ClientActionLog;                                              // 0x0018(0x0008)
    FName                                         Ping;                                                         // 0x0020(0x0008)
    FName                                         BusinessPing;                                                 // 0x0028(0x0008)
    FName                                         NetworkLatencyReport;                                         // 0x0030(0x0008)
    FName                                         NetworkBlockLoading;                                          // 0x0038(0x0008)
    FName                                         UpdateAccountData;                                            // 0x0040(0x0008)
    FName                                         TelemetryReport;                                              // 0x0048(0x0008)
    FName                                         ModalMessage;                                                 // 0x0050(0x0008)
    FName                                         PlayerGetInfo;                                                // 0x0058(0x0008)
    FName                                         PlayerDirtyChange;                                            // 0x0060(0x0008)
    FName                                         PlayerGetInfoByPage;                                          // 0x0068(0x0008)
    FName                                         PlayerBatchGetBasicInfo;                                      // 0x0070(0x0008)
    FName                                         PlayerBatchGetIdKey;                                          // 0x0078(0x0008)
    FName                                         PlayerRename;                                                 // 0x0080(0x0008)
    FName                                         PlayerUpdateIcon;                                             // 0x0088(0x0008)
    FName                                         PlayerUpdateOptions;                                          // 0x0090(0x0008)
    FName                                         PlayerGmCommand;                                              // 0x0098(0x0008)
    FName                                         PlayerSettingData;                                            // 0x00A0(0x0008)
    FName                                         PlayerKickoffReason;                                          // 0x00A8(0x0008)
    FName                                         PlayerAcePacket;                                              // 0x00B0(0x0008)
    FName                                         PlayerAcePacketSync;                                          // 0x00B8(0x0008)
    FName                                         EventCmdInfoSync;                                             // 0x00C0(0x0008)
    FName                                         PlayerUriRedirect;                                            // 0x00C8(0x0008)
    FName                                         PlayerReceiveHomelandReward;                                  // 0x00D0(0x0008)
    FName                                         ReportAction;                                                 // 0x00D8(0x0008)
    FName                                         PlayerBirthdayUpdate;                                         // 0x00E0(0x0008)
    FName                                         CacheBatchGet;                                                // 0x00E8(0x0008)
    FName                                         CacheUnwatch;                                                 // 0x00F0(0x0008)
    FName                                         CacheExpired;                                                 // 0x00F8(0x0008)
    FName                                         CacheUpdateMeta;                                              // 0x0100(0x0008)
    FName                                         PlayerAllCacheExpired;                                        // 0x0108(0x0008)
    FName                                         MailGetAll;                                                   // 0x0110(0x0008)
    FName                                         MailRead;                                                     // 0x0118(0x0008)
    FName                                         MailReadAll;                                                  // 0x0120(0x0008)
    FName                                         MailReceiveAttachment;                                        // 0x0128(0x0008)
    FName                                         MailReceiveAttachmentAll;                                     // 0x0130(0x0008)
    FName                                         MailChangeSync;                                               // 0x0138(0x0008)
    FName                                         MailReceiveAttachmentPartly;                                  // 0x0140(0x0008)
    FName                                         HallSetRole;                                                  // 0x0148(0x0008)
    FName                                         HallSwitch;                                                   // 0x0150(0x0008)
    FName                                         BattleMatchingPreSearch;                                      // 0x0158(0x0008)
    FName                                         BattleMatchingCancelPreSearch;                                // 0x0160(0x0008)
    FName                                         BattleMatchingSearch;                                         // 0x0168(0x0008)
    FName                                         BattleMatchingHeartbeat;                                      // 0x0170(0x0008)
    FName                                         BattleMatchingExit;                                           // 0x0178(0x0008)
    FName                                         BattleMatchingConfirmRefuse;                                  // 0x0180(0x0008)
    FName                                         BattleMatchingLogSync;                                        // 0x0188(0x0008)
    FName                                         BattleRoomLogSync;                                            // 0x0190(0x0008)
    FName                                         BattleRoomHeartbeat;                                          // 0x0198(0x0008)
    FName                                         BattleRecordListGet;                                          // 0x01A0(0x0008)
    FName                                         BattleRecordDataGet;                                          // 0x01A8(0x0008)
    FName                                         BattleRecordDataSet;                                          // 0x01B0(0x0008)
    FName                                         BattleRoomPlayerAct;                                          // 0x01B8(0x0008)
    FName                                         BattleUpdateSetting;                                          // 0x01C0(0x0008)
    FName                                         BattleSettleSync;                                             // 0x01C8(0x0008)
    FName                                         BattleFetchBattleUserData;                                    // 0x01D0(0x0008)
    FName                                         LevelPrestart;                                                // 0x01D8(0x0008)
    FName                                         LevelStart;                                                   // 0x01E0(0x0008)
    FName                                         LevelFinish;                                                  // 0x01E8(0x0008)
    FName                                         LevelSelect;                                                  // 0x01F0(0x0008)
    FName                                         LevelChallenge;                                               // 0x01F8(0x0008)
    FName                                         MapMove;                                                      // 0x0200(0x0008)
    FName                                         FriendGetAll;                                                 // 0x0208(0x0008)
    FName                                         FriendInvite;                                                 // 0x0210(0x0008)
    FName                                         FriendAcceptInvite;                                           // 0x0218(0x0008)
    FName                                         FriendRejectInvite;                                           // 0x0220(0x0008)
    FName                                         FriendRemove;                                                 // 0x0228(0x0008)
    FName                                         FriendSendGift;                                               // 0x0230(0x0008)
    FName                                         FriendReceiveGift;                                            // 0x0238(0x0008)
    FName                                         FriendGetSuggest;                                             // 0x0240(0x0008)
    FName                                         FriendAcceptAllInvite;                                        // 0x0248(0x0008)
    FName                                         FriendRejectAllInvite;                                        // 0x0250(0x0008)
    FName                                         GuildCreate;                                                  // 0x0258(0x0008)
    FName                                         GuildExit;                                                    // 0x0260(0x0008)
    FName                                         GuildPayOff;                                                  // 0x0268(0x0008)
    FName                                         GuildGetAll;                                                  // 0x0270(0x0008)
    FName                                         GuildBatchGet;                                                // 0x0278(0x0008)
    FName                                         GuildSuggest;                                                 // 0x0280(0x0008)
    FName                                         GuildSetRole;                                                 // 0x0288(0x0008)
    FName                                         GuildRename;                                                  // 0x0290(0x0008)
    FName                                         GuildSetConfigure;                                            // 0x0298(0x0008)
    FName                                         GuildSendApply;                                               // 0x02A0(0x0008)
    FName                                         GuildApproveApply;                                            // 0x02A8(0x0008)
    FName                                         GuildRejectApply;                                             // 0x02B0(0x0008)
    FName                                         GuildSendInvitation;                                          // 0x02B8(0x0008)
    FName                                         GuildApproveInvitation;                                       // 0x02C0(0x0008)
    FName                                         GuildRejectInvitation;                                        // 0x02C8(0x0008)
    FName                                         GuildRevokeInvitation;                                        // 0x02D0(0x0008)
    FName                                         GuildRemoveMember;                                            // 0x02D8(0x0008)
    FName                                         GuildAddImpeachment;                                          // 0x02E0(0x0008)
    FName                                         GuildVoteImpeachment;                                         // 0x02E8(0x0008)
    FName                                         ChatGetAllChannels;                                           // 0x02F0(0x0008)
    FName                                         ChatGetChannelSnapshot;                                       // 0x02F8(0x0008)
    FName                                         ChatChannelHeartbeat;                                         // 0x0300(0x0008)
    FName                                         ChatSendMessage;                                              // 0x0308(0x0008)
    FName                                         ChatUpdatePanel;                                              // 0x0310(0x0008)
    FName                                         TeamSendInvitation;                                           // 0x0318(0x0008)
    FName                                         TeamApproveInvitation;                                        // 0x0320(0x0008)
    FName                                         TeamRejectInvitation;                                         // 0x0328(0x0008)
    FName                                         TeamExit;                                                     // 0x0330(0x0008)
    FName                                         TeamRemoveMember;                                             // 0x0338(0x0008)
    FName                                         TeamSendBattleConfirm;                                        // 0x0340(0x0008)
    FName                                         TeamSendBattleUnconfirm;                                      // 0x0348(0x0008)
    FName                                         TeamTransferCaptain;                                          // 0x0350(0x0008)
    FName                                         TeamApplyJoinTeam;                                            // 0x0358(0x0008)
    FName                                         TeamAcceptApply;                                              // 0x0360(0x0008)
    FName                                         TeamChangeTeamFinder;                                         // 0x0368(0x0008)
    FName                                         TeamRejectApply;                                              // 0x0370(0x0008)
    FName                                         TeamMatchSearch;                                              // 0x0378(0x0008)
    FName                                         TeamMatchCheck;                                               // 0x0380(0x0008)
    FName                                         TeamMatchExit;                                                // 0x0388(0x0008)
    FName                                         RoleCreate;                                                   // 0x0390(0x0008)
    FName                                         RoleDelete;                                                   // 0x0398(0x0008)
    FName                                         RoleDeleteLazy;                                               // 0x03A0(0x0008)
    FName                                         RoleCancelLazyDelete;                                         // 0x03A8(0x0008)
    FName                                         RoleWear;                                                     // 0x03B0(0x0008)
    FName                                         RoleWeaponSetSwap;                                            // 0x03B8(0x0008)
    FName                                         RoleTakeOff;                                                  // 0x03C0(0x0008)
    FName                                         RoleFetchUserRole;                                            // 0x03C8(0x0008)
    FName                                         RoleMoveSeason;                                               // 0x03D0(0x0008)
    FName                                         RoleReshapeFacePinching;                                      // 0x03D8(0x0008)
    FName                                         RoleSelectSkill;                                              // 0x03E0(0x0008)
    FName                                         QuestRewardsReceive;                                          // 0x03E8(0x0008)
    FName                                         QuestSpecialProgressReport;                                   // 0x03F0(0x0008)
    FName                                         QuestItemSubmit;                                              // 0x03F8(0x0008)
    FName                                         RankGetSpecifyRank;                                           // 0x0400(0x0008)
    FName                                         RankGetSelfRank;                                              // 0x0408(0x0008)
    FName                                         RankCacheExpiredSync;                                         // 0x0410(0x0008)
    FName                                         LotteryDraw;                                                  // 0x0418(0x0008)
    FName                                         MarketGetProductList;                                         // 0x0420(0x0008)
    FName                                         MarketBuyProduct;                                             // 0x0428(0x0008)
    FName                                         MarketSellItems;                                              // 0x0430(0x0008)
    FName                                         MarketBuySoldItem;                                            // 0x0438(0x0008)
    FName                                         MarketResetRefreshEffect;                                     // 0x0440(0x0008)
    FName                                         MarketVideoPopup;                                             // 0x0448(0x0008)
    FName                                         PayGetAll;                                                    // 0x0450(0x0008)
    FName                                         PayUpdateDiamond;                                             // 0x0458(0x0008)
    FName                                         PayDirectBuy;                                                 // 0x0460(0x0008)
    FName                                         PayAuthDataExpiredSync;                                       // 0x0468(0x0008)
    FName                                         PayCheckBillApplied;                                          // 0x0470(0x0008)
    FName                                         PayUpdateAuthorizationData;                                   // 0x0478(0x0008)
    FName                                         PayCancel;                                                    // 0x0480(0x0008)
    FName                                         PayExchangeFreeDiamond;                                       // 0x0488(0x0008)
    FName                                         PayPendingFlowNtf;                                            // 0x0490(0x0008)
    FName                                         PaySubmitPendingFlow;                                         // 0x0498(0x0008)
    FName                                         InventoryItemMove;                                            // 0x04A0(0x0008)
    FName                                         InventoryItemSwap;                                            // 0x04A8(0x0008)
    FName                                         InventoryPageAdd;                                             // 0x04B0(0x0008)
    FName                                         UseItem;                                                      // 0x04B8(0x0008)
    FName                                         UseItemBath;                                                  // 0x04C0(0x0008)
    FName                                         Crafting;                                                     // 0x04C8(0x0008)
    FName                                         CraftingCancel;                                               // 0x04D0(0x0008)
    FName                                         CraftingRecived;                                              // 0x04D8(0x0008)
    FName                                         TradeProductPriceBasicInfo;                                   // 0x04E0(0x0008)
    FName                                         TradeProductPriceInfo;                                        // 0x04E8(0x0008)
    FName                                         TradeProductPercentageInfo;                                   // 0x04F0(0x0008)
    FName                                         TradePurchaseOrderPublish;                                    // 0x04F8(0x0008)
    FName                                         TradeSalesOrderPublish;                                       // 0x0500(0x0008)
    FName                                         TradeBidOrderPublish;                                         // 0x0508(0x0008)
    FName                                         TradeAuctionOrderPublish;                                     // 0x0510(0x0008)
    FName                                         TradeAuctionFetchOrderInfo;                                   // 0x0518(0x0008)
    FName                                         TradeAuctionIndex;                                            // 0x0520(0x0008)
    FName                                         TradeOrderCancel;                                             // 0x0528(0x0008)
    FName                                         TradeOrderHistory;                                            // 0x0530(0x0008)
    FName                                         TradeOrderDelete;                                             // 0x0538(0x0008)
    FName                                         TradeReceiveConfirmationProduct;                              // 0x0540(0x0008)
    FName                                         TradeAuctionRecommendOrderTicket;                             // 0x0548(0x0008)
    FName                                         TradeProductRecommendOrderTicket;                             // 0x0550(0x0008)
    FName                                         TradeProductSearchOrderTicket;                                // 0x0558(0x0008)
    FName                                         GearRepair;                                                   // 0x0560(0x0008)
    FName                                         GearInlaid;                                                   // 0x0568(0x0008)
    FName                                         GearDismantle;                                                // 0x0570(0x0008)
    FName                                         GearSoulBound;                                                // 0x0578(0x0008)
    FName                                         GearHeirloomUnlock;                                           // 0x0580(0x0008)
    FName                                         GearHeirloomUnload;                                           // 0x0588(0x0008)
    FName                                         GearHeirloomInstantiation;                                    // 0x0590(0x0008)
    FName                                         GearGemUnlock;                                                // 0x0598(0x0008)
    FName                                         GearHeirloomGuideInlaidGem;                                   // 0x05A0(0x0008)
    FName                                         GearHeirloomGuideInlaidClear;                                 // 0x05A8(0x0008)
    FName                                         FacadeUpdate;                                                 // 0x05B0(0x0008)
    FName                                         FacadeUpdateRoleSkin;                                         // 0x05B8(0x0008)
    FName                                         FacadeSaveSkinTemplate;                                       // 0x05C0(0x0008)
    FName                                         FacadeDeleteSkinTemplate;                                     // 0x05C8(0x0008)
    FName                                         FacadeGetOnSaleFacade;                                        // 0x05D0(0x0008)
    FName                                         ActivityCenterList;                                           // 0x05D8(0x0008)
    FName                                         ActivityCenterRandomRewards;                                  // 0x05E0(0x0008)
    FName                                         ActivityCenterRandomRewardSelected;                           // 0x05E8(0x0008)
    FName                                         ActivityCenterBuyPassport;                                    // 0x05F0(0x0008)
    FName                                         ActivityCenterPassportReceiveRewards;                         // 0x05F8(0x0008)
    FName                                         ActivityCenterPassportReceiveCycleRewards;                    // 0x0600(0x0008)
    FName                                         ActivityCenterPassportRefreshQuest;                           // 0x0608(0x0008)
    FName                                         ActivityCenterTrialOpen;                                      // 0x0610(0x0008)
    FName                                         ActivityCenterTrialSelfQuit;                                  // 0x0618(0x0008)
    FName                                         ActivityCenterTrialReceiveReward;                             // 0x0620(0x0008)
    FName                                         ActivityCenterTrialHistoryRecord;                             // 0x0628(0x0008)
    FName                                         ActivityCenterTrialRecordSync;                                // 0x0630(0x0008)
    FName                                         RoomCreate;                                                   // 0x0638(0x0008)
    FName                                         RoomEnter;                                                    // 0x0640(0x0008)
    FName                                         RoomLeave;                                                    // 0x0648(0x0008)
    FName                                         RoomDisband;                                                  // 0x0650(0x0008)
    FName                                         RoomChangeMyselfPos;                                          // 0x0658(0x0008)
    FName                                         RoomChangeMemberPos;                                          // 0x0660(0x0008)
    FName                                         RoomSelectBattleMap;                                          // 0x0668(0x0008)
    FName                                         RoomSelectBattleType;                                         // 0x0670(0x0008)
    FName                                         RoomGetReady;                                                 // 0x0678(0x0008)
    FName                                         RoomCancelReady;                                              // 0x0680(0x0008)
    FName                                         RoomStartBattle;                                              // 0x0688(0x0008)
    FName                                         RoomNameChange;                                               // 0x0690(0x0008)
    FName                                         RoomKeywordChange;                                            // 0x0698(0x0008)
    FName                                         RoomTransferOwner;                                            // 0x06A0(0x0008)
    FName                                         RoomKickoffMember;                                            // 0x06A8(0x0008)
    FName                                         RoomSuggest;                                                  // 0x06B0(0x0008)
    FName                                         RoomBatchGet;                                                 // 0x06B8(0x0008)
    FName                                         RoomAcceptInvite;                                             // 0x06C0(0x0008)
    FName                                         RoomSendInvite;                                               // 0x06C8(0x0008)
    FName                                         RoomRejectInvite;                                             // 0x06D0(0x0008)
    FName                                         RoomIgnoreRoomAllInvite;                                      // 0x06D8(0x0008)
    FName                                         RoomIgnoreAllUserInvite;                                      // 0x06E0(0x0008)
    FName                                         HopeInstructSync;                                             // 0x06E8(0x0008)
    FName                                         HopeCertificationSync;                                        // 0x06F0(0x0008)
    FName                                         HopeReportExecute;                                            // 0x06F8(0x0008)
    FName                                         MithrilForceRoleInit;                                         // 0x0700(0x0008)
    FName                                         MithrilForceRoleSelect;                                       // 0x0708(0x0008)
    FName                                         MithrilForceReceiveReward;                                    // 0x0710(0x0008)
    FName                                         MithrilRoleWear;                                              // 0x0718(0x0008)
    FName                                         DlcPacketSync;                                                // 0x0720(0x0008)
    FName                                         DlcReceivePacket;                                             // 0x0728(0x0008)
    FName                                         RefreshDLCInfo;                                               // 0x0730(0x0008)
};


// ScriptStruct  TGFGame.GlobalUserUpdateCallback
// Struct Size::0x0060
struct FGlobalUserUpdateCallback
{
    bool                                          bIsValid;                                                     // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    FGlobalUserKey                                GlobalUserKey;                                                // 0x0008(0x0008)
    bool                                          bIsSubscribe;                                                 // 0x0010(0x0001)
    char                                          pa_0011[0x004F]                                               // 0x0011(0x004F)
};


// ScriptStruct  TGFGame.GlobalUserKey
// Struct Size::0x0008
struct FGlobalUserKey
{
    int64_t                                       GlobalUserId;                                                 // 0x0000(0x0008)
};


// ScriptStruct  TGFGame.GuideConfigRow
// Struct Size::0x0078
struct FGuideConfigRow : public FTableRowBase
{
    FText                                         SheetNameText;                                                // 0x0008(0x0018)
    FText                                         SheetTitleText;                                               // 0x0020(0x0018)
    int32_t                                       BelongToSheet;                                                // 0x0038(0x0004)
    int32_t                                       order;                                                        // 0x003C(0x0004)
    FText                                         DescriptionText;                                              // 0x0040(0x0018)
    TArray<TSoftObjectPtr<UTexture2D>>            TextureArray;                                                 // 0x0058(0x0010)
    TArray<TSoftObjectPtr<UMediaSource>>          MediaSourceArray;                                             // 0x0068(0x0010)
};


// ScriptStruct  TGFGame.HeirloomGearGemSlot
// Struct Size::0x0010
struct FHeirloomGearGemSlot
{
    bool                                          bIsValid;                                                     // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    int32_t                                       SlotId;                                                       // 0x0004(0x0004)
    int32_t                                       InlaidShapeType;                                              // 0x0008(0x0004)
    int32_t                                       AffixEffectiveLocation;                                       // 0x000C(0x0004)
};


// ScriptStruct  TGFGame.DRoleFacePinching
// Struct Size::0x0038
struct FDRoleFacePinching
{
    int64_t                                       FacePinchingGuid;                                             // 0x0000(0x0008)
    int32_t                                       FaceType;                                                     // 0x0008(0x0004)
    int32_t                                       HairType;                                                     // 0x000C(0x0004)
    int32_t                                       BeardType;                                                    // 0x0010(0x0004)
    int32_t                                       SkinType;                                                     // 0x0014(0x0004)
    int32_t                                       HairColor;                                                    // 0x0018(0x0004)
    int32_t                                       BeardColor;                                                   // 0x001C(0x0004)
    int32_t                                       TatooType;                                                    // 0x0020(0x0004)
    int32_t                                       TatooColor;                                                   // 0x0024(0x0004)
    int32_t                                       EyeColor;                                                     // 0x0028(0x0004)
    int32_t                                       ScarType;                                                     // 0x002C(0x0004)
    int32_t                                       MakeupType;                                                   // 0x0030(0x0004)
    int32_t                                       MakeupColor;                                                  // 0x0034(0x0004)
};


// ScriptStruct  TGFGame.DRoleDressUp
// Struct Size::0x0040
struct FDRoleDressUp
{
    int32_t                                       DefaultDressUpTypeId;                                         // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FDRoleFacePinching                            CurrentFacePinching;                                          // 0x0008(0x0038)
};


// ScriptStruct  TGFGame.RoleCreateData
// Struct Size::0x0060
struct FRoleCreateData
{
    int32_t                                       RoleTypeId;                                                   // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FString                                       RoleName;                                                     // 0x0008(0x0010)
    FDRoleDressUp                                 DressUp;                                                      // 0x0018(0x0040)
    int32_t                                       Gender;                                                       // 0x0058(0x0004)
    bool                                          WithHelmetInView;                                             // 0x005C(0x0001)
    char                                          pa_005D[0x0003]                                               // 0x005D(0x0003)
};


// ScriptStruct  TGFGame.MapNameConfigRow
// Struct Size::0x0040
struct FMapNameConfigRow : public FTableRowBase
{
    int32_t                                       MapId;                                                        // 0x0008(0x0004)
    int32_t                                       Difficulty;                                                   // 0x000C(0x0004)
    int32_t                                       LevelId;                                                      // 0x0010(0x0004)
    int32_t                                       LevelType;                                                    // 0x0014(0x0004)
    FString                                       MapName;                                                      // 0x0018(0x0010)
    int32_t                                       JoinMembers;                                                  // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
    UTexture2D*                                   MapRes;                                                       // 0x0030(0x0008)
    UTexture2D*                                   MapSelectBgRes;                                               // 0x0038(0x0008)
};


// ScriptStruct  TGFGame.MarketCost
// Struct Size::0x0010
struct FMarketCost
{
    int32_t                                       VirtualItemId;                                                // 0x0000(0x0004)
    int32_t                                       Amount;                                                       // 0x0004(0x0004)
    int32_t                                       OriginPrice;                                                  // 0x0008(0x0004)
    bool                                          bAffordable;                                                  // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
};


// ScriptStruct  TGFGame.MarketProductTab
// Struct Size::0x0028
struct FMarketProductTab
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    int64_t                                       NextAutoRefreshTime;                                          // 0x0008(0x0008)
    TArray<UMarketProduct*>                       Products;                                                     // 0x0010(0x0010)
    char                                          pa_0020[0x0008]                                               // 0x0020(0x0008)
};


// ScriptStruct  TGFGame.MarqueeConfig
// Struct Size::0x0188
struct FMarqueeConfig
{
    bool                                          bIsValid;                                                     // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    int32_t                                       MarqueeId;                                                    // 0x0004(0x0004)
    bool                                          bIsEnable;                                                    // 0x0008(0x0001)
    char                                          pa_0009[0x0007]                                               // 0x0009(0x0007)
    FDateTime                                     StartDateTime;                                                // 0x0010(0x0008)
    FDateTime                                     EndDateTime;                                                  // 0x0018(0x0008)
    enum class EMarqueeType                       MarqueeType;                                                  // 0x0020(0x0001)
    char                                          pa_0021[0x0003]                                               // 0x0021(0x0003)
    int32_t                                       SortOrder;                                                    // 0x0024(0x0004)
    int32_t                                       LoopCount;                                                    // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
    int64_t                                       Interval;                                                     // 0x0030(0x0008)
    TSet<int32_t>                                 ZoneWhitelistSet;                                             // 0x0038(0x0050)
    TSet<int32_t>                                 ZoneBlacklistSet;                                             // 0x0088(0x0050)
    int32_t                                       VersionWhitelist;                                             // 0x00D8(0x0004)
    char                                          pa_00DC[0x0004]                                               // 0x00DC(0x0004)
    TSet<FString>                                 RegionWhitelist;                                              // 0x00E0(0x0050)
    FCultureTextMap                               CultureTextMap;                                               // 0x0130(0x0058)
};


// ScriptStruct  TGFGame.MarqueeMessage
// Struct Size::0x0020
struct FMarqueeMessage
{
    bool                                          bIsValid;                                                     // 0x0000(0x0001)
    enum class EMarqueeType                       MarqueeType;                                                  // 0x0001(0x0001)
    char                                          pa_0002[0x0002]                                               // 0x0002(0x0002)
    int32_t                                       MarqueeId;                                                    // 0x0004(0x0004)
    int32_t                                       SortOrder;                                                    // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FString                                       TextContent;                                                  // 0x0010(0x0010)
};


// ScriptStruct  TGFGame.MatchLevelInfo
// Struct Size::0x0020
struct FMatchLevelInfo
{
    bool                                          bIsValid;                                                     // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    int32_t                                       LevelId;                                                      // 0x0004(0x0004)
    int32_t                                       LevelType;                                                    // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FString                                       Region;                                                       // 0x0010(0x0010)
};


// ScriptStruct  TGFGame.CtiProductInfo
// Struct Size::0x0088
struct FCtiProductInfo
{
    FString                                       CurrencyCode;                                                 // 0x0000(0x0010)
    FString                                       CurrentPrice;                                                 // 0x0010(0x0010)
    int32_t                                       DecimalPoint;                                                 // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
    FString                                       DisplayPrice;                                                 // 0x0028(0x0010)
    FString                                       OriginalPrice;                                                // 0x0038(0x0010)
    FString                                       PlatformProductId;                                            // 0x0048(0x0010)
    FString                                       ProductName;                                                  // 0x0058(0x0010)
    FString                                       RegionCode;                                                   // 0x0068(0x0010)
    FString                                       UnifiedProductId;                                             // 0x0078(0x0010)
};


// ScriptStruct  TGFGame.PlayerProfile
// Struct Size::0x0068
struct FPlayerProfile
{
    FString                                       open;                                                         // 0x0000(0x0010)
    int64_t                                       user;                                                         // 0x0010(0x0008)
    FString                                       nick;                                                         // 0x0018(0x0010)
    FString                                       logo;                                                         // 0x0028(0x0010)
    int32_t                                       sex;                                                          // 0x0038(0x0004)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
    FString                                       custom;                                                       // 0x0040(0x0010)
    int32_t                                       avatar;                                                       // 0x0050(0x0004)
    int32_t                                       avatar;                                                       // 0x0054(0x0004)
    int32_t                                       stat;                                                         // 0x0058(0x0004)
    int32_t                                       stat;                                                         // 0x005C(0x0004)
    int32_t                                       stat;                                                         // 0x0060(0x0004)
    char                                          pa_0064[0x0004]                                               // 0x0064(0x0004)
};


// ScriptStruct  TGFGame.PVPMapRow
// Struct Size::0x0038
struct FPVPMapRow : public FTableRowBase
{
    int32_t                                       MapId;                                                        // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FText                                         MapName;                                                      // 0x0010(0x0018)
    UTexture2D*                                   MapRes;                                                       // 0x0028(0x0008)
    bool                                          IsLocked;                                                     // 0x0030(0x0001)
    char                                          pa_0031[0x0007]                                               // 0x0031(0x0007)
};


// ScriptStruct  TGFGame.PVPModeRow
// Struct Size::0x0030
struct FPVPModeRow : public FTableRowBase
{
    int32_t                                       ModeId;                                                       // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FText                                         ModeName;                                                     // 0x0010(0x0018)
    bool                                          IsLocked;                                                     // 0x0028(0x0001)
    char                                          pa_0029[0x0007]                                               // 0x0029(0x0007)
};


// ScriptStruct  TGFGame.RoleAttributeValue
// Struct Size::0x000C
struct FRoleAttributeValue
{
    int32_t                                       type;                                                         // 0x0000(0x0004)
    float                                         total;                                                        // 0x0004(0x0004)
    float                                         base;                                                         // 0x0008(0x0004)
};


// ScriptStruct  TGFGame.RoleUpdateCallback
// Struct Size::0x0130
struct FRoleUpdateCallback
{
    bool                                          bIsValid;                                                     // 0x0000(0x0001)
    bool                                          bIsSubscribe;                                                 // 0x0001(0x0001)
    char                                          pa_0002[0x0006]                                               // 0x0002(0x0006)
    TSet<FRoleKey>                                RoleKeySet;                                                   // 0x0008(0x0050)
    TMap<FRoleKey,URoleInfo*>                     RoleInfoMap;                                                  // 0x0058(0x0050)
    char                                          pa_00A8[0x0088]                                               // 0x00A8(0x0088)
};


// ScriptStruct  TGFGame.SDKNoticePictureInfo
// Struct Size::0x0068
struct FSDKNoticePictureInfo
{
    FString                                       PicUrl;                                                       // 0x0000(0x0010)
    FString                                       PicHash;                                                      // 0x0010(0x0010)
    FString                                       PicTitle;                                                     // 0x0020(0x0010)
    FString                                       PicSize;                                                      // 0x0030(0x0010)
    int32_t                                       ScreenDir;                                                    // 0x0040(0x0004)
    char                                          pa_0044[0x0004]                                               // 0x0044(0x0004)
    FString                                       PicRedirectUrl;                                               // 0x0048(0x0010)
    FString                                       ExtraData;                                                    // 0x0058(0x0010)
};


// ScriptStruct  TGFGame.SDKNoticeTextInfo
// Struct Size::0x0080
struct FSDKNoticeTextInfo
{
    FString                                       Title;                                                        // 0x0000(0x0010)
    FString                                       Content;                                                      // 0x0010(0x0010)
    FString                                       RedirectUrl;                                                  // 0x0020(0x0010)
    int32_t                                       ContentId;                                                    // 0x0030(0x0004)
    char                                          pa_0034[0x0004]                                               // 0x0034(0x0004)
    FString                                       AppContentId;                                                 // 0x0038(0x0010)
    FString                                       LangType;                                                     // 0x0048(0x0010)
    int32_t                                       UpdateTime;                                                   // 0x0058(0x0004)
    char                                          pa_005C[0x0004]                                               // 0x005C(0x0004)
    FString                                       ExtraData;                                                    // 0x0060(0x0010)
    TArray<FSDKNoticePictureInfo>                 PictureList;                                                  // 0x0070(0x0010)
};


// ScriptStruct  TGFGame.SDKNoticeInfo
// Struct Size::0x0178
struct FSDKNoticeInfo
{
    int32_t                                       NoticeId;                                                     // 0x0000(0x0004)
    int32_t                                       BeginTime;                                                    // 0x0004(0x0004)
    int32_t                                       EndTime;                                                      // 0x0008(0x0004)
    int32_t                                       UpdateTime;                                                   // 0x000C(0x0004)
    TArray<FSDKNoticePictureInfo>                 PictureUrlList;                                               // 0x0010(0x0010)
    int32_t                                       NoticeType;                                                   // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
    FString                                       NoticeGroup;                                                  // 0x0028(0x0010)
    int32_t                                       order;                                                        // 0x0038(0x0004)
    int32_t                                       ContentType;                                                  // 0x003C(0x0004)
    FString                                       Language;                                                     // 0x0040(0x0010)
    FSDKNoticeTextInfo                            TextInfo;                                                     // 0x0050(0x0080)
    FString                                       WebUrl;                                                       // 0x00D0(0x0010)
    FString                                       AppId;                                                        // 0x00E0(0x0010)
    FString                                       AppNoticeId;                                                  // 0x00F0(0x0010)
    int32_t                                       Status;                                                       // 0x0100(0x0004)
    char                                          pa_0104[0x0004]                                               // 0x0104(0x0004)
    FString                                       AreaList;                                                     // 0x0108(0x0010)
    TArray<FSDKNoticeTextInfo>                    ContentList;                                                  // 0x0118(0x0010)
    TMap<FString,FString>                         ExtraData;                                                    // 0x0128(0x0050)
};


// ScriptStruct  TGFGame.SDKBaseResult
// Struct Size::0x0040
struct FSDKBaseResult
{
    int32_t                                       MethodId;                                                     // 0x0000(0x0004)
    int32_t                                       RetCode;                                                      // 0x0004(0x0004)
    FString                                       RetMsg;                                                       // 0x0008(0x0010)
    int32_t                                       ThirdCode;                                                    // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    FString                                       ThirdMsg;                                                     // 0x0020(0x0010)
    FString                                       ExtraJson;                                                    // 0x0030(0x0010)
};


// ScriptStruct  TGFGame.SDKLoginResult
// Struct Size::0x0170
struct FSDKLoginResult : public FSDKBaseResult
{
    FString                                       OpenID;                                                       // 0x0040(0x0010)
    FString                                       Token;                                                        // 0x0050(0x0010)
    int32_t                                       TokenExpireTime;                                              // 0x0060(0x0004)
    int32_t                                       FirstLogin;                                                   // 0x0064(0x0004)
    FString                                       RegChannelDis;                                                // 0x0068(0x0010)
    FString                                       UserName;                                                     // 0x0078(0x0010)
    int32_t                                       Gender;                                                       // 0x0088(0x0004)
    char                                          pa_008C[0x0004]                                               // 0x008C(0x0004)
    FString                                       Birthday;                                                     // 0x0090(0x0010)
    FString                                       PictureUrl;                                                   // 0x00A0(0x0010)
    FString                                       Pf;                                                           // 0x00B0(0x0010)
    FString                                       PfKey;                                                        // 0x00C0(0x0010)
    bool                                          RealNameAuth;                                                 // 0x00D0(0x0001)
    char                                          pa_00D1[0x0003]                                               // 0x00D1(0x0003)
    int32_t                                       ChannelID;                                                    // 0x00D4(0x0004)
    FString                                       Channel;                                                      // 0x00D8(0x0010)
    FString                                       ChannelInfo;                                                  // 0x00E8(0x0010)
    FString                                       ConfirmCode;                                                  // 0x00F8(0x0010)
    int32_t                                       ConfirmCodeExpireTime;                                        // 0x0108(0x0004)
    char                                          pa_010C[0x0004]                                               // 0x010C(0x0004)
    FString                                       BindList;                                                     // 0x0110(0x0010)
    FString                                       LegalDoc;                                                     // 0x0120(0x0010)
    FString                                       TransferCode;                                                 // 0x0130(0x0010)
    int32_t                                       TransferCodeExpireTime;                                       // 0x0140(0x0004)
    int32_t                                       DeleteAccountStatus;                                          // 0x0144(0x0004)
    FString                                       DeleteAccountInfo;                                            // 0x0148(0x0010)
    int32_t                                       DeleteLIAccountStatus;                                        // 0x0158(0x0004)
    char                                          pa_015C[0x0004]                                               // 0x015C(0x0004)
    FString                                       Email;                                                        // 0x0160(0x0010)
};


// ScriptStruct  TGFGame.SocialToggleConfigRow
// Struct Size::0x0088
struct FSocialToggleConfigRow : public FTableRowBase
{
    enum class ESocialToggleType                  ToggleType;                                                   // 0x0008(0x0001)
    char                                          pa_0009[0x0007]                                               // 0x0009(0x0007)
    FText                                         ToggleName;                                                   // 0x0010(0x0018)
    TSoftObjectPtr<UTexture2D>                    IconTexture;                                                  // 0x0028(0x0030)
    TSoftObjectPtr<UTexture2D>                    GrayIconTexture;                                              // 0x0058(0x0030)
};


// ScriptStruct  TGFGame.StringResult
// Struct Size::0x0018
struct FStringResult
{
    bool                                          bIsHandled;                                                   // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    FString                                       OutString;                                                    // 0x0008(0x0010)
};


// ScriptStruct  TGFGame.TGFGameAdventureDetailConfigRow
// Struct Size::0x0070
struct FTGFGameAdventureDetailConfigRow : public FTableRowBase
{
    int32_t                                       AdventureID;                                                  // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FText                                         Title;                                                        // 0x0010(0x0018)
    TSoftObjectPtr<UTexture2D>                    TitleIcon;                                                    // 0x0028(0x0030)
    FText                                         LetterContent;                                                // 0x0058(0x0018)
};


// ScriptStruct  TGFGame.TGFSteamAchievementTaskParamConfigRow
// Struct Size::0x0030
struct FTGFSteamAchievementTaskParamConfigRow : public FTableRowBase
{
    enum class ETGFInGameRookieTaskType           ClientTaskType;                                               // 0x0008(0x0001)
    char                                          pa_0009[0x0007]                                               // 0x0009(0x0007)
    TArray<float>                                 ArrParams;                                                    // 0x0010(0x0010)
    FString                                       Comment;                                                      // 0x0020(0x0010)
};


// ScriptStruct  TGFGame.TextTableRaw
// Struct Size::0x0028
struct FTextTableRaw : public FTableRowBase
{
    FString                                       CN;                                                           // 0x0008(0x0010)
    FString                                       EN;                                                           // 0x0018(0x0010)
};


// ScriptStruct  TGFGame.TgfAudioSystemSettings
// Struct Size::0x000C
struct FTgfAudioSystemSettings
{
    float                                         MasterVolume;                                                 // 0x0000(0x0004)
    float                                         BGMVolume;                                                    // 0x0004(0x0004)
    float                                         SFXVolume;                                                    // 0x0008(0x0004)
};


// ScriptStruct  TGFGame.TGFConditionRule
// Struct Size::0x0001
struct FTGFConditionRule
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  TGFGame.TGFCraftingSlotData
// Struct Size::0x0020
struct FTGFCraftingSlotData
{
    int32_t                                       RecipeId;                                                     // 0x0000(0x0004)
    int32_t                                       Count;                                                        // 0x0004(0x0004)
    int32_t                                       UncompletedCount;                                             // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    int64_t                                       StartTime;                                                    // 0x0010(0x0008)
    int64_t                                       TimeCost;                                                     // 0x0018(0x0008)
};


// ScriptStruct  TGFGame.TGFItem
// Struct Size::0x0058
struct FTGFItem
{
    int32_t                                       type;                                                         // 0x0000(0x0004)
    int32_t                                       Count;                                                        // 0x0004(0x0004)
    int32_t                                       Guid;                                                         // 0x0008(0x0004)
    int32_t                                       expire;                                                       // 0x000C(0x0004)
    FTGFItemPosition                              position;                                                     // 0x0010(0x0018)
    char                                          pa_0028[0x0030]                                               // 0x0028(0x0030)
};


// ScriptStruct  TGFGame.TGFItemMoveAction
// Struct Size::0x0040
struct FTGFItemMoveAction
{
    FTGFItemPosition                              src;                                                          // 0x0000(0x0018)
    FTGFItemPosition                              dest;                                                         // 0x0018(0x0018)
    int32_t                                       stack;                                                        // 0x0030(0x0004)
    int32_t                                       src;                                                          // 0x0034(0x0004)
    int32_t                                       dest;                                                         // 0x0038(0x0004)
    int32_t                                       heap;                                                         // 0x003C(0x0004)
};


// ScriptStruct  TGFGame.TGFItemOffset
// Struct Size::0x0010
struct FTGFItemOffset
{
    int32_t                                       type;                                                         // 0x0000(0x0004)
    int32_t                                       Count;                                                        // 0x0004(0x0004)
    int64_t                                       expire;                                                       // 0x0008(0x0008)
};


// ScriptStruct  TGFGame.TGFMailMultiLanguage
// Struct Size::0x0020
struct FTGFMailMultiLanguage
{
    FString                                       Title;                                                        // 0x0000(0x0010)
    FString                                       Content;                                                      // 0x0010(0x0010)
};


// ScriptStruct  TGFGame.TGFMailItemOffset
// Struct Size::0x0018
struct FTGFMailItemOffset
{
    int32_t                                       Index;                                                        // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FTGFItemOffset                                ItemOffset;                                                   // 0x0008(0x0010)
};


// ScriptStruct  TGFGame.TGFMailItem
// Struct Size::0x0060
struct FTGFMailItem
{
    int32_t                                       Index;                                                        // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FTGFItem                                      Item;                                                         // 0x0008(0x0058)
};


// ScriptStruct  TGFGame.TGFMailReceiveKey
// Struct Size::0x0028
struct FTGFMailReceiveKey
{
    int64_t                                       MailId;                                                       // 0x0000(0x0008)
    TArray<FTGFItem>                              Items;                                                        // 0x0008(0x0010)
    TArray<int32_t>                               Indexes;                                                      // 0x0018(0x0010)
};


// ScriptStruct  TGFGame.TGFMailContent
// Struct Size::0x0200
struct FTGFMailContent
{
    int64_t                                       mail;                                                         // 0x0000(0x0008)
    enum class ETGFProtoTgfEnMailMajorType        major;                                                        // 0x0008(0x0001)
    enum class ETGFProtoTgfEnMailStatusType       Status;                                                       // 0x0009(0x0001)
    char                                          pa_000A[0x0006]                                               // 0x000A(0x0006)
    FString                                       Title;                                                        // 0x0010(0x0010)
    FString                                       Content;                                                      // 0x0020(0x0010)
    FTGFMailUserInfo                              sender;                                                       // 0x0030(0x0080)
    FString                                       tip;                                                          // 0x00B0(0x0010)
    FDateTime                                     delivery;                                                     // 0x00C0(0x0008)
    FDateTime                                     start;                                                        // 0x00C8(0x0008)
    FDateTime                                     local;                                                        // 0x00D0(0x0008)
    FDateTime                                     show;                                                         // 0x00D8(0x0008)
    FDateTime                                     expired;                                                      // 0x00E0(0x0008)
    int32_t                                       mail;                                                         // 0x00E8(0x0004)
    char                                          pa_00EC[0x0004]                                               // 0x00EC(0x0004)
    TMap<FString,FString>                         mail;                                                         // 0x00F0(0x0050)
    TMap<int32_t,FTGFMailMultiLanguage>           language;                                                     // 0x0140(0x0050)
    TArray<FTGFMailItemOffset>                    attachments;                                                  // 0x0190(0x0010)
    TArray<FTGFMailItem>                          attachments;                                                  // 0x01A0(0x0010)
    TSet<int32_t>                                 ReceivedIndexes;                                              // 0x01B0(0x0050)
};


// ScriptStruct  TGFGame.TGFMailUserInfo
// Struct Size::0x0080
struct FTGFMailUserInfo
{
    FPlayerProfile                                Profile;                                                      // 0x0000(0x0068)
    int64_t                                       account;                                                      // 0x0068(0x0008)
    int32_t                                       account;                                                      // 0x0070(0x0004)
    int32_t                                       login;                                                        // 0x0074(0x0004)
    int32_t                                       friend;                                                       // 0x0078(0x0004)
    char                                          pa_007C[0x0004]                                               // 0x007C(0x0004)
};


// ScriptStruct  TGFGame.TGFRegionData
// Struct Size::0x0040
struct FTGFRegionData
{
    FString                                       ID;                                                           // 0x0000(0x0010)
    FString                                       Name;                                                         // 0x0010(0x0010)
    FString                                       SpeedtestIp;                                                  // 0x0020(0x0010)
    int32_t                                       SpeedtestPort;                                                // 0x0030(0x0004)
    int32_t                                       LatencyMillisecond;                                           // 0x0034(0x0004)
    int32_t                                       ClusterId;                                                    // 0x0038(0x0004)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
};


// ScriptStruct  TGFGame.TGFRegionDetailData
// Struct Size::0x0098
struct FTGFRegionDetailData
{
    bool                                          ShowDsRegion;                                                 // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    int32_t                                       SpeedtestInterval;                                            // 0x0004(0x0004)
    int32_t                                       SpeedtestPacketCount;                                         // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FString                                       GRomeLinkMgrDomain;                                           // 0x0010(0x0010)
    int32_t                                       GRomeLinkMgrDomainPort;                                       // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
    TArray<URegionData*>                          DsRegions;                                                    // 0x0028(0x0010)
    TArray<URegionData*>                          HiddenDsRegions;                                              // 0x0038(0x0010)
    TMap<int32_t,URegionData*>                    TMapClusterIdRegion;                                          // 0x0048(0x0050)
};


// ScriptStruct  TGFGame.TGFReportRecord
// Struct Size::0x0090
struct FTGFReportRecord
{
    FString                                       EventName;                                                    // 0x0000(0x0010)
    FString                                       EventType;                                                    // 0x0010(0x0010)
    FString                                       Str1;                                                         // 0x0020(0x0010)
    FString                                       Str2;                                                         // 0x0030(0x0010)
    FString                                       Str3;                                                         // 0x0040(0x0010)
    FString                                       Str4;                                                         // 0x0050(0x0010)
    FString                                       Str5;                                                         // 0x0060(0x0010)
    int64_t                                       Int1;                                                         // 0x0070(0x0008)
    int64_t                                       Int2;                                                         // 0x0078(0x0008)
    int64_t                                       Int3;                                                         // 0x0080(0x0008)
    int64_t                                       ActionTime;                                                   // 0x0088(0x0008)
};


// ScriptStruct  TGFGame.TGFScreenResolutionEntry
// Struct Size::0x000C
struct FTGFScreenResolutionEntry
{
    uint32_t                                      Width;                                                        // 0x0000(0x0004)
    uint32_t                                      Height;                                                       // 0x0004(0x0004)
    uint32_t                                      RefreshRate;                                                  // 0x0008(0x0004)
};


// ScriptStruct  TGFGame.TGFScreenResolutionPackage
// Struct Size::0x0030
struct FTGFScreenResolutionPackage
{
    TArray<FTGFScreenResolutionEntry>             FullScreenResolutions;                                        // 0x0000(0x0010)
    TArray<FTGFScreenResolutionEntry>             WindowedFullScreenResolutions;                                // 0x0010(0x0010)
    TArray<FTGFScreenResolutionEntry>             WindowedResolutions;                                          // 0x0020(0x0010)
};


// ScriptStruct  TGFGame.TGFRoleMetaIndex
// Struct Size::0x0008
struct FTGFRoleMetaIndex
{
    int32_t                                       faction;                                                      // 0x0000(0x0004)
    enum class ETgfActorCareer                    Career;                                                       // 0x0004(0x0001)
    enum class EnRoleGenderType                   Gender;                                                       // 0x0005(0x0001)
    enum class ETgfActorRace                      Race;                                                         // 0x0006(0x0001)
    enum class ETgfForceType                      Force;                                                        // 0x0007(0x0001)
};


// ScriptStruct  TGFGame.RecommendProductSet
// Struct Size::0x0050
struct FRecommendProductSet
{
    TMap<int32_t,UTGFTradeMarketProductData*>     ProductDataMap;                                               // 0x0000(0x0050)
};


// ScriptStruct  TGFGame.RecommendProductPool
// Struct Size::0x00F0
struct FRecommendProductPool
{
    FRecommendProductSet                          ProductSetBase;                                               // 0x0000(0x0050)
    TMap<enum class ETgfEquipSubType,FRecommendProductSet>ProductSetEquipSubType;                               // 0x0050(0x0050)
    TMap<enum class ETGFProtoTgfEnItemMinorType,FRecommendProductSet>ProductSetItemMinorType;                   // 0x00A0(0x0050)
};


// ScriptStruct  TGFGame.TGFTradeSearchResultData
// Struct Size::0x0018
struct FTGFTradeSearchResultData
{
    TArray<UTradeSearchResultOrder*>              ResultDatas;                                                  // 0x0000(0x0010)
    bool                                          HasNextPage;                                                  // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
};


// ScriptStruct  TGFGame.TGFUserCraftingData
// Struct Size::0x0020
struct FTGFUserCraftingData
{
    TArray<int32_t>                               Recipe;                                                       // 0x0000(0x0010)
    TArray<FTGFCraftingSlotData>                  Crafting;                                                     // 0x0010(0x0010)
};


// ScriptStruct  TGFGame.TGFUserInvetoryData
// Struct Size::0x0030
struct FTGFUserInvetoryData
{
    int32_t                                       row;                                                          // 0x0000(0x0004)
    int32_t                                       column;                                                       // 0x0004(0x0004)
    char                                          pa_0008[0x0028]                                               // 0x0008(0x0028)
};


// ScriptStruct  TGFGame.TGFDRoleDressUp
// Struct Size::0x0004
struct FTGFDRoleDressUp
{
    int32_t                                       default;                                                      // 0x0000(0x0004)
};


// ScriptStruct  TGFGame.TGFUserRole
// Struct Size::0x0070
struct FTGFUserRole
{
    int32_t                                       type;                                                         // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    int64_t                                       role;                                                         // 0x0008(0x0008)
    FString                                       role;                                                         // 0x0010(0x0010)
    int32_t                                       expire;                                                       // 0x0020(0x0004)
    int32_t                                       last;                                                         // 0x0024(0x0004)
    int32_t                                       create;                                                       // 0x0028(0x0004)
    FTGFRoleMetaIndex                             meta;                                                         // 0x002C(0x0008)
    int32_t                                       role;                                                         // 0x0034(0x0004)
    int32_t                                       Exp;                                                          // 0x0038(0x0004)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
    UTGFProtoTgfDRoleDressUp*                     dress;                                                        // 0x0040(0x0008)
    TArray<FTGFItem>                              wearing;                                                      // 0x0048(0x0010)
    UTGFProtoTgfDBattleAffixAppendData*           role;                                                         // 0x0058(0x0008)
    UTGFProtoTgfDRoleSkillData*                   role;                                                         // 0x0060(0x0008)
    int64_t                                       lazy;                                                         // 0x0068(0x0008)
};


// ScriptStruct  TGFGame.RangeTime
// Struct Size::0x0010
struct FRangeTime
{
    int64_t                                       BeginTime;                                                    // 0x0000(0x0008)
    int64_t                                       EndTime;                                                      // 0x0008(0x0008)
};


// ScriptStruct  TGFGame.BanModule
// Struct Size::0x0090
struct FBanModule
{
    bool                                          bIsValid;                                                     // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    int32_t                                       ModuleId;                                                     // 0x0004(0x0004)
    int32_t                                       BanId;                                                        // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    int64_t                                       BanDuration;                                                  // 0x0010(0x0008)
    int64_t                                       BanEndTimestamp;                                              // 0x0018(0x0008)
    int64_t                                       DeviceBanTimestamp;                                           // 0x0020(0x0008)
    FString                                       TemplateId;                                                   // 0x0028(0x0010)
    FCultureTextMap                               ReasonCultureTextMap;                                         // 0x0038(0x0058)
};


// ScriptStruct  TGFGame.UnlockModule
// Struct Size::0x0090
struct FUnlockModule
{
    bool                                          bIsValid;                                                     // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    int32_t                                       ModuleId;                                                     // 0x0004(0x0004)
    int64_t                                       UnlockTimestamp;                                              // 0x0008(0x0008)
    bool                                          bGlobalForbid;                                                // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
    TMap<int32_t,FBanModule>                      BanModuleMap;                                                 // 0x0018(0x0050)
    int64_t                                       StartTimestamp;                                               // 0x0068(0x0008)
    TArray<FRangeTime>                            RangeDateTimeArray;                                           // 0x0070(0x0010)
    TArray<FRangeTime>                            RangeDailyTimeArray;                                          // 0x0080(0x0010)
};


// ScriptStruct  TGFGame.UnlockModuleMap
// Struct Size::0x0058
struct FUnlockModuleMap
{
    bool                                          bIsValid;                                                     // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    TMap<int32_t,FUnlockModule>                   UnlockModuleMap;                                              // 0x0008(0x0050)
};


// ScriptStruct  TGFGame.ModuleCircularData
// Struct Size::0x0010
struct FModuleCircularData
{
    bool                                          bIsValid;                                                     // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    int32_t                                       ModuleId;                                                     // 0x0004(0x0004)
    int64_t                                       Duration;                                                     // 0x0008(0x0008)
};


// ScriptStruct  TGFGame.ModuleCircularCfgData
// Struct Size::0x0030
struct FModuleCircularCfgData
{
    bool                                          bIsValid;                                                     // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    int32_t                                       ID;                                                           // 0x0004(0x0004)
    int64_t                                       StartTime;                                                    // 0x0008(0x0008)
    int64_t                                       EndTime;                                                      // 0x0010(0x0008)
    int64_t                                       CircleTime;                                                   // 0x0018(0x0008)
    TArray<FModuleCircularData>                   CircularQueue;                                                // 0x0020(0x0010)
};


// ScriptStruct  TGFGame.ModuleCircularCfgDataMap
// Struct Size::0x0058
struct FModuleCircularCfgDataMap
{
    bool                                          bIsValid;                                                     // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    TMap<int32_t,FModuleCircularCfgData>          ModuleCircularCfgDataMap;                                     // 0x0008(0x0050)
};


// ScriptStruct  TGFGame.PlayerKey
// Struct Size::0x0020
struct FPlayerKey
{
    char                                          pa_0000[0x0020]                                               // 0x0000(0x0020)
};


// ScriptStruct  TGFGame.PlayerKeyArray
// Struct Size::0x0010
struct FPlayerKeyArray
{
    TArray<FPlayerKey>                            PlayerKeyArray;                                               // 0x0000(0x0010)
};


// ScriptStruct  TGFGame.UpdateHandlerArray
// Struct Size::0x0010
struct FUpdateHandlerArray
{
    TArray<int64_t>                               UpdateHandlerArray;                                           // 0x0000(0x0010)
};


// ScriptStruct  TGFGame.RoomKey
// Struct Size::0x0010
struct FRoomKey
{
    int64_t                                       RoomId;                                                       // 0x0000(0x0008)
    int64_t                                       RoomSvrId;                                                    // 0x0008(0x0008)
};


// ScriptStruct  TGFGame.RoleCommonHeadPortraitConfigRow
// Struct Size::0x0020
struct FRoleCommonHeadPortraitConfigRow : public FTableRowBase
{
    int32_t                                       ID;                                                           // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FString                                       CareerHeadPath;                                               // 0x0010(0x0010)
};


// ScriptStruct  TGFGame.UserUpdateCallback
// Struct Size::0x0130
struct FUserUpdateCallback
{
    bool                                          bIsValid;                                                     // 0x0000(0x0001)
    bool                                          bIsSubscribe;                                                 // 0x0001(0x0001)
    char                                          pa_0002[0x0006]                                               // 0x0002(0x0006)
    TSet<FUserKey>                                UserKeySet;                                                   // 0x0008(0x0050)
    TMap<FUserKey,UUserInfo*>                     UserInfoMap;                                                  // 0x0058(0x0050)
    char                                          pa_00A8[0x0088]                                               // 0x00A8(0x0088)
};


// ScriptStruct  RigVM.RigVMMemoryStatistics
// Struct Size::0x000C
struct FRigVMMemoryStatistics
{
    int32_t                                       RegisterCount;                                                // 0x0000(0x0004)
    int32_t                                       DataBytes;                                                    // 0x0004(0x0004)
    int32_t                                       TotalBytes;                                                   // 0x0008(0x0004)
};


// ScriptStruct  RigVM.RigVMByteCodeStatistics
// Struct Size::0x0008
struct FRigVMByteCodeStatistics
{
    int32_t                                       InstructionCount;                                             // 0x0000(0x0004)
    int32_t                                       DataBytes;                                                    // 0x0004(0x0004)
};


// ScriptStruct  RigVM.RigVMStatistics
// Struct Size::0x0038
struct FRigVMStatistics
{
    int32_t                                       BytesForCDO;                                                  // 0x0000(0x0004)
    int32_t                                       BytesPerInstance;                                             // 0x0004(0x0004)
    FRigVMMemoryStatistics                        LiteralMemory;                                                // 0x0008(0x000C)
    FRigVMMemoryStatistics                        WorkMemory;                                                   // 0x0014(0x000C)
    FRigVMMemoryStatistics                        DebugMemory;                                                  // 0x0020(0x000C)
    int32_t                                       BytesForCaching;                                              // 0x002C(0x0004)
    FRigVMByteCodeStatistics                      ByteCode;                                                     // 0x0030(0x0008)
};


// ScriptStruct  RigVM.RigVMParameter
// Struct Size::0x0030
struct FRigVMParameter
{
    enum class ERigVMParameterType                Type;                                                         // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FName                                         Name;                                                         // 0x0004(0x0008)
    int32_t                                       RegisterIndex;                                                // 0x000C(0x0004)
    FString                                       CPPType;                                                      // 0x0010(0x0010)
    UScriptStruct*                                ScriptStruct;                                                 // 0x0020(0x0008)
    FName                                         ScriptStructPath;                                             // 0x0028(0x0008)
};


// ScriptStruct  RigVM.RigVMBaseOp
// Struct Size::0x0001
struct FRigVMBaseOp
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  RigVM.RigVMExecuteOp
// Struct Size::0x0004
struct FRigVMExecuteOp : public FRigVMBaseOp
{
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
};


// ScriptStruct  RigVM.RigVMUnaryOp
// Struct Size::0x0008
struct FRigVMUnaryOp : public FRigVMBaseOp
{
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
};


// ScriptStruct  RigVM.RigVMBinaryOp
// Struct Size::0x000E
struct FRigVMBinaryOp : public FRigVMBaseOp
{
    char                                          pa_0001[0x000D]                                               // 0x0001(0x000D)
};


// ScriptStruct  RigVM.RigVMTernaryOp
// Struct Size::0x0014
struct FRigVMTernaryOp : public FRigVMBaseOp
{
    char                                          pa_0001[0x0013]                                               // 0x0001(0x0013)
};


// ScriptStruct  RigVM.RigVMQuaternaryOp
// Struct Size::0x001A
struct FRigVMQuaternaryOp : public FRigVMBaseOp
{
    char                                          pa_0001[0x0019]                                               // 0x0001(0x0019)
};


// ScriptStruct  RigVM.RigVMQuinaryOp
// Struct Size::0x0020
struct FRigVMQuinaryOp : public FRigVMBaseOp
{
    char                                          pa_0001[0x001F]                                               // 0x0001(0x001F)
};


// ScriptStruct  RigVM.RigVMSenaryOp
// Struct Size::0x0026
struct FRigVMSenaryOp : public FRigVMBaseOp
{
    char                                          pa_0001[0x0025]                                               // 0x0001(0x0025)
};


// ScriptStruct  RigVM.RigVMCopyOp
// Struct Size::0x0012
struct FRigVMCopyOp : public FRigVMBaseOp
{
    char                                          pa_0001[0x0011]                                               // 0x0001(0x0011)
};


// ScriptStruct  RigVM.RigVMComparisonOp
// Struct Size::0x0014
struct FRigVMComparisonOp : public FRigVMBaseOp
{
    char                                          pa_0001[0x0013]                                               // 0x0001(0x0013)
};


// ScriptStruct  RigVM.RigVMJumpOp
// Struct Size::0x0008
struct FRigVMJumpOp : public FRigVMBaseOp
{
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
};


// ScriptStruct  RigVM.RigVMJumpIfOp
// Struct Size::0x0010
struct FRigVMJumpIfOp : public FRigVMUnaryOp
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
};


// ScriptStruct  RigVM.RigVMChangeTypeOp
// Struct Size::0x0008
struct FRigVMChangeTypeOp : public FRigVMUnaryOp
{
};


// ScriptStruct  RigVM.RigVMInvokeEntryOp
// Struct Size::0x000C
struct FRigVMInvokeEntryOp : public FRigVMBaseOp
{
    char                                          pa_0001[0x000B]                                               // 0x0001(0x000B)
};


// ScriptStruct  RigVM.RigVMInstruction
// Struct Size::0x0010
struct FRigVMInstruction
{
    uint64_t                                      ByteCodeIndex;                                                // 0x0000(0x0008)
    enum class ERigVMOpCode                       OpCode;                                                       // 0x0008(0x0001)
    char                                          OperandAlignment;                                             // 0x0009(0x0001)
    char                                          pa_000A[0x0006]                                               // 0x000A(0x0006)
};


// ScriptStruct  RigVM.RigVMInstructionArray
// Struct Size::0x0010
struct FRigVMInstructionArray
{
    TArray<FRigVMInstruction>                     Instructions;                                                 // 0x0000(0x0010)
};


// ScriptStruct  RigVM.RigVMByteCodeEntry
// Struct Size::0x000C
struct FRigVMByteCodeEntry
{
    FName                                         Name;                                                         // 0x0000(0x0008)
    int32_t                                       InstructionIndex;                                             // 0x0008(0x0004)
};


// ScriptStruct  RigVM.RigVMByteCode
// Struct Size::0x0030
struct FRigVMByteCode
{
    TArray<char>                                  ByteCode;                                                     // 0x0000(0x0010)
    int32_t                                       NumInstructions;                                              // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    TArray<FRigVMByteCodeEntry>                   Entries;                                                      // 0x0018(0x0010)
    char                                          pa_0028[0x0008]                                               // 0x0028(0x0008)
};


// ScriptStruct  RigVM.RigVMBreakpoint
// Struct Size::0x0028
struct FRigVMBreakpoint
{
    char                                          pa_0000[0x0028]                                               // 0x0000(0x0028)
};


// ScriptStruct  RigVM.RigVMDebugInfo
// Struct Size::0x00F8
struct FRigVMDebugInfo
{
    char                                          pa_0000[0x00F8]                                               // 0x0000(0x00F8)
};


// ScriptStruct  RigVM.RigVMSlice
// Struct Size::0x000C
struct FRigVMSlice
{
    char                                          pa_0000[0x000C]                                               // 0x0000(0x000C)
};


// ScriptStruct  RigVM.RigVMExtendedExecuteContext
// Struct Size::0x0078
struct FRigVMExtendedExecuteContext
{
    char                                          pa_0000[0x0078]                                               // 0x0000(0x0078)
};


// ScriptStruct  RigVM.RigVMOperand
// Struct Size::0x0006
struct FRigVMOperand
{
    enum class ERigVMMemoryType                   MemoryType;                                                   // 0x0000(0x0001)
    char                                          pa_0001[0x0001]                                               // 0x0001(0x0001)
    uint16_t                                      RegisterIndex;                                                // 0x0002(0x0002)
    uint16_t                                      RegisterOffset;                                               // 0x0004(0x0002)
};


// ScriptStruct  RigVM.RigVMRegister
// Struct Size::0x0024
struct FRigVMRegister
{
    enum class ERigVMRegisterType                 Type;                                                         // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    uint32_t                                      ByteIndex;                                                    // 0x0004(0x0004)
    uint16_t                                      ElementSize;                                                  // 0x0008(0x0002)
    uint16_t                                      ElementCount;                                                 // 0x000A(0x0002)
    uint16_t                                      SliceCount;                                                   // 0x000C(0x0002)
    char                                          AlignmentBytes;                                               // 0x000E(0x0001)
    char                                          pa_000F[0x0001]                                               // 0x000F(0x0001)
    uint16_t                                      TrailingBytes;                                                // 0x0010(0x0002)
    char                                          pa_0012[0x0002]                                               // 0x0012(0x0002)
    FName                                         Name;                                                         // 0x0014(0x0008)
    int32_t                                       ScriptStructIndex;                                            // 0x001C(0x0004)
    bool                                          bIsArray;                                                     // 0x0020(0x0001)
    bool                                          bIsDynamic;                                                   // 0x0021(0x0001)
    char                                          pa_0022[0x0002]                                               // 0x0022(0x0002)
};


// ScriptStruct  RigVM.RigVMRegisterOffset
// Struct Size::0x0048
struct FRigVMRegisterOffset
{
    TArray<int32_t>                               Segments;                                                     // 0x0000(0x0010)
    enum class ERigVMRegisterType                 Type;                                                         // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
    FName                                         CPPType;                                                      // 0x0014(0x0008)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    UScriptStruct*                                ScriptStruct;                                                 // 0x0020(0x0008)
    UScriptStruct*                                ParentScriptStruct;                                           // 0x0028(0x0008)
    int32_t                                       ArrayIndex;                                                   // 0x0030(0x0004)
    uint16_t                                      ElementSize;                                                  // 0x0034(0x0002)
    char                                          pa_0036[0x0002]                                               // 0x0036(0x0002)
    FString                                       CachedSegmentPath;                                            // 0x0038(0x0010)
};


// ScriptStruct  RigVM.RigVMMemoryContainer
// Struct Size::0x00A0
struct FRigVMMemoryContainer
{
    bool                                          bUseNameMap;                                                  // 0x0000(0x0001)
    enum class ERigVMMemoryType                   MemoryType;                                                   // 0x0001(0x0001)
    char                                          pa_0002[0x0006]                                               // 0x0002(0x0006)
    TArray<FRigVMRegister>                        Registers;                                                    // 0x0008(0x0010)
    TArray<FRigVMRegisterOffset>                  RegisterOffsets;                                              // 0x0018(0x0010)
    TArray<char>                                  Data;                                                         // 0x0028(0x0010)
    TArray<UScriptStruct*>                        ScriptStructs;                                                // 0x0038(0x0010)
    TMap<FName,int32_t>                           NameMap;                                                      // 0x0048(0x0050)
    bool                                          bEncounteredErrorDuringLoad;                                  // 0x0098(0x0001)
    char                                          pa_0099[0x0007]                                               // 0x0099(0x0007)
};


// ScriptStruct  RigVM.RigVMTemplateArgumentType
// Struct Size::0x0010
struct FRigVMTemplateArgumentType
{
    FName                                         CPPType;                                                      // 0x0000(0x0008)
    UObject*                                      CPPTypeObject;                                                // 0x0008(0x0008)
};


// ScriptStruct  RigVM.RigVMUserWorkflow
// Struct Size::0x0058
struct FRigVMUserWorkflow
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    FString                                       Title;                                                        // 0x0008(0x0010)
    FString                                       ToolTip;                                                      // 0x0018(0x0010)
    enum class ERigVMUserWorkflowType             Type;                                                         // 0x0028(0x0001)
    char                                          pa_0029[0x0017]                                               // 0x0029(0x0017)
    FDelegate                                     PerformDynamicDelegate;                                       // 0x0040(0x0010)
    UClass*                                       OptionsClass;                                                 // 0x0050(0x0008)
};


// ScriptStruct  LiveLinkInterface.LiveLinkSourceHandle
// Struct Size::0x0018
struct FLiveLinkSourceHandle
{
    char                                          pa_0000[0x0018]                                               // 0x0000(0x0018)
};


// ScriptStruct  LiveLinkInterface.LiveLinkBaseStaticData
// Struct Size::0x0010
struct FLiveLinkBaseStaticData
{
    TArray<FName>                                 PropertyNames;                                                // 0x0000(0x0010)
};


// ScriptStruct  LiveLinkInterface.LiveLinkSkeletonStaticData
// Struct Size::0x0030
struct FLiveLinkSkeletonStaticData : public FLiveLinkBaseStaticData
{
    TArray<FName>                                 BoneNames;                                                    // 0x0010(0x0010)
    TArray<int32_t>                               BoneParents;                                                  // 0x0020(0x0010)
};


// ScriptStruct  LiveLinkInterface.LiveLinkBaseFrameData
// Struct Size::0x00A0
struct FLiveLinkBaseFrameData
{
    FLiveLinkWorldTime                            WorldTime;                                                    // 0x0000(0x0010)
    FLiveLinkMetaData                             MetaData;                                                     // 0x0010(0x0060)
    TArray<float>                                 PropertyValues;                                               // 0x0070(0x0010)
    char                                          pa_0080[0x0020]                                               // 0x0080(0x0020)
};


// ScriptStruct  LiveLinkInterface.LiveLinkMetaData
// Struct Size::0x0060
struct FLiveLinkMetaData
{
    TMap<FName,FString>                           StringMetaData;                                               // 0x0000(0x0050)
    FQualifiedFrameTime                           SceneTime;                                                    // 0x0050(0x0010)
};


// ScriptStruct  LiveLinkInterface.LiveLinkWorldTime
// Struct Size::0x0010
struct FLiveLinkWorldTime
{
    double                                        Time;                                                         // 0x0000(0x0008)
    double                                        Offset;                                                       // 0x0008(0x0008)
};


// ScriptStruct  LiveLinkInterface.LiveLinkAnimationFrameData
// Struct Size::0x00B0
struct FLiveLinkAnimationFrameData : public FLiveLinkBaseFrameData
{
    TArray<FTransform>                            Transforms;                                                   // 0x00A0(0x0010)
};


// ScriptStruct  LiveLinkInterface.LiveLinkBasicBlueprintData
// Struct Size::0x00B8
struct FLiveLinkBasicBlueprintData : public FLiveLinkBaseBlueprintData
{
    FLiveLinkBaseStaticData                       StaticData;                                                   // 0x0008(0x0010)
    FLiveLinkBaseFrameData                        FrameData;                                                    // 0x0018(0x00A0)
};


// ScriptStruct  LiveLinkInterface.LiveLinkTransformStaticData
// Struct Size::0x0018
struct FLiveLinkTransformStaticData : public FLiveLinkBaseStaticData
{
    bool                                          bIsLocationSupported;                                         // 0x0010(0x0001)
    bool                                          bIsRotationSupported;                                         // 0x0011(0x0001)
    bool                                          bIsScaleSupported;                                            // 0x0012(0x0001)
    char                                          pa_0013[0x0005]                                               // 0x0013(0x0005)
};


// ScriptStruct  LiveLinkInterface.LiveLinkCameraStaticData
// Struct Size::0x0028
struct FLiveLinkCameraStaticData : public FLiveLinkTransformStaticData
{
    bool                                          bIsFieldOfViewSupported;                                      // 0x0018(0x0001)
    bool                                          bIsAspectRatioSupported;                                      // 0x0019(0x0001)
    bool                                          bIsFocalLengthSupported;                                      // 0x001A(0x0001)
    bool                                          bIsProjectionModeSupported;                                   // 0x001B(0x0001)
    float                                         FilmBackWidth;                                                // 0x001C(0x0004)
    float                                         FilmBackHeight;                                               // 0x0020(0x0004)
    bool                                          bIsApertureSupported;                                         // 0x0024(0x0001)
    bool                                          bIsFocusDistanceSupported;                                    // 0x0025(0x0001)
    bool                                          bIsDepthOfFieldSupported;                                     // 0x0026(0x0001)
    char                                          pa_0027[0x0001]                                               // 0x0027(0x0001)
};


// ScriptStruct  LiveLinkInterface.LiveLinkTransformFrameData
// Struct Size::0x0100
struct FLiveLinkTransformFrameData : public FLiveLinkBaseFrameData
{
    FTransform                                    Transform;                                                    // 0x00A0(0x0060)
};


// ScriptStruct  LiveLinkInterface.LiveLinkCameraFrameData
// Struct Size::0x0120
struct FLiveLinkCameraFrameData : public FLiveLinkTransformFrameData
{
    float                                         FieldOfView;                                                  // 0x0100(0x0004)
    float                                         AspectRatio;                                                  // 0x0104(0x0004)
    float                                         FocalLength;                                                  // 0x0108(0x0004)
    float                                         Aperture;                                                     // 0x010C(0x0004)
    float                                         FocusDistance;                                                // 0x0110(0x0004)
    enum class ELiveLinkCameraProjectionMode      ProjectionMode;                                               // 0x0114(0x0001)
    char                                          pa_0115[0x000B]                                               // 0x0115(0x000B)
};


// ScriptStruct  LiveLinkInterface.LiveLinkCameraBlueprintData
// Struct Size::0x0150
struct FLiveLinkCameraBlueprintData : public FLiveLinkBaseBlueprintData
{
    FLiveLinkCameraStaticData                     StaticData;                                                   // 0x0008(0x0028)
    FLiveLinkCameraFrameData                      FrameData;                                                    // 0x0030(0x0120)
};


// ScriptStruct  LiveLinkInterface.LiveLinkLightStaticData
// Struct Size::0x0028
struct FLiveLinkLightStaticData : public FLiveLinkTransformStaticData
{
    bool                                          bIsTemperatureSupported;                                      // 0x0018(0x0001)
    bool                                          bIsIntensitySupported;                                        // 0x0019(0x0001)
    bool                                          bIsLightColorSupported;                                       // 0x001A(0x0001)
    bool                                          bIsInnerConeAngleSupported;                                   // 0x001B(0x0001)
    bool                                          bIsOuterConeAngleSupported;                                   // 0x001C(0x0001)
    bool                                          bIsAttenuationRadiusSupported;                                // 0x001D(0x0001)
    bool                                          bIsSourceLenghtSupported;                                     // 0x001E(0x0001)
    bool                                          bIsSourceRadiusSupported;                                     // 0x001F(0x0001)
    bool                                          bIsSoftSourceRadiusSupported;                                 // 0x0020(0x0001)
    char                                          pa_0021[0x0007]                                               // 0x0021(0x0007)
};


// ScriptStruct  LiveLinkInterface.LiveLinkLightFrameData
// Struct Size::0x0130
struct FLiveLinkLightFrameData : public FLiveLinkTransformFrameData
{
    float                                         Temperature;                                                  // 0x0100(0x0004)
    float                                         Intensity;                                                    // 0x0104(0x0004)
    FColor                                        LightColor;                                                   // 0x0108(0x0004)
    float                                         InnerConeAngle;                                               // 0x010C(0x0004)
    float                                         OuterConeAngle;                                               // 0x0110(0x0004)
    float                                         AttenuationRadius;                                            // 0x0114(0x0004)
    float                                         SourceRadius;                                                 // 0x0118(0x0004)
    float                                         SoftSourceRadius;                                             // 0x011C(0x0004)
    float                                         SourceLength;                                                 // 0x0120(0x0004)
    char                                          pa_0124[0x000C]                                               // 0x0124(0x000C)
};


// ScriptStruct  LiveLinkInterface.LiveLinkLightBlueprintData
// Struct Size::0x0160
struct FLiveLinkLightBlueprintData : public FLiveLinkBaseBlueprintData
{
    FLiveLinkLightStaticData                      StaticData;                                                   // 0x0008(0x0028)
    FLiveLinkLightFrameData                       FrameData;                                                    // 0x0030(0x0130)
};


// ScriptStruct  LiveLinkInterface.LiveLinkSourcePreset
// Struct Size::0x0030
struct FLiveLinkSourcePreset
{
    FGuid                                         Guid;                                                         // 0x0000(0x0010)
    ULiveLinkSourceSettings*                      Settings;                                                     // 0x0010(0x0008)
    FText                                         SourceType;                                                   // 0x0018(0x0018)
};


// ScriptStruct  LiveLinkInterface.LiveLinkRefSkeleton
// Struct Size::0x0020
struct FLiveLinkRefSkeleton
{
    TArray<FName>                                 BoneNames;                                                    // 0x0000(0x0010)
    TArray<int32_t>                               BoneParents;                                                  // 0x0010(0x0010)
};


// ScriptStruct  LiveLinkInterface.LiveLinkSubjectRepresentation
// Struct Size::0x0010
struct FLiveLinkSubjectRepresentation
{
    FLiveLinkSubjectName                          Subject;                                                      // 0x0000(0x0008)
    ULiveLinkRole*                                Role;                                                         // 0x0008(0x0008)
};


// ScriptStruct  LiveLinkInterface.LiveLinkTransformBlueprintData
// Struct Size::0x0120
struct FLiveLinkTransformBlueprintData : public FLiveLinkBaseBlueprintData
{
    FLiveLinkTransformStaticData                  StaticData;                                                   // 0x0008(0x0018)
    FLiveLinkTransformFrameData                   FrameData;                                                    // 0x0020(0x0100)
};


// ScriptStruct  LiveLinkInterface.LiveLinkCurveConversionSettings
// Struct Size::0x0050
struct FLiveLinkCurveConversionSettings
{
    TMap<FString,FSoftObjectPath>                 CurveConversionAssetMap;                                      // 0x0000(0x0050)
};


// ScriptStruct  LiveLinkInterface.LiveLinkSourceBufferManagementSettings
// Struct Size::0x0060
struct FLiveLinkSourceBufferManagementSettings
{
    bool                                          bValidEngineTimeEnabled;                                      // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         ValidEngineTime;                                              // 0x0004(0x0004)
    float                                         EngineTimeOffset;                                             // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    double                                        EngineTimeClockOffset;                                        // 0x0010(0x0008)
    double                                        SmoothEngineTimeOffset;                                       // 0x0018(0x0008)
    bool                                          bGenerateSubFrame;                                            // 0x0020(0x0001)
    char                                          pa_0021[0x0003]                                               // 0x0021(0x0003)
    FFrameRate                                    DetectedFrameRate;                                            // 0x0024(0x0008)
    bool                                          bUseTimecodeSmoothLatest;                                     // 0x002C(0x0001)
    char                                          pa_002D[0x0003]                                               // 0x002D(0x0003)
    FFrameRate                                    SourceTimecodeFrameRate;                                      // 0x0030(0x0008)
    bool                                          bValidTimecodeFrameEnabled;                                   // 0x0038(0x0001)
    char                                          pa_0039[0x0003]                                               // 0x0039(0x0003)
    int32_t                                       ValidTimecodeFrame;                                           // 0x003C(0x0004)
    float                                         TimecodeFrameOffset;                                          // 0x0040(0x0004)
    char                                          pa_0044[0x0004]                                               // 0x0044(0x0004)
    double                                        TimecodeClockOffset;                                          // 0x0048(0x0008)
    int32_t                                       LatestOffset;                                                 // 0x0050(0x0004)
    int32_t                                       MaxNumberOfFrameToBuffered;                                   // 0x0054(0x0004)
    bool                                          bKeepAtLeastOneFrame;                                         // 0x0058(0x0001)
    char                                          pa_0059[0x0007]                                               // 0x0059(0x0007)
};


// ScriptStruct  LiveLinkInterface.LiveLinkSourceDebugInfo
// Struct Size::0x0010
struct FLiveLinkSourceDebugInfo
{
    FLiveLinkSubjectName                          SubjectName;                                                  // 0x0000(0x0008)
    int32_t                                       SnapshotIndex;                                                // 0x0008(0x0004)
    int32_t                                       NumberOfBufferAtSnapshot;                                     // 0x000C(0x0004)
};


// ScriptStruct  LiveLinkInterface.LiveLinkTimeSynchronizationSettings
// Struct Size::0x000C
struct FLiveLinkTimeSynchronizationSettings
{
    FFrameRate                                    FrameRate;                                                    // 0x0000(0x0008)
    FFrameNumber                                  FrameOffset;                                                  // 0x0008(0x0004)
};


// ScriptStruct  LiveLinkInterface.LiveLinkInterpolationSettings
// Struct Size::0x0008
struct FLiveLinkInterpolationSettings
{
    bool                                          bUseInterpolation;                                            // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         InterpolationOffset;                                          // 0x0004(0x0004)
};


// ScriptStruct  LiveLinkInterface.LiveLinkTime
// Struct Size::0x0018
struct FLiveLinkTime
{
    double                                        WorldTime;                                                    // 0x0000(0x0008)
    FQualifiedFrameTime                           SceneTime;                                                    // 0x0008(0x0010)
};


// ScriptStruct  LiveLinkInterface.LiveLinkFrameRate
// Struct Size::0x0008
struct FLiveLinkFrameRate : public FFrameRate
{
};


// ScriptStruct  LiveLinkInterface.LiveLinkTimeCode
// Struct Size::0x0010
struct FLiveLinkTimeCode
{
    int32_t                                       Seconds;                                                      // 0x0000(0x0004)
    int32_t                                       Frames;                                                       // 0x0004(0x0004)
    FLiveLinkFrameRate                            FrameRate;                                                    // 0x0008(0x0008)
};


// ScriptStruct  LiveLinkInterface.LiveLinkTimeCode
// Struct Size::0x0010
struct FLiveLinkTimeCode : public FLiveLinkTimeCode
{
};


// ScriptStruct  LiveLinkInterface.LiveLinkCurveElement
// Struct Size::0x000C
struct FLiveLinkCurveElement
{
    FName                                         CurveName;                                                    // 0x0000(0x0008)
    float                                         CurveValue;                                                   // 0x0008(0x0004)
};


// ScriptStruct  LiveLinkInterface.LiveLinkFrameData
// Struct Size::0x0090
struct FLiveLinkFrameData
{
    TArray<FTransform>                            Transforms;                                                   // 0x0000(0x0010)
    TArray<FLiveLinkCurveElement>                 CurveElements;                                                // 0x0010(0x0010)
    FLiveLinkWorldTime                            WorldTime;                                                    // 0x0020(0x0010)
    FLiveLinkMetaData                             MetaData;                                                     // 0x0030(0x0060)
};


// ScriptStruct  LiveLinkInterface.SubjectMetadata
// Struct Size::0x0070
struct FSubjectMetadata
{
    TMap<FName,FString>                           StringMetaData;                                               // 0x0000(0x0050)
    FTimecode                                     SceneTimecode;                                                // 0x0050(0x0014)
    FFrameRate                                    SceneFramerate;                                               // 0x0064(0x0008)
    char                                          pa_006C[0x0004]                                               // 0x006C(0x0004)
};


// ScriptStruct  LiveLinkInterface.CachedSubjectFrame
// Struct Size::0x0160
struct FCachedSubjectFrame
{
    char                                          pa_0000[0x0160]                                               // 0x0000(0x0160)
};


// ScriptStruct  LiveLinkInterface.LiveLinkTransform
// Struct Size::0x0020
struct FLiveLinkTransform
{
    char                                          pa_0000[0x0020]                                               // 0x0000(0x0020)
};


// ScriptStruct  LiveLinkAnimationCore.AnimNode
// Struct Size::0x0048
struct FAnimNode : public FAnimNode
{
    FPoseLink                                     InputPose;                                                    // 0x0010(0x0010)
    FLiveLinkSubjectName                          LiveLinkSubjectName;                                          // 0x0020(0x0008)
    ULiveLinkRetargetAsset*                       RetargetAsset;                                                // 0x0028(0x0008)
    ULiveLinkRetargetAsset*                       CurrentRetargetAsset;                                         // 0x0030(0x0008)
    char                                          pa_0038[0x0010]                                               // 0x0038(0x0010)
};


// ScriptStruct  LiveLinkAnimationCore.LiveLinkInstanceProxy
// Struct Size::0x08C0
struct FLiveLinkInstanceProxy : public FAnimInstanceProxy
{
    FAnimNode                                     PoseNode;                                                     // 0x0878(0x0048)
};


// ScriptStruct  LiveLinkMessageBusFramework.LiveLinkPingMessage
// Struct Size::0x0014
struct FLiveLinkPingMessage
{
    FGuid                                         PollRequest;                                                  // 0x0000(0x0010)
    int32_t                                       LiveLinkVersion;                                              // 0x0010(0x0004)
};


// ScriptStruct  LiveLinkMessageBusFramework.LiveLinkPongMessage
// Struct Size::0x0040
struct FLiveLinkPongMessage
{
    FString                                       ProviderName;                                                 // 0x0000(0x0010)
    FString                                       MachineName;                                                  // 0x0010(0x0010)
    FGuid                                         PollRequest;                                                  // 0x0020(0x0010)
    int32_t                                       LiveLinkVersion;                                              // 0x0030(0x0004)
    char                                          pa_0034[0x0004]                                               // 0x0034(0x0004)
    double                                        CreationPlatformTime;                                         // 0x0038(0x0008)
};


// ScriptStruct  LiveLinkMessageBusFramework.LiveLinkConnectMessage
// Struct Size::0x0004
struct FLiveLinkConnectMessage
{
    int32_t                                       LiveLinkVersion;                                              // 0x0000(0x0004)
};


// ScriptStruct  LiveLinkMessageBusFramework.LiveLinkHeartbeatMessage
// Struct Size::0x0001
struct FLiveLinkHeartbeatMessage
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  LiveLinkMessageBusFramework.LiveLinkClearSubject
// Struct Size::0x0008
struct FLiveLinkClearSubject
{
    FName                                         SubjectName;                                                  // 0x0000(0x0008)
};


// ScriptStruct  LiveLinkMessageBusFramework.LiveLinkSubjectDataMessage
// Struct Size::0x0028
struct FLiveLinkSubjectDataMessage
{
    FLiveLinkRefSkeleton                          RefSkeleton;                                                  // 0x0000(0x0020)
    FName                                         SubjectName;                                                  // 0x0020(0x0008)
};


// ScriptStruct  LiveLinkMessageBusFramework.LiveLinkSubjectFrameMessage
// Struct Size::0x0090
struct FLiveLinkSubjectFrameMessage
{
    FName                                         SubjectName;                                                  // 0x0000(0x0008)
    TArray<FTransform>                            Transforms;                                                   // 0x0008(0x0010)
    TArray<FLiveLinkCurveElement>                 Curves;                                                       // 0x0018(0x0010)
    FLiveLinkMetaData                             MetaData;                                                     // 0x0028(0x0060)
    double                                        Time;                                                         // 0x0088(0x0008)
};


// ScriptStruct  UnLua.PropertyCollector
// Struct Size::0x0001
struct FPropertyCollector
{
    int32_t                                       None;                                                         // 0x0000(0x0004)
    UModelFeatureObject*                          None;                                                         // 0x0000(0x0008)
};


// UserDefinedStruct  Engine.Default
// Struct Size::0x0000
struct FDefault
{
};


// AnimBlueprintGeneratedStruct  Engine.Default
// Struct Size::0x0000
struct FDefault
{
};


// AISenseBlueprintListener  AIModule.Default
// Struct Size::0x0000
struct FDefault
{
};


// UserDefinedStruct  AnimStruct.AnimStruct
// Struct Size::0x0010
struct FAnimStruct
{
    UAnimSequenceBase*                            Idle;                                                         // 0x0000(0x0008)
    UAnimSequenceBase*                            IdleShow;                                                     // 0x0008(0x0008)
};


// ScriptStruct  ABP.ABP.AnimBlueprintGeneratedMutableData
// Struct Size::0x0064
struct FAnimBlueprintGeneratedMutableData : public FAnimBlueprintMutableData
{
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         ;                                                             // 0x0004(0x0004)
    UAnimSequenceBase*                            ;                                                             // 0x0008(0x0008)
    bool                                          ;                                                             // 0x0010(0x0001)
    bool                                          ;                                                             // 0x0011(0x0001)
    bool                                          ;                                                             // 0x0012(0x0001)
    char                                          pa_0013[0x0005]                                               // 0x0013(0x0005)
    UAnimSequenceBase*                            ;                                                             // 0x0018(0x0008)
    bool                                          ;                                                             // 0x0020(0x0001)
    char                                          ;                                                             // 0x0021(0x0001)
    char                                          pa_0022[0x0002]                                               // 0x0022(0x0002)
    float                                         ;                                                             // 0x0024(0x0004)
    float                                         ;                                                             // 0x0028(0x0004)
    float                                         ;                                                             // 0x002C(0x0004)
    float                                         ;                                                             // 0x0030(0x0004)
    float                                         ;                                                             // 0x0034(0x0004)
    float                                         ;                                                             // 0x0038(0x0004)
    float                                         ;                                                             // 0x003C(0x0004)
    float                                         ;                                                             // 0x0040(0x0004)
    char                                          ;                                                             // 0x0044(0x0001)
    bool                                          ;                                                             // 0x0045(0x0001)
    char                                          pa_0046[0x0002]                                               // 0x0046(0x0002)
    float                                         ;                                                             // 0x0048(0x0004)
    float                                         ;                                                             // 0x004C(0x0004)
    TArray<float>                                 ;                                                             // 0x0050(0x0010)
    bool                                          ;                                                             // 0x0060(0x0001)
    bool                                          ;                                                             // 0x0061(0x0001)
    bool                                          ;                                                             // 0x0062(0x0001)
    bool                                          ;                                                             // 0x0063(0x0001)
};


// ScriptStruct  ABP.ABP.AnimBlueprintGeneratedConstantData
// Struct Size::0x0320
struct FAnimBlueprintGeneratedConstantData : public FAnimBlueprintConstantData
{
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FName                                         ;                                                             // 0x0004(0x0008)
    FName                                         ;                                                             // 0x000C(0x0008)
    FName                                         ;                                                             // 0x0014(0x0008)
    FName                                         ;                                                             // 0x001C(0x0008)
    FName                                         ;                                                             // 0x0024(0x0008)
    FName                                         ;                                                             // 0x002C(0x0008)
    FName                                         ;                                                             // 0x0034(0x0008)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
    FAnimNodeFunctionRef                          ;                                                             // 0x0040(0x0020)
    FName                                         ;                                                             // 0x0060(0x0008)
    FName                                         ;                                                             // 0x0068(0x0008)
    FAnimNodeFunctionRef                          ;                                                             // 0x0070(0x0020)
    FName                                         ;                                                             // 0x0090(0x0008)
    FName                                         ;                                                             // 0x0098(0x0008)
    int32_t                                       ;                                                             // 0x00A0(0x0004)
    FName                                         ;                                                             // 0x00A4(0x0008)
    int32_t                                       ;                                                             // 0x00AC(0x0004)
    FName                                         ;                                                             // 0x00B0(0x0008)
    int32_t                                       ;                                                             // 0x00B8(0x0004)
    char                                          pa_00BC[0x0004]                                               // 0x00BC(0x0004)
    FAnimNodeFunctionRef                          ;                                                             // 0x00C0(0x0020)
    FAnimNodeFunctionRef                          ;                                                             // 0x00E0(0x0020)
    enum class ESequenceEvalReinit                ;                                                             // 0x0100(0x0001)
    char                                          pa_0101[0x0003]                                               // 0x0101(0x0003)
    FName                                         ;                                                             // 0x0104(0x0008)
    int32_t                                       ;                                                             // 0x010C(0x0004)
    TArray<float>                                 ;                                                             // 0x0110(0x0010)
    TArray<int32_t>                               ;                                                             // 0x0120(0x0010)
    TArray<float>                                 ;                                                             // 0x0130(0x0010)
    FAnimNodeFunctionRef                          ;                                                             // 0x0140(0x0020)
    int32_t                                       ;                                                             // 0x0160(0x0004)
    char                                          pa_0164[0x0004]                                               // 0x0164(0x0004)
    FAnimNodeFunctionRef                          ;                                                             // 0x0168(0x0020)
    bool                                          ;                                                             // 0x0188(0x0001)
    char                                          pa_0189[0x0003]                                               // 0x0189(0x0003)
    float                                         ;                                                             // 0x018C(0x0004)
    FInputScaleBiasClampConstants                 ;                                                             // 0x0190(0x002C)
    float                                         ;                                                             // 0x01BC(0x0004)
    enum class EAnimSyncMethod                    ;                                                             // 0x01C0(0x0001)
    enum class EAnimGroupRole                     ;                                                             // 0x01C1(0x0001)
    char                                          pa_01C2[0x0002]                                               // 0x01C2(0x0002)
    FName                                         ;                                                             // 0x01C4(0x0008)
    FName                                         ;                                                             // 0x01CC(0x0008)
    FName                                         ;                                                             // 0x01D4(0x0008)
    int32_t                                       ;                                                             // 0x01DC(0x0004)
    enum class ERefPoseType                       ;                                                             // 0x01E0(0x0001)
    char                                          pa_01E1[0x0007]                                               // 0x01E1(0x0007)
    FAnimNodeFunctionRef                          ;                                                             // 0x01E8(0x0020)
    TArray<float>                                 ;                                                             // 0x0208(0x0010)
    FAnimNodeFunctionRef                          ;                                                             // 0x0218(0x0020)
    UBlendProfile*                                ;                                                             // 0x0238(0x0008)
    UCurveFloat*                                  ;                                                             // 0x0240(0x0008)
    bool                                          ;                                                             // 0x0248(0x0001)
    enum class EAlphaBlendOption                  ;                                                             // 0x0249(0x0001)
    enum class EBlendListTransitionType           ;                                                             // 0x024A(0x0001)
    char                                          pa_024B[0x0005]                                               // 0x024B(0x0005)
    TArray<float>                                 ;                                                             // 0x0250(0x0010)
    FAnimNodeFunctionRef                          ;                                                             // 0x0260(0x0020)
    FAnimSubsystem                                AnimBlueprintExtension;                                       // 0x0280(0x0080)
    FAnimSubsystem                                AnimBlueprintExtension;                                       // 0x0300(0x0008)
    FAnimSubsystem                                AnimBlueprintExtension;                                       // 0x0308(0x0018)
};


// UserDefinedStruct  AnimStruct.AnimStruct
// Struct Size::0x0010
struct FAnimStruct
{
    TArray<FAnimStruct>                           Pairs;                                                        // 0x0000(0x0010)
};


// ScriptStruct  M.ABP.AnimBlueprintGeneratedConstantData
// Struct Size::0x0320
struct FAnimBlueprintGeneratedConstantData : public FAnimBlueprintGeneratedConstantData
{
};


// UserDefinedStruct  S.S
// Struct Size::0x0031
struct FS
{
    FVector                                       Location;                                                     // 0x0000(0x0018)
    UObject*                                      DropObject;                                                   // 0x0018(0x0008)
    enum class ETgfIntraGameDisplayInfoType       DisplayInfoType;                                              // 0x0020(0x0001)
    char                                          pa_0021[0x0007]                                               // 0x0021(0x0007)
    int64_t                                       DisplaySubType;                                               // 0x0028(0x0008)
    enum class ETgfDisplayAgingType               DisplayAgingType;                                             // 0x0030(0x0001)
};


// UserDefinedStruct  S.S
// Struct Size::0x000D
struct FS
{
    enum class ETgfIntraGameDisplayInfoType       MainType;                                                     // 0x0000(0x0001)
    enum class ETgfDisplayInfoPortalSubType       PortalSubType;                                                // 0x0001(0x0001)
    enum class ETgfDisplayInfoKillSubType         KillSubType;                                                  // 0x0002(0x0001)
    enum class ETgfDisplayInfoDropSubType         DropSubType;                                                  // 0x0003(0x0001)
    enum class ETgfDisplayInfoCharaSubType        CharaSubType;                                                 // 0x0004(0x0001)
    enum class ETgfDisplayInfoAbilitySubType      AbilitySubType;                                               // 0x0005(0x0001)
    char                                          pa_0006[0x0002]                                               // 0x0006(0x0002)
    int32_t                                       ExtraIndex;                                                   // 0x0008(0x0004)
    enum class ETgfDisplayInfoStateTagSubType     StateTagSubType;                                              // 0x000C(0x0001)
};


// UserDefinedStruct  FLootOptionEntry.FLootOptionEntry
// Struct Size::0x0010
struct FFLootOptionEntry
{
    TArray<int32_t>                               Loot;                                                         // 0x0000(0x0010)
};


// UserDefinedStruct  S.S
// Struct Size::0x005C
struct FS
{
    FVector                                       Location;                                                     // 0x0000(0x0018)
    UObject*                                      Object;                                                       // 0x0018(0x0008)
    enum class ETgfIntraGameDisplayInfoType       DisplayType;                                                  // 0x0020(0x0001)
    char                                          pa_0021[0x0007]                                               // 0x0021(0x0007)
    int64_t                                       Subtype;                                                      // 0x0028(0x0008)
    int64_t                                       ObjectID;                                                     // 0x0030(0x0008)
    UObject*                                      ObjectCls;                                                    // 0x0038(0x0008)
    double                                        FloatParam;                                                   // 0x0040(0x0008)
    int64_t                                       ReplaceWithNewID;                                             // 0x0048(0x0008)
    int64_t                                       AbilityOwnerID;                                               // 0x0050(0x0008)
    int32_t                                       IntParam;                                                     // 0x0058(0x0004)
};


// UserDefinedStruct  S.S
// Struct Size::0x00E8
struct FS
{
    FVector                                       Location;                                                     // 0x0000(0x0018)
    enum class ETgfIntraGameDisplayInfoType       DisplayInfoType;                                              // 0x0018(0x0001)
    char                                          pa_0019[0x0007]                                               // 0x0019(0x0007)
    int64_t                                       DisplaySubType;                                               // 0x0020(0x0008)
    enum class ETgfDisplayAgingType               DisplayAgingType;                                             // 0x0028(0x0001)
    enum class ETgfEquipSubType                   AttackWeaponType;                                             // 0x0029(0x0001)
    enum class ETgfEquipQuality                   WeaponQuality;                                                // 0x002A(0x0001)
    char                                          pa_002B[0x0005]                                               // 0x002B(0x0005)
    double                                        KillerHealthPercent;                                          // 0x0030(0x0008)
    UObject*                                      KillObj;                                                      // 0x0038(0x0008)
    UObject*                                      DeadObj;                                                      // 0x0040(0x0008)
    bool                                          IsKillerNameMultiLang;                                        // 0x0048(0x0001)
    bool                                          IsDeadNameMultiLang;                                          // 0x0049(0x0001)
    char                                          pa_004A[0x0006]                                               // 0x004A(0x0006)
    FPlayerNameData                               KillerNameData;                                               // 0x0050(0x0030)
    FPlayerNameData                               DeadNameData;                                                 // 0x0080(0x0030)
    enum class ETgfPlayerSceneTag                 SceneTag;                                                     // 0x00B0(0x0001)
    bool                                          IsKillerSummonNameMultiLang;                                  // 0x00B1(0x0001)
    char                                          pa_00B2[0x0006]                                               // 0x00B2(0x0006)
    FPlayerNameData                               KillerSummonNameData;                                         // 0x00B8(0x0030)
};


// UserDefinedStruct  HitPendingData.HitPendingData
// Struct Size::0x00F8
struct FHitPendingData
{
    FHitResult                                    HitResultData;                                                // 0x0000(0x00E8)
    UPrimitiveComponent*                          Mesh;                                                         // 0x00E8(0x0008)
    double                                        CriticalRandomValue;                                          // 0x00F0(0x0008)
};


// UserDefinedStruct  S.S
// Struct Size::0x0020
struct FS
{
    AActor*                                       Owner;                                                        // 0x0000(0x0008)
    double                                        DetectDistance;                                               // 0x0008(0x0008)
    double                                        DetectDuration;                                               // 0x0010(0x0008)
    double                                        DelayStartDetect;                                             // 0x0018(0x0008)
};


// UserDefinedStruct  TGF.TGF
// Struct Size::0x0068
struct FTGF
{
    double                                        Chance;                                                       // 0x0000(0x0008)
    double                                        Angle;                                                        // 0x0008(0x0008)
    double                                        DistanceMin;                                                  // 0x0010(0x0008)
    double                                        DistanceMax;                                                  // 0x0018(0x0008)
    double                                        LocationRadius;                                               // 0x0020(0x0008)
    FGameplayTag                                  SpeedTag;                                                     // 0x0028(0x0008)
    double                                        Speed;                                                        // 0x0030(0x0008)
    bool                                          FocusTarget;                                                  // 0x0038(0x0001)
    char                                          pa_0039[0x0007]                                               // 0x0039(0x0007)
    double                                        AbilityChance;                                                // 0x0040(0x0008)
    UGameplayAbility*                             Ability;                                                      // 0x0048(0x0008)
    bool                                          InterruptByAttack;                                            // 0x0050(0x0001)
    char                                          pa_0051[0x0007]                                               // 0x0051(0x0007)
    double                                        InterruptByApproachTime;                                      // 0x0058(0x0008)
    double                                        InterruptByApproachDistance;                                  // 0x0060(0x0008)
};


// UserDefinedStruct  S.S
// Struct Size::0x0070
struct FS
{
    int32_t                                       PortalCnt;                                                    // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FVector                                       Location;                                                     // 0x0008(0x0018)
    enum class ETgfIntraGameDisplayInfoType       DisplayInfoType;                                              // 0x0020(0x0001)
    char                                          pa_0021[0x0007]                                               // 0x0021(0x0007)
    int64_t                                       DisplaySubType;                                               // 0x0028(0x0008)
    enum class ETgfDisplayAgingType               DisplayAgingType;                                             // 0x0030(0x0001)
    char                                          pa_0031[0x0007]                                               // 0x0031(0x0007)
    FPlayerNameData                               EnterPlayerNameData;                                          // 0x0038(0x0030)
    enum class ETgfPlayerSceneTag                 SceneTag;                                                     // 0x0068(0x0001)
    char                                          pa_0069[0x0003]                                               // 0x0069(0x0003)
    int32_t                                       InPortalTag;                                                  // 0x006C(0x0004)
};


// UserDefinedStruct  S.S
// Struct Size::0x0018
struct FS
{
    enum class ETgfIntraGameDisplayInfoType       DisplayInfoType;                                              // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    int64_t                                       DisplaySubType;                                               // 0x0008(0x0008)
    enum class ETgfDisplayAgingType               DisplayAgingType;                                             // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
    int32_t                                       ExtraIntParam;                                                // 0x0014(0x0004)
};


// UserDefinedStruct  TGF.TGF
// Struct Size::0x0020
struct FTGF
{
    TArray<AActor*>                               Targets;                                                      // 0x0000(0x0010)
    TArray<AActor*>                               TargetsTemp;                                                  // 0x0010(0x0010)
};


// UserDefinedStruct  S.S
// Struct Size::0x003C
struct FS
{
    AActor*                                       OwnerActor;                                                   // 0x0000(0x0008)
    enum class ETgfIntraGameDisplayInfoType       DisplayInfoType;                                              // 0x0008(0x0001)
    char                                          pa_0009[0x0007]                                               // 0x0009(0x0007)
    int64_t                                       DisplaySubType;                                               // 0x0010(0x0008)
    enum class ETgfDisplayAgingType               DisplayAgingType;                                             // 0x0018(0x0001)
    char                                          pa_0019[0x0007]                                               // 0x0019(0x0007)
    FVector                                       Location;                                                     // 0x0020(0x0018)
    int32_t                                       MarkType;                                                     // 0x0038(0x0004)
};


// UserDefinedStruct  S.S
// Struct Size::0x0040
struct FS
{
    AActor*                                       OwnerActor;                                                   // 0x0000(0x0008)
    enum class ETgfIntraGameDisplayInfoType       DisplayInfoType;                                              // 0x0008(0x0001)
    char                                          pa_0009[0x0007]                                               // 0x0009(0x0007)
    int64_t                                       DisplaySubType;                                               // 0x0010(0x0008)
    enum class ETgfDisplayAgingType               DisplayAgingType;                                             // 0x0018(0x0001)
    char                                          pa_0019[0x0007]                                               // 0x0019(0x0007)
    FVector                                       Location;                                                     // 0x0020(0x0018)
    double                                        Distance;                                                     // 0x0038(0x0008)
};


// UserDefinedStruct  FActorSpawn.FActorSpawn
// Struct Size::0x0030
struct FFActorSpawn
{
    double                                        Chance;                                                       // 0x0000(0x0008)
    AActor*                                       Actor;                                                        // 0x0008(0x0008)
    int32_t                                       ItemID;                                                       // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    double                                        RollOffset;                                                   // 0x0018(0x0008)
    double                                        PitchOffset;                                                  // 0x0020(0x0008)
    double                                        YawOffset;                                                    // 0x0028(0x0008)
};


// UserDefinedStruct  S.S
// Struct Size::0x00EA
struct FS
{
    FVector                                       Location;                                                     // 0x0000(0x0018)
    enum class ETgfIntraGameDisplayInfoType       DisplayInfoType;                                              // 0x0018(0x0001)
    char                                          pa_0019[0x0007]                                               // 0x0019(0x0007)
    int64_t                                       DisplaySubType;                                               // 0x0020(0x0008)
    enum class ETgfDisplayAgingType               DisplayAgingType;                                             // 0x0028(0x0001)
    enum class ETgfEquipSubType                   AttackWeaponType;                                             // 0x0029(0x0001)
    enum class ETgfEquipQuality                   WeaponQuality;                                                // 0x002A(0x0001)
    char                                          pa_002B[0x0005]                                               // 0x002B(0x0005)
    double                                        KillerHealthPercent;                                          // 0x0030(0x0008)
    bool                                          IsKillereNameMultiLang;                                       // 0x0038(0x0001)
    bool                                          IsDeadNameMultiLang;                                          // 0x0039(0x0001)
    char                                          pa_003A[0x0006]                                               // 0x003A(0x0006)
    FPlayerNameData                               KillerNameData;                                               // 0x0040(0x0030)
    FPlayerNameData                               DeadNameData;                                                 // 0x0070(0x0030)
    UObject*                                      KillObj;                                                      // 0x00A0(0x0008)
    UObject*                                      DeadObj;                                                      // 0x00A8(0x0008)
    enum class ETgfPlayerSceneTag                 SceneTag;                                                     // 0x00B0(0x0001)
    bool                                          IsKillerSummonNameLultiLang;                                  // 0x00B1(0x0001)
    char                                          pa_00B2[0x0006]                                               // 0x00B2(0x0006)
    FPlayerNameData                               KillerSummonNameData;                                         // 0x00B8(0x0030)
    enum class ETgfPVPTeamColor                   KillerTeamColor;                                              // 0x00E8(0x0001)
    enum class ETgfPVPTeamColor                   DeadTeamColor;                                                // 0x00E9(0x0001)
};


// UserDefinedStruct  S.S
// Struct Size::0x0020
struct FS
{
    int32_t                                       PortalNum;                                                    // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    APawn*                                        ExtractPawn;                                                  // 0x0008(0x0008)
    int32_t                                       SpawnedNum;                                                   // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    UObject*                                      Object;                                                       // 0x0018(0x0008)
};


// UserDefinedStruct  TGF.TGF
// Struct Size::0x002A
struct FTGF
{
    double                                        SightRadius;                                                  // 0x0000(0x0008)
    double                                        SightPeripheralVisionAngleDegrees;                            // 0x0008(0x0008)
    bool                                          Attackable;                                                   // 0x0010(0x0001)
    bool                                          SpecialAttackable;                                            // 0x0011(0x0001)
    bool                                          Invisible;                                                    // 0x0012(0x0001)
    bool                                          SensesEnabled;                                                // 0x0013(0x0001)
    bool                                          Gravity;                                                      // 0x0014(0x0001)
    char                                          pa_0015[0x0003]                                               // 0x0015(0x0003)
    UGameplayAbility*                             DormantAbility;                                               // 0x0018(0x0008)
    UGameplayAbility*                             WakeUpAbility;                                                // 0x0020(0x0008)
    bool                                          AnimationUsePose;                                             // 0x0028(0x0001)
    bool                                          CollisionEnabled;                                             // 0x0029(0x0001)
};


// UserDefinedStruct  TGF.TGF
// Struct Size::0x0010
struct FTGF
{
    double                                        Chance;                                                       // 0x0000(0x0008)
    UGameplayAbility*                             Ability;                                                      // 0x0008(0x0008)
};


// UserDefinedStruct  S.S
// Struct Size::0x005C
struct FS
{
    int32_t                                       PortalCnt;                                                    // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FVector                                       Location;                                                     // 0x0008(0x0018)
    UObject*                                      Object;                                                       // 0x0020(0x0008)
    ALyraCharacter*                               Character;                                                    // 0x0028(0x0008)
    enum class ETgfIntraGameDisplayInfoType       DisplayInfoType;                                              // 0x0030(0x0001)
    char                                          pa_0031[0x0007]                                               // 0x0031(0x0007)
    int64_t                                       DisplaySubType;                                               // 0x0038(0x0008)
    enum class ETgfDisplayAgingType               DisplayAgingType;                                             // 0x0040(0x0001)
    char                                          pa_0041[0x0007]                                               // 0x0041(0x0007)
    int64_t                                       ObjectID;                                                     // 0x0048(0x0008)
    int32_t                                       IntParam;                                                     // 0x0050(0x0004)
    enum class ETgfPlayerSceneTag                 SceneTag;                                                     // 0x0054(0x0001)
    char                                          pa_0055[0x0003]                                               // 0x0055(0x0003)
    int32_t                                       InPortalTag;                                                  // 0x0058(0x0004)
};


// UserDefinedStruct  S.S
// Struct Size::0x0024
struct FS
{
    int64_t                                       ID;                                                           // 0x0000(0x0008)
    FVector                                       PortalLocation;                                               // 0x0008(0x0018)
    int32_t                                       MarkIndex;                                                    // 0x0020(0x0004)
};


// UserDefinedStruct  AttrBuffMap.AttrBuffMap
// Struct Size::0x0068
struct FAttrBuffMap
{
    FGameplayAttribute                            Attr;                                                         // 0x0000(0x0038)
    UTgfGameplayEffect*                           Buff;                                                         // 0x0038(0x0008)
    FGameplayTagContainer                         BuffAssetTag;                                                 // 0x0040(0x0020)
    UTgfGameplayEffect*                           TriggerEffect;                                                // 0x0060(0x0008)
};


// UserDefinedStruct  AnimStruct.AnimStruct
// Struct Size::0x00C0
struct FAnimStruct
{
    UAnimSequenceBase*                            Idle;                                                         // 0x0000(0x0008)
    FAnimStruct                                   Move;                                                         // 0x0008(0x0050)
    FAnimStruct                                   Death;                                                        // 0x0058(0x0040)
    FAnimStruct                                   Weak;                                                         // 0x0098(0x0018)
    FAnimStruct                                   Turn;                                                         // 0x00B0(0x0010)
};


// UserDefinedStruct  TGF.TGF
// Struct Size::0x0030
struct FTGF
{
    FGameplayTagContainer                         Tags;                                                         // 0x0000(0x0020)
    TArray<FTGF>                                  Selector;                                                     // 0x0020(0x0010)
};


// UserDefinedStruct  S.S
// Struct Size::0x0021
struct FS
{
    AActor*                                       OwnerActor;                                                   // 0x0000(0x0008)
    FVector                                       Location;                                                     // 0x0008(0x0018)
    bool                                          IsDangerType;                                                 // 0x0020(0x0001)
};


// UserDefinedStruct  AnimStruct.AnimStruct
// Struct Size::0x0050
struct FAnimStruct
{
    UAnimSequenceBase*                            JumpStart;                                                    // 0x0000(0x0008)
    UAnimSequenceBase*                            JumpLoop;                                                     // 0x0008(0x0008)
    UAnimSequenceBase*                            JumpApex;                                                     // 0x0010(0x0008)
    UAnimSequenceBase*                            FallLoop;                                                     // 0x0018(0x0008)
    UAnimSequenceBase*                            FallLand;                                                     // 0x0020(0x0008)
    UAnimSequenceBase*                            CrouchStart;                                                  // 0x0028(0x0008)
    UAnimSequenceBase*                            CrouchEnd;                                                    // 0x0030(0x0008)
    UAnimSequenceBase*                            CrouchIdle;                                                   // 0x0038(0x0008)
    UAnimSequenceBase*                            Idle;                                                         // 0x0040(0x0008)
    UAimOffsetBlendSpace*                         AO;                                                           // 0x0048(0x0008)
};


// UserDefinedStruct  GasCache.GasCache
// Struct Size::0x0008
struct FGasCache
{
    AActor*                                       TargetActor;                                                  // 0x0000(0x0008)
};


// UserDefinedStruct  AnimStruct.AnimStruct
// Struct Size::0x0040
struct FAnimStruct
{
    UAnimSequenceBase*                            Forward;                                                      // 0x0000(0x0008)
    UAnimSequenceBase*                            Backward;                                                     // 0x0008(0x0008)
    UAnimSequenceBase*                            Left;                                                         // 0x0010(0x0008)
    UAnimSequenceBase*                            Right;                                                        // 0x0018(0x0008)
    UAnimSequenceBase*                            RightForward;                                                 // 0x0020(0x0008)
    UAnimSequenceBase*                            RightBackward;                                                // 0x0028(0x0008)
    UAnimSequenceBase*                            LeftForward;                                                  // 0x0030(0x0008)
    UAnimSequenceBase*                            LeftBackward;                                                 // 0x0038(0x0008)
};


// UserDefinedStruct  AbilityFailedData.AbilityFailedData
// Struct Size::0x0010
struct FAbilityFailedData
{
    FGameplayTag                                  FailedTag;                                                    // 0x0000(0x0008)
    UAnimMontage*                                 MontageToPlay;                                                // 0x0008(0x0008)
};


// UserDefinedStruct  Struct.Struct
// Struct Size::0x0060
struct FStruct
{
    FLyraCharacterPart                            Part;                                                         // 0x0000(0x0040)
    FGameplayTagContainer                         Tags;                                                         // 0x0040(0x0020)
};


// ScriptStruct  ABP.ABP.AnimBlueprintGeneratedConstantData
// Struct Size::0x00D0
struct FAnimBlueprintGeneratedConstantData : public FAnimBlueprintConstantData
{
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FName                                         ;                                                             // 0x0004(0x0008)
    FName                                         ;                                                             // 0x000C(0x0008)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FAnimNodeFunctionRef                          ;                                                             // 0x0018(0x0020)
    FAnimSubsystem                                AnimBlueprintExtension;                                       // 0x0038(0x0080)
    FAnimSubsystem                                AnimBlueprintExtension;                                       // 0x00B8(0x0018)
};


// ScriptStruct  Man.SKM.AnimBlueprintGeneratedConstantData
// Struct Size::0x00D0
struct FAnimBlueprintGeneratedConstantData : public FAnimBlueprintConstantData
{
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FName                                         ;                                                             // 0x0004(0x0008)
    FName                                         ;                                                             // 0x000C(0x0008)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FAnimNodeFunctionRef                          ;                                                             // 0x0018(0x0020)
    FAnimSubsystem                                AnimBlueprintExtension;                                       // 0x0038(0x0080)
    FAnimSubsystem                                AnimBlueprintExtension;                                       // 0x00B8(0x0018)
};


// ScriptStruct  Human.SKM.AnimBlueprintGeneratedConstantData
// Struct Size::0x00D0
struct FAnimBlueprintGeneratedConstantData : public FAnimBlueprintConstantData
{
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FName                                         ;                                                             // 0x0004(0x0008)
    FName                                         ;                                                             // 0x000C(0x0008)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FAnimNodeFunctionRef                          ;                                                             // 0x0018(0x0020)
    FAnimSubsystem                                AnimBlueprintExtension;                                       // 0x0038(0x0080)
    FAnimSubsystem                                AnimBlueprintExtension;                                       // 0x00B8(0x0018)
};


// ScriptStruct  Classes.ABP.AnimBlueprintGeneratedConstantData
// Struct Size::0x00D0
struct FAnimBlueprintGeneratedConstantData : public FAnimBlueprintConstantData
{
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FName                                         ;                                                             // 0x0004(0x0008)
    FName                                         ;                                                             // 0x000C(0x0008)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FAnimNodeFunctionRef                          ;                                                             // 0x0018(0x0020)
    FAnimSubsystem                                AnimBlueprintExtension;                                       // 0x0038(0x0080)
    FAnimSubsystem                                AnimBlueprintExtension;                                       // 0x00B8(0x0018)
};


// ScriptStruct  SwordMaster.ABP.AnimBlueprintGeneratedConstantData
// Struct Size::0x0130
struct FAnimBlueprintGeneratedConstantData : public FAnimBlueprintConstantData
{
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FName                                         ;                                                             // 0x0004(0x0008)
    FInputScaleBiasClampConstants                 ;                                                             // 0x000C(0x002C)
    UBlendProfile*                                ;                                                             // 0x0038(0x0008)
    UCurveFloat*                                  ;                                                             // 0x0040(0x0008)
    enum class EAlphaBlendOption                  ;                                                             // 0x0048(0x0001)
    enum class EBlendListTransitionType           ;                                                             // 0x0049(0x0001)
    char                                          pa_004A[0x0006]                                               // 0x004A(0x0006)
    TArray<float>                                 ;                                                             // 0x0050(0x0010)
    bool                                          ;                                                             // 0x0060(0x0001)
    char                                          pa_0061[0x0003]                                               // 0x0061(0x0003)
    float                                         ;                                                             // 0x0064(0x0004)
    float                                         ;                                                             // 0x0068(0x0004)
    bool                                          ;                                                             // 0x006C(0x0001)
    enum class EAnimSyncMethod                    ;                                                             // 0x006D(0x0001)
    enum class EAnimGroupRole                     ;                                                             // 0x006E(0x0001)
    char                                          pa_006F[0x0001]                                               // 0x006F(0x0001)
    FName                                         ;                                                             // 0x0070(0x0008)
    FAnimNodeFunctionRef                          ;                                                             // 0x0078(0x0020)
    FAnimSubsystem                                AnimBlueprintExtension;                                       // 0x0098(0x0080)
    FAnimSubsystem                                AnimBlueprintExtension;                                       // 0x0118(0x0018)
};


// ScriptStruct  SwordMaster.ABP.AnimBlueprintGeneratedMutableData
// Struct Size::0x0010
struct FAnimBlueprintGeneratedMutableData : public FAnimBlueprintMutableData
{
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         ;                                                             // 0x0004(0x0004)
    bool                                          ;                                                             // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
    float                                         ;                                                             // 0x000C(0x0004)
};


// ScriptStruct  Undead.Undead0001.AnimBlueprintGeneratedConstantData
// Struct Size::0x00D0
struct FAnimBlueprintGeneratedConstantData : public FAnimBlueprintConstantData
{
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FName                                         ;                                                             // 0x0004(0x0008)
    FName                                         ;                                                             // 0x000C(0x0008)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FAnimNodeFunctionRef                          ;                                                             // 0x0018(0x0020)
    FAnimSubsystem                                AnimBlueprintExtension;                                       // 0x0038(0x0080)
    FAnimSubsystem                                AnimBlueprintExtension;                                       // 0x00B8(0x0018)
};


// ScriptStruct  ABP.ABP.AnimBlueprintGeneratedConstantData
// Struct Size::0x0110
struct FAnimBlueprintGeneratedConstantData : public FAnimBlueprintConstantData
{
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FName                                         ;                                                             // 0x0004(0x0008)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FAnimNodeFunctionRef                          ;                                                             // 0x0010(0x0020)
    bool                                          ;                                                             // 0x0030(0x0001)
    char                                          pa_0031[0x0003]                                               // 0x0031(0x0003)
    float                                         ;                                                             // 0x0034(0x0004)
    FInputScaleBiasClampConstants                 ;                                                             // 0x0038(0x002C)
    float                                         ;                                                             // 0x0064(0x0004)
    bool                                          ;                                                             // 0x0068(0x0001)
    enum class EAnimSyncMethod                    ;                                                             // 0x0069(0x0001)
    enum class EAnimGroupRole                     ;                                                             // 0x006A(0x0001)
    char                                          pa_006B[0x0001]                                               // 0x006B(0x0001)
    FName                                         ;                                                             // 0x006C(0x0008)
    char                                          pa_0074[0x0004]                                               // 0x0074(0x0004)
    FAnimSubsystem                                AnimBlueprintExtension;                                       // 0x0078(0x0080)
    FAnimSubsystem                                AnimBlueprintExtension;                                       // 0x00F8(0x0018)
};


// UserDefinedStruct  TgfGameplayEffectHandleData.TgfGameplayEffectHandleData
// Struct Size::0x0010
struct FTgfGameplayEffectHandleData
{
    UAbilitySystemComponent*                      ASC;                                                          // 0x0000(0x0008)
    FActiveGameplayEffectHandle                   GEHandle;                                                     // 0x0008(0x0008)
};


// UserDefinedStruct  AdditionalGEs.AdditionalGEs
// Struct Size::0x0010
struct FAdditionalGEs
{
    TArray<UGameplayEffect*>                      GEs;                                                          // 0x0000(0x0010)
};


// UserDefinedStruct  RangedWeaponSpawnProjectileParam.RangedWeaponSpawnProjectileParam
// Struct Size::0x0038
struct FRangedWeaponSpawnProjectileParam
{
    double                                        OverrideVelocity;                                             // 0x0000(0x0008)
    FVector                                       SpawnPos;                                                     // 0x0008(0x0018)
    FRotator                                      SpawnRot;                                                     // 0x0020(0x0018)
};


// ScriptStruct  ABP.ABP.AnimBlueprintGeneratedConstantData
// Struct Size::0x0130
struct FAnimBlueprintGeneratedConstantData : public FAnimBlueprintConstantData
{
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FName                                         ;                                                             // 0x0004(0x0008)
    bool                                          ;                                                             // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
    UBlendProfile*                                ;                                                             // 0x0010(0x0008)
    UCurveFloat*                                  ;                                                             // 0x0018(0x0008)
    enum class EAlphaBlendOption                  ;                                                             // 0x0020(0x0001)
    enum class EBlendListTransitionType           ;                                                             // 0x0021(0x0001)
    char                                          pa_0022[0x0006]                                               // 0x0022(0x0006)
    TArray<float>                                 ;                                                             // 0x0028(0x0010)
    float                                         ;                                                             // 0x0038(0x0004)
    FInputScaleBiasClampConstants                 ;                                                             // 0x003C(0x002C)
    float                                         ;                                                             // 0x0068(0x0004)
    bool                                          ;                                                             // 0x006C(0x0001)
    enum class EAnimSyncMethod                    ;                                                             // 0x006D(0x0001)
    enum class EAnimGroupRole                     ;                                                             // 0x006E(0x0001)
    char                                          pa_006F[0x0001]                                               // 0x006F(0x0001)
    FName                                         ;                                                             // 0x0070(0x0008)
    FAnimNodeFunctionRef                          ;                                                             // 0x0078(0x0020)
    FAnimSubsystem                                AnimBlueprintExtension;                                       // 0x0098(0x0080)
    FAnimSubsystem                                AnimBlueprintExtension;                                       // 0x0118(0x0018)
};


// ScriptStruct  ABP.ABP.AnimBlueprintGeneratedMutableData
// Struct Size::0x0002
struct FAnimBlueprintGeneratedMutableData : public FAnimBlueprintMutableData
{
    bool                                          ;                                                             // 0x0001(0x0001)
};


// ScriptStruct  ABP.ABP.AnimBlueprintGeneratedConstantData
// Struct Size::0x01E0
struct FAnimBlueprintGeneratedConstantData : public FAnimBlueprintConstantData
{
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FName                                         ;                                                             // 0x0004(0x0008)
    FName                                         ;                                                             // 0x000C(0x0008)
    FName                                         ;                                                             // 0x0014(0x0008)
    FName                                         ;                                                             // 0x001C(0x0008)
    FName                                         ;                                                             // 0x0024(0x0008)
    FName                                         ;                                                             // 0x002C(0x0008)
    FName                                         ;                                                             // 0x0034(0x0008)
    FName                                         ;                                                             // 0x003C(0x0008)
    FName                                         ;                                                             // 0x0044(0x0008)
    FName                                         ;                                                             // 0x004C(0x0008)
    FName                                         ;                                                             // 0x0054(0x0008)
    FName                                         ;                                                             // 0x005C(0x0008)
    FName                                         ;                                                             // 0x0064(0x0008)
    FName                                         ;                                                             // 0x006C(0x0008)
    FName                                         ;                                                             // 0x0074(0x0008)
    char                                          pa_007C[0x0004]                                               // 0x007C(0x0004)
    TArray<float>                                 ;                                                             // 0x0080(0x0010)
    FName                                         ;                                                             // 0x0090(0x0008)
    FName                                         ;                                                             // 0x0098(0x0008)
    int32_t                                       ;                                                             // 0x00A0(0x0004)
    FName                                         ;                                                             // 0x00A4(0x0008)
    int32_t                                       ;                                                             // 0x00AC(0x0004)
    FName                                         ;                                                             // 0x00B0(0x0008)
    FName                                         ;                                                             // 0x00B8(0x0008)
    FName                                         ;                                                             // 0x00C0(0x0008)
    int32_t                                       ;                                                             // 0x00C8(0x0004)
    FName                                         ;                                                             // 0x00CC(0x0008)
    int32_t                                       ;                                                             // 0x00D4(0x0004)
    FName                                         ;                                                             // 0x00D8(0x0008)
    int32_t                                       ;                                                             // 0x00E0(0x0004)
    FName                                         ;                                                             // 0x00E4(0x0008)
    FName                                         ;                                                             // 0x00EC(0x0008)
    int32_t                                       ;                                                             // 0x00F4(0x0004)
    UBlendProfile*                                ;                                                             // 0x00F8(0x0008)
    UCurveFloat*                                  ;                                                             // 0x0100(0x0008)
    bool                                          ;                                                             // 0x0108(0x0001)
    enum class EAlphaBlendOption                  ;                                                             // 0x0109(0x0001)
    enum class EBlendListTransitionType           ;                                                             // 0x010A(0x0001)
    char                                          pa_010B[0x0005]                                               // 0x010B(0x0005)
    TArray<float>                                 ;                                                             // 0x0110(0x0010)
    enum class ERefPoseType                       ;                                                             // 0x0120(0x0001)
    char                                          pa_0121[0x0007]                                               // 0x0121(0x0007)
    FAnimNodeFunctionRef                          ;                                                             // 0x0128(0x0020)
    FAnimSubsystem                                AnimBlueprintExtension;                                       // 0x0148(0x0080)
    FAnimSubsystem                                AnimBlueprintExtension;                                       // 0x01C8(0x0018)
};


// ScriptStruct  ABP.ABP.AnimBlueprintGeneratedMutableData
// Struct Size::0x0003
struct FAnimBlueprintGeneratedMutableData : public FAnimBlueprintMutableData
{
    bool                                          ;                                                             // 0x0001(0x0001)
    bool                                          ;                                                             // 0x0002(0x0001)
};


// UserDefinedStruct  S.S
// Struct Size::0x0049
struct FS
{
    ABP*                                          HintCharacter;                                                // 0x0000(0x0008)
    enum class ETgfIntraGameDisplayInfoType       DisplayInfoType;                                              // 0x0008(0x0001)
    char                                          pa_0009[0x0007]                                               // 0x0009(0x0007)
    int64_t                                       DisplaySubType;                                               // 0x0010(0x0008)
    enum class ETgfDisplayAgingType               DisplayAgingType;                                             // 0x0018(0x0001)
    char                                          pa_0019[0x0007]                                               // 0x0019(0x0007)
    FVector                                       Location;                                                     // 0x0020(0x0018)
    double                                        Opacity;                                                      // 0x0038(0x0008)
    ABP*                                          SpawnPoint;                                                   // 0x0040(0x0008)
    bool                                          IsCharacterInstance;                                          // 0x0048(0x0001)
};


// ScriptStruct  Classes.ABP.AnimBlueprintGeneratedConstantData
// Struct Size::0x0250
struct FAnimBlueprintGeneratedConstantData : public FAnimBlueprintConstantData
{
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FName                                         ;                                                             // 0x0004(0x0008)
    FName                                         ;                                                             // 0x000C(0x0008)
    int32_t                                       ;                                                             // 0x0014(0x0004)
    FName                                         ;                                                             // 0x0018(0x0008)
    int32_t                                       ;                                                             // 0x0020(0x0004)
    FName                                         ;                                                             // 0x0024(0x0008)
    FName                                         ;                                                             // 0x002C(0x0008)
    FName                                         ;                                                             // 0x0034(0x0008)
    FName                                         ;                                                             // 0x003C(0x0008)
    FName                                         ;                                                             // 0x0044(0x0008)
    char                                          pa_004C[0x0004]                                               // 0x004C(0x0004)
    FAnimNodeFunctionRef                          ;                                                             // 0x0050(0x0020)
    FName                                         ;                                                             // 0x0070(0x0008)
    FName                                         ;                                                             // 0x0078(0x0008)
    FAnimNodeFunctionRef                          ;                                                             // 0x0080(0x0020)
    FAnimNodeFunctionRef                          ;                                                             // 0x00A0(0x0020)
    TArray<float>                                 ;                                                             // 0x00C0(0x0010)
    FName                                         ;                                                             // 0x00D0(0x0008)
    int32_t                                       ;                                                             // 0x00D8(0x0004)
    enum class ERefPoseType                       ;                                                             // 0x00DC(0x0001)
    char                                          pa_00DD[0x0003]                                               // 0x00DD(0x0003)
    TArray<float>                                 ;                                                             // 0x00E0(0x0010)
    TArray<float>                                 ;                                                             // 0x00F0(0x0010)
    enum class ESequenceEvalReinit                ;                                                             // 0x0100(0x0001)
    bool                                          ;                                                             // 0x0101(0x0001)
    char                                          pa_0102[0x0002]                                               // 0x0102(0x0002)
    float                                         ;                                                             // 0x0104(0x0004)
    UAnimSequenceBase*                            ;                                                             // 0x0108(0x0008)
    FName                                         ;                                                             // 0x0110(0x0008)
    int32_t                                       ;                                                             // 0x0118(0x0004)
    float                                         ;                                                             // 0x011C(0x0004)
    FInputScaleBiasClampConstants                 ;                                                             // 0x0120(0x002C)
    float                                         ;                                                             // 0x014C(0x0004)
    enum class EAnimSyncMethod                    ;                                                             // 0x0150(0x0001)
    enum class EAnimGroupRole                     ;                                                             // 0x0151(0x0001)
    char                                          pa_0152[0x0002]                                               // 0x0152(0x0002)
    FName                                         ;                                                             // 0x0154(0x0008)
    FName                                         ;                                                             // 0x015C(0x0008)
    int32_t                                       ;                                                             // 0x0164(0x0004)
    UBlendProfile*                                ;                                                             // 0x0168(0x0008)
    UCurveFloat*                                  ;                                                             // 0x0170(0x0008)
    bool                                          ;                                                             // 0x0178(0x0001)
    enum class EAlphaBlendOption                  ;                                                             // 0x0179(0x0001)
    enum class EBlendListTransitionType           ;                                                             // 0x017A(0x0001)
    char                                          pa_017B[0x0005]                                               // 0x017B(0x0005)
    TArray<float>                                 ;                                                             // 0x0180(0x0010)
    FAnimNodeFunctionRef                          ;                                                             // 0x0190(0x0020)
    FAnimSubsystem                                AnimBlueprintExtension;                                       // 0x01B0(0x0080)
    FAnimSubsystem                                AnimBlueprintExtension;                                       // 0x0230(0x0008)
    FAnimSubsystem                                AnimBlueprintExtension;                                       // 0x0238(0x0018)
};


// ScriptStruct  Classes.ABP.AnimBlueprintGeneratedMutableData
// Struct Size::0x0011
struct FAnimBlueprintGeneratedMutableData : public FAnimBlueprintMutableData
{
    bool                                          ;                                                             // 0x0001(0x0001)
    char                                          pa_0002[0x0002]                                               // 0x0002(0x0002)
    float                                         ;                                                             // 0x0004(0x0004)
    float                                         ;                                                             // 0x0008(0x0004)
    bool                                          ;                                                             // 0x000C(0x0001)
    bool                                          ;                                                             // 0x000D(0x0001)
    bool                                          ;                                                             // 0x000E(0x0001)
    bool                                          ;                                                             // 0x000F(0x0001)
    bool                                          ;                                                             // 0x0010(0x0001)
};


// ScriptStruct  ABP.ABP.AnimBlueprintGeneratedConstantData
// Struct Size::0x02C8
struct FAnimBlueprintGeneratedConstantData : public FAnimBlueprintConstantData
{
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FName                                         ;                                                             // 0x0004(0x0008)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FAnimNodeFunctionRef                          ;                                                             // 0x0010(0x0020)
    enum class ESequenceEvalReinit                ;                                                             // 0x0030(0x0001)
    char                                          pa_0031[0x0003]                                               // 0x0031(0x0003)
    FName                                         ;                                                             // 0x0034(0x0008)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
    FAnimNodeFunctionRef                          ;                                                             // 0x0040(0x0020)
    FName                                         ;                                                             // 0x0060(0x0008)
    TArray<float>                                 ;                                                             // 0x0068(0x0010)
    FName                                         ;                                                             // 0x0078(0x0008)
    FName                                         ;                                                             // 0x0080(0x0008)
    FName                                         ;                                                             // 0x0088(0x0008)
    FName                                         ;                                                             // 0x0090(0x0008)
    FName                                         ;                                                             // 0x0098(0x0008)
    FName                                         ;                                                             // 0x00A0(0x0008)
    float                                         ;                                                             // 0x00A8(0x0004)
    FName                                         ;                                                             // 0x00AC(0x0008)
    FName                                         ;                                                             // 0x00B4(0x0008)
    enum class ERefPoseType                       ;                                                             // 0x00BC(0x0001)
    char                                          pa_00BD[0x0003]                                               // 0x00BD(0x0003)
    FName                                         ;                                                             // 0x00C0(0x0008)
    int32_t                                       ;                                                             // 0x00C8(0x0004)
    FName                                         ;                                                             // 0x00CC(0x0008)
    int32_t                                       ;                                                             // 0x00D4(0x0004)
    FName                                         ;                                                             // 0x00D8(0x0008)
    int32_t                                       ;                                                             // 0x00E0(0x0004)
    char                                          pa_00E4[0x0004]                                               // 0x00E4(0x0004)
    TArray<float>                                 ;                                                             // 0x00E8(0x0010)
    TArray<int32_t>                               ;                                                             // 0x00F8(0x0010)
    FName                                         ;                                                             // 0x0108(0x0008)
    TArray<float>                                 ;                                                             // 0x0110(0x0010)
    FName                                         ;                                                             // 0x0120(0x0008)
    FName                                         ;                                                             // 0x0128(0x0008)
    FName                                         ;                                                             // 0x0130(0x0008)
    FName                                         ;                                                             // 0x0138(0x0008)
    FName                                         ;                                                             // 0x0140(0x0008)
    enum class EBlendListTransitionType           ;                                                             // 0x0148(0x0001)
    enum class EAnimSyncMethod                    ;                                                             // 0x0149(0x0001)
    char                                          pa_014A[0x0006]                                               // 0x014A(0x0006)
    TArray<float>                                 ;                                                             // 0x0150(0x0010)
    UBlendProfile*                                ;                                                             // 0x0160(0x0008)
    UCurveFloat*                                  ;                                                             // 0x0168(0x0008)
    enum class EAlphaBlendOption                  ;                                                             // 0x0170(0x0001)
    enum class EBlendListTransitionType           ;                                                             // 0x0171(0x0001)
    char                                          pa_0172[0x0006]                                               // 0x0172(0x0006)
    TArray<float>                                 ;                                                             // 0x0178(0x0010)
    TArray<int32_t>                               ;                                                             // 0x0188(0x0010)
    float                                         ;                                                             // 0x0198(0x0004)
    bool                                          ;                                                             // 0x019C(0x0001)
    char                                          pa_019D[0x0003]                                               // 0x019D(0x0003)
    float                                         ;                                                             // 0x01A0(0x0004)
    FInputScaleBiasClampConstants                 ;                                                             // 0x01A4(0x002C)
    float                                         ;                                                             // 0x01D0(0x0004)
    float                                         ;                                                             // 0x01D4(0x0004)
    bool                                          ;                                                             // 0x01D8(0x0001)
    enum class EAnimSyncMethod                    ;                                                             // 0x01D9(0x0001)
    enum class EAnimGroupRole                     ;                                                             // 0x01DA(0x0001)
    char                                          pa_01DB[0x0005]                                               // 0x01DB(0x0005)
    FAnimNodeFunctionRef                          ;                                                             // 0x01E0(0x0020)
    FName                                         ;                                                             // 0x0200(0x0008)
    FName                                         ;                                                             // 0x0208(0x0008)
    FAnimSubsystem                                AnimBlueprintExtension;                                       // 0x0210(0x0080)
    FAnimSubsystem                                AnimBlueprintExtension;                                       // 0x0290(0x0008)
    FAnimSubsystem                                AnimBlueprintExtension;                                       // 0x0298(0x0018)
    FAnimSubsystem                                AnimBlueprintExtension;                                       // 0x02B0(0x0018)
};


// ScriptStruct  ABP.ABP.AnimBlueprintGeneratedMutableData
// Struct Size::0x007B
struct FAnimBlueprintGeneratedMutableData : public FAnimBlueprintMutableData
{
    bool                                          ;                                                             // 0x0001(0x0001)
    char                                          pa_0002[0x0002]                                               // 0x0002(0x0002)
    float                                         ;                                                             // 0x0004(0x0004)
    UAnimSequenceBase*                            ;                                                             // 0x0008(0x0008)
    bool                                          ;                                                             // 0x0010(0x0001)
    bool                                          ;                                                             // 0x0011(0x0001)
    bool                                          ;                                                             // 0x0012(0x0001)
    bool                                          ;                                                             // 0x0013(0x0001)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    TArray<float>                                 ;                                                             // 0x0018(0x0010)
    bool                                          ;                                                             // 0x0028(0x0001)
    bool                                          ;                                                             // 0x0029(0x0001)
    bool                                          ;                                                             // 0x002A(0x0001)
    char                                          ;                                                             // 0x002B(0x0001)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
    TArray<float>                                 ;                                                             // 0x0030(0x0010)
    bool                                          ;                                                             // 0x0040(0x0001)
    bool                                          ;                                                             // 0x0041(0x0001)
    bool                                          ;                                                             // 0x0042(0x0001)
    bool                                          ;                                                             // 0x0043(0x0001)
    char                                          ;                                                             // 0x0044(0x0001)
    bool                                          ;                                                             // 0x0045(0x0001)
    char                                          pa_0046[0x0002]                                               // 0x0046(0x0002)
    float                                         ;                                                             // 0x0048(0x0004)
    float                                         ;                                                             // 0x004C(0x0004)
    float                                         ;                                                             // 0x0050(0x0004)
    float                                         ;                                                             // 0x0054(0x0004)
    bool                                          ;                                                             // 0x0058(0x0001)
    bool                                          ;                                                             // 0x0059(0x0001)
    char                                          pa_005A[0x0002]                                               // 0x005A(0x0002)
    float                                         ;                                                             // 0x005C(0x0004)
    float                                         ;                                                             // 0x0060(0x0004)
    bool                                          ;                                                             // 0x0064(0x0001)
    bool                                          ;                                                             // 0x0065(0x0001)
    bool                                          ;                                                             // 0x0066(0x0001)
    bool                                          ;                                                             // 0x0067(0x0001)
    TArray<float>                                 ;                                                             // 0x0068(0x0010)
    bool                                          ;                                                             // 0x0078(0x0001)
    bool                                          ;                                                             // 0x0079(0x0001)
    char                                          ;                                                             // 0x007A(0x0001)
};


// ScriptStruct  ABP.ABP.AnimBlueprintGeneratedConstantData
// Struct Size::0x0310
struct FAnimBlueprintGeneratedConstantData : public FAnimBlueprintConstantData
{
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FName                                         ;                                                             // 0x0004(0x0008)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FAnimNodeFunctionRef                          ;                                                             // 0x0010(0x0020)
    enum class ESequenceEvalReinit                ;                                                             // 0x0030(0x0001)
    char                                          pa_0031[0x0003]                                               // 0x0031(0x0003)
    FName                                         ;                                                             // 0x0034(0x0008)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
    FAnimNodeFunctionRef                          ;                                                             // 0x0040(0x0020)
    FName                                         ;                                                             // 0x0060(0x0008)
    FName                                         ;                                                             // 0x0068(0x0008)
    TArray<float>                                 ;                                                             // 0x0070(0x0010)
    FName                                         ;                                                             // 0x0080(0x0008)
    FName                                         ;                                                             // 0x0088(0x0008)
    FName                                         ;                                                             // 0x0090(0x0008)
    FName                                         ;                                                             // 0x0098(0x0008)
    FName                                         ;                                                             // 0x00A0(0x0008)
    FAnimNodeFunctionRef                          ;                                                             // 0x00A8(0x0020)
    FAnimNodeFunctionRef                          ;                                                             // 0x00C8(0x0020)
    FName                                         ;                                                             // 0x00E8(0x0008)
    FName                                         ;                                                             // 0x00F0(0x0008)
    FName                                         ;                                                             // 0x00F8(0x0008)
    FName                                         ;                                                             // 0x0100(0x0008)
    FName                                         ;                                                             // 0x0108(0x0008)
    TArray<float>                                 ;                                                             // 0x0110(0x0010)
    FName                                         ;                                                             // 0x0120(0x0008)
    FName                                         ;                                                             // 0x0128(0x0008)
    FName                                         ;                                                             // 0x0130(0x0008)
    int32_t                                       ;                                                             // 0x0138(0x0004)
    FName                                         ;                                                             // 0x013C(0x0008)
    int32_t                                       ;                                                             // 0x0144(0x0004)
    FName                                         ;                                                             // 0x0148(0x0008)
    int32_t                                       ;                                                             // 0x0150(0x0004)
    enum class ERefPoseType                       ;                                                             // 0x0154(0x0001)
    char                                          pa_0155[0x0003]                                               // 0x0155(0x0003)
    FName                                         ;                                                             // 0x0158(0x0008)
    int32_t                                       ;                                                             // 0x0160(0x0004)
    FName                                         ;                                                             // 0x0164(0x0008)
    FName                                         ;                                                             // 0x016C(0x0008)
    FName                                         ;                                                             // 0x0174(0x0008)
    FName                                         ;                                                             // 0x017C(0x0008)
    FName                                         ;                                                             // 0x0184(0x0008)
    char                                          pa_018C[0x0004]                                               // 0x018C(0x0004)
    TArray<float>                                 ;                                                             // 0x0190(0x0010)
    FName                                         ;                                                             // 0x01A0(0x0008)
    FAnimNodeFunctionRef                          ;                                                             // 0x01A8(0x0020)
    FAnimNodeFunctionRef                          ;                                                             // 0x01C8(0x0020)
    bool                                          ;                                                             // 0x01E8(0x0001)
    char                                          pa_01E9[0x0003]                                               // 0x01E9(0x0003)
    float                                         ;                                                             // 0x01EC(0x0004)
    FInputScaleBiasClampConstants                 ;                                                             // 0x01F0(0x002C)
    float                                         ;                                                             // 0x021C(0x0004)
    enum class EAnimSyncMethod                    ;                                                             // 0x0220(0x0001)
    enum class EAnimGroupRole                     ;                                                             // 0x0221(0x0001)
    char                                          pa_0222[0x0006]                                               // 0x0222(0x0006)
    UBlendProfile*                                ;                                                             // 0x0228(0x0008)
    UCurveFloat*                                  ;                                                             // 0x0230(0x0008)
    bool                                          ;                                                             // 0x0238(0x0001)
    enum class EAlphaBlendOption                  ;                                                             // 0x0239(0x0001)
    enum class EBlendListTransitionType           ;                                                             // 0x023A(0x0001)
    char                                          pa_023B[0x0005]                                               // 0x023B(0x0005)
    FAnimNodeFunctionRef                          ;                                                             // 0x0240(0x0020)
    FName                                         ;                                                             // 0x0260(0x0008)
    FName                                         ;                                                             // 0x0268(0x0008)
    FAnimSubsystem                                AnimBlueprintExtension;                                       // 0x0270(0x0080)
    FAnimSubsystem                                AnimBlueprintExtension;                                       // 0x02F0(0x0008)
    FAnimSubsystem                                AnimBlueprintExtension;                                       // 0x02F8(0x0018)
};


// ScriptStruct  ABP.ABP.AnimBlueprintGeneratedMutableData
// Struct Size::0x0089
struct FAnimBlueprintGeneratedMutableData : public FAnimBlueprintMutableData
{
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         ;                                                             // 0x0004(0x0004)
    UAnimSequenceBase*                            ;                                                             // 0x0008(0x0008)
    bool                                          ;                                                             // 0x0010(0x0001)
    bool                                          ;                                                             // 0x0011(0x0001)
    bool                                          ;                                                             // 0x0012(0x0001)
    char                                          pa_0013[0x0001]                                               // 0x0013(0x0001)
    float                                         ;                                                             // 0x0014(0x0004)
    TArray<float>                                 ;                                                             // 0x0018(0x0010)
    bool                                          ;                                                             // 0x0028(0x0001)
    char                                          pa_0029[0x0003]                                               // 0x0029(0x0003)
    float                                         ;                                                             // 0x002C(0x0004)
    TArray<float>                                 ;                                                             // 0x0030(0x0010)
    bool                                          ;                                                             // 0x0040(0x0001)
    char                                          pa_0041[0x0003]                                               // 0x0041(0x0003)
    float                                         ;                                                             // 0x0044(0x0004)
    TArray<float>                                 ;                                                             // 0x0048(0x0010)
    bool                                          ;                                                             // 0x0058(0x0001)
    bool                                          ;                                                             // 0x0059(0x0001)
    bool                                          ;                                                             // 0x005A(0x0001)
    char                                          pa_005B[0x0001]                                               // 0x005B(0x0001)
    float                                         ;                                                             // 0x005C(0x0004)
    TArray<float>                                 ;                                                             // 0x0060(0x0010)
    bool                                          ;                                                             // 0x0070(0x0001)
    bool                                          ;                                                             // 0x0071(0x0001)
    bool                                          ;                                                             // 0x0072(0x0001)
    bool                                          ;                                                             // 0x0073(0x0001)
    float                                         ;                                                             // 0x0074(0x0004)
    TArray<float>                                 ;                                                             // 0x0078(0x0010)
    bool                                          ;                                                             // 0x0088(0x0001)
};


// ScriptStruct  ABP.ABP.AnimBlueprintGeneratedConstantData
// Struct Size::0x02C8
struct FAnimBlueprintGeneratedConstantData : public FAnimBlueprintGeneratedConstantData
{
};


// ScriptStruct  ABP.ABP.AnimBlueprintGeneratedConstantData
// Struct Size::0x0310
struct FAnimBlueprintGeneratedConstantData : public FAnimBlueprintGeneratedConstantData
{
};


// UserDefinedStruct  SpawnSoulData.SpawnSoulData
// Struct Size::0x0010
struct FSpawnSoulData
{
    int32_t                                       SpawnCount;                                                   // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    AB*                                           Soul;                                                         // 0x0008(0x0008)
};


// ScriptStruct  S.L003.AnimBlueprintGeneratedConstantData
// Struct Size::0x00D0
struct FAnimBlueprintGeneratedConstantData : public FAnimBlueprintConstantData
{
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FName                                         ;                                                             // 0x0004(0x0008)
    FName                                         ;                                                             // 0x000C(0x0008)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FAnimNodeFunctionRef                          ;                                                             // 0x0018(0x0020)
    FAnimSubsystem                                AnimBlueprintExtension;                                       // 0x0038(0x0080)
    FAnimSubsystem                                AnimBlueprintExtension;                                       // 0x00B8(0x0018)
};


// ScriptStruct  S.C003.AnimBlueprintGeneratedConstantData
// Struct Size::0x00D0
struct FAnimBlueprintGeneratedConstantData : public FAnimBlueprintConstantData
{
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FName                                         ;                                                             // 0x0004(0x0008)
    FName                                         ;                                                             // 0x000C(0x0008)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FAnimNodeFunctionRef                          ;                                                             // 0x0018(0x0020)
    FAnimSubsystem                                AnimBlueprintExtension;                                       // 0x0038(0x0080)
    FAnimSubsystem                                AnimBlueprintExtension;                                       // 0x00B8(0x0018)
};


// ScriptStruct  ABP.ABP.AnimBlueprintGeneratedConstantData
// Struct Size::0x02C8
struct FAnimBlueprintGeneratedConstantData : public FAnimBlueprintGeneratedConstantData
{
};


// ScriptStruct  ABP.ABP.AnimBlueprintGeneratedConstantData
// Struct Size::0x0310
struct FAnimBlueprintGeneratedConstantData : public FAnimBlueprintGeneratedConstantData
{
};


// UserDefinedStruct  ShowWeaponHandType.ShowWeaponHandType
// Struct Size::0x0002
struct FShowWeaponHandType
{
    enum class ETgfEquipSubType                   EquipSubType;                                                 // 0x0000(0x0001)
    enum class ETgfWeaponHandType                 WeaponHandType;                                               // 0x0001(0x0001)
};


// ScriptStruct  ABP.ABP.AnimBlueprintGeneratedConstantData
// Struct Size::0x0310
struct FAnimBlueprintGeneratedConstantData : public FAnimBlueprintGeneratedConstantData
{
};


// ScriptStruct  ABP.ABP.AnimBlueprintGeneratedConstantData
// Struct Size::0x02C8
struct FAnimBlueprintGeneratedConstantData : public FAnimBlueprintGeneratedConstantData
{
};


// ScriptStruct  ABP.ABP.AnimBlueprintGeneratedConstantData
// Struct Size::0x0178
struct FAnimBlueprintGeneratedConstantData : public FAnimBlueprintConstantData
{
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FName                                         ;                                                             // 0x0004(0x0008)
    FName                                         ;                                                             // 0x000C(0x0008)
    int32_t                                       ;                                                             // 0x0014(0x0004)
    FName                                         ;                                                             // 0x0018(0x0008)
    int32_t                                       ;                                                             // 0x0020(0x0004)
    bool                                          ;                                                             // 0x0024(0x0001)
    char                                          pa_0025[0x0003]                                               // 0x0025(0x0003)
    float                                         ;                                                             // 0x0028(0x0004)
    FInputScaleBiasClampConstants                 ;                                                             // 0x002C(0x002C)
    float                                         ;                                                             // 0x0058(0x0004)
    bool                                          ;                                                             // 0x005C(0x0001)
    enum class EAnimSyncMethod                    ;                                                             // 0x005D(0x0001)
    enum class EAnimGroupRole                     ;                                                             // 0x005E(0x0001)
    char                                          pa_005F[0x0001]                                               // 0x005F(0x0001)
    FAnimNodeFunctionRef                          ;                                                             // 0x0060(0x0020)
    FAnimNodeFunctionRef                          ;                                                             // 0x0080(0x0020)
    FName                                         ;                                                             // 0x00A0(0x0008)
    FName                                         ;                                                             // 0x00A8(0x0008)
    int32_t                                       ;                                                             // 0x00B0(0x0004)
    char                                          pa_00B4[0x0004]                                               // 0x00B4(0x0004)
    FAnimNodeFunctionRef                          ;                                                             // 0x00B8(0x0020)
    FAnimSubsystem                                AnimBlueprintExtension;                                       // 0x00D8(0x0080)
    FAnimSubsystem                                AnimBlueprintExtension;                                       // 0x0158(0x0008)
    FAnimSubsystem                                AnimBlueprintExtension;                                       // 0x0160(0x0018)
};


// ScriptStruct  ABP.ABP.AnimBlueprintGeneratedConstantData
// Struct Size::0x0178
struct FAnimBlueprintGeneratedConstantData : public FAnimBlueprintGeneratedConstantData
{
};


// ScriptStruct  ABP.ABP.AnimBlueprintGeneratedConstantData
// Struct Size::0x00D0
struct FAnimBlueprintGeneratedConstantData : public FAnimBlueprintConstantData
{
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FName                                         ;                                                             // 0x0004(0x0008)
    FName                                         ;                                                             // 0x000C(0x0008)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FAnimNodeFunctionRef                          ;                                                             // 0x0018(0x0020)
    FAnimSubsystem                                AnimBlueprintExtension;                                       // 0x0038(0x0080)
    FAnimSubsystem                                AnimBlueprintExtension;                                       // 0x00B8(0x0018)
};


// UserDefinedStruct  AnimStruct.AnimStruct
// Struct Size::0x00C8
struct FAnimStruct
{
    FGameplayTag                                  Tag;                                                          // 0x0000(0x0008)
    FAnimStruct                                   AnimSet;                                                      // 0x0008(0x00C0)
};


// ScriptStruct  ABP.ABP.AnimBlueprintGeneratedConstantData
// Struct Size::0x0178
struct FAnimBlueprintGeneratedConstantData : public FAnimBlueprintConstantData
{
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    TArray<float>                                 ;                                                             // 0x0008(0x0010)
    FName                                         ;                                                             // 0x0018(0x0008)
    FAnimNodeFunctionRef                          ;                                                             // 0x0020(0x0020)
    FName                                         ;                                                             // 0x0040(0x0008)
    bool                                          ;                                                             // 0x0048(0x0001)
    char                                          pa_0049[0x0003]                                               // 0x0049(0x0003)
    float                                         ;                                                             // 0x004C(0x0004)
    FInputScaleBiasClampConstants                 ;                                                             // 0x0050(0x002C)
    float                                         ;                                                             // 0x007C(0x0004)
    enum class EAnimSyncMethod                    ;                                                             // 0x0080(0x0001)
    enum class EAnimGroupRole                     ;                                                             // 0x0081(0x0001)
    char                                          pa_0082[0x0006]                                               // 0x0082(0x0006)
    UBlendProfile*                                ;                                                             // 0x0088(0x0008)
    UCurveFloat*                                  ;                                                             // 0x0090(0x0008)
    bool                                          ;                                                             // 0x0098(0x0001)
    enum class EAlphaBlendOption                  ;                                                             // 0x0099(0x0001)
    enum class EBlendListTransitionType           ;                                                             // 0x009A(0x0001)
    char                                          pa_009B[0x0005]                                               // 0x009B(0x0005)
    TArray<float>                                 ;                                                             // 0x00A0(0x0010)
    FAnimNodeFunctionRef                          ;                                                             // 0x00B0(0x0020)
    FName                                         ;                                                             // 0x00D0(0x0008)
    FName                                         ;                                                             // 0x00D8(0x0008)
    FAnimSubsystem                                AnimBlueprintExtension;                                       // 0x00E0(0x0080)
    FAnimSubsystem                                AnimBlueprintExtension;                                       // 0x0160(0x0018)
};


// ScriptStruct  ABP.ABP.AnimBlueprintGeneratedMutableData
// Struct Size::0x0005
struct FAnimBlueprintGeneratedMutableData : public FAnimBlueprintMutableData
{
    bool                                          ;                                                             // 0x0001(0x0001)
    bool                                          ;                                                             // 0x0002(0x0001)
    bool                                          ;                                                             // 0x0003(0x0001)
    bool                                          ;                                                             // 0x0004(0x0001)
};


// ScriptStruct  Human.SKM.AnimBlueprintGeneratedConstantData
// Struct Size::0x00D0
struct FAnimBlueprintGeneratedConstantData : public FAnimBlueprintConstantData
{
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FName                                         ;                                                             // 0x0004(0x0008)
    FName                                         ;                                                             // 0x000C(0x0008)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FAnimNodeFunctionRef                          ;                                                             // 0x0018(0x0020)
    FAnimSubsystem                                AnimBlueprintExtension;                                       // 0x0038(0x0080)
    FAnimSubsystem                                AnimBlueprintExtension;                                       // 0x00B8(0x0018)
};


// ScriptStruct  Elf.Elf.AnimBlueprintGeneratedConstantData
// Struct Size::0x00D0
struct FAnimBlueprintGeneratedConstantData : public FAnimBlueprintConstantData
{
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FName                                         ;                                                             // 0x0004(0x0008)
    FName                                         ;                                                             // 0x000C(0x0008)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FAnimNodeFunctionRef                          ;                                                             // 0x0018(0x0020)
    FAnimSubsystem                                AnimBlueprintExtension;                                       // 0x0038(0x0080)
    FAnimSubsystem                                AnimBlueprintExtension;                                       // 0x00B8(0x0018)
};


// ScriptStruct  Human.SKM.AnimBlueprintGeneratedConstantData
// Struct Size::0x00D0
struct FAnimBlueprintGeneratedConstantData : public FAnimBlueprintConstantData
{
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FName                                         ;                                                             // 0x0004(0x0008)
    FName                                         ;                                                             // 0x000C(0x0008)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FAnimNodeFunctionRef                          ;                                                             // 0x0018(0x0020)
    FAnimSubsystem                                AnimBlueprintExtension;                                       // 0x0038(0x0080)
    FAnimSubsystem                                AnimBlueprintExtension;                                       // 0x00B8(0x0018)
};


// ScriptStruct  Human.SKM.AnimBlueprintGeneratedConstantData
// Struct Size::0x00D0
struct FAnimBlueprintGeneratedConstantData : public FAnimBlueprintConstantData
{
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FName                                         ;                                                             // 0x0004(0x0008)
    FName                                         ;                                                             // 0x000C(0x0008)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FAnimNodeFunctionRef                          ;                                                             // 0x0018(0x0020)
    FAnimSubsystem                                AnimBlueprintExtension;                                       // 0x0038(0x0080)
    FAnimSubsystem                                AnimBlueprintExtension;                                       // 0x00B8(0x0018)
};


// ScriptStruct  Other.Other.AnimBlueprintGeneratedConstantData
// Struct Size::0x00D0
struct FAnimBlueprintGeneratedConstantData : public FAnimBlueprintConstantData
{
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FName                                         ;                                                             // 0x0004(0x0008)
    FName                                         ;                                                             // 0x000C(0x0008)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FAnimNodeFunctionRef                          ;                                                             // 0x0018(0x0020)
    FAnimSubsystem                                AnimBlueprintExtension;                                       // 0x0038(0x0080)
    FAnimSubsystem                                AnimBlueprintExtension;                                       // 0x00B8(0x0018)
};


// ScriptStruct  Elf.Elf.AnimBlueprintGeneratedConstantData
// Struct Size::0x00D0
struct FAnimBlueprintGeneratedConstantData : public FAnimBlueprintConstantData
{
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FName                                         ;                                                             // 0x0004(0x0008)
    FName                                         ;                                                             // 0x000C(0x0008)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FAnimNodeFunctionRef                          ;                                                             // 0x0018(0x0020)
    FAnimSubsystem                                AnimBlueprintExtension;                                       // 0x0038(0x0080)
    FAnimSubsystem                                AnimBlueprintExtension;                                       // 0x00B8(0x0018)
};


// ScriptStruct  Elf.Elf.AnimBlueprintGeneratedConstantData
// Struct Size::0x00D0
struct FAnimBlueprintGeneratedConstantData : public FAnimBlueprintConstantData
{
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FName                                         ;                                                             // 0x0004(0x0008)
    FName                                         ;                                                             // 0x000C(0x0008)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FAnimNodeFunctionRef                          ;                                                             // 0x0018(0x0020)
    FAnimSubsystem                                AnimBlueprintExtension;                                       // 0x0038(0x0080)
    FAnimSubsystem                                AnimBlueprintExtension;                                       // 0x00B8(0x0018)
};


// ScriptStruct  Elf.Elf.AnimBlueprintGeneratedConstantData
// Struct Size::0x00D0
struct FAnimBlueprintGeneratedConstantData : public FAnimBlueprintConstantData
{
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FName                                         ;                                                             // 0x0004(0x0008)
    FName                                         ;                                                             // 0x000C(0x0008)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FAnimNodeFunctionRef                          ;                                                             // 0x0018(0x0020)
    FAnimSubsystem                                AnimBlueprintExtension;                                       // 0x0038(0x0080)
    FAnimSubsystem                                AnimBlueprintExtension;                                       // 0x00B8(0x0018)
};


// ScriptStruct  Human.SKM.AnimBlueprintGeneratedConstantData
// Struct Size::0x00D0
struct FAnimBlueprintGeneratedConstantData : public FAnimBlueprintConstantData
{
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FName                                         ;                                                             // 0x0004(0x0008)
    FName                                         ;                                                             // 0x000C(0x0008)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FAnimNodeFunctionRef                          ;                                                             // 0x0018(0x0020)
    FAnimSubsystem                                AnimBlueprintExtension;                                       // 0x0038(0x0080)
    FAnimSubsystem                                AnimBlueprintExtension;                                       // 0x00B8(0x0018)
};


// ScriptStruct  Other.Other.AnimBlueprintGeneratedConstantData
// Struct Size::0x00D0
struct FAnimBlueprintGeneratedConstantData : public FAnimBlueprintConstantData
{
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FName                                         ;                                                             // 0x0004(0x0008)
    FName                                         ;                                                             // 0x000C(0x0008)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FAnimNodeFunctionRef                          ;                                                             // 0x0018(0x0020)
    FAnimSubsystem                                AnimBlueprintExtension;                                       // 0x0038(0x0080)
    FAnimSubsystem                                AnimBlueprintExtension;                                       // 0x00B8(0x0018)
};


// ScriptStruct  Other.Other.AnimBlueprintGeneratedConstantData
// Struct Size::0x00D0
struct FAnimBlueprintGeneratedConstantData : public FAnimBlueprintConstantData
{
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FName                                         ;                                                             // 0x0004(0x0008)
    FName                                         ;                                                             // 0x000C(0x0008)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FAnimNodeFunctionRef                          ;                                                             // 0x0018(0x0020)
    FAnimSubsystem                                AnimBlueprintExtension;                                       // 0x0038(0x0080)
    FAnimSubsystem                                AnimBlueprintExtension;                                       // 0x00B8(0x0018)
};


// ScriptStruct  Human.SKM.AnimBlueprintGeneratedConstantData
// Struct Size::0x00D0
struct FAnimBlueprintGeneratedConstantData : public FAnimBlueprintConstantData
{
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FName                                         ;                                                             // 0x0004(0x0008)
    FName                                         ;                                                             // 0x000C(0x0008)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FAnimNodeFunctionRef                          ;                                                             // 0x0018(0x0020)
    FAnimSubsystem                                AnimBlueprintExtension;                                       // 0x0038(0x0080)
    FAnimSubsystem                                AnimBlueprintExtension;                                       // 0x00B8(0x0018)
};


// UserDefinedStruct  EquipSubTypeRow.EquipSubTypeRow
// Struct Size::0x0018
struct FEquipSubTypeRow
{
    enum class ETGFProtoTgfEnItemMinorType        MinorType;                                                    // 0x0000(0x0001)
    enum class ETGFProtoTgfEnGearEquipSubType     EquipSubtype;                                                 // 0x0001(0x0001)
    char                                          pa_0002[0x0006]                                               // 0x0002(0x0006)
    TArray<enum class ETGFProtoTgfEnGearEquipSubType>CombieSubtype;                                             // 0x0008(0x0010)
};


// ScriptStruct  Sword.ABP.AnimBlueprintGeneratedConstantData
// Struct Size::0x02C8
struct FAnimBlueprintGeneratedConstantData : public FAnimBlueprintGeneratedConstantData
{
};


// ScriptStruct  Sword.ABP.AnimBlueprintGeneratedConstantData
// Struct Size::0x02C8
struct FAnimBlueprintGeneratedConstantData : public FAnimBlueprintGeneratedConstantData
{
};


// ScriptStruct  ABP.ABP.AnimBlueprintGeneratedConstantData
// Struct Size::0x02C8
struct FAnimBlueprintGeneratedConstantData : public FAnimBlueprintGeneratedConstantData
{
};


// ScriptStruct  Sword.ABP.AnimBlueprintGeneratedConstantData
// Struct Size::0x02C8
struct FAnimBlueprintGeneratedConstantData : public FAnimBlueprintGeneratedConstantData
{
};


// ScriptStruct  Sword.ABP.AnimBlueprintGeneratedConstantData
// Struct Size::0x0310
struct FAnimBlueprintGeneratedConstantData : public FAnimBlueprintGeneratedConstantData
{
};


// ScriptStruct  Sword.ABP.AnimBlueprintGeneratedConstantData
// Struct Size::0x0310
struct FAnimBlueprintGeneratedConstantData : public FAnimBlueprintGeneratedConstantData
{
};


// ScriptStruct  Sword.ABP.AnimBlueprintGeneratedConstantData
// Struct Size::0x0310
struct FAnimBlueprintGeneratedConstantData : public FAnimBlueprintGeneratedConstantData
{
};


// ScriptStruct  ABP.ABP.AnimBlueprintGeneratedConstantData
// Struct Size::0x0310
struct FAnimBlueprintGeneratedConstantData : public FAnimBlueprintGeneratedConstantData
{
};


// ScriptStruct  ABP.ABP.AnimBlueprintGeneratedConstantData
// Struct Size::0x02C8
struct FAnimBlueprintGeneratedConstantData : public FAnimBlueprintGeneratedConstantData
{
};


// ScriptStruct  ABP.ABP.AnimBlueprintGeneratedConstantData
// Struct Size::0x0310
struct FAnimBlueprintGeneratedConstantData : public FAnimBlueprintGeneratedConstantData
{
};


// ScriptStruct  ABP.ABP.AnimBlueprintGeneratedConstantData
// Struct Size::0x0310
struct FAnimBlueprintGeneratedConstantData : public FAnimBlueprintGeneratedConstantData
{
};


// ScriptStruct  ABP.ABP.AnimBlueprintGeneratedConstantData
// Struct Size::0x02C8
struct FAnimBlueprintGeneratedConstantData : public FAnimBlueprintGeneratedConstantData
{
};


// ScriptStruct  P072.P072.AnimBlueprintGeneratedConstantData
// Struct Size::0x00D0
struct FAnimBlueprintGeneratedConstantData : public FAnimBlueprintConstantData
{
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FName                                         ;                                                             // 0x0004(0x0008)
    FName                                         ;                                                             // 0x000C(0x0008)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FAnimNodeFunctionRef                          ;                                                             // 0x0018(0x0020)
    FAnimSubsystem                                AnimBlueprintExtension;                                       // 0x0038(0x0080)
    FAnimSubsystem                                AnimBlueprintExtension;                                       // 0x00B8(0x0018)
};


// ScriptStruct  S.P003.AnimBlueprintGeneratedConstantData
// Struct Size::0x00D0
struct FAnimBlueprintGeneratedConstantData : public FAnimBlueprintConstantData
{
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FName                                         ;                                                             // 0x0004(0x0008)
    FName                                         ;                                                             // 0x000C(0x0008)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FAnimNodeFunctionRef                          ;                                                             // 0x0018(0x0020)
    FAnimSubsystem                                AnimBlueprintExtension;                                       // 0x0038(0x0080)
    FAnimSubsystem                                AnimBlueprintExtension;                                       // 0x00B8(0x0018)
};


// ScriptStruct  Dagger.ABP.AnimBlueprintGeneratedConstantData
// Struct Size::0x02C8
struct FAnimBlueprintGeneratedConstantData : public FAnimBlueprintGeneratedConstantData
{
};


// ScriptStruct  Dagger.ABP.AnimBlueprintGeneratedConstantData
// Struct Size::0x02C8
struct FAnimBlueprintGeneratedConstantData : public FAnimBlueprintGeneratedConstantData
{
};


// ScriptStruct  ABP.ABP.AnimBlueprintGeneratedConstantData
// Struct Size::0x0310
struct FAnimBlueprintGeneratedConstantData : public FAnimBlueprintGeneratedConstantData
{
};


// ScriptStruct  ABP.ABP.AnimBlueprintGeneratedConstantData
// Struct Size::0x02C8
struct FAnimBlueprintGeneratedConstantData : public FAnimBlueprintGeneratedConstantData
{
};


// ScriptStruct  Dagger.ABP.AnimBlueprintGeneratedConstantData
// Struct Size::0x0310
struct FAnimBlueprintGeneratedConstantData : public FAnimBlueprintGeneratedConstantData
{
};


// ScriptStruct  Dagger.ABP.AnimBlueprintGeneratedConstantData
// Struct Size::0x0310
struct FAnimBlueprintGeneratedConstantData : public FAnimBlueprintGeneratedConstantData
{
};


// ScriptStruct  DoubleCrossbow.ABP.AnimBlueprintGeneratedConstantData
// Struct Size::0x0130
struct FAnimBlueprintGeneratedConstantData : public FAnimBlueprintConstantData
{
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FName                                         ;                                                             // 0x0004(0x0008)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FAnimNodeFunctionRef                          ;                                                             // 0x0010(0x0020)
    FAnimNodeFunctionRef                          ;                                                             // 0x0030(0x0020)
    bool                                          ;                                                             // 0x0050(0x0001)
    char                                          pa_0051[0x0003]                                               // 0x0051(0x0003)
    float                                         ;                                                             // 0x0054(0x0004)
    FInputScaleBiasClampConstants                 ;                                                             // 0x0058(0x002C)
    float                                         ;                                                             // 0x0084(0x0004)
    bool                                          ;                                                             // 0x0088(0x0001)
    enum class EAnimSyncMethod                    ;                                                             // 0x0089(0x0001)
    enum class EAnimGroupRole                     ;                                                             // 0x008A(0x0001)
    char                                          pa_008B[0x0001]                                               // 0x008B(0x0001)
    FName                                         ;                                                             // 0x008C(0x0008)
    char                                          pa_0094[0x0004]                                               // 0x0094(0x0004)
    FAnimSubsystem                                AnimBlueprintExtension;                                       // 0x0098(0x0080)
    FAnimSubsystem                                AnimBlueprintExtension;                                       // 0x0118(0x0018)
};


// ScriptStruct  ABP.ABP.AnimBlueprintGeneratedConstantData
// Struct Size::0x0310
struct FAnimBlueprintGeneratedConstantData : public FAnimBlueprintGeneratedConstantData
{
};


// ScriptStruct  ABP.ABP.AnimBlueprintGeneratedConstantData
// Struct Size::0x02C8
struct FAnimBlueprintGeneratedConstantData : public FAnimBlueprintGeneratedConstantData
{
};


// ScriptStruct  ABP.ABP.AnimBlueprintGeneratedConstantData
// Struct Size::0x02C8
struct FAnimBlueprintGeneratedConstantData : public FAnimBlueprintGeneratedConstantData
{
};


// ScriptStruct  Mace.ABP.AnimBlueprintGeneratedConstantData
// Struct Size::0x02C8
struct FAnimBlueprintGeneratedConstantData : public FAnimBlueprintGeneratedConstantData
{
};


// ScriptStruct  Mace.ABP.AnimBlueprintGeneratedConstantData
// Struct Size::0x02C8
struct FAnimBlueprintGeneratedConstantData : public FAnimBlueprintGeneratedConstantData
{
};


// ScriptStruct  ABP.ABP.AnimBlueprintGeneratedConstantData
// Struct Size::0x0310
struct FAnimBlueprintGeneratedConstantData : public FAnimBlueprintGeneratedConstantData
{
};


// ScriptStruct  Mace.ABP.AnimBlueprintGeneratedConstantData
// Struct Size::0x0310
struct FAnimBlueprintGeneratedConstantData : public FAnimBlueprintGeneratedConstantData
{
};


// ScriptStruct  Mace.ABP.AnimBlueprintGeneratedConstantData
// Struct Size::0x0310
struct FAnimBlueprintGeneratedConstantData : public FAnimBlueprintGeneratedConstantData
{
};


// ScriptStruct  C053.C053.AnimBlueprintGeneratedConstantData
// Struct Size::0x00D0
struct FAnimBlueprintGeneratedConstantData : public FAnimBlueprintConstantData
{
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FName                                         ;                                                             // 0x0004(0x0008)
    FName                                         ;                                                             // 0x000C(0x0008)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FAnimNodeFunctionRef                          ;                                                             // 0x0018(0x0020)
    FAnimSubsystem                                AnimBlueprintExtension;                                       // 0x0038(0x0080)
    FAnimSubsystem                                AnimBlueprintExtension;                                       // 0x00B8(0x0018)
};


// ScriptStruct  L032.L032.AnimBlueprintGeneratedConstantData
// Struct Size::0x00D0
struct FAnimBlueprintGeneratedConstantData : public FAnimBlueprintConstantData
{
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FName                                         ;                                                             // 0x0004(0x0008)
    FName                                         ;                                                             // 0x000C(0x0008)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FAnimNodeFunctionRef                          ;                                                             // 0x0018(0x0020)
    FAnimSubsystem                                AnimBlueprintExtension;                                       // 0x0038(0x0080)
    FAnimSubsystem                                AnimBlueprintExtension;                                       // 0x00B8(0x0018)
};


// ScriptStruct  S.C001.AnimBlueprintGeneratedConstantData
// Struct Size::0x00D0
struct FAnimBlueprintGeneratedConstantData : public FAnimBlueprintConstantData
{
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FName                                         ;                                                             // 0x0004(0x0008)
    FName                                         ;                                                             // 0x000C(0x0008)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FAnimNodeFunctionRef                          ;                                                             // 0x0018(0x0020)
    FAnimSubsystem                                AnimBlueprintExtension;                                       // 0x0038(0x0080)
    FAnimSubsystem                                AnimBlueprintExtension;                                       // 0x00B8(0x0018)
};


// UserDefinedStruct  AnimStruct.AnimStruct
// Struct Size::0x0040
struct FAnimStruct
{
    TArray<UAnimSequenceBase*>                    Forward;                                                      // 0x0000(0x0010)
    TArray<UAnimSequenceBase*>                    Right;                                                        // 0x0010(0x0010)
    TArray<UAnimSequenceBase*>                    Left;                                                         // 0x0020(0x0010)
    TArray<UAnimSequenceBase*>                    Back;                                                         // 0x0030(0x0010)
};


// UserDefinedStruct  MultiQuickSideData.MultiQuickSideData
// Struct Size::0x0010
struct FMultiQuickSideData
{
    double                                        ActivatePercent;                                              // 0x0000(0x0008)
    UGameplayAbility*                             AbilityToActivate;                                            // 0x0008(0x0008)
};


// UserDefinedStruct  AnimStruct.AnimStruct
// Struct Size::0x0010
struct FAnimStruct
{
    UAnimSequenceBase*                            Right90;                                                      // 0x0000(0x0008)
    UAnimSequenceBase*                            Left90;                                                       // 0x0008(0x0008)
};


// UserDefinedStruct  AnimStruct.AnimStruct
// Struct Size::0x0050
struct FAnimStruct
{
    UAnimSequenceBase*                            Front;                                                        // 0x0000(0x0008)
    UAnimSequenceBase*                            Right;                                                        // 0x0008(0x0008)
    UAnimSequenceBase*                            Left;                                                         // 0x0010(0x0008)
    UAnimSequenceBase*                            Back;                                                         // 0x0018(0x0008)
    bool                                          bEnableWalk;                                                  // 0x0020(0x0001)
    char                                          pa_0021[0x0007]                                               // 0x0021(0x0007)
    UAnimSequence*                                WalkFront;                                                    // 0x0028(0x0008)
    UAnimSequence*                                WalkRight;                                                    // 0x0030(0x0008)
    UAnimSequence*                                WalkLeft;                                                     // 0x0038(0x0008)
    UAnimSequence*                                WalkBack;                                                     // 0x0040(0x0008)
    double                                        FrontSpeedPair;                                               // 0x0048(0x0008)
};


// UserDefinedStruct  AnimStruct.AnimStruct
// Struct Size::0x0018
struct FAnimStruct
{
    UAnimSequenceBase*                            Start;                                                        // 0x0000(0x0008)
    UAnimSequenceBase*                            Loop;                                                         // 0x0008(0x0008)
    UAnimSequenceBase*                            End;                                                          // 0x0010(0x0008)
};


// UserDefinedStruct  S.S
// Struct Size::0x0058
struct FS
{
    FVector                                       Location;                                                     // 0x0000(0x0018)
    enum class ETgfIntraGameDisplayInfoType       DisplayMainType;                                              // 0x0018(0x0001)
    char                                          pa_0019[0x0007]                                               // 0x0019(0x0007)
    int64_t                                       DisplaySubType;                                               // 0x0020(0x0008)
    int64_t                                       ObjectID;                                                     // 0x0028(0x0008)
    UObject*                                      ObjectCls;                                                    // 0x0030(0x0008)
    double                                        FloatParam;                                                   // 0x0038(0x0008)
    int32_t                                       IniParam;                                                     // 0x0040(0x0004)
    char                                          pa_0044[0x0004]                                               // 0x0044(0x0004)
    UObject*                                      Object;                                                       // 0x0048(0x0008)
    int64_t                                       AbililtyOwnerID;                                              // 0x0050(0x0008)
};


// UserDefinedStruct  S.S
// Struct Size::0x0018
struct FS
{
    enum class ETgfIntraGameDisplayInfoType       MainType;                                                     // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    int64_t                                       SubType;                                                      // 0x0008(0x0008)
    int64_t                                       ObjectID;                                                     // 0x0010(0x0008)
};


// UserDefinedStruct  S.S
// Struct Size::0x0010
struct FS
{
    UTexture2D*                                   Texture;                                                      // 0x0000(0x0008)
    double                                        Scale;                                                        // 0x0008(0x0008)
};


// UserDefinedStruct  S.S
// Struct Size::0x0050
struct FS
{
    TMap<enum class ETgfEquipQuality,UTexture2D*> MapQualityTexture;                                            // 0x0000(0x0050)
};


// UserDefinedStruct  S.S
// Struct Size::0x0068
struct FS
{
    FPlayerNameData                               PlayerName;                                                   // 0x0000(0x0030)
    int32_t                                       Kill;                                                         // 0x0030(0x0004)
    int32_t                                       Death;                                                        // 0x0034(0x0004)
    double                                        Attack;                                                       // 0x0038(0x0008)
    double                                        Defence;                                                      // 0x0040(0x0008)
    double                                        Borne;                                                        // 0x0048(0x0008)
    int32_t                                       TeamId;                                                       // 0x0050(0x0004)
    enum class ETgfActorCareer                    Career;                                                       // 0x0054(0x0001)
    char                                          pa_0055[0x0003]                                               // 0x0055(0x0003)
    FString                                       OpenId;                                                       // 0x0058(0x0010)
};


// UserDefinedStruct  ProjectileInitData.ProjectileInitData
// Struct Size::0x0028
struct FProjectileInitData
{
    FVector                                       SpawnOffset;                                                  // 0x0000(0x0018)
    double                                        SpawnDelay;                                                   // 0x0018(0x0008)
    double                                        InitRotation;                                                 // 0x0020(0x0008)
};


